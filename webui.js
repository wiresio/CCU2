CHANNELCHOOSER_JST = "{macro printHead(name, id, transKey)}\n  {if id != sortId}\n    <th class=\"ChannelChooserHead clickable\" name=${transKey} onclick=\"ChannelChooser.sortBy(\'${id}\');\">${name}<\/th>\n  {else}\n    <th class=\"ChannelChooserHead_Active clickable\" name=${transKey} onclick=\"ChannelChooser.sortBy(\'${id}\');\">\n      ${name}&#160;\n      {if sortDescend}\n        <img src=\"\/ise\/img\/arrow_down.gif\" \/>\n      {else}\n        <img src=\"\/ise\/img\/arrow_up.gif\" \/>\n      {\/if}\n    <\/th>\n  {\/if}\n{\/macro}\n<div id=\"ChannelChooserDialog\">\n<div id=\"ChannelChooserTitle\" name=\"dialogChooseChannel\" onmousedown=\"new Drag($(\'ChannelChooserDialog\'), event);\">Kanalauswahl<\/div>\n<div id=\"ChannelChooserContent\">\n  <table id=\"ChannelChooserTable\" width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n    <colgroup>\n      <col width=\"20%\" \/>\n      <col width=\"55px\" \/>\n      <col width=\"30%\" \/>\n      <col width=\"12%\" \/>\n      <col width=\"17%\" \/>\n      <col width=\"17%\" \/>\n    <\/colgroup>\n    <thead>\n      <tr> <!-- Überschriften -->\n        ${printHead(\"Name\", \"NAME\", \"thName\")}\n        <th class=\"ChannelChooserHead\" name=\"thPicture\">Bild<\/th>\n        ${printHead(\"Beschreibung\", \"DESCRIPTION\", \"thDescription\")}\n        ${printHead(\"Seriennummer\", \"ADDRESS\", \"thSerialNumber\")}\n        ${printHead(\"Gewerke\", \"FUNC_NAMES\", \"thFuncs\")}\n        ${printHead(\"R&auml;ume\", \"ROOM_NAMES\", \"thRooms\")}\n      <\/tr>\n      <tr> <!-- Filter -->\n        ${nameFilter.getHTML()}\n        <th class=\"Filter\">&nbsp;<\/th>\n        ${descriptionFilter.getHTML()}\n        ${addressFilter.getHTML()}\n        ${funcFilter.getHTML()}\n        ${roomFilter.getHTML()}\n      <\/tr>      \n    <\/thead>\n    <tbody>\n      {for channel in channels}\n        <tr class=\"ChannelChooserRow\" id=\"${PREFIX}${channel.id}\" onclick=\"ChannelChooser.select(this.id);\" onmouseover=\"this.className=\'ChannelChooserRow_Highlight\';\" onmouseout=\"this.className=\'ChannelChooserRow\';\">\n          <td class=\"ChannelChooserCell\">${channel.name}<br\/><br\/><span class=\"j_extChnDescr\">${channel.typeDescription}_${channel.address}<\/span><\/td>\n          <td class=\"ChannelChooserThumbnail\"><div class=\"thumbnail\" onmouseover=\"picDivShow(jg_250, \'${channel.deviceType.id}\', 250, \'${channel.index}\', this);\" onmouseout=\"picDivHide(jg_250);\">${channel.thumbnailHTML}<\/div><\/td>\n          <td class=\"ChannelChooserCell\">${channel.typeDescription}<br\/>${channel.device.name}<\/td>\n          <td class=\"ChannelChooserCell\">${channel.address}<\/td>\n          <td class=\"ChannelChooserCell j_functions\">\n            {for subsection in channel.subsections}\n              ${subsection.name}<br \/>\n            {forelse}\n              &#160;\n            {\/for}\n          <\/td>\n          <td class=\"ChannelChooserCell j_rooms\">\n            {for room in channel.rooms}\n              ${room.name}<br \/>\n            {forelse}\n              &#160;\n            {\/for}\n          <\/td>\n        <\/tr>\n       {forelse}\n        <tr class=\"ChannelChooserRow\">\n          <td colspan=\"10\" class=\"ChannelChooserCell\" name=\"\"lblNoChannelsAvailable>Keine Kan&auml;le verf&uuml;gbar<\/td>\n        <\/tr>\n      {\/for}\n    <\/tbody>\n  <\/table>\n<\/div>\n<div id=\"ChannelChooserFooter\">\n  <div class=\"ChannelChooserButton colorGradient50px\" id=\"ChannelChooserAbortButton\" name=\"footerBtnCancel\" onclick=\"ChannelChooser.abort();\">Abbrechen<\/div>\n  <div class=\"ChannelChooserButton colorGradient50px\" id=\"ChannelChooserResetFiltersButton\" name=\"footerBtnResetFilterWOLineBreak\" onclick=\"ChannelChooser.resetFilters();\">Filter zur&uuml;cksetzen<\/div>\n  {if false === showVirtual}\n    <div class=\"ChannelChooserButton colorGradient50px\" id=\"ChannelChooserVirtualButton\" name=\"footerBtnVirtualChannelsShow\" onclick=\"ChannelChooser.toggleVirtualChannels();\">virtuelle Kan&auml;le anzeigen<\/div>\n  {else}\n    <div class=\"ChannelChooserButton colorGradient50px\" id=\"ChannelChooserVirtualButton\" name=\"footerBtnVirtualChannelsHide\" onclick=\"ChannelChooser.toggleVirtualChannels();\">virtuelle Kan&auml;le ausblenden<\/div>\n  {\/if}\n<\/div>\n<\/div>";
CHANNEL_CONFIG_DIALOG_JST = "<div id=\"ChannelConfigDialog\">\n<div id=\"ChannelConfigDialogTitle\" onmousedown=\"new Drag($(\'ChannelConfigDialog\'), event);\"><span name=\"generalChannelConfigTitle\">Allgemeine Kanaleinstellungen:<\/span> ${channel.address}<\/div>\n<div id=\"ChannelConfigDialogContent\">\n\n  <div id=\"ChannelConfigDialogContentLeft\">\n    <div  class=\"ChannelConfigDialogSection\">\n      <div class=\"CLASS11000\">\n        <div class=\"CLASS11001\">${channel.imageHTML}<\/div>\n      <\/div>\n      <div class=\"CLASS11002\">${channel.typeName}<\/div>\n    <\/div>\n    \n    {if channel.supportsComTest()}\n    <div id=\"channelFunctionTestPanel\" class=\"ChannelConfigDialogSection\">\n      <div class=\"CLASS11003\" name=\"generalDeviceChannelConfigLblFuncTest\">Funktionstest<\/div>\n      <hr \/>\n      <div>\n        <table border=\"0\"  class=\"ChannelConfigDialogTable\" width=\"250px\">\n          <tr>\n            <td width=\"50%\"><div id=\"ChannelConfigDialogTestButton\" class=\"StdButton\" name=\"generalDeviceChannelConfigBtnFuncTest\" onclick=\"ChannelConfigDialog.startTest();\">Test starten<\/div><\/td>\n            <td width=\"50%\"><div id=\"ChannelConfigDialogTestResult\">--:--:--<\/div><\/td>\n          <\/tr>\n        <\/table>\n        <div class=\"CLASS11004\">\n          <p name=\"generalChannelConfigHint\">\n            Im Rahmen des Funktionstests wird gepr&uuml;ft, ob die Kommunikation mit dem Kanal fehlerfrei funktioniert.\n          <\/p>\n          {if channel.category == Channel.CATEGORY.SENDER}<p name=\"generalChannelConfigHintSender\">Bei Sensoren wartet die HomeMatic Zentrale, bis diese sich melden. Eine Fernbedienung meldet sich z.B. erst dann, wenn sie manuell betätigt wird.<\/p>{\/if}\n          {if channel.category == Channel.CATEGORY.RECEIVER}<p name=\"generalChannelConfigHintReceiver\">Bei Aktoren wird dazu in der Regel ein Schaltbefehl ausgelöst.<\/p>{\/if}\n          <\/div>\n      <\/div>\n    <\/div>\n    {\/if}\n  <\/div>\n\n  <div id=\"ChannelConfigDialogContentMain\">\n    <div class=\"ChannelConfigDialogSection\">\n      <table border=\"0\" cellspacing=\"0\" cellpadding=\"2px\"  class=\"ChannelConfigDialogTable\">\n        <tr><td name=\"generalDeviceChannelConfigLblName\">Name:<\/td><td><input id=\"ChannelConfigDialog_ChannelName\" class=\"CLASS11005\" type=\"text\" value=\"${channel.name}\"\/><\/td><\/tr>\n        <tr><td name=\"generalDeviceChannelConfigLblTypeDescription\">Typenbezeichnung:<\/td><td><input class=\"CLASS11005\" disabled=\"disabled\" readonly=\"readonly\" type=\"text\" value=\"${channel.typeName}\"\/><\/td><\/tr>\n        <tr><td name=\"generalDeviceChannelConfigLblSerialNumber\">Seriennummer:<\/td><td><input class=\"CLASS11005\" disabled=\"disabled\" readonly=\"readonly\" type=\"text\" value=\"${channel.address}\"\/><\/td><\/tr>\n        <tr><td name=\"generalDeviceChannelConfigLblCategory\">Kategorie:<\/td><td><input class=\"CLASS11005\" disabled=\"disabled\" readonly=\"readonly\" type=\"text\" \n            {if channel.category == Channel.CATEGORY.SENDER} value=\"Sender (Sensor)\" id=\"generalChannelConfigLblSender\" {\/if}\n            {if channel.category == Channel.CATEGORY.RECEIVER} value=\"Empf&auml;nger (Aktor)\" id=\"generalChannelConfigLblReceiver\" {\/if}\n            {if channel.category == Channel.CATEGORY.NONE} value=\"nicht verkn&uuml;pfbar\" id=\"generalChannelConfigLblNone\"{\/if}\n            \/>\n        <\/td><\/tr>\n        <tr><td name=\"generalDeviceChannelConfigLblTransmitMode\">&Uuml;bertragungsmodus:<\/td>\n          <td>\n            <select id=\"ChannelConfigDialog_Mode\" class=\"CLASS11005\" {if !channel.isAesAvailable} disabled=\"disabled\" readonly=\"readonly\" {\/if}>\n              <option value=\"Standard\" name=\"lblStandard\" {if channel.mode == translateKey(Channel.MODE.DEFAULT)} selected=\"selected\" {\/if} >Standard<\/option>\n              <option value=\"Gesichert\" name=\"lblSecured\" {if channel.mode == translateKey(Channel.MODE.AES)} selected=\"selected\" {\/if} >Gesichert<\/option>\n            <\/select>\n          <\/td>\n        <\/tr>\n        <tr><td name=\"generalDeviceChannelConfigLblUsable\">Bedienbar:<\/td><td><input id=\"ChannelConfigDialog_isUsable\" type=\"checkbox\" {if channel.isUsable} checked=\"checked\" {\/if} {if !channel.isWritable} disabled=\"disabled\" readonly=\"readonly\" {\/if}\/><\/td><\/tr>\n        <tr><td name=\"generalDeviceChannelConfigLblVisible\">Sichtbar:<\/td><td><input id=\"ChannelConfigDialog_isVisible\" type=\"checkbox\" {if channel.isVisible} checked=\"checked\" {\/if}\/><\/td><\/tr>\n        <tr><td name=\"generalDeviceChannelConfigLblLogged\">Protokolliert:<\/td><td><input id=\"ChannelConfigDialog_isLogged\" type=\"checkbox\" {if channel.isLogged} checked=\"checked\" {\/if} {if !channel.isLogable} disabled=\"disabled\" readonly=\"readonly\" {\/if}\/><\/td><\/tr>\n      <\/table>\n    <\/div>\n    \n    <div  class=\"ChannelConfigDialogSection\">\n      <img src=\"{if !isRoomListVisible}\/ise\/img\/plus.png{else}\/ise\/img\/minus.png{\/if}\" class=\"CLASS11006\" width=\"16px\" height=\"16px\" onclick=\"ChannelConfigDialog.toggleRooms(this);\">\n      <div class=\"CLASS11007\" name=\"generalChannelConfigLblRooms\">R&auml;ume<\/div>\n      <hr \/>\n      <form id=\"ChannelConfigDialogRooms\" {if !isRoomListVisible} style=\"display:none\" {\/if} >\n        <table class=\"ChannelConfigDialogTable\">\n          {for room in rooms}\n          <tr>\n            <td><input type=\"checkbox\" name=\"values\" value=\"${room.id}\" {if room.contains(channel.id)} checked=\"checked\" {\/if}\/><\/td><td>${room.name}<\/td>\n          <\/tr>\n          {\/for}\n        <\/table>\n      <\/form>\n    <\/div>\n    \n    <div class=\"ChannelConfigDialogSection\">\n      <img src=\"{if !isSubsectionListVisible}\/ise\/img\/plus.png{else}\/ise\/img\/minus.png{\/if}\" class=\"CLASS11006\" width=\"16px\" height=\"16px\" onclick=\"ChannelConfigDialog.toggleFuncs(this);\">\n      <div class=\"CLASS11007\" name=\"generalChannelConfigLblFunctions\">Gewerke<\/div>\n      <hr \/>\n      <form id=\"ChannelConfigDialogFuncs\" {if !isSubsectionListVisible} style=\"display:none\" {\/if}>\n        <table class=\"ChannelConfigDialogTable\">\n          {for func in funcs}\n          <tr>\n            <td><input type=\"checkbox\" name=\"values\" value=\"${func.id}\" {if func.contains(channel.id)} checked=\"checked\" {\/if}\/><\/td><td>${func.name}<\/td>\n          <\/tr>\n          {\/for}\n        <\/table>\n      <\/form>\n    <\/div>\n    \n  <\/div>\n<\/div>\n<div id=\"ChannelConfigDialogFooter\">\n  <div class=\"ChannelConfigDialogButton FooterButton\" name=\"btnOk\" id=\"ChannelConfigDialogOkButton\" onclick=\"ChannelConfigDialog.ok();\">OK<\/div>\n  <div class=\"ChannelConfigDialogButton FooterButton\" name=\"btnCancel\" id=\"ChannelConfigDialogAbortButton\" onclick=\"ChannelConfigDialog.abort();\">Abbrechen<\/div>\n<\/div>\n<\/div>\n";
DEVICE_CONFIG_DIALOG_JST = "<div id=\"DeviceConfigDialog\">\n<div id=\"DeviceConfigDialogTitle\" onmousedown=\"new Drag($(\'DeviceConfigDialog\'), event);\"><span name=\"generalDeviceConfigTitle\">Allgemeine Geräteeinstellungen:<\/span> ${device.address}<\/div>\n<div id=\"DeviceConfigDialogContent\">\n\n  <div id=\"DeviceConfigDialogContentLeft\">\n    <div  class=\"DeviceConfigDialogSection\">\n      <div class=\"CLASS10800\">\n        <div class=\"CLASS10801\">${device.imageHTML}<\/div>\n      <\/div>\n      <div class=\"CLASS10802\">${device.typeName}<\/div>\n    <\/div>\n  <\/div>\n\n  <div id=\"DeviceConfigDialogContentMain\">\n    <div class=\"DeviceConfigDialogSection\">\n      <table border=\"0\" cellspacing=\"0\" cellpadding=\"2px\"  class=\"DeviceConfigDialogTable\">\n        <tr><td name=\"generalDeviceChannelConfigLblName\">Name:<\/td><td><input id=\"DeviceConfigDialog_DeviceName\" class=\"CLASS10803\" type=\"text\" value=\"${device.name}\"\/><\/td><\/tr>\n        <tr><td name=\"generalDeviceChannelConfigLblTypeDescription\">Typenbezeichnung:<\/td><td><input class=\"CLASS10803\" disabled=\"disabled\" readonly=\"readonly\" type=\"text\" value=\"${device.typeName}\"\/><\/td><\/tr>\n        <tr><td name=\"generalDeviceChannelConfigLblSerialNumber\">Seriennummer:<\/td><td><input class=\"CLASS10803\" disabled=\"disabled\" readonly=\"readonly\" type=\"text\" value=\"${device.address}\"\/><\/td><\/tr>\n        <tr><td name=\"generalDeviceChannelConfigLblUsable\">Bedienbar:<\/td><td><input id=\"DeviceConfigDialog_isUsable\" type=\"checkbox\" onclick=\"DeviceConfigDialog.isUsabilityChanged=true;\" {if device.isUsable} checked=\"checked\" {\/if} {if !device.isWritable} disabled=\"disabled\" readonly=\"readonly\" {\/if}\/><\/td><\/tr>\n        <tr><td name=\"generalDeviceChannelConfigLblVisible\">Sichtbar:<\/td><td><input id=\"DeviceConfigDialog_isVisible\" type=\"checkbox\" onclick=\"DeviceConfigDialog.isVisibilityChanged=true;\" {if device.isVisible} checked=\"checked\" {\/if}\/><\/td><\/tr>\n        <tr><td name=\"generalDeviceChannelConfigLblLogged\">Protokolliert:<\/td><td><input id=\"DeviceConfigDialog_isLogged\" type=\"checkbox\" onclick=\"DeviceConfigDialog.isLoggingChanged=true;\" {if device.isLogged} checked=\"checked\" {\/if} {if !device.isLogable} disabled=\"disabled\" readonly=\"readonly\" {\/if}\/><\/td><\/tr>\n      <\/table>\n    <\/div>\n    \n    <div id=\"deviceFunctionTestPanel\" class=\"DeviceConfigDialogSection\">\n      <div class=\"CLASS10804\" name=\"generalDeviceChannelConfigLblFuncTest\">Funktionstest<\/div>\n      <hr \/>\n      <div>\n        <table border=\"0\"  class=\"DeviceConfigDialogTable\" width=\"250px\">\n          <tr>\n            <td width=\"50%\"><div id=\"DeviceConfigDialogTestButton\" class=\"StdButton\" name=\"generalDeviceChannelConfigBtnFuncTest\" onclick=\"DeviceConfigDialog.startTest();\">Test starten<\/div><\/td>\n            <td width=\"50%\"><div id=\"DeviceConfigDialogTestResult\">--:--:--<\/div><\/td>\n          <\/tr>\n        <\/table>\n        <div class=\"CLASS10805\" name=\"generalDeviceConfigHint\">\n          Im Rahmen des Funktionstests wird geprüft, ob die Kommunikation mit dem Gerät fehlerfrei funktioniert. Der Test gilt als bestanden, sobald die erste Rückmeldung von dem Gerät empfangen wurde. <br \/> Dazu werden an alle Aktoren des Geräts Schaltbefehle gesendet, die deren Zustand ändern. Sensoren, wie z.B. Fernbedienungen, melden sich im Allgemeinen erst dann, wenn sie durch ein entsprechendes Ereignis ausgelöst wurden.\n        <\/div>\n      <\/div>\n    <\/div>\n\n  <\/div>\n<\/div>\n<div id=\"DeviceConfigDialogFooter\">\n  <div class=\"DeviceConfigDialogButton FooterButton\" name=\"btnOk\" id=\"DeviceConfigDialogOkButton\" onclick=\"DeviceConfigDialog.ok();\">Ok<\/div>\n  <div class=\"DeviceConfigDialogButton FooterButton\" name=\"btnCancel\" id=\"DeviceConfigDialogAbortButton\" onclick=\"DeviceConfigDialog.abort();\">Abbrechen<\/div>\n<\/div>\n<\/div>\n";
DEVICELIST_FLAT_JST = "{macro printHead(name, id)}\n  {if id != sortId}\n    <th class=\"DeviceListHead clickable\" name=\"${name}\" onclick=\"DeviceListPage.sortBy(\'${id}\');\">${name}<\/th>\n  {else}\n    <th class=\"DeviceListHead_Active clickable\" name=\"${name}\" onclick=\"DeviceListPage.sortBy(\'${id}\');\">\n      ${name}&#160;\n      {if sortDescend}\n        <img src=\"\/ise\/img\/arrow_down.gif\" \/>\n      {else}\n        <img src=\"\/ise\/img\/arrow_up.gif\" \/>\n      {\/if}\n    <\/th>\n  {\/if}\n{\/macro}\n<table id=\"DeviceListTable\" width=\"97%\"  border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n  <colgroup>\n    <col width=\"11%\"\/>\n    <col width=\"11%\"\/>\n    <col width=\"55px\"\/>\n    <col width=\"11%\"\/>\n    <col width=\"11%\"\/>\n    <col width=\"11%\"\/>\n    <col width=\"11%\"\/>\n    <col width=\"11%\"\/>\n    <col width=\"11%\"\/>\n    <col width=\"25px\"\/>\n    <col width=\"25px\"\/>\n    <col width=\"25px\"\/>\n    <col width=\"11%\"\/>\n  <\/colgroup>\n  <thead>\n    <tr>\n      ${printHead(\"thName\", \"NAME\")}\n      ${printHead(\"thTypeDescriptor\", \"TYPE_NAME\")}\n      <th class=\"DeviceListHead\" name=\"thPicture\">Bild<\/th>\n      ${printHead(\"thDescriptor\", \"DESCRIPTION\")}\n      ${printHead(\"thSerialNumber\", \"ADDRESS\")}\n      ${printHead(\"thInterfaceCategory\", \"CATEGORY\")}\n      ${printHead(\"thTransmitMode\", \"MODE\")}\n      ${printHead(\"thFuncs\", \"FUNC_NAMES\")}\n      ${printHead(\"thRooms\", \"ROOM_NAMES\")}\n      <th class=\"DeviceListHead\"><img name=\"lblVisible\" src=\"\/ise\/img\/visible.png\" width=\"24px\" height=\"24px\" alt=\"sichtbar\" title=\"sichtbar\"\/><\/th>\n      <th class=\"DeviceListHead\"><img name=\"lblUsable\" src=\"\/ise\/img\/usable.png\" width=\"24px\" height=\"24px\" alt=\"bedienbar\" title=\"bedienbar\"\/><\/th>\n      <th class=\"DeviceListHead\"><img name=\"lblRecorded\" src=\"\/ise\/img\/logged.png\" width=\"24px\" height=\"24px\" alt=\"protokolliert\" title=\"protokolliert\"\/><\/th>\n      <th class=\"DeviceListHead\" name=\"thActions\">Flat Aktionen<\/th>\n    <\/tr>\n    <tr>\n      ${nameFilter.getHTML()}\n      ${typeNameFilter.getHTML()}\n      <th class=\"Filter CLASS10700\" >&nbsp;<\/th>\n      ${descriptionFilter.getHTML()}\n      ${addressFilter.getHTML()}\n      ${categoryFilter.getHTML()}\n      ${modeFilter.getHTML()}\n      ${funcFilter.getHTML()}\n      ${roomFilter.getHTML()}\n      <th class=\"Filter CLASS10700\" >&nbsp;<\/th>\n      <th class=\"Filter CLASS10700\" >&nbsp;<\/th>\n      <th class=\"Filter CLASS10700\" >&nbsp;<\/th>\n      <th class=\"Filter CLASS10700\" >&nbsp;<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    {for channel in channels}\n      <tr class=\"DeviceListRow\" id=\"${PREFIX}${channel.Id}\"  onclick=\"DeviceListPage.selectChannel(\'${channel.id}\');\" onmouseover=\"this.className = \'DeviceListRow_Highlight\';\" onmouseout=\"this.className = \'DeviceListRow\';\">\n        <td class=\"DeviceListCell\">${channel.name}<\/td>\n        <td class=\"DeviceListCell\">${channel.typeName}<\/td>\n        <td class=\"DeviceListThumbnail\"><div class=\"thumbnail\" onmouseover=\"picDivShow(jg_250, \'${channel.device.deviceType.id}\', 250, \'${channel.index}\', this);\" onmouseout=\"picDivHide(jg_250);\">${channel.thumbnailHTML}<\/div><\/td>\n        <td class=\"DeviceListCell\" name=\"${channel.typeDescription}\" >${channel.typeDescription}<\/td>\n        <td class=\"DeviceListCell\">${channel.address}<\/td>\n        <td class=\"DeviceListCell\">${channel.category}<\/td>\n        <td class=\"DeviceListCell j_chMode\">${channel.mode}<\/td>\n        <td class=\"DeviceListCell j_function\">\n          {for subsection in channel.subsections}\n            ${subsection.name}<br \/>\n          {forelse}\n            &#160;\n          {\/for}\n        <\/td>\n        <td class=\"DeviceListCell j_rooms\">\n          {for room in channel.rooms}\n            ${room.name}<br \/>\n          {forelse}\n            &#160;\n          {\/for}\n        <\/td>\n        <td class=\"DeviceListCell\"><input type=\"checkbox\" disabled=\"disabled\" readonly=\"readyonly\" {if channel.isVisible}checked=\"checked\"{\/if} \/><\/td>\n        <td class=\"DeviceListCell\"><input type=\"checkbox\" disabled=\"disabled\" readonly=\"readyonly\" {if channel.isUsable}checked=\"checked\"{\/if} \/><\/td>\n        <td class=\"DeviceListCell\"><input type=\"checkbox\" disabled=\"disabled\" readonly=\"readyonly\" {if channel.isLogged}checked=\"checked\"{\/if} \/><\/td>\n        <td class=\"DeviceListCell\">\n          <div class=\"DeviceListButton\" name=\"btnConfigure\" onclick=\"DeviceListPage.showConfiguration(event, \'CHANNEL\', \'${channel.id}\');\">Einstellen<\/div>\n          <div class=\"DeviceListButton\" name=\"btnDirectLinks\" onclick=\"DeviceListPage.showDirectLinks(event, \'CHANNEL\', \'${channel.id}\');\">Direkte<\/div>\n          <div class=\"DeviceListButton\" name=\"btnPrograms\" onclick=\"DeviceListPage.showPrograms(event, \'CHANNEL\', \'${channel.id}\');\">Programme<\/div>\n        <\/td>\n      <\/tr>\n    {forelse}\n      <tr class=\"DeviceListRow\">\n        <td class=\"DeviceListCell\" name=\"noChannelsAvailable\" colspan=\"13\">Keine Kan&auml;le verf&uuml;gbar<\/td>\n      <\/tr>\n    {\/for}\n  <\/tbody>\n<\/table>\n\n";
DEVICELIST_TREE_JST = "<table id=\"DeviceListTable\" width=\"97%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n  <colgroup>\n    <col width=\"25px\" \/>\n    <col width=\"25px\" \/>\n    <col width=\"25px\" \/>\n    <col width=\"11%\" \/>\n    <col width=\"11%\" \/>\n    <col width=\"55px\" \/>\n    <col width=\"11%\" \/>\n    <col width=\"11%\" \/>\n    <col width=\"11%\" \/>\n    <col width=\"11%\" \/>\n    <col width=\"11%\" \/>\n    <col width=\"11%\" \/>\n    <col width=\"25px\" \/>\n    <col width=\"25px\" \/>\n    <col width=\"25px\" \/>\n    <col width=\"11%\" \/>\n  <\/colgroup>\n  <thead>\n    <tr>\n      <!-- Alle Elemente mit Name-Attribut werden übersetzt. Der Wert des Name-Attributs ist der Key f. die Übersetzungsdatei -->\n      <th class=\"DeviceListCell_Invisible\"><div class=\"CLASS10900\">&nbsp;<\/div><\/th>\n      <th class=\"DeviceListHead clickable\" name=\"thName\" colspan=\"3\" onclick=\"DeviceListPage.sortBy(\'NAME\');\">Name<\/th>\n      <th class=\"DeviceListHead clickable\" name=\"thTypeDescriptor\" onclick=\"DeviceListPage.sortBy(\'NAME\');\">Typen- Bezeichnung<\/th>\n      <th class=\"DeviceListHead\" name=\"thPicture\">Bild<\/th>\n      <th class=\"DeviceListHead clickable\" name=\"thDescriptor\" onclick=\"DeviceListPage.sortBy(\'NAME\');\">Bezeichnung<\/th>\n      <th class=\"DeviceListHead clickable\" name=\"thSerialNumber\" onclick=\"DeviceListPage.sortBy(\'NAME\');\">Serien- Nummer<\/th>\n      <th class=\"DeviceListHead clickable\" name=\"thInterfaceCategory\" onclick=\"DeviceListPage.sortBy(\'NAME\');\">Interface \/ Kategorie<\/th>\n      <th class=\"DeviceListHead clickable\" name=\"thTransmitMode\" onclick=\"DeviceListPage.sortBy(\'NAME\');\">&Uuml;bertragungsmodus<\/th>\n      <th class=\"DeviceListHead clickable\" name=\"thFuncs\" onclick=\"DeviceListPage.sortBy(\'NAME\');\">Gewerke<\/th>\n      <th class=\"DeviceListHead clickable\" name=\"thRooms\" onclick=\"DeviceListPage.sortBy(\'NAME\');\">R&auml;ume<\/th>\n      <th class=\"DeviceListHead\"><img name=\"lblVisible\" src=\"\/ise\/img\/visible.png\" width=\"24px\" height=\"24px\" alt=\"sichtbar\" title=\"sichtbar\"\/><\/th>\n      <th class=\"DeviceListHead\"><img name=\"lblUsable\" src=\"\/ise\/img\/usable.png\" width=\"24px\" height=\"24px\" alt=\"bedienbar\" title=\"bedienbar\"\/><\/th>\n      <th class=\"DeviceListHead\"><img name=\"lblRecorded\" src=\"\/ise\/img\/logged.png\" width=\"24px\" height=\"24px\" alt=\"protokolliert\" title=\"protokolliert\"\/><\/th>\n      <th class=\"DeviceListHead\" name=\"thActions\" >Aktionen<\/th>\n    <\/tr>\n    <tr>\n      <th class=\"DeviceListCell_Invisible CLASS10901\" ><div class=\"CLASS10900\">&nbsp;<\/div><\/th>\n      ${nameFilter.getHTML(3)}\n      ${typeNameFilter.getHTML()}\n      <th class=\"Filter CLASS10901\" >&nbsp;<\/th>\n      ${descriptionFilter.getHTML()}\n      ${addressFilter.getHTML()}\n      ${interfaceFilter.getHTML()}\n      ${modeFilter.getHTML()}\n      ${funcFilter.getHTML()}\n      ${roomFilter.getHTML()}\n      <th class=\"Filter CLASS10901\">&nbsp;<\/th>\n      <th class=\"Filter CLASS10901\">&nbsp;<\/th>\n      <th class=\"Filter CLASS10901\">&nbsp;<\/th>\n      <th class=\"Filter CLASS10901\">&nbsp;<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    {for device in devices}\n      <tr id=\"${PREFIX}${device.id}\" class=\"DeviceListRow\" onclick=\"DeviceListPage.selectDevice(\'${device.id}\');\" onmouseover=\"this.className=\'DeviceListRow_Highlight\';\" onmouseout=\"this.className=\'DeviceListRow\';\">\n        <td class=\"DeviceListCell_Invisible\" onclick=\"if (event) { Event.stop(event); } else { Event.stop(window.event); }\">\n          <img id=\"${PREFIX}${device.id}PLUS\" onclick=\"DeviceListPage.expandDevice(event, \'${device.id}\');\" src=\"\/ise\/img\/plus.png\" width=\"16px\" height=\"16px\" alt=\"Kan&auml;le anzeigen\" title=\"Kan&auml;le anzeigen\" {if device._expanded} style=\"display:none;\"{\/if}\/>\n          <img id=\"${PREFIX}${device.id}MINUS\" onclick=\"DeviceListPage.collapseDevice(event, \'${device.id}\');\" src=\"\/ise\/img\/minus.png\" width=\"16px\" height=\"16px\" alt=\"Kan&auml;le verbergen\" title=\"Kan&auml;le verbergen\" {if !device._expanded} style=\"display:none;\"{\/if}\/>\n        <\/td>\n        <td class=\"DeviceListCell\" colspan=\"3\">${device.name}<\/td>\n        <td class=\"DeviceListCell\" >${device.typeName}<\/td>\n        <td class=\"DeviceListThumbnail\" ><div id=\"${PREFIX}${device.id}Thumbnail\" class=\"thumbnail\" onmouseover=\"picDivShow(jg_250, \'${device.deviceType.id}\', 250, \'\', this);\" onmouseout=\"picDivHide(jg_250);\">${device.getThumbnailHTML()}<\/div><\/td>\n        <td class=\"DeviceListCell\" name=\"${device.typeDescription}\" >${device.typeDescription}<\/td>\n        <td class=\"DeviceListCell\" >${device.address}<\/td>\n        <td class=\"DeviceListCell\" >${device.interfaceName}<\/td>\n        <td class=\"DeviceListCell j_chMode\" >{for name in device.modes}${name}<br \/>{forelse}&#160;{\/for}<\/td>\n        <td class=\"DeviceListCell j_functions\" >{for subsection in device.subsections}${subsection.name}<br \/>{forelse}&#160;{\/for}<\/td>\n        <td class=\"DeviceListCell j_rooms\" >{for room in device.rooms}${room.name}<br \/>{forelse}&#160;{\/for}<\/td>\n        <td class=\"DeviceListCell\"><input type=\"checkbox\" disabled=\"disabled\" readonly=\"readyonly\" {if device.isVisible}checked=\"checked\"{\/if}\/><\/td>\n        <td class=\"DeviceListCell\"><input type=\"checkbox\" disabled=\"disabled\" readonly=\"readyonly\" {if device.isUsable}checked=\"checked\"{\/if}\/><\/td>\n        <td class=\"DeviceListCell\"><input type=\"checkbox\" disabled=\"disabled\" readonly=\"readyonly\" {if device.isLogged}checked=\"checked\"{\/if}\/><\/td>\n        <td class=\"DeviceListCell\" >\n          <div class=\"DeviceListButton\" name=\"btnConfigure\" onclick=\"DeviceListPage.showConfiguration(event, \'DEVICE\', \'${device.id}\');\">Einstellen<\/div>\n          {if device.isDeletable}\n            <div class=\"DeviceListButton\" name=\"btnRemove\" onclick=\"DeviceListPage.deleteDevice(event, \'${device.id}\');\">L&ouml;schen<\/div>\n          {else}\n            <div class=\"DeviceListButton CLASS10902\" name=\"btnRemove\" onclick=\"if (event) { Event.stop(event); } else { Event.stop(window.event); }\" >L&ouml;schen<\/div>\n          {\/if}\n          <div class=\"DeviceListButton\" name=\"btnDirectLinks\" onclick=\"DeviceListPage.showDirectLinks(event, \'DEVICE\', \'${device.id}\');\">Direkte<\/div>\n          <div class=\"DeviceListButton\" name=\"btnPrograms\" onclick=\"DeviceListPage.showPrograms(event, \'DEVICE\', \'${device.id}\');\">Programme<\/div>\n        <\/td>\n      <\/tr>\n      {for group in device.groups}\n        <tr id=\"${PREFIX}${group.id}\"class=\"DeviceListRow\" {if !device._expanded}style=\"display:none;\"{\/if}>\n          <td class=\"DeviceListCell_Invisible\" onclick=\"if (event) { Event.stop(event); } else { Event.stop(window.event); }\">&#160;<\/td>\n          <td class=\"DeviceListCell_Invisible\" onclick=\"if (event) { Event.stop(event); } else { Event.stop(window.event); }\">\n            <img id=\"${PREFIX}${group.id}PLUS\" onclick=\"DeviceListPage.expandGroup(event, \'${group.id}\');\" src=\"\/ise\/img\/plus.png\" width=\"16px\" height=\"16px\" alt=\"Kan&auml;le anzeigen\" title=\"Kan&auml;le anzeigen\" {if group._expanded} style=\"display:none;\"{\/if}\/>\n            <img id=\"${PREFIX}${group.id}MINUS\" onclick=\"DeviceListPage.collapseGroup(event, \'${group.id}\');\" src=\"\/ise\/img\/minus.png\" width=\"16px\" height=\"16px\" alt=\"Kan&auml;le verbergen\" title=\"Kan&auml;le verbergen\" {if !group._expanded} style=\"display:none;\"{\/if}\/>\n          <\/td>\n          <td class=\"DeviceListCell\" colspan=\"2\">${group.name}<\/td>\n          <td class=\"DeviceListCell\" >${group.typeName}<\/td>\n          <td class=\"DeviceListThumbnail\" ><div id=\"${PREFIX}${group.id}Thumbnail\" class=\"thumbnail\" onmouseover=\"picDivShow(jg_250, \'${group.device.deviceType.id}\', 250, \'${group.formName}\', this);\" onmouseout=\"picDivHide(jg_250);\">${group.thumbnailHTML}<\/div><\/td>\n          <td class=\"DeviceListCell\" name=\"${group.typeDescription}\" >${group.typeDescription}<\/td>\n          <td class=\"DeviceListCell\" >${group.address}<\/td>\n          <td class=\"DeviceListCell\" >{for name in group.categories}${name}<br \/>{forelse}&#160;{\/for}<\/td>\n          <td class=\"DeviceListCell j_chMode\" >{for name in group.modes}${name}<br \/>{forelse}&#160;{\/for}<\/td>\n          <td class=\"DeviceListCell\" >{for subsection in group.subsections}${subsection.name}<br \/>{forelse}&#160;{\/for}<\/td>\n          <td class=\"DeviceListCell\" >{for room in group.rooms}${room.name}<br \/>{forelse}&#160;{\/for}<\/td>\n          <td class=\"DeviceListCell\"><input type=\"checkbox\" disabled=\"disabled\" readonly=\"readyonly\" {if group.isVisible}checked=\"checked\"{\/if}\/><\/td>\n          <td class=\"DeviceListCell\"><input type=\"checkbox\" disabled=\"disabled\" readonly=\"readyonly\" {if group.isUsable}checked=\"checked\"{\/if}\/><\/td>\n          <td class=\"DeviceListCell\"><input type=\"checkbox\" disabled=\"disabled\" readonly=\"readyonly\" {if group.isLogged}checked=\"checked\"{\/if}\/><\/td>\n          <td class=\"DeviceListCell\" >\n            <div class=\"DeviceListButton\" name=\"btnConfigure\" onclick=\"DeviceListPage.showConfiguration(event, \'GROUP\', \'${group.id}\');\">Einstellen<\/div>\n            <div class=\"DeviceListButton\" name=\"btnDirectLinks\" onclick=\"DeviceListPage.showDirectLinks(event, \'GROUP\', \'${group.id}\');\">Direkte<\/div>\n            <div class=\"DeviceListButton\" name=\"btnPrograms\" onclick=\"DeviceListPage.showPrograms(event, \'GROUP\', \'${group.id}\');\">Programme<\/div>\n          <\/td>\n        <\/tr>\n        {for channel in group.channels}\n          <tr id=\"${PREFIX}${channel.id}\" onclick=\"DeviceListPage.selectChannel(\'${channel.id}\');\" class=\"DeviceListRow\" {if (!group._expanded) | (!device._expanded)}style=\"display:none;\"{\/if} onmouseover=\"this.className=\'DeviceListRow_Highlight\';\" onmouseout=\"this.className=\'DeviceListRow\';\">\n            <td class=\"DeviceListCell_Invisible\" colspan=\"3\" onclick=\"if (event) { Event.stop(event); } else { Event.stop(window.event); }\">&#160;<\/td>\n            <td class=\"DeviceListCell\" >${channel.name}<br\/>${channel.nameExtention}<\/td>\n            <td class=\"DeviceListCell\" >${channel.typeName}<\/td>\n            <td class=\"DeviceListThumbnail\" ><div id=\"${PREFIX}${channel.id}Thumbnail\" class=\"thumbnail\" onmouseover=\"picDivShow(jg_250, \'${channel.device.deviceType.id}\', 250, \'${channel.index}\', this);\" onmouseout=\"picDivHide(jg_250);\">${channel.thumbnailHTML}<\/div><\/td>\n            <td class=\"DeviceListCell\" name=\"${channel.typeDescription}\" >${channel.typeDescription}<\/td>\n            <td class=\"DeviceListCell\" >${channel.address}<\/td>\n            <td class=\"DeviceListCell\" >${channel.category}<\/td>\n            <td class=\"DeviceListCell j_chMode\" >${channel.mode}<\/td>\n            <td class=\"DeviceListCell\" >{for subsection in channel.subsections}${subsection.name}<br \/>{forelse}&#160;{\/for}<\/td>\n            <td class=\"DeviceListCell\" >{for room in channel.rooms}${room.name}<br \/>{forelse}&#160;{\/for}<\/td>\n            <td class=\"DeviceListCell\"><input type=\"checkbox\" disabled=\"disabled\" readonly=\"readyonly\" {if channel.isVisible}checked=\"checked\"{\/if} \/><\/td>\n            <td class=\"DeviceListCell\"><input type=\"checkbox\" disabled=\"disabled\" readonly=\"readyonly\" {if channel.isUsable}checked=\"checked\"{\/if} \/><\/td>\n            <td class=\"DeviceListCell\"><input type=\"checkbox\" disabled=\"disabled\" readonly=\"readyonly\" {if channel.isLogged}checked=\"checked\"{\/if} \/><\/td>\n            <td class=\"DeviceListCell\" >\n              <div class=\"DeviceListButton\" name=\"btnConfigure\" onclick=\"DeviceListPage.showConfiguration(event, \'CHANNEL\', \'${channel.id}\');\">Einstellen<\/div>\n              <div class=\"DeviceListButton\" name=\"btnDirectLinks\" onclick=\"DeviceListPage.showDirectLinks(event, \'CHANNEL\', \'${channel.id}\');\">Direkte<\/div>\n              <div class=\"DeviceListButton\" name=\"btnPrograms\" onclick=\"DeviceListPage.showPrograms(event, \'CHANNEL\', \'${channel.id}\');\">Programme<\/div>\n            <\/td>\n          <\/tr>        \n        {\/for}\n      {\/for}\n      {for channel in device.singles}\n        \n      {if channel._isVisible}       \n          <tr id=\"${PREFIX}${channel.id}\" onclick=\"DeviceListPage.selectChannel(\'${channel.id}\');\" class=\"DeviceListRow\" {if !device._expanded}style=\"display:none;\"{\/if} onmouseover=\"this.className=\'DeviceListRow_Highlight\';\" onmouseout=\"this.className=\'DeviceListRow\';\">\n            <td class=\"DeviceListCell_Invisible\" colspan=\"2\" onclick=\"if (event) { Event.stop(event); } else { Event.stop(window.event); }\">&#160;<\/td>\n            <td class=\"DeviceListCell\" colspan=\"2\">${channel.name}<br\/>${channel.nameExtention}<\/td>\n            <td class=\"DeviceListCell\" >${channel.typeName}<\/td>\n            <td class=\"DeviceListThumbnail\" ><div  id=\"${PREFIX}${channel.id}Thumbnail\" class=\"thumbnail\" onmouseover=\"picDivShow(jg_250, \'${channel.device.deviceType.id}\', 250, \'${channel.index}\', this);\" onmouseout=\"picDivHide(jg_250);\">${channel.thumbnailHTML}<\/div><\/td>\n            <td class=\"DeviceListCell\" name=\"${channel.typeDescription}\" >${channel.typeDescription}<\/td>\n            <td class=\"DeviceListCell\" >${channel.address}<\/td>\n            <td class=\"DeviceListCell\" >${channel.category}<\/td>\n            <td class=\"DeviceListCell j_chMode\" >${channel.mode}<\/td>\n            <td class=\"DeviceListCell\" >{for subsection in channel.subsections}${subsection.name}<br \/>{forelse}&#160;{\/for}<\/td>\n            <td class=\"DeviceListCell\" >{for room in channel.rooms}${room.name}<br \/>{forelse}&#160;{\/for}<\/td>\n            <td class=\"DeviceListCell\"><input type=\"checkbox\" disabled=\"disabled\" readonly=\"readyonly\" {if channel.isVisible}checked=\"checked\"{\/if} \/><\/td>\n            <td class=\"DeviceListCell\"><input type=\"checkbox\" disabled=\"disabled\" readonly=\"readyonly\" {if channel.isUsable}checked=\"checked\"{\/if} \/><\/td>\n            <td class=\"DeviceListCell\"><input type=\"checkbox\" disabled=\"disabled\" readonly=\"readyonly\" {if channel.isLogged}checked=\"checked\"{\/if} \/><\/td>\n            <td class=\"DeviceListCell\" >\n              <div class=\"DeviceListButton\" name=\"btnConfigure\" onclick=\"DeviceListPage.showConfiguration(event, \'CHANNEL\', \'${channel.id}\');\">Einstellen<\/div>\n              <div class=\"DeviceListButton\" name=\"btnDirectLinks\" onclick=\"DeviceListPage.showDirectLinks(event, \'CHANNEL\', \'${channel.id}\');\">Direkte<\/div>\n              <div class=\"DeviceListButton\" name=\"btnPrograms\" onclick=\"DeviceListPage.showPrograms(event, \'CHANNEL\', \'${channel.id}\');\">Programme<\/div>\n            <\/td>\n          <\/tr>        \n       {\/if} \n      \n      {\/for}\n    {forelse}\n      <tr class=\"DeviceListRow\">\n        <td class=\"DeviceListCell_Invisible\">&#160;<\/td>\n        <td class=\"DeviceListCell\" name=\"noDevicesAvailable\" colspan=\"15\">Keine Ger&auml;te verf&uuml;gbar<\/td>\n      <\/tr>\n    {\/for}\n  <\/tbody>\n  <tfoot>\n    <tr class=\"CLASS10903\">\n      <td class=\"DeviceListCell_Invisible CLASS10903\" ><div class=\"CLASS10904\" \/><\/td>\n      <td class=\"DeviceListFoot CLASS10906\" ><div class=\"CLASS10904\" \/><\/td>\n      <td class=\"DeviceListFoot CLASS10907\" ><div class=\"CLASS10904\" \/><\/td>\n      <td class=\"DeviceListFoot CLASS10908\" ><div class=\"CLASS10905\" \/><\/td>\n      <td class=\"DeviceListFoot\"><div class=\"CLASS10905\" \/><\/td>\n      <td class=\"DeviceListFoot\"><div class=\"CLASS10909\" \/><\/td>\n      <td class=\"DeviceListFoot\"><div class=\"CLASS10905\" \/><\/td>\n      <td class=\"DeviceListFoot\"><div class=\"CLASS10905\" \/><\/td>\n      <td class=\"DeviceListFoot\"><div class=\"CLASS10905\" \/><\/td>\n      <td class=\"DeviceListFoot\"><div class=\"CLASS10905\" \/><\/td>\n      <td class=\"DeviceListFoot\"><div class=\"CLASS10905\" \/><\/td>\n      <td class=\"DeviceListFoot\"><div class=\"CLASS10905\" \/><\/td>\n      <td class=\"DeviceListFoot\"><div class=\"CLASS10904\" \/><\/td>\n      <td class=\"DeviceListFoot\"><div class=\"CLASS10904\" \/><\/td>\n      <td class=\"DeviceListFoot\"><div class=\"CLASS10904\" \/><\/td>\n      <td class=\"DeviceListFoot\"><div class=\"CLASS10905\" \/><\/td>\n    <\/tr>  \n  <\/tfoot>\n<\/table>\n";
LISTFILTER_JST = "<th class=\"{if isSet}Filter_Active{else}Filter{\/if}\">\n  <div class=\"FilterCaption\" name=\"thFilter\" onclick=\"Element.show(\'${id}\');\">Filter<\/div>\n  <div class=\"FilterBodyWrapper\" id=\"${id}\" style=\"display:none\">\n    <form class=\"FilterBody\" id=\"${formId}\">\n      <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n        <tbody>\n          {for item in list}\n          <tr>\n            <td class=\"FilterBodyCell\"><input type=\"checkbox\" name=\"values\" value=\"${item.id}\" {if true === item._selected}checked=\"\"{\/if}\/><td>\n            <td class=\"FilterBodyCell j_Filter_${item.id}\">${item.name}<\/td>\n          <\/tr>\n          {\/for}\n        <\/tbody>\n      <\/table>\n      <div class=\"FilterButton\" name=\"filterSet\" onclick=\"${name}.set();\">Setzen<\/div>\n      <div class=\"FilterButton\" name=\"filterClose\" onclick=\"${name}.close();\">Schlie&szlig;en<\/div>\n    <\/form>\n  <\/div>\n<\/th>\n";
MULTI_CHANNELCHOOSER_JST = "{macro printHead(name, id, langKey)}\n  {if id != sortId}\n    <th class=\"MultiChannelChooserHead clickable\" name=${langKey} onclick=\"MultiChannelChooser.sortBy(\'${id}\');\">${name}<\/th>\n  {else}\n    <th class=\"MultiChannelChooserHead_Active clickable\" name=${langKey} onclick=\"MultiChannelChooser.sortBy(\'${id}\');\">\n      ${name}&#160;\n      {if sortDescend}\n        <img src=\"\/ise\/img\/arrow_down.gif\" \/>\n      {else}\n        <img src=\"\/ise\/img\/arrow_up.gif\" \/>\n      {\/if}\n    <\/th>\n  {\/if}\n{\/macro}\n<div id=\"MultiChannelChooserDialog\">\n<div id=\"MultiChannelChooserTitle\" onmousedown=\"new Drag($(\'MultiChannelChooserDialog\'), event);\"><span name=\"dialogChooseChannel\">Kanalauswahl<\/span>: ${title}<\/div>\n<div id=\"MultiChannelChooserContent\">\n  <table id=\"MultiChannelChooserTable\" width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n    <colgroup>\n      <col width=\"5%\" \/>\n      <col width=\"19%\" \/>\n      <col width=\"55px\" \/>\n      <col width=\"30%\" \/>\n      <col width=\"12%\" \/>\n      <col width=\"17%\" \/>\n      <col width=\"17%\" \/>\n    <\/colgroup>\n    <thead>\n      <tr> <!-- Überschriften -->\n        <th class=\"MultiChannelChooserHead\">&nbsp;<\/th>\n        ${printHead(\"Name\", \"NAME\", \"thName\")}\n        <th class=\"MultiChannelChooserHead\" name=\"thPicture\">Bild<\/th>\n        ${printHead(\"Beschreibung\", \"DESCRIPTION\", \"thDescription\")}\n        ${printHead(\"Seriennummer\", \"ADDRESS\", \"thSerialNumber\")}\n        ${printHead(\"Gewerke\", \"FUNC_NAMES\", \"thFunc\")}\n        ${printHead(\"R&auml;ume\", \"ROOM_NAMES\", \"thRooms\")}\n      <\/tr>\n      <tr> <!-- Filter -->\n        <th class=\"Filter\">&nbsp;<\/th>\n        ${nameFilter.getHTML()}\n        <th class=\"Filter\">&nbsp;<\/th>\n        ${descriptionFilter.getHTML()}\n        ${addressFilter.getHTML()}\n        ${funcFilter.getHTML()}\n        ${roomFilter.getHTML()}\n      <\/tr>      \n    <\/thead>\n    <tbody>\n      {for channel in channels}\n      <tr class=\"MultiChannelChooserRow\" id=\"${PREFIX}${channel.id}\" onmouseover=\"this.className=\'MultiChannelChooserRow_Highlight\';\" onmouseout=\"this.className=\'MultiChannelChooserRow\';\">\n        <td class=\"MultiChannelChooserCell_Active\"><input type=\"checkbox\" onclick=\"MultiChannelChooser.select(\'${channel.id}\', this);\" {if true === channel._selected}checked=\"\"{\/if}\/><\/td>\n        <td class=\"MultiChannelChooserCell\">${channel.name}<\/td>\n        <td class=\"MultiChannelChooserThumbnail\"><div class=\"thumbnail\" onmouseover=\"picDivShow(jg_250, \'${channel.deviceType.id}\', 250, \'${channel.index}\', this);\" onmouseout=\"picDivHide(jg_250);\">${channel.thumbnailHTML}<\/div><\/td>\n        <td class=\"MultiChannelChooserCell\">${channel.typeDescription}<br\/>${channel.device.name}<\/td>\n        <td class=\"MultiChannelChooserCell\">${channel.address}<\/td>\n        <td class=\"MultiChannelChooserCell\">\n          {for subsection in channel.subsections}\n            ${subsection.name}<br \/>\n          {forelse}\n            &#160;\n          {\/for}\n        <\/td>\n        <td class=\"MultiChannelChooserCell\">\n          {for room in channel.rooms}\n            ${room.name}<br \/>\n          {forelse}\n            &#160;\n          {\/for}\n        <\/td>\n      <\/tr>\n      {forelse}\n      <tr class=\"MultiChannelChooserRow\">\n        <td colspan=\"10\" class=\"MultiChannelChooserCell\" name=\"hintMultiChannelChooserNoChannelsAvailable\">Keine Kan&auml;le verf&uuml;gbar<\/td>\n      <\/tr>        \n    {\/for}\n    <\/tbody>\n  <\/table>\n<\/div>\n<div id=\"MultiChannelChooserFooter\">\n  <div class=\"MultiChannelChooserButton colorGradient50px\" id=\"MultiChannelChooserAbortButton\" name=\"footerBtnCancel\" onclick=\"MultiChannelChooser.abort();\">Abbrechen<\/div>\n  <div class=\"MultiChannelChooserButton colorGradient50px\" id=\"MultiChannelChooserOkButton\" name=\"footerBtnOk\" onclick=\"MultiChannelChooser.ok();\">OK<\/div>\n  <div class=\"MultiChannelChooserButton colorGradient50px\" id=\"MultiChannelChooserResetFiltersButton\" name=\"footerBtnResetFilterWOLineBreak\" onclick=\"MultiChannelChooser.resetFilters();\">Filter zur&uuml;cksetzen<\/div>\n  {if false === showVirtual}\n    <div class=\"MultiChannelChooserButton colorGradient50px\" id=\"MultiChannelChooserVirtualButton\" name=\"footerBtnVirtualChannelsShow\" onclick=\"MultiChannelChooser.toggleVirtualChannels();\">virtuelle Kan&auml;le anzeigen<\/div>\n  {else}\n    <div class=\"MultiChannelChooserButton colorGradient50px\" id=\"MultiChannelChooserVirtualButton\" name=\"footerBtnVirtualChannelsHide\" onclick=\"MultiChannelChooser.toggleVirtualChannels();\">virtuelle Kan&auml;le ausblenden<\/div>\n  {\/if}\n<\/div>\n<\/div>";
RF_CONFIG_JST = "<div class=\"CLASS10500\">\n<form name=\"RFConfig_Interfaces\">\n<table class=\"RFConfig_InterfacesTable\" width=\"100%\" border=\"1\" cellspacing=\"0\" cellpadding=\"5\">\n  <colgroup>\n    <col width=\"10%\" \/>\n    <col width=\"30%\" colspan=\"3\" \/>\n  <\/colgroup>\n  <tr>\n    <th>Auswahl<\/th>\n    <th>Seriennummer<\/th>\n    <th>Zugriffscode<\/th>\n    <th>IP Adresse<\/td>\n  <\/tr>\n\t{for gateway in m_gateways}\n  <tr class=\"RFConfig_InterfacesTable_tr\" onmouseover=\"this.className=\'RFConfig_InterfacesTable_tr_hover\';\" onmouseout=\"this.className=\'RFConfig_InterfacesTable_tr\';\">\n    <td><input id=\"${gateway.id}\" name=\"${gateway.id}\" type=\"checkbox\" \/><\/td>\n    <td onclick=\"RFConfigDialog.changeGateway(${m_dialogId}, \'${gateway.id}\');\">${gateway.serial}&nbsp;<\/td>\n    <td onclick=\"RFConfigDialog.changeGateway(${m_dialogId}, \'${gateway.id}\');\">${gateway.key}&nbsp;<\/td>\n    <td onclick=\"RFConfigDialog.changeGateway(${m_dialogId}, \'${gateway.id}\');\">${gateway.ip}&nbsp;<\/td>\n  <\/tr>\n\t{forelse}\n\t<tr class=\"RFConfig_InterfacesTable_tr\">\n    <td colspan=\"4\" align=\"center\" valign=\"middle\">Momentan sind keine Funk-LAN-Gateways verfügbar.<\/td>\n  <\/tr>\n\t{\/for}\n<\/table>\n<\/div>\n<\/form>";
STRINGFILTER_JST = "<th class=\"{if isSet}Filter_Active{else}Filter{\/if}\" colspan=\"${colspan}\">\n  <div class=\"FilterCaption\" name=\"thFilter\" onclick=\"${name}.show();\">Filter<\/div>\n  <div class=\"FilterBodyWrapper\" id=\"${id}\" style=\"display:none;\">\n    <div class=\"FilterBody\">\n        <input class=\"FilterText\" id=\"${textId}\" onkeypress=\"${name}.checkEnterEsc(event.keyCode);\" type=\"text\" name=\"${textId}\" value=\"${value}\" \/>\n        <div class=\"FilterButton\" name=\"filterSet\" onclick=\"${name}.set();\">Setzen<\/div>\n        <div class=\"FilterButton\" name=\"filterClose\" onclick=\"${name}.close();\">Schlie&szlig;en<\/div>\n    <\/div>\n  <\/div>\n<\/th>";
DEV_LIST        = new Array();
DEV_DESCRIPTION = new Array();
DEV_PATHS       = new Array();
DEV_HIGHLIGHT   = new Array();
DEV_LIST.push('HM-Sec-Key-O');
DEV_DESCRIPTION["HM-Sec-Key-O"] = "HM-Sec-Key-O";
DEV_PATHS["HM-Sec-Key-O"] = new Object();
DEV_PATHS["HM-Sec-Key-O"]["50"] = "/config/img/devices/50/14_hm-sec-key_thumb.png";
DEV_PATHS["HM-Sec-Key-O"]["250"] = "/config/img/devices/250/14_hm-sec-key.png";
DEV_HIGHLIGHT["HM-Sec-Key-O"] = new Object();
DEV_LIST.push('HM-LC-Dim1L-Pl');
DEV_DESCRIPTION["HM-LC-Dim1L-Pl"] = "HM-LC-Dim1L-Pl";
DEV_PATHS["HM-LC-Dim1L-Pl"] = new Object();
DEV_PATHS["HM-LC-Dim1L-Pl"]["50"] = "/config/img/devices/50/OM55_DimmerSwitch_thumb.png";
DEV_PATHS["HM-LC-Dim1L-Pl"]["250"] = "/config/img/devices/250/OM55_DimmerSwitch.png";
DEV_HIGHLIGHT["HM-LC-Dim1L-Pl"] = new Object();
DEV_HIGHLIGHT["HM-LC-Dim1L-Pl"]["1_part1"] = [2, 0.548, 0.468, 0.072, 0.052];
DEV_HIGHLIGHT["HM-LC-Dim1L-Pl"]["1_part2"] = [2, 0.612, 0.452, 0.028, 0.056];
DEV_HIGHLIGHT["HM-LC-Dim1L-Pl"]["1"] = [5, '1_part1', '1_part2'];
DEV_LIST.push('HM-RC-2-PBU-FM');
DEV_DESCRIPTION["HM-RC-2-PBU-FM"] = "HM-RC-2-PBU-FM";
DEV_PATHS["HM-RC-2-PBU-FM"] = new Object();
DEV_PATHS["HM-RC-2-PBU-FM"]["50"] = "/config/img/devices/50/PushButton-2ch-wm_thumb.png";
DEV_PATHS["HM-RC-2-PBU-FM"]["250"] = "/config/img/devices/250/PushButton-2ch-wm.png";
DEV_HIGHLIGHT["HM-RC-2-PBU-FM"] = new Object();
DEV_HIGHLIGHT["HM-RC-2-PBU-FM"]["2"] = [2, 0.244, 0.312, 0.428, 0.168];
DEV_HIGHLIGHT["HM-RC-2-PBU-FM"]["1"] = [2, 0.244, 0.56, 0.428, 0.168];
DEV_HIGHLIGHT["HM-RC-2-PBU-FM"]["1+2"] = [2, 0.244, 0.308, 0.428, 0.416];
DEV_LIST.push('HM-LC-Dim1L-Pl-3');
DEV_DESCRIPTION["HM-LC-Dim1L-Pl-3"] = "HM-LC-Dim1L-Pl-3";
DEV_PATHS["HM-LC-Dim1L-Pl-3"] = new Object();
DEV_PATHS["HM-LC-Dim1L-Pl-3"]["50"] = "/config/img/devices/50/OM55_DimmerSwitch_thumb.png";
DEV_PATHS["HM-LC-Dim1L-Pl-3"]["250"] = "/config/img/devices/250/OM55_DimmerSwitch.png";
DEV_HIGHLIGHT["HM-LC-Dim1L-Pl-3"] = new Object();
DEV_HIGHLIGHT["HM-LC-Dim1L-Pl-3"]["1_part1"] = [2, 0.548, 0.468, 0.072, 0.052];
DEV_HIGHLIGHT["HM-LC-Dim1L-Pl-3"]["1_part2"] = [2, 0.612, 0.452, 0.028, 0.056];
DEV_HIGHLIGHT["HM-LC-Dim1L-Pl-3"]["1"] = [5, '1_part1', '1_part2'];
DEV_LIST.push('HM-Sec-WDS-2');
DEV_DESCRIPTION["HM-Sec-WDS-2"] = "HM-Sec-WDS-2";
DEV_PATHS["HM-Sec-WDS-2"] = new Object();
DEV_PATHS["HM-Sec-WDS-2"]["50"] = "/config/img/devices/50/49_hm-sec-wds_thumb.png";
DEV_PATHS["HM-Sec-WDS-2"]["250"] = "/config/img/devices/250/49_hm-sec-wds.png";
DEV_HIGHLIGHT["HM-Sec-WDS-2"] = new Object();
DEV_LIST.push('ZEL STG RM FZS');
DEV_DESCRIPTION["ZEL STG RM FZS"] = "ZEL_STG_RM_FZS";
DEV_PATHS["ZEL STG RM FZS"] = new Object();
DEV_PATHS["ZEL STG RM FZS"]["50"] = "/config/img/devices/50/OM55_DimmerSwitch_thumb.png";
DEV_PATHS["ZEL STG RM FZS"]["250"] = "/config/img/devices/250/OM55_DimmerSwitch.png";
DEV_HIGHLIGHT["ZEL STG RM FZS"] = new Object();
DEV_HIGHLIGHT["ZEL STG RM FZS"]["1_part1"] = [2, 0.548, 0.468, 0.072, 0.052];
DEV_HIGHLIGHT["ZEL STG RM FZS"]["1_part2"] = [2, 0.612, 0.452, 0.028, 0.056];
DEV_HIGHLIGHT["ZEL STG RM FZS"]["1"] = [5, '1_part1', '1_part2'];
DEV_LIST.push('HM-WDS100-C6-O-2');
DEV_DESCRIPTION["HM-WDS100-C6-O-2"] = "HM-WDS100-C6-O";
DEV_PATHS["HM-WDS100-C6-O-2"] = new Object();
DEV_PATHS["HM-WDS100-C6-O-2"]["50"] = "/config/img/devices/50/WeatherCombiSensor_thumb.png";
DEV_PATHS["HM-WDS100-C6-O-2"]["250"] = "/config/img/devices/250/WeatherCombiSensor.png";
DEV_HIGHLIGHT["HM-WDS100-C6-O-2"] = new Object();
DEV_LIST.push('ZEL STG RM FZS-2');
DEV_DESCRIPTION["ZEL STG RM FZS-2"] = "ZEL_STG_RM_FZS-2";
DEV_PATHS["ZEL STG RM FZS-2"] = new Object();
DEV_PATHS["ZEL STG RM FZS-2"]["50"] = "/config/img/devices/50/OM55_DimmerSwitch_thumb.png";
DEV_PATHS["ZEL STG RM FZS-2"]["250"] = "/config/img/devices/250/OM55_DimmerSwitch.png";
DEV_HIGHLIGHT["ZEL STG RM FZS-2"] = new Object();
DEV_HIGHLIGHT["ZEL STG RM FZS-2"]["1_part1"] = [2, 0.548, 0.468, 0.072, 0.052];
DEV_HIGHLIGHT["ZEL STG RM FZS-2"]["1_part2"] = [2, 0.612, 0.452, 0.028, 0.056];
DEV_HIGHLIGHT["ZEL STG RM FZS-2"]["1"] = [5, '1_part1', '1_part2'];
DEV_LIST.push('HM-LC-Sw1-Pl-2');
DEV_DESCRIPTION["HM-LC-Sw1-Pl-2"] = "HM-LC-Sw1-Pl";
DEV_PATHS["HM-LC-Sw1-Pl-2"] = new Object();
DEV_PATHS["HM-LC-Sw1-Pl-2"]["50"] = "/config/img/devices/50/OM55_DimmerSwitch_thumb.png";
DEV_PATHS["HM-LC-Sw1-Pl-2"]["250"] = "/config/img/devices/250/OM55_DimmerSwitch.png";
DEV_HIGHLIGHT["HM-LC-Sw1-Pl-2"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw1-Pl-2"]["1_part1"] = [2, 0.548, 0.468, 0.072, 0.052];
DEV_HIGHLIGHT["HM-LC-Sw1-Pl-2"]["1_part2"] = [2, 0.612, 0.452, 0.028, 0.056];
DEV_HIGHLIGHT["HM-LC-Sw1-Pl-2"]["1"] = [5, '1_part1', '1_part2'];
DEV_LIST.push('HMW-RCV-50');
DEV_DESCRIPTION["HMW-RCV-50"] = "HMW-RCV-50";
DEV_PATHS["HMW-RCV-50"] = new Object();
DEV_PATHS["HMW-RCV-50"]["50"] = "/config/img/devices/50/CCU2_thumb.png";
DEV_PATHS["HMW-RCV-50"]["250"] = "/config/img/devices/250/CCU2.png";
DEV_HIGHLIGHT["HMW-RCV-50"] = new Object();
DEV_HIGHLIGHT["HMW-RCV-50"]["RF_1"] = [4, 0.364, 0.048, 0.028, 0.028];
DEV_HIGHLIGHT["HMW-RCV-50"]["RF_2"] = [6, 0.4, 0.052, 0.544, 0.004, 0.016];
DEV_HIGHLIGHT["HMW-RCV-50"]["RF_3"] = [6, 0.4, 0.052, 0.6, 0.052, 0.016];
DEV_HIGHLIGHT["HMW-RCV-50"]["RF_4"] = [6, 0.4, 0.052, 0.544, 0.104, 0.016];
DEV_HIGHLIGHT["HMW-RCV-50"]["RF_5"] = [6, 0.168, 0.052, 0.344, 0.052, 0.016];
DEV_HIGHLIGHT["HMW-RCV-50"]["RF_6"] = [6, 0.168, 0, 0.344, 0.052, 0.016];
DEV_HIGHLIGHT["HMW-RCV-50"]["RF_7"] = [6, 0.168, 0.104, 0.344, 0.052, 0.016];
DEV_HIGHLIGHT["HMW-RCV-50"]["RF"] = [5, 'RF_1', 'RF_2', 'RF_3', 'RF_4', 'RF_5', 'RF_6', 'RF_7'];
DEV_HIGHLIGHT["HMW-RCV-50"]["S1"] = [3, 0.25, 0.15, '1', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S2"] = [3, 0.25, 0.15, '2', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S3"] = [3, 0.25, 0.15, '3', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S4"] = [3, 0.25, 0.15, '4', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S5"] = [3, 0.25, 0.15, '5', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S6"] = [3, 0.25, 0.15, '6', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S7"] = [3, 0.25, 0.15, '7', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S8"] = [3, 0.25, 0.15, '8', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S9"] = [3, 0.25, 0.15, '9', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S10"] = [3, 0.175, 0.15, '10', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S11"] = [3, 0.175, 0.15, '11', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S12"] = [3, 0.175, 0.15, '12', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S13"] = [3, 0.175, 0.15, '13', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S14"] = [3, 0.175, 0.15, '14', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S15"] = [3, 0.175, 0.15, '15', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S16"] = [3, 0.175, 0.15, '16', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S17"] = [3, 0.175, 0.15, '17', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S18"] = [3, 0.175, 0.15, '18', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S19"] = [3, 0.175, 0.15, '19', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S20"] = [3, 0.175, 0.15, '20', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S21"] = [3, 0.175, 0.15, '21', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S22"] = [3, 0.175, 0.15, '22', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S23"] = [3, 0.175, 0.15, '23', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S24"] = [3, 0.175, 0.15, '24', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S25"] = [3, 0.175, 0.15, '25', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S26"] = [3, 0.175, 0.15, '26', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S27"] = [3, 0.175, 0.15, '27', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S28"] = [3, 0.175, 0.15, '28', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S29"] = [3, 0.175, 0.15, '29', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S30"] = [3, 0.175, 0.15, '30', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S31"] = [3, 0.175, 0.15, '31', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S32"] = [3, 0.175, 0.15, '32', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S33"] = [3, 0.175, 0.15, '33', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S34"] = [3, 0.175, 0.15, '34', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S35"] = [3, 0.175, 0.15, '35', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S36"] = [3, 0.175, 0.15, '36', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S37"] = [3, 0.175, 0.15, '37', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S38"] = [3, 0.175, 0.15, '38', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S39"] = [3, 0.175, 0.15, '39', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S40"] = [3, 0.175, 0.15, '40', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S41"] = [3, 0.175, 0.15, '41', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S42"] = [3, 0.175, 0.15, '42', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S43"] = [3, 0.175, 0.15, '43', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S44"] = [3, 0.175, 0.15, '44', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S45"] = [3, 0.175, 0.15, '45', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S46"] = [3, 0.175, 0.15, '46', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S47"] = [3, 0.175, 0.15, '47', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S48"] = [3, 0.175, 0.15, '48', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S49"] = [3, 0.175, 0.15, '49', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["S50"] = [3, 0.175, 0.15, '50', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-RCV-50"]["1"] = [5, 'S1'];
DEV_HIGHLIGHT["HMW-RCV-50"]["2"] = [5, 'S2'];
DEV_HIGHLIGHT["HMW-RCV-50"]["3"] = [5, 'S3'];
DEV_HIGHLIGHT["HMW-RCV-50"]["4"] = [5, 'S4'];
DEV_HIGHLIGHT["HMW-RCV-50"]["5"] = [5, 'S5'];
DEV_HIGHLIGHT["HMW-RCV-50"]["6"] = [5, 'S6'];
DEV_HIGHLIGHT["HMW-RCV-50"]["7"] = [5, 'S7'];
DEV_HIGHLIGHT["HMW-RCV-50"]["8"] = [5, 'S8'];
DEV_HIGHLIGHT["HMW-RCV-50"]["9"] = [5, 'S9'];
DEV_HIGHLIGHT["HMW-RCV-50"]["10"] = [5, 'S10'];
DEV_HIGHLIGHT["HMW-RCV-50"]["11"] = [5, 'S11'];
DEV_HIGHLIGHT["HMW-RCV-50"]["12"] = [5, 'S12'];
DEV_HIGHLIGHT["HMW-RCV-50"]["13"] = [5, 'S13'];
DEV_HIGHLIGHT["HMW-RCV-50"]["14"] = [5, 'S14'];
DEV_HIGHLIGHT["HMW-RCV-50"]["15"] = [5, 'S15'];
DEV_HIGHLIGHT["HMW-RCV-50"]["16"] = [5, 'S16'];
DEV_HIGHLIGHT["HMW-RCV-50"]["17"] = [5, 'S17'];
DEV_HIGHLIGHT["HMW-RCV-50"]["18"] = [5, 'S18'];
DEV_HIGHLIGHT["HMW-RCV-50"]["19"] = [5, 'S19'];
DEV_HIGHLIGHT["HMW-RCV-50"]["20"] = [5, 'S20'];
DEV_HIGHLIGHT["HMW-RCV-50"]["21"] = [5, 'S21'];
DEV_HIGHLIGHT["HMW-RCV-50"]["22"] = [5, 'S22'];
DEV_HIGHLIGHT["HMW-RCV-50"]["23"] = [5, 'S23'];
DEV_HIGHLIGHT["HMW-RCV-50"]["24"] = [5, 'S24'];
DEV_HIGHLIGHT["HMW-RCV-50"]["25"] = [5, 'S25'];
DEV_HIGHLIGHT["HMW-RCV-50"]["26"] = [5, 'S26'];
DEV_HIGHLIGHT["HMW-RCV-50"]["27"] = [5, 'S27'];
DEV_HIGHLIGHT["HMW-RCV-50"]["28"] = [5, 'S28'];
DEV_HIGHLIGHT["HMW-RCV-50"]["29"] = [5, 'S29'];
DEV_HIGHLIGHT["HMW-RCV-50"]["30"] = [5, 'S30'];
DEV_HIGHLIGHT["HMW-RCV-50"]["31"] = [5, 'S31'];
DEV_HIGHLIGHT["HMW-RCV-50"]["32"] = [5, 'S32'];
DEV_HIGHLIGHT["HMW-RCV-50"]["33"] = [5, 'S33'];
DEV_HIGHLIGHT["HMW-RCV-50"]["34"] = [5, 'S34'];
DEV_HIGHLIGHT["HMW-RCV-50"]["35"] = [5, 'S35'];
DEV_HIGHLIGHT["HMW-RCV-50"]["36"] = [5, 'S36'];
DEV_HIGHLIGHT["HMW-RCV-50"]["37"] = [5, 'S37'];
DEV_HIGHLIGHT["HMW-RCV-50"]["38"] = [5, 'S38'];
DEV_HIGHLIGHT["HMW-RCV-50"]["39"] = [5, 'S39'];
DEV_HIGHLIGHT["HMW-RCV-50"]["40"] = [5, 'S40'];
DEV_HIGHLIGHT["HMW-RCV-50"]["41"] = [5, 'S41'];
DEV_HIGHLIGHT["HMW-RCV-50"]["42"] = [5, 'S42'];
DEV_HIGHLIGHT["HMW-RCV-50"]["43"] = [5, 'S43'];
DEV_HIGHLIGHT["HMW-RCV-50"]["44"] = [5, 'S44'];
DEV_HIGHLIGHT["HMW-RCV-50"]["45"] = [5, 'S45'];
DEV_HIGHLIGHT["HMW-RCV-50"]["46"] = [5, 'S46'];
DEV_HIGHLIGHT["HMW-RCV-50"]["47"] = [5, 'S47'];
DEV_HIGHLIGHT["HMW-RCV-50"]["48"] = [5, 'S48'];
DEV_HIGHLIGHT["HMW-RCV-50"]["49"] = [5, 'S49'];
DEV_HIGHLIGHT["HMW-RCV-50"]["50"] = [5, 'S50'];
DEV_LIST.push('HM-WDS40-TH-I-2');
DEV_DESCRIPTION["HM-WDS40-TH-I-2"] = "HM-WDS40-TH-I";
DEV_PATHS["HM-WDS40-TH-I-2"] = new Object();
DEV_PATHS["HM-WDS40-TH-I-2"]["50"] = "/config/img/devices/50/13_hm-ws550sth-i_thumb.png";
DEV_PATHS["HM-WDS40-TH-I-2"]["250"] = "/config/img/devices/250/13_hm-ws550sth-i.png";
DEV_HIGHLIGHT["HM-WDS40-TH-I-2"] = new Object();
DEV_LIST.push('KS550');
DEV_DESCRIPTION["KS550"] = "KS550";
DEV_PATHS["KS550"] = new Object();
DEV_PATHS["KS550"]["50"] = "/config/img/devices/50/WeatherCombiSensor_thumb.png";
DEV_PATHS["KS550"]["250"] = "/config/img/devices/250/WeatherCombiSensor.png";
DEV_HIGHLIGHT["KS550"] = new Object();
DEV_LIST.push('263 135');
DEV_DESCRIPTION["263 135"] = "263_135";
DEV_PATHS["263 135"] = new Object();
DEV_PATHS["263 135"]["50"] = "/config/img/devices/50/75_hm-pb-2-wm55_thumb.png";
DEV_PATHS["263 135"]["250"] = "/config/img/devices/250/75_hm-pb-2-wm55.png";
DEV_HIGHLIGHT["263 135"] = new Object();
DEV_HIGHLIGHT["263 135"]["2"] = [2, 0.204, 0.23, 0.546, 0.128];
DEV_HIGHLIGHT["263 135"]["1"] = [2, 0.204, 0.65, 0.546, 0.128];
DEV_LIST.push('HM-LC-Sw4-WM-2');
DEV_DESCRIPTION["HM-LC-Sw4-WM-2"] = "HM-LC-Sw4-WM";
DEV_PATHS["HM-LC-Sw4-WM-2"] = new Object();
DEV_PATHS["HM-LC-Sw4-WM-2"]["50"] = "/config/img/devices/50/76_hm-lc-sw4-wm_thumb.png";
DEV_PATHS["HM-LC-Sw4-WM-2"]["250"] = "/config/img/devices/250/76_hm-lc-sw4-wm.png";
DEV_HIGHLIGHT["HM-LC-Sw4-WM-2"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw4-WM-2"]["Channel1"] = [2, 0.208, 0.766, 0.065, 0.060];
DEV_HIGHLIGHT["HM-LC-Sw4-WM-2"]["Channel2"] = [2, 0.276, 0.766, 0.065, 0.060];
DEV_HIGHLIGHT["HM-LC-Sw4-WM-2"]["Channel3"] = [2, 0.344, 0.766, 0.065, 0.060];
DEV_HIGHLIGHT["HM-LC-Sw4-WM-2"]["Channel4"] = [2, 0.412, 0.766, 0.065, 0.060];
DEV_HIGHLIGHT["HM-LC-Sw4-WM-2"]["1_val"] = [3, 0.372, 0.288, '1', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-LC-Sw4-WM-2"]["2_val"] = [3, 0.372, 0.288, '2', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-LC-Sw4-WM-2"]["3_val"] = [3, 0.372, 0.288, '3', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-LC-Sw4-WM-2"]["4_val"] = [3, 0.372, 0.288, '4', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-LC-Sw4-WM-2"]["Circle1"] = [4, 0.534, 0.762, 0.044, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-WM-2"]["Circle2"] = [4, 0.583, 0.762, 0.044, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-WM-2"]["Circle3"] = [4, 0.637, 0.762, 0.044, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-WM-2"]["Circle4"] = [4, 0.693, 0.762, 0.044, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-WM-2"]["1"] = [5, 'Channel1', '1_val', 'Circle1'];
DEV_HIGHLIGHT["HM-LC-Sw4-WM-2"]["2"] = [5, 'Channel2', '2_val', 'Circle2'];
DEV_HIGHLIGHT["HM-LC-Sw4-WM-2"]["3"] = [5, 'Channel3', '3_val', 'Circle3'];
DEV_HIGHLIGHT["HM-LC-Sw4-WM-2"]["4"] = [5, 'Channel4', '4_val', 'Circle4'];
DEV_LIST.push('263 132');
DEV_DESCRIPTION["263 132"] = "263_132";
DEV_PATHS["263 132"] = new Object();
DEV_PATHS["263 132"]["50"] = "/config/img/devices/50/2_hm-lc-dim1l-cv_thumb.png";
DEV_PATHS["263 132"]["250"] = "/config/img/devices/250/2_hm-lc-dim1l-cv.png";
DEV_HIGHLIGHT["263 132"] = new Object();
DEV_LIST.push('HM-RC-19-SW');
DEV_DESCRIPTION["HM-RC-19-SW"] = "HM-RC-19-SW";
DEV_PATHS["HM-RC-19-SW"] = new Object();
DEV_PATHS["HM-RC-19-SW"]["50"] = "/config/img/devices/50/20_hm-rc-19_thumb.png";
DEV_PATHS["HM-RC-19-SW"]["250"] = "/config/img/devices/250/20_hm-rc-19.png";
DEV_HIGHLIGHT["HM-RC-19-SW"] = new Object();
DEV_HIGHLIGHT["HM-RC-19-SW"]["1"] = [2, 0.296, 0.344, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-SW"]["3"] = [2, 0.296, 0.416, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-SW"]["5"] = [2, 0.296, 0.488, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-SW"]["7"] = [2, 0.296, 0.56, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-SW"]["9"] = [2, 0.296, 0.628, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-SW"]["11"] = [2, 0.296, 0.704, 0.036, 0.048];
DEV_HIGHLIGHT["HM-RC-19-SW"]["13"] = [2, 0.296, 0.772, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-SW"]["15"] = [2, 0.296, 0.844, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-SW"]["2"] = [2, 0.468, 0.344, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-SW"]["4"] = [2, 0.468, 0.416, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-SW"]["6"] = [2, 0.468, 0.488, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-SW"]["8"] = [2, 0.468, 0.56, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-SW"]["10"] = [2, 0.468, 0.628, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-SW"]["12"] = [2, 0.468, 0.704, 0.036, 0.048];
DEV_HIGHLIGHT["HM-RC-19-SW"]["14"] = [2, 0.468, 0.772, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-SW"]["16"] = [2, 0.468, 0.844, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-SW"]["17"] = [2, 0.58, 0.84, 0.044, 0.056];
DEV_HIGHLIGHT["HM-RC-19-SW"]["18"] = [2, 0.312, 0.188, 0.168, 0.088];
DEV_HIGHLIGHT["HM-RC-19-SW"]["1+2"] = [5, '1', '2'];
DEV_HIGHLIGHT["HM-RC-19-SW"]["3+4"] = [5, '3', '4'];
DEV_HIGHLIGHT["HM-RC-19-SW"]["5+6"] = [5, '5', '6'];
DEV_HIGHLIGHT["HM-RC-19-SW"]["7+8"] = [5, '7', '8'];
DEV_HIGHLIGHT["HM-RC-19-SW"]["9+10"] = [5, '9', '10'];
DEV_HIGHLIGHT["HM-RC-19-SW"]["11+12"] = [5, '11', '12'];
DEV_HIGHLIGHT["HM-RC-19-SW"]["13+14"] = [5, '13', '14'];
DEV_HIGHLIGHT["HM-RC-19-SW"]["15+16"] = [5, '15', '16'];
DEV_LIST.push('263 146');
DEV_DESCRIPTION["263 146"] = "263_146";
DEV_PATHS["263 146"] = new Object();
DEV_PATHS["263 146"]["50"] = "/config/img/devices/50/7_hm-lc-bl1-fm_thumb.png";
DEV_PATHS["263 146"]["250"] = "/config/img/devices/250/7_hm-lc-bl1-fm.png";
DEV_HIGHLIGHT["263 146"] = new Object();
DEV_LIST.push('HM-Sen-MDIR-SM');
DEV_DESCRIPTION["HM-Sen-MDIR-SM"] = "HM-Sen-MDIR-SM";
DEV_PATHS["HM-Sen-MDIR-SM"] = new Object();
DEV_PATHS["HM-Sen-MDIR-SM"]["50"] = "/config/img/devices/50/53_hm-sen-mdir-sm_thumb.png";
DEV_PATHS["HM-Sen-MDIR-SM"]["250"] = "/config/img/devices/250/53_hm-sen-mdir-sm.png";
DEV_HIGHLIGHT["HM-Sen-MDIR-SM"] = new Object();
DEV_LIST.push('HM-RC-Dis-H-x-EU');
DEV_DESCRIPTION["HM-RC-Dis-H-x-EU"] = "HM-RC-Dis-H-x-EU";
DEV_PATHS["HM-RC-Dis-H-x-EU"] = new Object();
DEV_PATHS["HM-RC-Dis-H-x-EU"]["50"] = "/config/img/devices/50/108_hm-rc-dis-h-x-eu_thump.png";
DEV_PATHS["HM-RC-Dis-H-x-EU"]["250"] = "/config/img/devices/250/108_hm-rc-dis-h-x-eu.png";
DEV_HIGHLIGHT["HM-RC-Dis-H-x-EU"] = new Object();
DEV_LIST.push('HM-LC-Sw1-Pl-DN-R2');
DEV_DESCRIPTION["HM-LC-Sw1-Pl-DN-R2"] = "HM-LC-Sw1-Pl-DN-R2";
DEV_PATHS["HM-LC-Sw1-Pl-DN-R2"] = new Object();
DEV_PATHS["HM-LC-Sw1-Pl-DN-R2"]["50"] = "/config/img/devices/50/107_hm-es-pmsw1-pl-R2_thumb.png";
DEV_PATHS["HM-LC-Sw1-Pl-DN-R2"]["250"] = "/config/img/devices/250/107_hm-es-pmsw1-pl-R2.png";
DEV_HIGHLIGHT["HM-LC-Sw1-Pl-DN-R2"] = new Object();
DEV_LIST.push('HM-PB-4Dis-WM');
DEV_DESCRIPTION["HM-PB-4Dis-WM"] = "HM-PB-4Dis-WM";
DEV_PATHS["HM-PB-4Dis-WM"] = new Object();
DEV_PATHS["HM-PB-4Dis-WM"]["50"] = "/config/img/devices/50/70_hm-pb-4dis-wm_thumb.png";
DEV_PATHS["HM-PB-4Dis-WM"]["250"] = "/config/img/devices/250/70_hm-pb-4dis-wm.png";
DEV_HIGHLIGHT["HM-PB-4Dis-WM"] = new Object();
DEV_HIGHLIGHT["HM-PB-4Dis-WM"]["2"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM"]["1"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM"]["4"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM"]["3"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM"]["6"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM"]["5"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM"]["8"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM"]["7"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM"]["10"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM"]["9"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM"]["12"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM"]["11"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM"]["14"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM"]["13"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM"]["16"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM"]["15"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM"]["18"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM"]["17"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM"]["20"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM"]["19"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_LIST.push('HM-LC-Bl1-PB-FM');
DEV_DESCRIPTION["HM-LC-Bl1-PB-FM"] = "HM-LC-Bl1-PB-FM";
DEV_PATHS["HM-LC-Bl1-PB-FM"] = new Object();
DEV_PATHS["HM-LC-Bl1-PB-FM"]["50"] = "/config/img/devices/50/61_hm-lc-bl1-pb-fm_thumb.png";
DEV_PATHS["HM-LC-Bl1-PB-FM"]["250"] = "/config/img/devices/250/61_hm-lc-bl1-pb-fm.png";
DEV_HIGHLIGHT["HM-LC-Bl1-PB-FM"] = new Object();
DEV_LIST.push('263 157');
DEV_DESCRIPTION["263 157"] = "263_157";
DEV_PATHS["263 157"] = new Object();
DEV_PATHS["263 157"]["50"] = "/config/img/devices/50/13_hm-ws550sth-i_thumb.png";
DEV_PATHS["263 157"]["250"] = "/config/img/devices/250/13_hm-ws550sth-i.png";
DEV_HIGHLIGHT["263 157"] = new Object();
DEV_LIST.push('HM-LC-Sw1-Pl-DN-R5');
DEV_DESCRIPTION["HM-LC-Sw1-Pl-DN-R5"] = "HM-LC-Sw1-Pl-DN-R5";
DEV_PATHS["HM-LC-Sw1-Pl-DN-R5"] = new Object();
DEV_PATHS["HM-LC-Sw1-Pl-DN-R5"]["50"] = "/config/img/devices/50/107_hm-es-pmsw1-pl-R5_thumb.png";
DEV_PATHS["HM-LC-Sw1-Pl-DN-R5"]["250"] = "/config/img/devices/250/107_hm-es-pmsw1-pl-R5.png";
DEV_HIGHLIGHT["HM-LC-Sw1-Pl-DN-R5"] = new Object();
DEV_LIST.push('BRC-H');
DEV_DESCRIPTION["BRC-H"] = "BRC-H";
DEV_PATHS["BRC-H"] = new Object();
DEV_PATHS["BRC-H"]["50"] = "/config/img/devices/50/72_hm-rc-brc-h_thumb.png";
DEV_PATHS["BRC-H"]["250"] = "/config/img/devices/250/72_hm-rc-brc-h.png";
DEV_HIGHLIGHT["BRC-H"] = new Object();
DEV_HIGHLIGHT["BRC-H"]["1"] = [4, 0.196, 0.222, 0.162, 0.164];
DEV_HIGHLIGHT["BRC-H"]["2"] = [4, 0.417, 0.222, 0.162, 0.164];
DEV_HIGHLIGHT["BRC-H"]["3"] = [4, 0.196, 0.482, 0.162, 0.164];
DEV_HIGHLIGHT["BRC-H"]["4"] = [4, 0.417, 0.482, 0.162, 0.164];
DEV_LIST.push('HM-RC-8');
DEV_DESCRIPTION["HM-RC-8"] = "HM-RC-8";
DEV_PATHS["HM-RC-8"] = new Object();
DEV_PATHS["HM-RC-8"]["50"] = "/config/img/devices/50/100_hm-rc-8_thumb.png";
DEV_PATHS["HM-RC-8"]["250"] = "/config/img/devices/250/100_hm-rc-8.png";
DEV_HIGHLIGHT["HM-RC-8"] = new Object();
DEV_HIGHLIGHT["HM-RC-8"]["1"] = [1, 0.374, 0.192, 0.02];
DEV_HIGHLIGHT["HM-RC-8"]["2"] = [1, 0.537, 0.248, 0.02];
DEV_HIGHLIGHT["HM-RC-8"]["3"] = [1, 0.374, 0.284, 0.02];
DEV_HIGHLIGHT["HM-RC-8"]["4"] = [1, 0.537, 0.340, 0.02];
DEV_HIGHLIGHT["HM-RC-8"]["5"] = [1, 0.374, 0.378, 0.02];
DEV_HIGHLIGHT["HM-RC-8"]["6"] = [1, 0.537, 0.434, 0.02];
DEV_HIGHLIGHT["HM-RC-8"]["7"] = [1, 0.374, 0.470, 0.02];
DEV_HIGHLIGHT["HM-RC-8"]["8"] = [1, 0.537, 0.526, 0.02];
DEV_HIGHLIGHT["HM-RC-8"]["1+2"] = [5, '1', '2'];
DEV_HIGHLIGHT["HM-RC-8"]["3+4"] = [5, '3', '4'];
DEV_HIGHLIGHT["HM-RC-8"]["5+6"] = [5, '5', '6'];
DEV_HIGHLIGHT["HM-RC-8"]["7+8"] = [5, '7', '8'];
DEV_LIST.push('HM-LC-Dim2L-SM-2');
DEV_DESCRIPTION["HM-LC-Dim2L-SM-2"] = "HM-LC-Dim2L-SM";
DEV_PATHS["HM-LC-Dim2L-SM-2"] = new Object();
DEV_PATHS["HM-LC-Dim2L-SM-2"]["50"] = "/config/img/devices/50/45_hm-lc-dim2l-sm_thumb.png";
DEV_PATHS["HM-LC-Dim2L-SM-2"]["250"] = "/config/img/devices/250/45_hm-lc-dim2l-sm.png";
DEV_HIGHLIGHT["HM-LC-Dim2L-SM-2"] = new Object();
DEV_HIGHLIGHT["HM-LC-Dim2L-SM-2"]["1_Part1"] = [6, 0.530, 0.896, 0.530, 0.98, 0.012];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM-2"]["1_Part2"] = [6, 0.530, 0.98, 0.49, 0.916, 0.012];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM-2"]["1_Part3"] = [6, 0.530, 0.98, 0.574, 0.916, 0.012];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM-2"]["1_Arrow"] = [5, '1_Part1', '1_Part2', '1_Part3'];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM-2"]["2_Arrow"] = [7, '1_Arrow', 0.168, 0];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM-2"]["1_Key"] = [4, 0.25, 0.33, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM-2"]["2_Key"] = [4, 0.328, 0.33, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM-2"]["1"] = [5, '1_Arrow', '1_Key'];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM-2"]["2"] = [5, '2_Arrow', '2_Key'];
DEV_LIST.push('HM-Sec-SD-Team');
DEV_DESCRIPTION["HM-Sec-SD-Team"] = "HM-Sec-SD-Team";
DEV_PATHS["HM-Sec-SD-Team"] = new Object();
DEV_PATHS["HM-Sec-SD-Team"]["50"] = "/config/img/devices/50/52_hm-sec-sd-team_thumb.png";
DEV_PATHS["HM-Sec-SD-Team"]["250"] = "/config/img/devices/250/52_hm-sec-sd-team.png";
DEV_HIGHLIGHT["HM-Sec-SD-Team"] = new Object();
DEV_LIST.push('HM-RC-4-3');
DEV_DESCRIPTION["HM-RC-4-3"] = "HM-RC-4";
DEV_PATHS["HM-RC-4-3"] = new Object();
DEV_PATHS["HM-RC-4-3"]["50"] = "/config/img/devices/50/84_hm-rc-4-x_thumb.png";
DEV_PATHS["HM-RC-4-3"]["250"] = "/config/img/devices/250/84_hm-rc-4-3.png";
DEV_HIGHLIGHT["HM-RC-4-3"] = new Object();
DEV_HIGHLIGHT["HM-RC-4-3"]["arrow_part1"] = [6, 0.312, 0.288, 0.416, 0.288, 0.012];
DEV_HIGHLIGHT["HM-RC-4-3"]["arrow_part2"] = [6, 0.312, 0.288, 0.352, 0.248, 0.012];
DEV_HIGHLIGHT["HM-RC-4-3"]["arrow_part3"] = [6, 0.312, 0.288, 0.352, 0.328, 0.012];
DEV_HIGHLIGHT["HM-RC-4-3"]["Arrow"] = [5, 'arrow_part1', 'arrow_part2', 'arrow_part3'];
DEV_HIGHLIGHT["HM-RC-4-3"]["1_Arrow"] = [7, 'Arrow', 0.25, 0.0];
DEV_HIGHLIGHT["HM-RC-4-3"]["2_Arrow"] = [7, 'Arrow', 0.238, 0.156];
DEV_HIGHLIGHT["HM-RC-4-3"]["3_Arrow"] = [7, 'Arrow', 0.228, 0.312];
DEV_HIGHLIGHT["HM-RC-4-3"]["4_Arrow"] = [7, 'Arrow', 0.212, 0.468];
DEV_HIGHLIGHT["HM-RC-4-3"]["1"] = [5, '2_Arrow'];
DEV_HIGHLIGHT["HM-RC-4-3"]["2"] = [5, '1_Arrow'];
DEV_HIGHLIGHT["HM-RC-4-3"]["3"] = [5, '4_Arrow'];
DEV_HIGHLIGHT["HM-RC-4-3"]["4"] = [5, '3_Arrow'];
DEV_HIGHLIGHT["HM-RC-4-3"]["1+2"] = [5, '1_Arrow', '2_Arrow'];
DEV_HIGHLIGHT["HM-RC-4-3"]["3+4"] = [5, '3_Arrow', '4_Arrow'];
DEV_LIST.push('HM-EM-CMM');
DEV_DESCRIPTION["HM-EM-CMM"] = "HM-EM-CMM";
DEV_PATHS["HM-EM-CMM"] = new Object();
DEV_PATHS["HM-EM-CMM"]["50"] = "/config/img/devices/50/25_hm-em-cmm_thumb.png";
DEV_PATHS["HM-EM-CMM"]["250"] = "/config/img/devices/250/25_hm-em-cmm.png";
DEV_HIGHLIGHT["HM-EM-CMM"] = new Object();
DEV_LIST.push('HM-LC-RGBW-WM');
DEV_DESCRIPTION["HM-LC-RGBW-WM"] = "HM-LC-RGBW-WM";
DEV_PATHS["HM-LC-RGBW-WM"] = new Object();
DEV_PATHS["HM-LC-RGBW-WM"]["50"] = "/config/img/devices/50/111_hm-lc-rgbw-wm_thumb.png";
DEV_PATHS["HM-LC-RGBW-WM"]["250"] = "/config/img/devices/250/111_hm-lc-rgbw-wm.png";
DEV_HIGHLIGHT["HM-LC-RGBW-WM"] = new Object();
DEV_HIGHLIGHT["HM-LC-RGBW-WM"]["1"] = [1, 0.124, 0.292, 0.028];
DEV_HIGHLIGHT["HM-LC-RGBW-WM"]["2"] = [1, 0.124, 0.384, 0.028];
DEV_HIGHLIGHT["HM-LC-RGBW-WM"]["3"] = [1, 0.124, 0.472, 0.028];
DEV_LIST.push('HM-RC-Sec4-3');
DEV_DESCRIPTION["HM-RC-Sec4-3"] = "HM-RC-4";
DEV_PATHS["HM-RC-Sec4-3"] = new Object();
DEV_PATHS["HM-RC-Sec4-3"]["50"] = "/config/img/devices/50/84_hm-rc-4-x_thumb.png";
DEV_PATHS["HM-RC-Sec4-3"]["250"] = "/config/img/devices/250/85_hm-rc-sec4-3.png";
DEV_HIGHLIGHT["HM-RC-Sec4-3"] = new Object();
DEV_HIGHLIGHT["HM-RC-Sec4-3"]["arrow_part1"] = [6, 0.312, 0.288, 0.416, 0.288, 0.012];
DEV_HIGHLIGHT["HM-RC-Sec4-3"]["arrow_part2"] = [6, 0.312, 0.288, 0.352, 0.248, 0.012];
DEV_HIGHLIGHT["HM-RC-Sec4-3"]["arrow_part3"] = [6, 0.312, 0.288, 0.352, 0.328, 0.012];
DEV_HIGHLIGHT["HM-RC-Sec4-3"]["Arrow"] = [5, 'arrow_part1', 'arrow_part2', 'arrow_part3'];
DEV_HIGHLIGHT["HM-RC-Sec4-3"]["1_Arrow"] = [7, 'Arrow', 0.25, 0.0];
DEV_HIGHLIGHT["HM-RC-Sec4-3"]["2_Arrow"] = [7, 'Arrow', 0.238, 0.156];
DEV_HIGHLIGHT["HM-RC-Sec4-3"]["3_Arrow"] = [7, 'Arrow', 0.228, 0.312];
DEV_HIGHLIGHT["HM-RC-Sec4-3"]["4_Arrow"] = [7, 'Arrow', 0.212, 0.468];
DEV_HIGHLIGHT["HM-RC-Sec4-3"]["1"] = [5, '2_Arrow'];
DEV_HIGHLIGHT["HM-RC-Sec4-3"]["2"] = [5, '1_Arrow'];
DEV_HIGHLIGHT["HM-RC-Sec4-3"]["3"] = [5, '4_Arrow'];
DEV_HIGHLIGHT["HM-RC-Sec4-3"]["4"] = [5, '3_Arrow'];
DEV_HIGHLIGHT["HM-RC-Sec4-3"]["1+2"] = [5, '1_Arrow', '2_Arrow'];
DEV_HIGHLIGHT["HM-RC-Sec4-3"]["3+4"] = [5, '3_Arrow', '4_Arrow'];
DEV_LIST.push('HM-LC-Sw2-DR-2');
DEV_DESCRIPTION["HM-LC-Sw2-DR-2"] = "HM-LC-Sw2-DR";
DEV_PATHS["HM-LC-Sw2-DR-2"] = new Object();
DEV_PATHS["HM-LC-Sw2-DR-2"]["50"] = "/config/img/devices/50/69_hm-lc-sw2-dr_thumb.png";
DEV_PATHS["HM-LC-Sw2-DR-2"]["250"] = "/config/img/devices/250/69_hm-lc-sw2-dr.png";
DEV_HIGHLIGHT["HM-LC-Sw2-DR-2"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw2-DR-2"]["1"] = [4, 0.095, 0.556, 0.045, 0.04];
DEV_HIGHLIGHT["HM-LC-Sw2-DR-2"]["2"] = [4, 0.285, 0.556, 0.045, 0.04];
DEV_LIST.push('HM-Sen-MDIR-O-2');
DEV_DESCRIPTION["HM-Sen-MDIR-O-2"] = "HM-Sen-MDIR-O";
DEV_PATHS["HM-Sen-MDIR-O-2"] = new Object();
DEV_PATHS["HM-Sen-MDIR-O-2"]["50"] = "/config/img/devices/50/80_hm-sen-mdir-o_thumb.png";
DEV_PATHS["HM-Sen-MDIR-O-2"]["250"] = "/config/img/devices/250/80_hm-sen-mdir-o.png";
DEV_HIGHLIGHT["HM-Sen-MDIR-O-2"] = new Object();
DEV_LIST.push('HM-LC-Sw1-Pl-3');
DEV_DESCRIPTION["HM-LC-Sw1-Pl-3"] = "HM-LC-Sw1-Pl";
DEV_PATHS["HM-LC-Sw1-Pl-3"] = new Object();
DEV_PATHS["HM-LC-Sw1-Pl-3"]["50"] = "/config/img/devices/50/OM55_DimmerSwitch_thumb.png";
DEV_PATHS["HM-LC-Sw1-Pl-3"]["250"] = "/config/img/devices/250/OM55_DimmerSwitch.png";
DEV_HIGHLIGHT["HM-LC-Sw1-Pl-3"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw1-Pl-3"]["1_part1"] = [2, 0.548, 0.468, 0.072, 0.052];
DEV_HIGHLIGHT["HM-LC-Sw1-Pl-3"]["1_part2"] = [2, 0.612, 0.452, 0.028, 0.056];
DEV_HIGHLIGHT["HM-LC-Sw1-Pl-3"]["1"] = [5, '1_part1', '1_part2'];
DEV_LIST.push('HM-RC-12-B');
DEV_DESCRIPTION["HM-RC-12-B"] = "HM-RC-12-B";
DEV_PATHS["HM-RC-12-B"] = new Object();
DEV_PATHS["HM-RC-12-B"]["50"] = "/config/img/devices/50/19_hm-rc-12_thumb.png";
DEV_PATHS["HM-RC-12-B"]["250"] = "/config/img/devices/250/19_hm-rc-12.png";
DEV_HIGHLIGHT["HM-RC-12-B"] = new Object();
DEV_HIGHLIGHT["HM-RC-12-B"]["1"] = [2, 0.252, 0.412, 0.044, 0.072];
DEV_HIGHLIGHT["HM-RC-12-B"]["3"] = [2, 0.252, 0.508, 0.044, 0.072];
DEV_HIGHLIGHT["HM-RC-12-B"]["5"] = [2, 0.252, 0.604, 0.044, 0.072];
DEV_HIGHLIGHT["HM-RC-12-B"]["7"] = [2, 0.252, 0.7, 0.044, 0.072];
DEV_HIGHLIGHT["HM-RC-12-B"]["9"] = [2, 0.252, 0.8, 0.044, 0.072];
DEV_HIGHLIGHT["HM-RC-12-B"]["10"] = [2, 0.476, 0.8, 0.044, 0.072];
DEV_HIGHLIGHT["HM-RC-12-B"]["8"] = [2, 0.476, 0.7, 0.044, 0.072];
DEV_HIGHLIGHT["HM-RC-12-B"]["6"] = [2, 0.476, 0.604, 0.044, 0.072];
DEV_HIGHLIGHT["HM-RC-12-B"]["4"] = [2, 0.476, 0.508, 0.044, 0.072];
DEV_HIGHLIGHT["HM-RC-12-B"]["2"] = [2, 0.476, 0.412, 0.044, 0.072];
DEV_HIGHLIGHT["HM-RC-12-B"]["11"] = [2, 0.62, 0.8, 0.068, 0.064];
DEV_HIGHLIGHT["HM-RC-12-B"]["12"] = [2, 0.62, 0.704, 0.068, 0.064];
DEV_HIGHLIGHT["HM-RC-12-B"]["1+2"] = [5, '1', '2'];
DEV_HIGHLIGHT["HM-RC-12-B"]["3+4"] = [5, '3', '4'];
DEV_HIGHLIGHT["HM-RC-12-B"]["5+6"] = [5, '5', '6'];
DEV_HIGHLIGHT["HM-RC-12-B"]["7+8"] = [5, '7', '8'];
DEV_HIGHLIGHT["HM-RC-12-B"]["9+10"] = [5, '9', '10'];
DEV_HIGHLIGHT["HM-RC-12-B"]["11+12"] = [5, '11', '12'];
DEV_LIST.push('HM-LC-Dim1TPBU-FM-2');
DEV_DESCRIPTION["HM-LC-Dim1TPBU-FM-2"] = "HM-LC-Dim1TPBU-FM-2";
DEV_PATHS["HM-LC-Dim1TPBU-FM-2"] = new Object();
DEV_PATHS["HM-LC-Dim1TPBU-FM-2"]["50"] = "/config/img/devices/50/PushButton-2ch-wm_thumb.png";
DEV_PATHS["HM-LC-Dim1TPBU-FM-2"]["250"] = "/config/img/devices/250/PushButton-2ch-wm.png";
DEV_HIGHLIGHT["HM-LC-Dim1TPBU-FM-2"] = new Object();
DEV_LIST.push('HM-RC-P1');
DEV_DESCRIPTION["HM-RC-P1"] = "HM-RC-P1";
DEV_PATHS["HM-RC-P1"] = new Object();
DEV_PATHS["HM-RC-P1"]["50"] = "/config/img/devices/50/21_hm-rc-p1_thumb.png";
DEV_PATHS["HM-RC-P1"]["250"] = "/config/img/devices/250/21_hm-rc-p1.png";
DEV_HIGHLIGHT["HM-RC-P1"] = new Object();
DEV_HIGHLIGHT["HM-RC-P1"]["1"] = [4, 0.26, 0.248, 0.38, 0.42];
DEV_LIST.push('HM-Sec-SC');
DEV_DESCRIPTION["HM-Sec-SC"] = "HM-Sec-SC";
DEV_PATHS["HM-Sec-SC"] = new Object();
DEV_PATHS["HM-Sec-SC"]["50"] = "/config/img/devices/50/16_hm-sec-sc_thumb.png";
DEV_PATHS["HM-Sec-SC"]["250"] = "/config/img/devices/250/16_hm-sec-sc.png";
DEV_HIGHLIGHT["HM-Sec-SC"] = new Object();
DEV_LIST.push('HM-LC-Sw1-Pl-OM54');
DEV_DESCRIPTION["HM-LC-Sw1-Pl-OM54"] = "HM-LC-Sw1-Pl-OM54";
DEV_PATHS["HM-LC-Sw1-Pl-OM54"] = new Object();
DEV_PATHS["HM-LC-Sw1-Pl-OM54"]["50"] = "/config/img/devices/50/OM55_DimmerSwitch_thumb.png";
DEV_PATHS["HM-LC-Sw1-Pl-OM54"]["250"] = "/config/img/devices/250/OM55_DimmerSwitch.png";
DEV_HIGHLIGHT["HM-LC-Sw1-Pl-OM54"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw1-Pl-OM54"]["1_part1"] = [2, 0.548, 0.468, 0.072, 0.052];
DEV_HIGHLIGHT["HM-LC-Sw1-Pl-OM54"]["1_part2"] = [2, 0.612, 0.452, 0.028, 0.056];
DEV_HIGHLIGHT["HM-LC-Sw1-Pl-OM54"]["1"] = [5, '1_part1', '1_part2'];
DEV_LIST.push('HM-PB-4-WM');
DEV_DESCRIPTION["HM-PB-4-WM"] = "HM-PB-4-WM";
DEV_PATHS["HM-PB-4-WM"] = new Object();
DEV_PATHS["HM-PB-4-WM"]["50"] = "/config/img/devices/50/PushButton-4ch-wm_thumb.png";
DEV_PATHS["HM-PB-4-WM"]["250"] = "/config/img/devices/250/PushButton-4ch-wm.png";
DEV_HIGHLIGHT["HM-PB-4-WM"] = new Object();
DEV_HIGHLIGHT["HM-PB-4-WM"]["2"] = [2, 0.24, 0.312, 0.204, 0.168];
DEV_HIGHLIGHT["HM-PB-4-WM"]["1"] = [2, 0.24, 0.556, 0.204, 0.168];
DEV_HIGHLIGHT["HM-PB-4-WM"]["3"] = [2, 0.46, 0.556, 0.204, 0.168];
DEV_HIGHLIGHT["HM-PB-4-WM"]["4"] = [2, 0.46, 0.312, 0.204, 0.168];
DEV_HIGHLIGHT["HM-PB-4-WM"]["1+2"] = [2, 0.24, 0.312, 0.204, 0.412];
DEV_HIGHLIGHT["HM-PB-4-WM"]["3+4"] = [2, 0.46, 0.312, 0.204, 0.412];
DEV_LIST.push('HM-LC-Dim1T-CV-644');
DEV_DESCRIPTION["HM-LC-Dim1T-CV-644"] = "HM-LC-Dim1T-CV";
DEV_PATHS["HM-LC-Dim1T-CV-644"] = new Object();
DEV_PATHS["HM-LC-Dim1T-CV-644"]["50"] = "/config/img/devices/50/66_hm-lc-dim1t-cv_thumb.png";
DEV_PATHS["HM-LC-Dim1T-CV-644"]["250"] = "/config/img/devices/250/66_hm-lc-dim1t-cv.png";
DEV_HIGHLIGHT["HM-LC-Dim1T-CV-644"] = new Object();
DEV_LIST.push('HMW-IO-12-FM');
DEV_DESCRIPTION["HMW-IO-12-FM"] = "HMW-IO-12-FM";
DEV_PATHS["HMW-IO-12-FM"] = new Object();
DEV_PATHS["HMW-IO-12-FM"]["50"] = "/config/img/devices/50/59_hmw-io-12-fm_thumb.png";
DEV_PATHS["HMW-IO-12-FM"]["250"] = "/config/img/devices/250/59_hmw-io-12-fm.png";
DEV_HIGHLIGHT["HMW-IO-12-FM"] = new Object();
DEV_HIGHLIGHT["HMW-IO-12-FM"]["1_num"] = [3, 0.744, 0.636, '1', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["1_line"] = [6, 0.77, 0.08, 0.860, 0.08, 0.016];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["1"] = [5, '1_num', '1_line'];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["2_num"] = [3, 0.744, 0.636, '2', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["2_line"] = [6, 0.77, 0.136, 0.86, 0.136, 0.016];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["2"] = [5, '2_num', '2_line'];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["3_num"] = [3, 0.744, 0.636, '3', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["3_line"] = [6, 0.77, 0.194, 0.86, 0.194, 0.016];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["3"] = [5, '3_num', '3_line'];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["4_num"] = [3, 0.744, 0.636, '4', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["4_line"] = [6, 0.77, 0.25, 0.86, 0.25, 0.016];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["4"] = [5, '4_num', '4_line'];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["5_num"] = [3, 0.744, 0.636, '5', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["5_line"] = [6, 0.77, 0.308, 0.86, 0.308, 0.016];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["5"] = [5, '5_num', '5_line'];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["6_num"] = [3, 0.744, 0.636, '6', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["6_line"] = [6, 0.77, 0.366, 0.86, 0.366, 0.016];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["6"] = [5, '6_num', '6_line'];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["7_num"] = [3, 0.744, 0.636, '7', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["7_line"] = [6, 0.77, 0.424, 0.86, 0.424, 0.016];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["7"] = [5, '7_num', '7_line'];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["8_num"] = [3, 0.744, 0.636, '8', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["8_arc"] = [4, 0.370, 0.748, 0.036, 0.036, 0.036];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["8"] = [5, '8_num', '8_arc'];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["9_num"] = [3, 0.744, 0.636, '9', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["9_arc"] = [4, 0.3895, 0.704, 0.036, 0.036, 0.036];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["9"] = [5, '9_num', '9_arc'];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["10_num"] = [3, 0.744, 0.636, '10', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["10_arc"] = [4, 0.41, 0.65, 0.035, 0.036, 0.036];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["10"] = [5, '10_num', '10_arc'];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["11_num"] = [3, 0.744, 0.636, '11', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["11_arc"] = [4, 0.4293, 0.612, 0.036, 0.036, 0.036];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["11"] = [5, '11_num', '11_arc'];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["12_num"] = [3, 0.744, 0.636, '12', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["12_arc"] = [4, 0.448, 0.564, 0.036, 0.036, 0.036];
DEV_HIGHLIGHT["HMW-IO-12-FM"]["12"] = [5, '12_num', '12_arc'];
DEV_LIST.push('HM-Sec-SD-2');
DEV_DESCRIPTION["HM-Sec-SD-2"] = "HM-Sec-SD";
DEV_PATHS["HM-Sec-SD-2"] = new Object();
DEV_PATHS["HM-Sec-SD-2"]["50"] = "/config/img/devices/50/104_hm-sec-sd-2_thumb.png";
DEV_PATHS["HM-Sec-SD-2"]["250"] = "/config/img/devices/250/104_hm-sec-sd-2.png";
DEV_HIGHLIGHT["HM-Sec-SD-2"] = new Object();
DEV_LIST.push('HMW-Sen-SC-12-FM');
DEV_DESCRIPTION["HMW-Sen-SC-12-FM"] = "HMW-Sen-SC-12-FM";
DEV_PATHS["HMW-Sen-SC-12-FM"] = new Object();
DEV_PATHS["HMW-Sen-SC-12-FM"]["50"] = "/config/img/devices/50/58_hmw-sen-sc-12-fm_thumb.png";
DEV_PATHS["HMW-Sen-SC-12-FM"]["250"] = "/config/img/devices/250/58_hmw-sen-sc-12-fm.png";
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"] = new Object();
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["1_num"] = [3, 0.744, 0.636, '1', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["1_line"] = [6, 0.77, 0.055, 0.860, 0.055, 0.016];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["1"] = [5, '1_num', '1_line'];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["2_num"] = [3, 0.744, 0.636, '2', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["2_line"] = [6, 0.77, 0.115, 0.86, 0.115, 0.016];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["2"] = [5, '2_num', '2_line'];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["3_num"] = [3, 0.744, 0.636, '3', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["3_line"] = [6, 0.77, 0.173, 0.86, 0.173, 0.016];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["3"] = [5, '3_num', '3_line'];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["4_num"] = [3, 0.744, 0.636, '4', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["4_line"] = [6, 0.77, 0.226, 0.86, 0.226, 0.016];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["4"] = [5, '4_num', '4_line'];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["5_num"] = [3, 0.744, 0.636, '5', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["5_line"] = [6, 0.77, 0.288, 0.86, 0.288, 0.016];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["5"] = [5, '5_num', '5_line'];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["6_num"] = [3, 0.744, 0.636, '6', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["6_line"] = [6, 0.77, 0.348, 0.86, 0.348, 0.016];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["6"] = [5, '6_num', '6_line'];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["7_num"] = [3, 0.744, 0.636, '7', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["7_line"] = [6, 0.77, 0.403, 0.86, 0.403, 0.016];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["7"] = [5, '7_num', '7_line'];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["8_num"] = [3, 0.744, 0.636, '8', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["8_arc"] = [4, 0.370, 0.730, 0.036, 0.036, 0.036];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["8"] = [5, '8_num', '8_arc'];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["9_num"] = [3, 0.744, 0.636, '9', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["9_arc"] = [4, 0.3895, 0.685, 0.036, 0.036, 0.0368];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["9"] = [5, '9_num', '9_arc'];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["10_num"] = [3, 0.744, 0.636, '10', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["10_arc"] = [4, 0.41, 0.64, 0.036, 0.036, 0.036];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["10"] = [5, '10_num', '10_arc'];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["11_num"] = [3, 0.744, 0.636, '11', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["11_arc"] = [4, 0.43, 0.589, 0.036, 0.036, 0.036];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["11"] = [5, '11_num', '11_arc'];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["12_num"] = [3, 0.744, 0.636, '12', 0.164, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["12_arc"] = [4, 0.45, 0.542, 0.036, 0.036, 0.036];
DEV_HIGHLIGHT["HMW-Sen-SC-12-FM"]["12"] = [5, '12_num', '12_arc'];
DEV_LIST.push('ZEL STG RM FST UP4');
DEV_DESCRIPTION["ZEL STG RM FST UP4"] = "ZEL_STG_RM_FST_UP4";
DEV_PATHS["ZEL STG RM FST UP4"] = new Object();
DEV_PATHS["ZEL STG RM FST UP4"]["50"] = "/config/img/devices/50/38_hm-pbi-4-fm_thumb.png";
DEV_PATHS["ZEL STG RM FST UP4"]["250"] = "/config/img/devices/250/38_hm-pbi-4-fm.png";
DEV_HIGHLIGHT["ZEL STG RM FST UP4"] = new Object();
DEV_HIGHLIGHT["ZEL STG RM FST UP4"]["1_Key"] = [3, 0.18, 0.216, '1', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["ZEL STG RM FST UP4"]["1_Kreis"] = [4, 0.265, 0.500, 0.028, 0.028];
DEV_HIGHLIGHT["ZEL STG RM FST UP4"]["1"] = [5, '1_Key', '1_Kreis'];
DEV_HIGHLIGHT["ZEL STG RM FST UP4"]["2_Key"] = [3, 0.18, 0.216, '2', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["ZEL STG RM FST UP4"]["2_Kreis"] = [4, 0.287, 0.465, 0.028, 0.028];
DEV_HIGHLIGHT["ZEL STG RM FST UP4"]["2"] = [5, '2_Key', '2_Kreis'];
DEV_HIGHLIGHT["ZEL STG RM FST UP4"]["3_Key"] = [3, 0.18, 0.216, '3', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["ZEL STG RM FST UP4"]["3_Kreis"] = [4, 0.309, 0.430, 0.028, 0.028];
DEV_HIGHLIGHT["ZEL STG RM FST UP4"]["3"] = [5, '3_Key', '3_Kreis'];
DEV_HIGHLIGHT["ZEL STG RM FST UP4"]["4_Key"] = [3, 0.18, 0.216, '4', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["ZEL STG RM FST UP4"]["4_Kreis"] = [4, 0.331, 0.395, 0.028, 0.028];
DEV_HIGHLIGHT["ZEL STG RM FST UP4"]["4"] = [5, '4_Key', '4_Kreis'];
DEV_LIST.push('263 160');
DEV_DESCRIPTION["263 160"] = "263_160";
DEV_PATHS["263 160"] = new Object();
DEV_PATHS["263 160"]["50"] = "/config/img/devices/50/57_hm-cc-scd_thumb.png";
DEV_PATHS["263 160"]["250"] = "/config/img/devices/250/57_hm-cc-scd.png";
DEV_HIGHLIGHT["263 160"] = new Object();
DEV_LIST.push('HM-RC-Sec3');
DEV_DESCRIPTION["HM-RC-Sec3"] = "HM-RC-Sec3";
DEV_PATHS["HM-RC-Sec3"] = new Object();
DEV_PATHS["HM-RC-Sec3"]["50"] = "/config/img/devices/50/22_hm-rc-sec3-b_thumb.png";
DEV_PATHS["HM-RC-Sec3"]["250"] = "/config/img/devices/250/22_hm-rc-sec3-b.png";
DEV_HIGHLIGHT["HM-RC-Sec3"] = new Object();
DEV_HIGHLIGHT["HM-RC-Sec3"]["1"] = [4, 0.252, 0.2, 0.16, 0.176];
DEV_HIGHLIGHT["HM-RC-Sec3"]["2"] = [4, 0.492, 0.2, 0.16, 0.176];
DEV_HIGHLIGHT["HM-RC-Sec3"]["3"] = [4, 0.34, 0.48, 0.224, 0.248];
DEV_HIGHLIGHT["HM-RC-Sec3"]["1+2"] = [5, '1', '2'];
DEV_LIST.push('HM-ES-PMSw1-Pl');
DEV_DESCRIPTION["HM-ES-PMSw1-Pl"] = "HM-ES-PMSw1-Pl";
DEV_PATHS["HM-ES-PMSw1-Pl"] = new Object();
DEV_PATHS["HM-ES-PMSw1-Pl"]["50"] = "/config/img/devices/50/93_hm-es-pmsw1-pl_thumb.png";
DEV_PATHS["HM-ES-PMSw1-Pl"]["250"] = "/config/img/devices/250/93_hm-es-pmsw1-pl.png";
DEV_HIGHLIGHT["HM-ES-PMSw1-Pl"] = new Object();
DEV_LIST.push('HM-Sen-EP');
DEV_DESCRIPTION["HM-Sen-EP"] = "HM-Sen-EP";
DEV_PATHS["HM-Sen-EP"] = new Object();
DEV_PATHS["HM-Sen-EP"]["50"] = "/config/img/devices/50/48_hm-sen-ep_thumb.png";
DEV_PATHS["HM-Sen-EP"]["250"] = "/config/img/devices/250/48_hm-sen-ep.png";
DEV_HIGHLIGHT["HM-Sen-EP"] = new Object();
DEV_HIGHLIGHT["HM-Sen-EP"]["1_rect"] = [2, 0.14, 0.612, 0.086, 0.05];
DEV_HIGHLIGHT["HM-Sen-EP"]["2_rect"] = [2, 0.14, 0.740, 0.086, 0.05];
DEV_HIGHLIGHT["HM-Sen-EP"]["1_channel"] = [3, 0.44, 0.232, '1', 0.18, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-Sen-EP"]["1"] = [5, '1_channel', '1_rect'];
DEV_HIGHLIGHT["HM-Sen-EP"]["2_channel"] = [3, 0.44, 0.232, '2', 0.18, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-Sen-EP"]["2"] = [5, '2_channel', '2_rect'];
DEV_LIST.push('HM-LC-Bl1PBU-FM');
DEV_DESCRIPTION["HM-LC-Bl1PBU-FM"] = "HM-LC-Bl1PBU-FM";
DEV_PATHS["HM-LC-Bl1PBU-FM"] = new Object();
DEV_PATHS["HM-LC-Bl1PBU-FM"]["50"] = "/config/img/devices/50/PushButton-2ch-wm_thumb.png";
DEV_PATHS["HM-LC-Bl1PBU-FM"]["250"] = "/config/img/devices/250/PushButton-2ch-wm.png";
DEV_HIGHLIGHT["HM-LC-Bl1PBU-FM"] = new Object();
DEV_HIGHLIGHT["HM-LC-Bl1PBU-FM"]["1a"] = [2, 0.244, 0.312, 0.428, 0.168];
DEV_HIGHLIGHT["HM-LC-Bl1PBU-FM"]["1b"] = [2, 0.244, 0.56, 0.428, 0.168];
DEV_HIGHLIGHT["HM-LC-Bl1PBU-FM"]["1"] = [5, '1a', '1b'];
DEV_LIST.push('HM-LC-Dim1T-Pl-2');
DEV_DESCRIPTION["HM-LC-Dim1T-Pl-2"] = "HM-LC-Dim1T-Pl-2";
DEV_PATHS["HM-LC-Dim1T-Pl-2"] = new Object();
DEV_PATHS["HM-LC-Dim1T-Pl-2"]["50"] = "/config/img/devices/50/OM55_DimmerSwitch_thumb.png";
DEV_PATHS["HM-LC-Dim1T-Pl-2"]["250"] = "/config/img/devices/250/OM55_DimmerSwitch.png";
DEV_HIGHLIGHT["HM-LC-Dim1T-Pl-2"] = new Object();
DEV_HIGHLIGHT["HM-LC-Dim1T-Pl-2"]["1_part1"] = [2, 0.548, 0.468, 0.072, 0.052];
DEV_HIGHLIGHT["HM-LC-Dim1T-Pl-2"]["1_part2"] = [2, 0.612, 0.452, 0.028, 0.056];
DEV_HIGHLIGHT["HM-LC-Dim1T-Pl-2"]["1"] = [5, '1_part1', '1_part2'];
DEV_LIST.push('HM-TC-IT-WM-W-EU');
DEV_DESCRIPTION["HM-TC-IT-WM-W-EU"] = "HM-TC-IT-WM-W-EU";
DEV_PATHS["HM-TC-IT-WM-W-EU"] = new Object();
DEV_PATHS["HM-TC-IT-WM-W-EU"]["50"] = "/config/img/devices/50/96_hm-tc-it-wm-w-eu_thumb.png";
DEV_PATHS["HM-TC-IT-WM-W-EU"]["250"] = "/config/img/devices/250/96_hm-tc-it-wm-w-eu.png";
DEV_HIGHLIGHT["HM-TC-IT-WM-W-EU"] = new Object();
DEV_LIST.push('HM-EM-CCM');
DEV_DESCRIPTION["HM-EM-CCM"] = "HM-EM-CCM";
DEV_PATHS["HM-EM-CCM"] = new Object();
DEV_PATHS["HM-EM-CCM"]["50"] = "/config/img/devices/50/44_hm-em-ccm_thumb.png";
DEV_PATHS["HM-EM-CCM"]["250"] = "/config/img/devices/250/44_hm-em-ccm.png";
DEV_HIGHLIGHT["HM-EM-CCM"] = new Object();
DEV_LIST.push('HM-CC-VD');
DEV_DESCRIPTION["HM-CC-VD"] = "HM-CC-VD";
DEV_PATHS["HM-CC-VD"] = new Object();
DEV_PATHS["HM-CC-VD"]["50"] = "/config/img/devices/50/43_hm-cc-vd_thumb.png";
DEV_PATHS["HM-CC-VD"]["250"] = "/config/img/devices/250/43_hm-cc-vd.png";
DEV_HIGHLIGHT["HM-CC-VD"] = new Object();
DEV_LIST.push('HM-Sec-MDIR-2');
DEV_DESCRIPTION["HM-Sec-MDIR-2"] = "HM-Sec-MDIR";
DEV_PATHS["HM-Sec-MDIR-2"] = new Object();
DEV_PATHS["HM-Sec-MDIR-2"]["50"] = "/config/img/devices/50/50_hm-sec-mdir_thumb.png";
DEV_PATHS["HM-Sec-MDIR-2"]["250"] = "/config/img/devices/250/50_hm-sec-mdir.png";
DEV_HIGHLIGHT["HM-Sec-MDIR-2"] = new Object();
DEV_LIST.push('HM-LC-Dim1T-FM-LF');
DEV_DESCRIPTION["HM-LC-Dim1T-FM-LF"] = "HM-LC-Dim1T-FM";
DEV_PATHS["HM-LC-Dim1T-FM-LF"] = new Object();
DEV_PATHS["HM-LC-Dim1T-FM-LF"]["50"] = "/config/img/devices/50/114_hm-lc-dim1t-fm-lf_thumb_3.png";
DEV_PATHS["HM-LC-Dim1T-FM-LF"]["250"] = "/config/img/devices/250/114_hm-lc-dim1t-fm-lf_3.png";
DEV_HIGHLIGHT["HM-LC-Dim1T-FM-LF"] = new Object();
DEV_LIST.push('HMW-WSE-SM');
DEV_DESCRIPTION["HMW-WSE-SM"] = "HMW-WSE-SM";
DEV_PATHS["HMW-WSE-SM"] = new Object();
DEV_PATHS["HMW-WSE-SM"]["50"] = "/config/img/devices/50/31_hmw-wse-sm_thumb.png";
DEV_PATHS["HMW-WSE-SM"]["250"] = "/config/img/devices/250/31_hmw-wse-sm.png";
DEV_HIGHLIGHT["HMW-WSE-SM"] = new Object();
DEV_LIST.push('263 158');
DEV_DESCRIPTION["263 158"] = "263_158";
DEV_PATHS["263 158"] = new Object();
DEV_PATHS["263 158"]["50"] = "/config/img/devices/50/TH_CS_thumb.png";
DEV_PATHS["263 158"]["250"] = "/config/img/devices/250/TH_CS.png";
DEV_HIGHLIGHT["263 158"] = new Object();
DEV_LIST.push('HM-ES-PMSw1-Pl-DN-R5');
DEV_DESCRIPTION["HM-ES-PMSw1-Pl-DN-R5"] = "HM-ES-PMSw1-Pl-DN-R5";
DEV_PATHS["HM-ES-PMSw1-Pl-DN-R5"] = new Object();
DEV_PATHS["HM-ES-PMSw1-Pl-DN-R5"]["50"] = "/config/img/devices/50/107_hm-es-pmsw1-pl-R5_thumb.png";
DEV_PATHS["HM-ES-PMSw1-Pl-DN-R5"]["250"] = "/config/img/devices/250/107_hm-es-pmsw1-pl-R5.png";
DEV_HIGHLIGHT["HM-ES-PMSw1-Pl-DN-R5"] = new Object();
DEV_LIST.push('HM-SCI-3-FM');
DEV_DESCRIPTION["HM-SCI-3-FM"] = "HM-SCI-3-FM";
DEV_PATHS["HM-SCI-3-FM"] = new Object();
DEV_PATHS["HM-SCI-3-FM"]["50"] = "/config/img/devices/50/67_hm-sci-3-fm_thumb.png";
DEV_PATHS["HM-SCI-3-FM"]["250"] = "/config/img/devices/250/67_hm-sci-3-fm.png";
DEV_HIGHLIGHT["HM-SCI-3-FM"] = new Object();
DEV_HIGHLIGHT["HM-SCI-3-FM"]["1_Key"] = [3, 0.18, 0.216, '1', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-SCI-3-FM"]["1_Kreis"] = [4, 0.220, 0.480, 0.028, 0.028];
DEV_HIGHLIGHT["HM-SCI-3-FM"]["1"] = [5, '1_Key', '1_Kreis'];
DEV_HIGHLIGHT["HM-SCI-3-FM"]["2_Key"] = [3, 0.18, 0.216, '2', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-SCI-3-FM"]["2_Kreis"] = [4, 0.265, 0.405, 0.028, 0.028];
DEV_HIGHLIGHT["HM-SCI-3-FM"]["2"] = [5, '2_Key', '2_Kreis'];
DEV_HIGHLIGHT["HM-SCI-3-FM"]["3_Key"] = [3, 0.18, 0.216, '3', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-SCI-3-FM"]["3_Kreis"] = [4, 0.310, 0.33, 0.028, 0.028];
DEV_HIGHLIGHT["HM-SCI-3-FM"]["3"] = [5, '3_Key', '3_Kreis'];
DEV_LIST.push('HM-LC-Sw1-Pl');
DEV_DESCRIPTION["HM-LC-Sw1-Pl"] = "HM-LC-Sw1-Pl";
DEV_PATHS["HM-LC-Sw1-Pl"] = new Object();
DEV_PATHS["HM-LC-Sw1-Pl"]["50"] = "/config/img/devices/50/OM55_DimmerSwitch_thumb.png";
DEV_PATHS["HM-LC-Sw1-Pl"]["250"] = "/config/img/devices/250/OM55_DimmerSwitch.png";
DEV_HIGHLIGHT["HM-LC-Sw1-Pl"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw1-Pl"]["1_part1"] = [2, 0.548, 0.468, 0.072, 0.052];
DEV_HIGHLIGHT["HM-LC-Sw1-Pl"]["1_part2"] = [2, 0.612, 0.452, 0.028, 0.056];
DEV_HIGHLIGHT["HM-LC-Sw1-Pl"]["1"] = [5, '1_part1', '1_part2'];
DEV_LIST.push('HMW-LC-Bl1-DR');
DEV_DESCRIPTION["HMW-LC-Bl1-DR"] = "HMW-LC-Bl1-DR";
DEV_PATHS["HMW-LC-Bl1-DR"] = new Object();
DEV_PATHS["HMW-LC-Bl1-DR"]["50"] = "/config/img/devices/50/27_hmw-lc-bl1-dr_thumb.png";
DEV_PATHS["HMW-LC-Bl1-DR"]["250"] = "/config/img/devices/250/27_hmw-lc-bl1-dr.png";
DEV_HIGHLIGHT["HMW-LC-Bl1-DR"] = new Object();
DEV_HIGHLIGHT["HMW-LC-Bl1-DR"]["1"] = [2, 0.452, 0.772, 0.044, 0.06];
DEV_HIGHLIGHT["HMW-LC-Bl1-DR"]["2"] = [2, 0.5, 0.772, 0.048, 0.06];
DEV_HIGHLIGHT["HMW-LC-Bl1-DR"]["3"] = [2, 0.452, 0.388, 0.096, 0.06];
DEV_LIST.push('HM-Sec-SD');
DEV_DESCRIPTION["HM-Sec-SD"] = "HM-Sec-SD";
DEV_PATHS["HM-Sec-SD"] = new Object();
DEV_PATHS["HM-Sec-SD"]["50"] = "/config/img/devices/50/51_hm-sec-sd_thumb.png";
DEV_PATHS["HM-Sec-SD"]["250"] = "/config/img/devices/250/51_hm-sec-sd.png";
DEV_HIGHLIGHT["HM-Sec-SD"] = new Object();
DEV_LIST.push('HM-SwI-3-FM');
DEV_DESCRIPTION["HM-SwI-3-FM"] = "HM-SwI-3-FM";
DEV_PATHS["HM-SwI-3-FM"] = new Object();
DEV_PATHS["HM-SwI-3-FM"]["50"] = "/config/img/devices/50/39_hm-swi-3-fm_thumb.png";
DEV_PATHS["HM-SwI-3-FM"]["250"] = "/config/img/devices/250/39_hm-swi-3-fm.png";
DEV_HIGHLIGHT["HM-SwI-3-FM"] = new Object();
DEV_HIGHLIGHT["HM-SwI-3-FM"]["1_Key"] = [3, 0.18, 0.216, '1', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-SwI-3-FM"]["1_Kreis"] = [4, 0.220, 0.480, 0.028, 0.028];
DEV_HIGHLIGHT["HM-SwI-3-FM"]["1"] = [5, '1_Key', '1_Kreis'];
DEV_HIGHLIGHT["HM-SwI-3-FM"]["2_Key"] = [3, 0.18, 0.216, '2', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-SwI-3-FM"]["2_Kreis"] = [4, 0.265, 0.405, 0.028, 0.028];
DEV_HIGHLIGHT["HM-SwI-3-FM"]["2"] = [5, '2_Key', '2_Kreis'];
DEV_HIGHLIGHT["HM-SwI-3-FM"]["3_Key"] = [3, 0.18, 0.216, '3', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-SwI-3-FM"]["3_Kreis"] = [4, 0.310, 0.33, 0.028, 0.028];
DEV_HIGHLIGHT["HM-SwI-3-FM"]["3"] = [5, '3_Key', '3_Kreis'];
DEV_LIST.push('HM-LC-Sw4-PCB-2');
DEV_DESCRIPTION["HM-LC-Sw4-PCB-2"] = "HM-LC-Sw4-PCB";
DEV_PATHS["HM-LC-Sw4-PCB-2"] = new Object();
DEV_PATHS["HM-LC-Sw4-PCB-2"]["50"] = "/config/img/devices/50/46_hm-lc-sw4-pcb_thumb.png";
DEV_PATHS["HM-LC-Sw4-PCB-2"]["250"] = "/config/img/devices/250/46_hm-lc-sw4-pcb.png";
DEV_HIGHLIGHT["HM-LC-Sw4-PCB-2"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw4-PCB-2"]["Channel1"] = [2, 0.176, 0.78, 0.068, 0.064];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB-2"]["Channel2"] = [2, 0.244, 0.78, 0.068, 0.064];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB-2"]["Channel3"] = [2, 0.312, 0.78, 0.068, 0.064];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB-2"]["Channel4"] = [2, 0.38, 0.78, 0.068, 0.064];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB-2"]["1_val"] = [3, 0.372, 0.288, '1', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB-2"]["2_val"] = [3, 0.372, 0.288, '2', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB-2"]["3_val"] = [3, 0.372, 0.288, '3', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB-2"]["4_val"] = [3, 0.372, 0.288, '4', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB-2"]["Circle1"] = [4, 0.512, 0.784, 0.044, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB-2"]["Circle2"] = [4, 0.570, 0.784, 0.044, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB-2"]["Circle3"] = [4, 0.628, 0.784, 0.044, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB-2"]["Circle4"] = [4, 0.686, 0.784, 0.044, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB-2"]["1"] = [5, 'Channel1', '1_val', 'Circle1'];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB-2"]["2"] = [5, 'Channel2', '2_val', 'Circle2'];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB-2"]["3"] = [5, 'Channel3', '3_val', 'Circle3'];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB-2"]["4"] = [5, 'Channel4', '4_val', 'Circle4'];
DEV_LIST.push('HM-LC-Sw4-SM-ATmega168');
DEV_DESCRIPTION["HM-LC-Sw4-SM-ATmega168"] = "HM-LC-Sw4-SM-ATmega168";
DEV_PATHS["HM-LC-Sw4-SM-ATmega168"] = new Object();
DEV_PATHS["HM-LC-Sw4-SM-ATmega168"]["50"] = "/config/img/devices/50/3_hm-lc-sw4-sm_thumb.png";
DEV_PATHS["HM-LC-Sw4-SM-ATmega168"]["250"] = "/config/img/devices/250/3_hm-lc-sw4-sm.png";
DEV_HIGHLIGHT["HM-LC-Sw4-SM-ATmega168"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw4-SM-ATmega168"]["1_Part1"] = [6, 0.136, 0.896, 0.136, 0.98, 0.012];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-ATmega168"]["1_Part2"] = [6, 0.136, 0.98, 0.096, 0.916, 0.012];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-ATmega168"]["1_Part3"] = [6, 0.136, 0.98, 0.176, 0.916, 0.012];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-ATmega168"]["1_Arrow"] = [5, '1_Part1', '1_Part2', '1_Part3'];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-ATmega168"]["2_Arrow"] = [7, '1_Arrow', 0.164, 0];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-ATmega168"]["3_Arrow"] = [7, '1_Arrow', 0.328, 0];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-ATmega168"]["4_Arrow"] = [7, '1_Arrow', 0.492, 0];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-ATmega168"]["1_Key"] = [4, 0.244, 0.372, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-ATmega168"]["2_Key"] = [4, 0.328, 0.372, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-ATmega168"]["3_Key"] = [4, 0.404, 0.372, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-ATmega168"]["4_Key"] = [4, 0.484, 0.372, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-ATmega168"]["1"] = [5, '1_Arrow', '1_Key'];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-ATmega168"]["2"] = [5, '2_Arrow', '2_Key'];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-ATmega168"]["3"] = [5, '3_Arrow', '3_Key'];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-ATmega168"]["4"] = [5, '4_Arrow', '4_Key'];
DEV_LIST.push('HM-PB-2-WM');
DEV_DESCRIPTION["HM-PB-2-WM"] = "HM-PB-2-WM";
DEV_PATHS["HM-PB-2-WM"] = new Object();
DEV_PATHS["HM-PB-2-WM"]["50"] = "/config/img/devices/50/PushButton-2ch-wm_thumb.png";
DEV_PATHS["HM-PB-2-WM"]["250"] = "/config/img/devices/250/PushButton-2ch-wm.png";
DEV_HIGHLIGHT["HM-PB-2-WM"] = new Object();
DEV_HIGHLIGHT["HM-PB-2-WM"]["2"] = [2, 0.244, 0.312, 0.428, 0.168];
DEV_HIGHLIGHT["HM-PB-2-WM"]["1"] = [2, 0.244, 0.56, 0.428, 0.168];
DEV_HIGHLIGHT["HM-PB-2-WM"]["1+2"] = [2, 0.244, 0.308, 0.428, 0.416];
DEV_LIST.push('HM-RC-4-3-D');
DEV_DESCRIPTION["HM-RC-4-3-D"] = "HM-RC-4";
DEV_PATHS["HM-RC-4-3-D"] = new Object();
DEV_PATHS["HM-RC-4-3-D"]["50"] = "/config/img/devices/50/84_hm-rc-4-x_thumb.png";
DEV_PATHS["HM-RC-4-3-D"]["250"] = "/config/img/devices/250/116_hm-rc-4-3_brc-h3.png";
DEV_HIGHLIGHT["HM-RC-4-3-D"] = new Object();
DEV_LIST.push('HM-OU-CFM-Pl');
DEV_DESCRIPTION["HM-OU-CFM-Pl"] = "HM-OU-CFM-Pl";
DEV_PATHS["HM-OU-CFM-Pl"] = new Object();
DEV_PATHS["HM-OU-CFM-Pl"]["50"] = "/config/img/devices/50/60_hm-ou-cf-pl_thumb.png";
DEV_PATHS["HM-OU-CFM-Pl"]["250"] = "/config/img/devices/250/60_hm-ou-cf-pl.png";
DEV_HIGHLIGHT["HM-OU-CFM-Pl"] = new Object();
DEV_HIGHLIGHT["HM-OU-CFM-Pl"]["Light_circle"] = [4, 0.688, 0.224, 0.118, 0.112];
DEV_HIGHLIGHT["HM-OU-CFM-Pl"]["Light_beam_1"] = [6, 0.628, 0.28, 0.656, 0.28, 0.016];
DEV_HIGHLIGHT["HM-OU-CFM-Pl"]["Light_beam_2"] = [6, 0.656, 0.2, 0.68, 0.22, 0.016];
DEV_HIGHLIGHT["HM-OU-CFM-Pl"]["Light_beam_3"] = [6, 0.74, 0.168, 0.74, 0.196, 0.016];
DEV_HIGHLIGHT["HM-OU-CFM-Pl"]["Light_beam_4"] = [6, 0.82, 0.196, 0.8, 0.216, 0.016];
DEV_HIGHLIGHT["HM-OU-CFM-Pl"]["Light_beam_5"] = [6, 0.824, 0.28, 0.856, 0.28, 0.016];
DEV_HIGHLIGHT["HM-OU-CFM-Pl"]["Light_beam_6"] = [6, 0.68, 0.34, 0.664, 0.36, 0.016];
DEV_HIGHLIGHT["HM-OU-CFM-Pl"]["Light_beam_7"] = [6, 0.74, 0.364, 0.74, 0.392, 0.016];
DEV_HIGHLIGHT["HM-OU-CFM-Pl"]["Light_beam_8"] = [6, 0.8, 0.34, 0.82, 0.36, 0.016];
DEV_HIGHLIGHT["HM-OU-CFM-Pl"]["1"] = [5, 'Light_circle', 'Light_beam_1', 'Light_beam_2', 'Light_beam_3', 'Light_beam_4', 'Light_beam_5', 'Light_beam_6', 'Light_beam_7', 'Light_beam_8'];
DEV_HIGHLIGHT["HM-OU-CFM-Pl"]["SP_1"] = [6, 0.644, 0.676, 0.672, 0.676, 0.016];
DEV_HIGHLIGHT["HM-OU-CFM-Pl"]["SP_2"] = [6, 0.672, 0.676, 0.672, 0.816, 0.016];
DEV_HIGHLIGHT["HM-OU-CFM-Pl"]["SP_3"] = [6, 0.644, 0.816, 0.672, 0.816, 0.016];
DEV_HIGHLIGHT["HM-OU-CFM-Pl"]["SP_4"] = [6, 0.644, 0.676, 0.644, 0.816, 0.016];
DEV_HIGHLIGHT["HM-OU-CFM-Pl"]["SP_5"] = [6, 0.672, 0.676, 0.716, 0.632, 0.016];
DEV_HIGHLIGHT["HM-OU-CFM-Pl"]["SP_6"] = [6, 0.716, 0.632, 0.716, 0.86, 0.016];
DEV_HIGHLIGHT["HM-OU-CFM-Pl"]["SP_7"] = [6, 0.672, 0.816, 0.716, 0.86, 0.016];
DEV_HIGHLIGHT["HM-OU-CFM-Pl"]["SP_beam_1"] = [6, 0.75, 0.7, 0.832, 0.632, 0.016];
DEV_HIGHLIGHT["HM-OU-CFM-Pl"]["SP_beam_2"] = [6, 0.75, 0.748, 0.832, 0.748, 0.016];
DEV_HIGHLIGHT["HM-OU-CFM-Pl"]["SP_beam_3"] = [6, 0.75, 0.796, 0.832, 0.86, 0.016];
DEV_HIGHLIGHT["HM-OU-CFM-Pl"]["2"] = [5, 'SP_1', 'SP_2', 'SP_3', 'SP_4', 'SP_5', 'SP_6', 'SP_7', 'SP_beam_1', 'SP_beam_2', 'SP_beam_3'];
DEV_LIST.push('HM-Sec-MDIR');
DEV_DESCRIPTION["HM-Sec-MDIR"] = "HM-Sec-MDIR";
DEV_PATHS["HM-Sec-MDIR"] = new Object();
DEV_PATHS["HM-Sec-MDIR"]["50"] = "/config/img/devices/50/50_hm-sec-mdir_thumb.png";
DEV_PATHS["HM-Sec-MDIR"]["250"] = "/config/img/devices/250/50_hm-sec-mdir.png";
DEV_HIGHLIGHT["HM-Sec-MDIR"] = new Object();
DEV_LIST.push('ZEL STG RM FFK');
DEV_DESCRIPTION["ZEL STG RM FFK"] = "ZEL_STG_RM_FFK";
DEV_PATHS["ZEL STG RM FFK"] = new Object();
DEV_PATHS["ZEL STG RM FFK"]["50"] = "/config/img/devices/50/16_hm-sec-sc_thumb.png";
DEV_PATHS["ZEL STG RM FFK"]["250"] = "/config/img/devices/250/16_hm-sec-sc.png";
DEV_HIGHLIGHT["ZEL STG RM FFK"] = new Object();
DEV_LIST.push('HM-LC-Sw1-Ba-PCB');
DEV_DESCRIPTION["HM-LC-Sw1-Ba-PCB"] = "HM-LC-Sw1-Ba-PCB";
DEV_PATHS["HM-LC-Sw1-Ba-PCB"] = new Object();
DEV_PATHS["HM-LC-Sw1-Ba-PCB"]["50"] = "/config/img/devices/50/77_hm-lc-sw1-ba-pcb_thumb.png";
DEV_PATHS["HM-LC-Sw1-Ba-PCB"]["250"] = "/config/img/devices/250/77_hm-lc-sw1-ba-pcb.png";
DEV_HIGHLIGHT["HM-LC-Sw1-Ba-PCB"] = new Object();
DEV_LIST.push('HM-LC-Dim1PWM-CV');
DEV_DESCRIPTION["HM-LC-Dim1PWM-CV"] = "HM-LC-Dim1PWM-CV";
DEV_PATHS["HM-LC-Dim1PWM-CV"] = new Object();
DEV_PATHS["HM-LC-Dim1PWM-CV"]["50"] = "/config/img/devices/50/2_hm-lc-dim1l-cv_thumb.png";
DEV_PATHS["HM-LC-Dim1PWM-CV"]["250"] = "/config/img/devices/250/79_hm-lc-dim1pwm-cv.png";
DEV_HIGHLIGHT["HM-LC-Dim1PWM-CV"] = new Object();
DEV_LIST.push('HM-LC-Bl1-FM');
DEV_DESCRIPTION["HM-LC-Bl1-FM"] = "HM-LC-Bl1-FM";
DEV_PATHS["HM-LC-Bl1-FM"] = new Object();
DEV_PATHS["HM-LC-Bl1-FM"]["50"] = "/config/img/devices/50/7_hm-lc-bl1-fm_thumb.png";
DEV_PATHS["HM-LC-Bl1-FM"]["250"] = "/config/img/devices/250/7_hm-lc-bl1-fm.png";
DEV_HIGHLIGHT["HM-LC-Bl1-FM"] = new Object();
DEV_LIST.push('HM-LC-Sw1-SM-2');
DEV_DESCRIPTION["HM-LC-Sw1-SM-2"] = "HM-LC-Sw1-SM";
DEV_PATHS["HM-LC-Sw1-SM-2"] = new Object();
DEV_PATHS["HM-LC-Sw1-SM-2"]["50"] = "/config/img/devices/50/8_hm-lc-sw1-sm_thumb.png";
DEV_PATHS["HM-LC-Sw1-SM-2"]["250"] = "/config/img/devices/250/8_hm-lc-sw1-sm.png";
DEV_HIGHLIGHT["HM-LC-Sw1-SM-2"] = new Object();
DEV_LIST.push('HM-WDS30-OT2-SM');
DEV_DESCRIPTION["HM-WDS30-OT2-SM"] = "HM-WDS30-OT2-SM";
DEV_PATHS["HM-WDS30-OT2-SM"] = new Object();
DEV_PATHS["HM-WDS30-OT2-SM"]["50"] = "/config/img/devices/50/IP65_G201_thumb.png";
DEV_PATHS["HM-WDS30-OT2-SM"]["250"] = "/config/img/devices/250/IP65_G201.png";
DEV_HIGHLIGHT["HM-WDS30-OT2-SM"] = new Object();
DEV_LIST.push('HM-RC-Key4-2');
DEV_DESCRIPTION["HM-RC-Key4-2"] = "HM-RC-Key4-2";
DEV_PATHS["HM-RC-Key4-2"] = new Object();
DEV_PATHS["HM-RC-Key4-2"]["50"] = "/config/img/devices/50/85_hm-rc-key4-2_thumb.png";
DEV_PATHS["HM-RC-Key4-2"]["250"] = "/config/img/devices/250/85_hm-rc-key4-2.png";
DEV_HIGHLIGHT["HM-RC-Key4-2"] = new Object();
DEV_HIGHLIGHT["HM-RC-Key4-2"]["arrow_part1"] = [6, 0.312, 0.288, 0.416, 0.288, 0.012];
DEV_HIGHLIGHT["HM-RC-Key4-2"]["arrow_part2"] = [6, 0.312, 0.288, 0.352, 0.248, 0.012];
DEV_HIGHLIGHT["HM-RC-Key4-2"]["arrow_part3"] = [6, 0.312, 0.288, 0.352, 0.328, 0.012];
DEV_HIGHLIGHT["HM-RC-Key4-2"]["1_Arrow"] = [5, 'arrow_part1', 'arrow_part2', 'arrow_part3'];
DEV_HIGHLIGHT["HM-RC-Key4-2"]["2_Arrow"] = [7, '1_Arrow', 0.028, 0.156];
DEV_HIGHLIGHT["HM-RC-Key4-2"]["3_Arrow"] = [7, '1_Arrow', 0.028, 0.312];
DEV_HIGHLIGHT["HM-RC-Key4-2"]["4_Arrow"] = [7, '1_Arrow', 0.012, 0.468];
DEV_HIGHLIGHT["HM-RC-Key4-2"]["1"] = [5, '2_Arrow'];
DEV_HIGHLIGHT["HM-RC-Key4-2"]["2"] = [5, '1_Arrow'];
DEV_HIGHLIGHT["HM-RC-Key4-2"]["3"] = [5, '4_Arrow'];
DEV_HIGHLIGHT["HM-RC-Key4-2"]["4"] = [5, '3_Arrow'];
DEV_HIGHLIGHT["HM-RC-Key4-2"]["1+2"] = [5, '1_Arrow', '2_Arrow'];
DEV_HIGHLIGHT["HM-RC-Key4-2"]["3+4"] = [5, '3_Arrow', '4_Arrow'];
DEV_LIST.push('HM-LC-Dim1L-Pl-2');
DEV_DESCRIPTION["HM-LC-Dim1L-Pl-2"] = "HM-LC-Dim1L-Pl-2";
DEV_PATHS["HM-LC-Dim1L-Pl-2"] = new Object();
DEV_PATHS["HM-LC-Dim1L-Pl-2"]["50"] = "/config/img/devices/50/OM55_DimmerSwitch_thumb.png";
DEV_PATHS["HM-LC-Dim1L-Pl-2"]["250"] = "/config/img/devices/250/OM55_DimmerSwitch.png";
DEV_HIGHLIGHT["HM-LC-Dim1L-Pl-2"] = new Object();
DEV_HIGHLIGHT["HM-LC-Dim1L-Pl-2"]["1_part1"] = [2, 0.548, 0.468, 0.072, 0.052];
DEV_HIGHLIGHT["HM-LC-Dim1L-Pl-2"]["1_part2"] = [2, 0.612, 0.452, 0.028, 0.056];
DEV_HIGHLIGHT["HM-LC-Dim1L-Pl-2"]["1"] = [5, '1_part1', '1_part2'];
DEV_LIST.push('HM-LC-Dim1T-Pl');
DEV_DESCRIPTION["HM-LC-Dim1T-Pl"] = "HM-LC-Dim1T-Pl";
DEV_PATHS["HM-LC-Dim1T-Pl"] = new Object();
DEV_PATHS["HM-LC-Dim1T-Pl"]["50"] = "/config/img/devices/50/OM55_DimmerSwitch_thumb.png";
DEV_PATHS["HM-LC-Dim1T-Pl"]["250"] = "/config/img/devices/250/OM55_DimmerSwitch.png";
DEV_HIGHLIGHT["HM-LC-Dim1T-Pl"] = new Object();
DEV_HIGHLIGHT["HM-LC-Dim1T-Pl"]["1_part1"] = [2, 0.548, 0.468, 0.072, 0.052];
DEV_HIGHLIGHT["HM-LC-Dim1T-Pl"]["1_part2"] = [2, 0.612, 0.452, 0.028, 0.056];
DEV_HIGHLIGHT["HM-LC-Dim1T-Pl"]["1"] = [5, '1_part1', '1_part2'];
DEV_LIST.push('HM-Sys-sRP-Pl');
DEV_DESCRIPTION["HM-Sys-sRP-Pl"] = "HM-Sys-sRP-Pl";
DEV_PATHS["HM-Sys-sRP-Pl"] = new Object();
DEV_PATHS["HM-Sys-sRP-Pl"]["50"] = "/config/img/devices/50/OM55_DimmerSwitch_thumb.png";
DEV_PATHS["HM-Sys-sRP-Pl"]["250"] = "/config/img/devices/250/OM55_DimmerSwitch.png";
DEV_HIGHLIGHT["HM-Sys-sRP-Pl"] = new Object();
DEV_LIST.push('HMW-WSTH-SM');
DEV_DESCRIPTION["HMW-WSTH-SM"] = "HMW-WSTH-SM";
DEV_PATHS["HMW-WSTH-SM"] = new Object();
DEV_PATHS["HMW-WSTH-SM"]["50"] = "/config/img/devices/50/32_hmw-wsth-sm_thumb.png";
DEV_PATHS["HMW-WSTH-SM"]["250"] = "/config/img/devices/250/32_hmw-wsth-sm.png";
DEV_HIGHLIGHT["HMW-WSTH-SM"] = new Object();
DEV_LIST.push('HMW-IO-12-Sw14-DR');
DEV_DESCRIPTION["HMW-IO-12-Sw14-DR"] = "HMW-IO-12-Sw14-DR";
DEV_PATHS["HMW-IO-12-Sw14-DR"] = new Object();
DEV_PATHS["HMW-IO-12-Sw14-DR"]["50"] = "/config/img/devices/50/71_hmw-io-12-sw14-dr_thumb.png";
DEV_PATHS["HMW-IO-12-Sw14-DR"]["250"] = "/config/img/devices/250/71_hmw-io-12-sw14-dr.png";
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"] = new Object();
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["1"] = [2, 0.106, 0.398, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["2"] = [2, 0.230, 0.398, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["3"] = [2, 0.294, 0.398, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["4"] = [2, 0.422, 0.398, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["5"] = [2, 0.482, 0.398, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["6"] = [2, 0.602, 0.398, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["7"] = [2, 0.046, 0.458, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["8"] = [2, 0.106, 0.458, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["9"] = [2, 0.230, 0.458, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["10"] = [2, 0.294, 0.458, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["11"] = [2, 0.422, 0.458, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["12"] = [2, 0.482, 0.458, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["13"] = [2, 0.602, 0.458, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["14"] = [2, 0.666, 0.458, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["15"] = [2, 0.230, 0.69, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["16"] = [2, 0.294, 0.69, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["17"] = [2, 0.422, 0.69, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["18"] = [2, 0.482, 0.69, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["19"] = [2, 0.602, 0.69, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["20"] = [2, 0.666, 0.69, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["21"] = [2, 0.230, 0.755, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["22"] = [2, 0.294, 0.755, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["23"] = [2, 0.422, 0.755, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["24"] = [2, 0.482, 0.755, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["25"] = [2, 0.602, 0.755, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw14-DR"]["26"] = [2, 0.666, 0.755, 0.06, 0.06];
DEV_LIST.push('HM-Sen-RD-O');
DEV_DESCRIPTION["HM-Sen-RD-O"] = "HM-Sen-RD-O";
DEV_PATHS["HM-Sen-RD-O"] = new Object();
DEV_PATHS["HM-Sen-RD-O"]["50"] = "/config/img/devices/50/87_hm-sen-rd-o_thumb.png";
DEV_PATHS["HM-Sen-RD-O"]["250"] = "/config/img/devices/250/87_hm-sen-rd-o.png";
DEV_HIGHLIGHT["HM-Sen-RD-O"] = new Object();
DEV_LIST.push('263 155');
DEV_DESCRIPTION["263 155"] = "263_155";
DEV_PATHS["263 155"] = new Object();
DEV_PATHS["263 155"]["50"] = "/config/img/devices/50/70_hm-pb-4dis-wm_thumb.png";
DEV_PATHS["263 155"]["250"] = "/config/img/devices/250/70_hm-pb-4dis-wm.png";
DEV_HIGHLIGHT["263 155"] = new Object();
DEV_HIGHLIGHT["263 155"]["2"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["263 155"]["1"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["263 155"]["4"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["263 155"]["3"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["263 155"]["6"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["263 155"]["5"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["263 155"]["8"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["263 155"]["7"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["263 155"]["10"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["263 155"]["9"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["263 155"]["12"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["263 155"]["11"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["263 155"]["14"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["263 155"]["13"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["263 155"]["16"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["263 155"]["15"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["263 155"]["18"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["263 155"]["17"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["263 155"]["20"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["263 155"]["19"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_LIST.push('HM-Dis-WM55');
DEV_DESCRIPTION["HM-Dis-WM55"] = "HM-Dis-WM55";
DEV_PATHS["HM-Dis-WM55"] = new Object();
DEV_PATHS["HM-Dis-WM55"]["50"] = "/config/img/devices/50/97_hm-dis-wm55_thumb.png";
DEV_PATHS["HM-Dis-WM55"]["250"] = "/config/img/devices/250/97_hm-dis-wm55.png";
DEV_HIGHLIGHT["HM-Dis-WM55"] = new Object();
DEV_LIST.push('HM-PB-2-WM55-2');
DEV_DESCRIPTION["HM-PB-2-WM55-2"] = "HM-PB-2-WM55";
DEV_PATHS["HM-PB-2-WM55-2"] = new Object();
DEV_PATHS["HM-PB-2-WM55-2"]["50"] = "/config/img/devices/50/75_hm-pb-2-wm55_thumb.png";
DEV_PATHS["HM-PB-2-WM55-2"]["250"] = "/config/img/devices/250/75_hm-pb-2-wm55.png";
DEV_HIGHLIGHT["HM-PB-2-WM55-2"] = new Object();
DEV_HIGHLIGHT["HM-PB-2-WM55-2"]["2"] = [2, 0.204, 0.23, 0.546, 0.128];
DEV_HIGHLIGHT["HM-PB-2-WM55-2"]["1"] = [2, 0.204, 0.65, 0.546, 0.128];
DEV_LIST.push('HM-WS550STH-O');
DEV_DESCRIPTION["HM-WS550STH-O"] = "HM-WS550STH-O";
DEV_PATHS["HM-WS550STH-O"] = new Object();
DEV_PATHS["HM-WS550STH-O"]["50"] = "/config/img/devices/50/TH_CS_thumb.png";
DEV_PATHS["HM-WS550STH-O"]["250"] = "/config/img/devices/250/TH_CS.png";
DEV_HIGHLIGHT["HM-WS550STH-O"] = new Object();
DEV_LIST.push('263_149_/_263_150');
DEV_DESCRIPTION["263_149_/_263_150"] = "263_149_/_263_150";
DEV_PATHS["263_149_/_263_150"] = new Object();
DEV_PATHS["263_149_/_263_150"]["50"] = "/config/img/devices/50/hm_resc-win-pcb-sc_thumb.png";
DEV_PATHS["263_149_/_263_150"]["250"] = "/config/img/devices/250/hm_resc-win-pcb-sc.png";
DEV_HIGHLIGHT["263_149_/_263_150"] = new Object();
DEV_LIST.push('HM-RC-Sec3-B');
DEV_DESCRIPTION["HM-RC-Sec3-B"] = "HM-RC-Sec3-B";
DEV_PATHS["HM-RC-Sec3-B"] = new Object();
DEV_PATHS["HM-RC-Sec3-B"]["50"] = "/config/img/devices/50/22_hm-rc-sec3-b_thumb.png";
DEV_PATHS["HM-RC-Sec3-B"]["250"] = "/config/img/devices/250/22_hm-rc-sec3-b.png";
DEV_HIGHLIGHT["HM-RC-Sec3-B"] = new Object();
DEV_HIGHLIGHT["HM-RC-Sec3-B"]["1"] = [4, 0.252, 0.2, 0.16, 0.176];
DEV_HIGHLIGHT["HM-RC-Sec3-B"]["2"] = [4, 0.492, 0.2, 0.16, 0.176];
DEV_HIGHLIGHT["HM-RC-Sec3-B"]["3"] = [4, 0.34, 0.48, 0.224, 0.248];
DEV_HIGHLIGHT["HM-RC-Sec3-B"]["1+2"] = [5, '1', '2'];
DEV_LIST.push('HMW-Sen-SC-12-DR');
DEV_DESCRIPTION["HMW-Sen-SC-12-DR"] = "HMW-Sen-SC-12-DR";
DEV_PATHS["HMW-Sen-SC-12-DR"] = new Object();
DEV_PATHS["HMW-Sen-SC-12-DR"]["50"] = "/config/img/devices/50/56_hmw-sen-sc-12-dr_thumb.png";
DEV_PATHS["HMW-Sen-SC-12-DR"]["250"] = "/config/img/devices/250/56_hmw-sen-sc-12-dr.png";
DEV_HIGHLIGHT["HMW-Sen-SC-12-DR"] = new Object();
DEV_HIGHLIGHT["HMW-Sen-SC-12-DR"]["1"] = [2, 0.244, 0.688, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-Sen-SC-12-DR"]["2"] = [2, 0.304, 0.688, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-Sen-SC-12-DR"]["3"] = [2, 0.436, 0.688, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-Sen-SC-12-DR"]["4"] = [2, 0.496, 0.688, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-Sen-SC-12-DR"]["5"] = [2, 0.62, 0.688, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-Sen-SC-12-DR"]["6"] = [2, 0.68, 0.688, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-Sen-SC-12-DR"]["7"] = [2, 0.244, 0.752, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-Sen-SC-12-DR"]["8"] = [2, 0.304, 0.752, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-Sen-SC-12-DR"]["9"] = [2, 0.436, 0.752, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-Sen-SC-12-DR"]["10"] = [2, 0.496, 0.752, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-Sen-SC-12-DR"]["11"] = [2, 0.62, 0.752, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-Sen-SC-12-DR"]["12"] = [2, 0.68, 0.752, 0.06, 0.06];
DEV_LIST.push('HM-LC-Sw1PBU-FM');
DEV_DESCRIPTION["HM-LC-Sw1PBU-FM"] = "HM-LC-Sw1PBU-FM";
DEV_PATHS["HM-LC-Sw1PBU-FM"] = new Object();
DEV_PATHS["HM-LC-Sw1PBU-FM"]["50"] = "/config/img/devices/50/PushButton-2ch-wm_thumb.png";
DEV_PATHS["HM-LC-Sw1PBU-FM"]["250"] = "/config/img/devices/250/PushButton-2ch-wm.png";
DEV_HIGHLIGHT["HM-LC-Sw1PBU-FM"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw1PBU-FM"]["1a"] = [2, 0.244, 0.312, 0.428, 0.168];
DEV_HIGHLIGHT["HM-LC-Sw1PBU-FM"]["1b"] = [2, 0.244, 0.56, 0.428, 0.168];
DEV_HIGHLIGHT["HM-LC-Sw1PBU-FM"]["1"] = [5, '1a', '1b'];
DEV_LIST.push('HM-LC-Sw2-FM');
DEV_DESCRIPTION["HM-LC-Sw2-FM"] = "HM-LC-Sw2-FM";
DEV_PATHS["HM-LC-Sw2-FM"] = new Object();
DEV_PATHS["HM-LC-Sw2-FM"]["50"] = "/config/img/devices/50/5_hm-lc-sw2-fm_thumb.png";
DEV_PATHS["HM-LC-Sw2-FM"]["250"] = "/config/img/devices/250/5_hm-lc-sw2-fm.png";
DEV_HIGHLIGHT["HM-LC-Sw2-FM"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw2-FM"]["1_AUS"] = [2, 0.34, 0.66, 0.068, 0.148];
DEV_HIGHLIGHT["HM-LC-Sw2-FM"]["1_EIN"] = [2, 0.6, 0.66, 0.068, 0.148];
DEV_HIGHLIGHT["HM-LC-Sw2-FM"]["2_AUS"] = [2, 0.256, 0.66, 0.068, 0.148];
DEV_HIGHLIGHT["HM-LC-Sw2-FM"]["2_EIN"] = [2, 0.508, 0.66, 0.068, 0.148];
DEV_HIGHLIGHT["HM-LC-Sw2-FM"]["1"] = [5, '1_AUS', '1_EIN'];
DEV_HIGHLIGHT["HM-LC-Sw2-FM"]["2"] = [5, '2_AUS', '2_EIN'];
DEV_LIST.push('HM-LC-Bl1-SM');
DEV_DESCRIPTION["HM-LC-Bl1-SM"] = "HM-LC-Bl1-SM";
DEV_PATHS["HM-LC-Bl1-SM"] = new Object();
DEV_PATHS["HM-LC-Bl1-SM"]["50"] = "/config/img/devices/50/6_hm-lc-bl1-sm_thumb.png";
DEV_PATHS["HM-LC-Bl1-SM"]["250"] = "/config/img/devices/250/6_hm-lc-bl1-sm.png";
DEV_HIGHLIGHT["HM-LC-Bl1-SM"] = new Object();
DEV_LIST.push('HM-RCV-50');
DEV_DESCRIPTION["HM-RCV-50"] = "HM-RCV-50";
DEV_PATHS["HM-RCV-50"] = new Object();
DEV_PATHS["HM-RCV-50"]["50"] = "/config/img/devices/50/CCU2_thumb.png";
DEV_PATHS["HM-RCV-50"]["250"] = "/config/img/devices/250/CCU2.png";
DEV_HIGHLIGHT["HM-RCV-50"] = new Object();
DEV_HIGHLIGHT["HM-RCV-50"]["RF_1"] = [4, 0.364, 0.048, 0.028, 0.028];
DEV_HIGHLIGHT["HM-RCV-50"]["RF_2"] = [6, 0.4, 0.052, 0.544, 0.004, 0.016];
DEV_HIGHLIGHT["HM-RCV-50"]["RF_3"] = [6, 0.4, 0.052, 0.6, 0.052, 0.016];
DEV_HIGHLIGHT["HM-RCV-50"]["RF_4"] = [6, 0.4, 0.052, 0.544, 0.104, 0.016];
DEV_HIGHLIGHT["HM-RCV-50"]["RF_5"] = [6, 0.168, 0.052, 0.344, 0.052, 0.016];
DEV_HIGHLIGHT["HM-RCV-50"]["RF_6"] = [6, 0.168, 0, 0.344, 0.052, 0.016];
DEV_HIGHLIGHT["HM-RCV-50"]["RF_7"] = [6, 0.168, 0.104, 0.344, 0.052, 0.016];
DEV_HIGHLIGHT["HM-RCV-50"]["RF"] = [5, 'RF_1', 'RF_2', 'RF_3', 'RF_4', 'RF_5', 'RF_6', 'RF_7'];
DEV_HIGHLIGHT["HM-RCV-50"]["S1"] = [3, 0.25, 0.15, '1', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S2"] = [3, 0.25, 0.15, '2', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S3"] = [3, 0.25, 0.15, '3', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S4"] = [3, 0.25, 0.15, '4', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S5"] = [3, 0.25, 0.15, '5', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S6"] = [3, 0.25, 0.15, '6', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S7"] = [3, 0.25, 0.15, '7', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S8"] = [3, 0.25, 0.15, '8', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S9"] = [3, 0.25, 0.15, '9', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S10"] = [3, 0.175, 0.15, '10', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S11"] = [3, 0.175, 0.15, '11', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S12"] = [3, 0.175, 0.15, '12', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S13"] = [3, 0.175, 0.15, '13', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S14"] = [3, 0.175, 0.15, '14', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S15"] = [3, 0.175, 0.15, '15', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S16"] = [3, 0.175, 0.15, '16', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S17"] = [3, 0.175, 0.15, '17', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S18"] = [3, 0.175, 0.15, '18', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S19"] = [3, 0.175, 0.15, '19', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S20"] = [3, 0.175, 0.15, '20', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S21"] = [3, 0.175, 0.15, '21', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S22"] = [3, 0.175, 0.15, '22', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S23"] = [3, 0.175, 0.15, '23', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S24"] = [3, 0.175, 0.15, '24', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S25"] = [3, 0.175, 0.15, '25', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S26"] = [3, 0.175, 0.15, '26', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S27"] = [3, 0.175, 0.15, '27', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S28"] = [3, 0.175, 0.15, '28', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S29"] = [3, 0.175, 0.15, '29', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S30"] = [3, 0.175, 0.15, '30', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S31"] = [3, 0.175, 0.15, '31', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S32"] = [3, 0.175, 0.15, '32', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S33"] = [3, 0.175, 0.15, '33', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S34"] = [3, 0.175, 0.15, '34', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S35"] = [3, 0.175, 0.15, '35', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S36"] = [3, 0.175, 0.15, '36', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S37"] = [3, 0.175, 0.15, '37', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S38"] = [3, 0.175, 0.15, '38', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S39"] = [3, 0.175, 0.15, '39', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S40"] = [3, 0.175, 0.15, '40', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S41"] = [3, 0.175, 0.15, '41', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S42"] = [3, 0.175, 0.15, '42', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S43"] = [3, 0.175, 0.15, '43', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S44"] = [3, 0.175, 0.15, '44', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S45"] = [3, 0.175, 0.15, '45', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S46"] = [3, 0.175, 0.15, '46', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S47"] = [3, 0.175, 0.15, '47', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S48"] = [3, 0.175, 0.15, '48', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S49"] = [3, 0.175, 0.15, '49', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["S50"] = [3, 0.175, 0.15, '50', 0.3, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-RCV-50"]["1"] = [5, 'S1'];
DEV_HIGHLIGHT["HM-RCV-50"]["2"] = [5, 'S2'];
DEV_HIGHLIGHT["HM-RCV-50"]["3"] = [5, 'S3'];
DEV_HIGHLIGHT["HM-RCV-50"]["4"] = [5, 'S4'];
DEV_HIGHLIGHT["HM-RCV-50"]["5"] = [5, 'S5'];
DEV_HIGHLIGHT["HM-RCV-50"]["6"] = [5, 'S6'];
DEV_HIGHLIGHT["HM-RCV-50"]["7"] = [5, 'S7'];
DEV_HIGHLIGHT["HM-RCV-50"]["8"] = [5, 'S8'];
DEV_HIGHLIGHT["HM-RCV-50"]["9"] = [5, 'S9'];
DEV_HIGHLIGHT["HM-RCV-50"]["10"] = [5, 'S10'];
DEV_HIGHLIGHT["HM-RCV-50"]["11"] = [5, 'S11'];
DEV_HIGHLIGHT["HM-RCV-50"]["12"] = [5, 'S12'];
DEV_HIGHLIGHT["HM-RCV-50"]["13"] = [5, 'S13'];
DEV_HIGHLIGHT["HM-RCV-50"]["14"] = [5, 'S14'];
DEV_HIGHLIGHT["HM-RCV-50"]["15"] = [5, 'S15'];
DEV_HIGHLIGHT["HM-RCV-50"]["16"] = [5, 'S16'];
DEV_HIGHLIGHT["HM-RCV-50"]["17"] = [5, 'S17'];
DEV_HIGHLIGHT["HM-RCV-50"]["18"] = [5, 'S18'];
DEV_HIGHLIGHT["HM-RCV-50"]["19"] = [5, 'S19'];
DEV_HIGHLIGHT["HM-RCV-50"]["20"] = [5, 'S20'];
DEV_HIGHLIGHT["HM-RCV-50"]["21"] = [5, 'S21'];
DEV_HIGHLIGHT["HM-RCV-50"]["22"] = [5, 'S22'];
DEV_HIGHLIGHT["HM-RCV-50"]["23"] = [5, 'S23'];
DEV_HIGHLIGHT["HM-RCV-50"]["24"] = [5, 'S24'];
DEV_HIGHLIGHT["HM-RCV-50"]["25"] = [5, 'S25'];
DEV_HIGHLIGHT["HM-RCV-50"]["26"] = [5, 'S26'];
DEV_HIGHLIGHT["HM-RCV-50"]["27"] = [5, 'S27'];
DEV_HIGHLIGHT["HM-RCV-50"]["28"] = [5, 'S28'];
DEV_HIGHLIGHT["HM-RCV-50"]["29"] = [5, 'S29'];
DEV_HIGHLIGHT["HM-RCV-50"]["30"] = [5, 'S30'];
DEV_HIGHLIGHT["HM-RCV-50"]["31"] = [5, 'S31'];
DEV_HIGHLIGHT["HM-RCV-50"]["32"] = [5, 'S32'];
DEV_HIGHLIGHT["HM-RCV-50"]["33"] = [5, 'S33'];
DEV_HIGHLIGHT["HM-RCV-50"]["34"] = [5, 'S34'];
DEV_HIGHLIGHT["HM-RCV-50"]["35"] = [5, 'S35'];
DEV_HIGHLIGHT["HM-RCV-50"]["36"] = [5, 'S36'];
DEV_HIGHLIGHT["HM-RCV-50"]["37"] = [5, 'S37'];
DEV_HIGHLIGHT["HM-RCV-50"]["38"] = [5, 'S38'];
DEV_HIGHLIGHT["HM-RCV-50"]["39"] = [5, 'S39'];
DEV_HIGHLIGHT["HM-RCV-50"]["40"] = [5, 'S40'];
DEV_HIGHLIGHT["HM-RCV-50"]["41"] = [5, 'S41'];
DEV_HIGHLIGHT["HM-RCV-50"]["42"] = [5, 'S42'];
DEV_HIGHLIGHT["HM-RCV-50"]["43"] = [5, 'S43'];
DEV_HIGHLIGHT["HM-RCV-50"]["44"] = [5, 'S44'];
DEV_HIGHLIGHT["HM-RCV-50"]["45"] = [5, 'S45'];
DEV_HIGHLIGHT["HM-RCV-50"]["46"] = [5, 'S46'];
DEV_HIGHLIGHT["HM-RCV-50"]["47"] = [5, 'S47'];
DEV_HIGHLIGHT["HM-RCV-50"]["48"] = [5, 'S48'];
DEV_HIGHLIGHT["HM-RCV-50"]["49"] = [5, 'S49'];
DEV_HIGHLIGHT["HM-RCV-50"]["50"] = [5, 'S50'];
DEV_LIST.push('263 133');
DEV_DESCRIPTION["263 133"] = "263_133";
DEV_PATHS["263 133"] = new Object();
DEV_PATHS["263 133"]["50"] = "/config/img/devices/50/PushButton-2ch-wm_thumb.png";
DEV_PATHS["263 133"]["250"] = "/config/img/devices/250/PushButton-2ch-wm.png";
DEV_HIGHLIGHT["263 133"] = new Object();
DEV_LIST.push('263 162');
DEV_DESCRIPTION["263 162"] = "263_162";
DEV_PATHS["263 162"] = new Object();
DEV_PATHS["263 162"]["50"] = "/config/img/devices/50/50_hm-sec-mdir_thumb.png";
DEV_PATHS["263 162"]["250"] = "/config/img/devices/250/50_hm-sec-mdir.png";
DEV_HIGHLIGHT["263 162"] = new Object();
DEV_LIST.push('263 167');
DEV_DESCRIPTION["263 167"] = "263_167";
DEV_PATHS["263 167"] = new Object();
DEV_PATHS["263 167"]["50"] = "/config/img/devices/50/51_hm-sec-sd_thumb.png";
DEV_PATHS["263 167"]["250"] = "/config/img/devices/250/51_hm-sec-sd.png";
DEV_HIGHLIGHT["263 167"] = new Object();
DEV_LIST.push('HM-LC-Dim1T-Pl-3');
DEV_DESCRIPTION["HM-LC-Dim1T-Pl-3"] = "HM-LC-Dim1T-Pl-3";
DEV_PATHS["HM-LC-Dim1T-Pl-3"] = new Object();
DEV_PATHS["HM-LC-Dim1T-Pl-3"]["50"] = "/config/img/devices/50/OM55_DimmerSwitch_thumb.png";
DEV_PATHS["HM-LC-Dim1T-Pl-3"]["250"] = "/config/img/devices/250/OM55_DimmerSwitch.png";
DEV_HIGHLIGHT["HM-LC-Dim1T-Pl-3"] = new Object();
DEV_HIGHLIGHT["HM-LC-Dim1T-Pl-3"]["1_part1"] = [2, 0.548, 0.468, 0.072, 0.052];
DEV_HIGHLIGHT["HM-LC-Dim1T-Pl-3"]["1_part2"] = [2, 0.612, 0.452, 0.028, 0.056];
DEV_HIGHLIGHT["HM-LC-Dim1T-Pl-3"]["1"] = [5, '1_part1', '1_part2'];
DEV_LIST.push('HM-RC-12');
DEV_DESCRIPTION["HM-RC-12"] = "HM-RC-12";
DEV_PATHS["HM-RC-12"] = new Object();
DEV_PATHS["HM-RC-12"]["50"] = "/config/img/devices/50/19_hm-rc-12_thumb.png";
DEV_PATHS["HM-RC-12"]["250"] = "/config/img/devices/250/19_hm-rc-12.png";
DEV_HIGHLIGHT["HM-RC-12"] = new Object();
DEV_HIGHLIGHT["HM-RC-12"]["1"] = [2, 0.252, 0.412, 0.044, 0.072];
DEV_HIGHLIGHT["HM-RC-12"]["3"] = [2, 0.252, 0.508, 0.044, 0.072];
DEV_HIGHLIGHT["HM-RC-12"]["5"] = [2, 0.252, 0.604, 0.044, 0.072];
DEV_HIGHLIGHT["HM-RC-12"]["7"] = [2, 0.252, 0.7, 0.044, 0.072];
DEV_HIGHLIGHT["HM-RC-12"]["9"] = [2, 0.252, 0.8, 0.044, 0.072];
DEV_HIGHLIGHT["HM-RC-12"]["10"] = [2, 0.476, 0.8, 0.044, 0.072];
DEV_HIGHLIGHT["HM-RC-12"]["8"] = [2, 0.476, 0.7, 0.044, 0.072];
DEV_HIGHLIGHT["HM-RC-12"]["6"] = [2, 0.476, 0.604, 0.044, 0.072];
DEV_HIGHLIGHT["HM-RC-12"]["4"] = [2, 0.476, 0.508, 0.044, 0.072];
DEV_HIGHLIGHT["HM-RC-12"]["2"] = [2, 0.476, 0.412, 0.044, 0.072];
DEV_HIGHLIGHT["HM-RC-12"]["11"] = [2, 0.62, 0.8, 0.068, 0.064];
DEV_HIGHLIGHT["HM-RC-12"]["12"] = [2, 0.62, 0.704, 0.068, 0.064];
DEV_HIGHLIGHT["HM-RC-12"]["1+2"] = [5, '1', '2'];
DEV_HIGHLIGHT["HM-RC-12"]["3+4"] = [5, '3', '4'];
DEV_HIGHLIGHT["HM-RC-12"]["5+6"] = [5, '5', '6'];
DEV_HIGHLIGHT["HM-RC-12"]["7+8"] = [5, '7', '8'];
DEV_HIGHLIGHT["HM-RC-12"]["9+10"] = [5, '9', '10'];
DEV_HIGHLIGHT["HM-RC-12"]["11+12"] = [5, '11', '12'];
DEV_LIST.push('HM-RC-Sec4-2');
DEV_DESCRIPTION["HM-RC-Sec4-2"] = "HM-RC-Sec4-2";
DEV_PATHS["HM-RC-Sec4-2"] = new Object();
DEV_PATHS["HM-RC-Sec4-2"]["50"] = "/config/img/devices/50/86_hm-rc-sec4-2_thumb.png";
DEV_PATHS["HM-RC-Sec4-2"]["250"] = "/config/img/devices/250/86_hm-rc-sec4-2.png";
DEV_HIGHLIGHT["HM-RC-Sec4-2"] = new Object();
DEV_HIGHLIGHT["HM-RC-Sec4-2"]["arrow_part1"] = [6, 0.312, 0.288, 0.416, 0.288, 0.012];
DEV_HIGHLIGHT["HM-RC-Sec4-2"]["arrow_part2"] = [6, 0.312, 0.288, 0.352, 0.248, 0.012];
DEV_HIGHLIGHT["HM-RC-Sec4-2"]["arrow_part3"] = [6, 0.312, 0.288, 0.352, 0.328, 0.012];
DEV_HIGHLIGHT["HM-RC-Sec4-2"]["1_Arrow"] = [5, 'arrow_part1', 'arrow_part2', 'arrow_part3'];
DEV_HIGHLIGHT["HM-RC-Sec4-2"]["2_Arrow"] = [7, '1_Arrow', 0.028, 0.156];
DEV_HIGHLIGHT["HM-RC-Sec4-2"]["3_Arrow"] = [7, '1_Arrow', 0.028, 0.312];
DEV_HIGHLIGHT["HM-RC-Sec4-2"]["4_Arrow"] = [7, '1_Arrow', 0.012, 0.468];
DEV_HIGHLIGHT["HM-RC-Sec4-2"]["1"] = [5, '2_Arrow'];
DEV_HIGHLIGHT["HM-RC-Sec4-2"]["2"] = [5, '1_Arrow'];
DEV_HIGHLIGHT["HM-RC-Sec4-2"]["3"] = [5, '4_Arrow'];
DEV_HIGHLIGHT["HM-RC-Sec4-2"]["4"] = [5, '3_Arrow'];
DEV_HIGHLIGHT["HM-RC-Sec4-2"]["1+2"] = [5, '1_Arrow', '2_Arrow'];
DEV_HIGHLIGHT["HM-RC-Sec4-2"]["3+4"] = [5, '3_Arrow', '4_Arrow'];
DEV_LIST.push('HM-LC-Sw1-SM-ATmega168');
DEV_DESCRIPTION["HM-LC-Sw1-SM-ATmega168"] = "HM-LC-Sw1-SM-ATmega168";
DEV_PATHS["HM-LC-Sw1-SM-ATmega168"] = new Object();
DEV_PATHS["HM-LC-Sw1-SM-ATmega168"]["50"] = "/config/img/devices/50/8_hm-lc-sw1-sm_thumb.png";
DEV_PATHS["HM-LC-Sw1-SM-ATmega168"]["250"] = "/config/img/devices/250/8_hm-lc-sw1-sm.png";
DEV_HIGHLIGHT["HM-LC-Sw1-SM-ATmega168"] = new Object();
DEV_LIST.push('HM-LC-Dim1T-FM');
DEV_DESCRIPTION["HM-LC-Dim1T-FM"] = "HM-LC-Dim1T-FM";
DEV_PATHS["HM-LC-Dim1T-FM"] = new Object();
DEV_PATHS["HM-LC-Dim1T-FM"]["50"] = "/config/img/devices/50/65_hm-lc-dim1t-fm_thumb.png";
DEV_PATHS["HM-LC-Dim1T-FM"]["250"] = "/config/img/devices/250/65_hm-lc-dim1t-fm.png";
DEV_HIGHLIGHT["HM-LC-Dim1T-FM"] = new Object();
DEV_LIST.push('HM-ES-PMSw1-Pl-DN-R4');
DEV_DESCRIPTION["HM-ES-PMSw1-Pl-DN-R4"] = "HM-ES-PMSw1-Pl-DN-R4";
DEV_PATHS["HM-ES-PMSw1-Pl-DN-R4"] = new Object();
DEV_PATHS["HM-ES-PMSw1-Pl-DN-R4"]["50"] = "/config/img/devices/50/107_hm-es-pmsw1-pl-R4_thumb.png";
DEV_PATHS["HM-ES-PMSw1-Pl-DN-R4"]["250"] = "/config/img/devices/250/107_hm-es-pmsw1-pl-R4.png";
DEV_HIGHLIGHT["HM-ES-PMSw1-Pl-DN-R4"] = new Object();
DEV_LIST.push('HM-LC-Dim1L-CV-2');
DEV_DESCRIPTION["HM-LC-Dim1L-CV-2"] = "HM-LC-Dim1L-CV";
DEV_PATHS["HM-LC-Dim1L-CV-2"] = new Object();
DEV_PATHS["HM-LC-Dim1L-CV-2"]["50"] = "/config/img/devices/50/2_hm-lc-dim1l-cv_thumb.png";
DEV_PATHS["HM-LC-Dim1L-CV-2"]["250"] = "/config/img/devices/250/2_hm-lc-dim1l-cv.png";
DEV_HIGHLIGHT["HM-LC-Dim1L-CV-2"] = new Object();
DEV_LIST.push('ZEL STG RM DWT 10');
DEV_DESCRIPTION["ZEL STG RM DWT 10"] = "ZEL_STG_RM_DWT_10";
DEV_PATHS["ZEL STG RM DWT 10"] = new Object();
DEV_PATHS["ZEL STG RM DWT 10"]["50"] = "/config/img/devices/50/70_hm-pb-4dis-wm_thumb.png";
DEV_PATHS["ZEL STG RM DWT 10"]["250"] = "/config/img/devices/250/70_hm-pb-4dis-wm.png";
DEV_HIGHLIGHT["ZEL STG RM DWT 10"] = new Object();
DEV_HIGHLIGHT["ZEL STG RM DWT 10"]["2"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["ZEL STG RM DWT 10"]["1"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["ZEL STG RM DWT 10"]["4"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["ZEL STG RM DWT 10"]["3"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["ZEL STG RM DWT 10"]["6"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["ZEL STG RM DWT 10"]["5"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["ZEL STG RM DWT 10"]["8"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["ZEL STG RM DWT 10"]["7"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["ZEL STG RM DWT 10"]["10"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["ZEL STG RM DWT 10"]["9"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["ZEL STG RM DWT 10"]["12"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["ZEL STG RM DWT 10"]["11"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["ZEL STG RM DWT 10"]["14"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["ZEL STG RM DWT 10"]["13"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["ZEL STG RM DWT 10"]["16"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["ZEL STG RM DWT 10"]["15"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["ZEL STG RM DWT 10"]["18"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["ZEL STG RM DWT 10"]["17"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["ZEL STG RM DWT 10"]["20"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["ZEL STG RM DWT 10"]["19"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_LIST.push('HM-Sec-SC-2');
DEV_DESCRIPTION["HM-Sec-SC-2"] = "HM-Sec-SC-2";
DEV_PATHS["HM-Sec-SC-2"] = new Object();
DEV_PATHS["HM-Sec-SC-2"]["50"] = "/config/img/devices/50/16_hm-sec-sc_thumb.png";
DEV_PATHS["HM-Sec-SC-2"]["250"] = "/config/img/devices/250/16_hm-sec-sc.png";
DEV_HIGHLIGHT["HM-Sec-SC-2"] = new Object();
DEV_LIST.push('HM-LC-Sw1-DR');
DEV_DESCRIPTION["HM-LC-Sw1-DR"] = "HM-LC-Sw1-DR";
DEV_PATHS["HM-LC-Sw1-DR"] = new Object();
DEV_PATHS["HM-LC-Sw1-DR"]["50"] = "/config/img/devices/50/35_hmw-sys-tm-dr_thumb.png";
DEV_PATHS["HM-LC-Sw1-DR"]["250"] = "/config/img/devices/250/106_hm-lc-sw1-dr.png";
DEV_HIGHLIGHT["HM-LC-Sw1-DR"] = new Object();
DEV_LIST.push('HM-LC-Sw4-PCB');
DEV_DESCRIPTION["HM-LC-Sw4-PCB"] = "HM-LC-Sw4-PCB";
DEV_PATHS["HM-LC-Sw4-PCB"] = new Object();
DEV_PATHS["HM-LC-Sw4-PCB"]["50"] = "/config/img/devices/50/46_hm-lc-sw4-pcb_thumb.png";
DEV_PATHS["HM-LC-Sw4-PCB"]["250"] = "/config/img/devices/250/46_hm-lc-sw4-pcb.png";
DEV_HIGHLIGHT["HM-LC-Sw4-PCB"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw4-PCB"]["Channel1"] = [2, 0.176, 0.78, 0.068, 0.064];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB"]["Channel2"] = [2, 0.244, 0.78, 0.068, 0.064];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB"]["Channel3"] = [2, 0.312, 0.78, 0.068, 0.064];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB"]["Channel4"] = [2, 0.38, 0.78, 0.068, 0.064];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB"]["1_val"] = [3, 0.372, 0.288, '1', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB"]["2_val"] = [3, 0.372, 0.288, '2', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB"]["3_val"] = [3, 0.372, 0.288, '3', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB"]["4_val"] = [3, 0.372, 0.288, '4', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB"]["Circle1"] = [4, 0.512, 0.784, 0.044, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB"]["Circle2"] = [4, 0.570, 0.784, 0.044, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB"]["Circle3"] = [4, 0.628, 0.784, 0.044, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB"]["Circle4"] = [4, 0.686, 0.784, 0.044, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB"]["1"] = [5, 'Channel1', '1_val', 'Circle1'];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB"]["2"] = [5, 'Channel2', '2_val', 'Circle2'];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB"]["3"] = [5, 'Channel3', '3_val', 'Circle3'];
DEV_HIGHLIGHT["HM-LC-Sw4-PCB"]["4"] = [5, 'Channel4', '4_val', 'Circle4'];
DEV_LIST.push('HM-RC-4-2');
DEV_DESCRIPTION["HM-RC-4-2"] = "HM-RC-4-2";
DEV_PATHS["HM-RC-4-2"] = new Object();
DEV_PATHS["HM-RC-4-2"]["50"] = "/config/img/devices/50/84_hm-rc-4-2_thumb.png";
DEV_PATHS["HM-RC-4-2"]["250"] = "/config/img/devices/250/84_hm-rc-4-2.png";
DEV_HIGHLIGHT["HM-RC-4-2"] = new Object();
DEV_HIGHLIGHT["HM-RC-4-2"]["arrow_part1"] = [6, 0.312, 0.288, 0.416, 0.288, 0.012];
DEV_HIGHLIGHT["HM-RC-4-2"]["arrow_part2"] = [6, 0.312, 0.288, 0.352, 0.248, 0.012];
DEV_HIGHLIGHT["HM-RC-4-2"]["arrow_part3"] = [6, 0.312, 0.288, 0.352, 0.328, 0.012];
DEV_HIGHLIGHT["HM-RC-4-2"]["1_Arrow"] = [5, 'arrow_part1', 'arrow_part2', 'arrow_part3'];
DEV_HIGHLIGHT["HM-RC-4-2"]["2_Arrow"] = [7, '1_Arrow', 0.028, 0.156];
DEV_HIGHLIGHT["HM-RC-4-2"]["3_Arrow"] = [7, '1_Arrow', 0.028, 0.312];
DEV_HIGHLIGHT["HM-RC-4-2"]["4_Arrow"] = [7, '1_Arrow', 0.012, 0.468];
DEV_HIGHLIGHT["HM-RC-4-2"]["1"] = [5, '2_Arrow'];
DEV_HIGHLIGHT["HM-RC-4-2"]["2"] = [5, '1_Arrow'];
DEV_HIGHLIGHT["HM-RC-4-2"]["3"] = [5, '4_Arrow'];
DEV_HIGHLIGHT["HM-RC-4-2"]["4"] = [5, '3_Arrow'];
DEV_HIGHLIGHT["HM-RC-4-2"]["1+2"] = [5, '1_Arrow', '2_Arrow'];
DEV_HIGHLIGHT["HM-RC-4-2"]["3+4"] = [5, '3_Arrow', '4_Arrow'];
DEV_LIST.push('HM-WDS40-TH-I');
DEV_DESCRIPTION["HM-WDS40-TH-I"] = "HM-WDS40-TH-I";
DEV_PATHS["HM-WDS40-TH-I"] = new Object();
DEV_PATHS["HM-WDS40-TH-I"]["50"] = "/config/img/devices/50/13_hm-ws550sth-i_thumb.png";
DEV_PATHS["HM-WDS40-TH-I"]["250"] = "/config/img/devices/250/13_hm-ws550sth-i.png";
DEV_HIGHLIGHT["HM-WDS40-TH-I"] = new Object();
DEV_LIST.push('HM-LC-Dim1T-FM-2');
DEV_DESCRIPTION["HM-LC-Dim1T-FM-2"] = "HM-LC-Dim1T-FM";
DEV_PATHS["HM-LC-Dim1T-FM-2"] = new Object();
DEV_PATHS["HM-LC-Dim1T-FM-2"]["50"] = "/config/img/devices/50/65_hm-lc-dim1t-fm_thumb.png";
DEV_PATHS["HM-LC-Dim1T-FM-2"]["250"] = "/config/img/devices/250/65_hm-lc-dim1t-fm.png";
DEV_HIGHLIGHT["HM-LC-Dim1T-FM-2"] = new Object();
DEV_LIST.push('HM-WDS100-C6-O');
DEV_DESCRIPTION["HM-WDS100-C6-O"] = "HM-WDS100-C6-O";
DEV_PATHS["HM-WDS100-C6-O"] = new Object();
DEV_PATHS["HM-WDS100-C6-O"]["50"] = "/config/img/devices/50/WeatherCombiSensor_thumb.png";
DEV_PATHS["HM-WDS100-C6-O"]["250"] = "/config/img/devices/250/WeatherCombiSensor.png";
DEV_HIGHLIGHT["HM-WDS100-C6-O"] = new Object();
DEV_LIST.push('HM-RC-19-B');
DEV_DESCRIPTION["HM-RC-19-B"] = "HM-RC-19-B";
DEV_PATHS["HM-RC-19-B"] = new Object();
DEV_PATHS["HM-RC-19-B"]["50"] = "/config/img/devices/50/20_hm-rc-19_thumb.png";
DEV_PATHS["HM-RC-19-B"]["250"] = "/config/img/devices/250/20_hm-rc-19.png";
DEV_HIGHLIGHT["HM-RC-19-B"] = new Object();
DEV_HIGHLIGHT["HM-RC-19-B"]["1"] = [2, 0.296, 0.344, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-B"]["3"] = [2, 0.296, 0.416, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-B"]["5"] = [2, 0.296, 0.488, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-B"]["7"] = [2, 0.296, 0.56, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-B"]["9"] = [2, 0.296, 0.628, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-B"]["11"] = [2, 0.296, 0.704, 0.036, 0.048];
DEV_HIGHLIGHT["HM-RC-19-B"]["13"] = [2, 0.296, 0.772, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-B"]["15"] = [2, 0.296, 0.844, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-B"]["2"] = [2, 0.468, 0.344, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-B"]["4"] = [2, 0.468, 0.416, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-B"]["6"] = [2, 0.468, 0.488, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-B"]["8"] = [2, 0.468, 0.56, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-B"]["10"] = [2, 0.468, 0.628, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-B"]["12"] = [2, 0.468, 0.704, 0.036, 0.048];
DEV_HIGHLIGHT["HM-RC-19-B"]["14"] = [2, 0.468, 0.772, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-B"]["16"] = [2, 0.468, 0.844, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19-B"]["17"] = [2, 0.58, 0.84, 0.044, 0.056];
DEV_HIGHLIGHT["HM-RC-19-B"]["18"] = [2, 0.312, 0.188, 0.168, 0.088];
DEV_HIGHLIGHT["HM-RC-19-B"]["1+2"] = [5, '1', '2'];
DEV_HIGHLIGHT["HM-RC-19-B"]["3+4"] = [5, '3', '4'];
DEV_HIGHLIGHT["HM-RC-19-B"]["5+6"] = [5, '5', '6'];
DEV_HIGHLIGHT["HM-RC-19-B"]["7+8"] = [5, '7', '8'];
DEV_HIGHLIGHT["HM-RC-19-B"]["9+10"] = [5, '9', '10'];
DEV_HIGHLIGHT["HM-RC-19-B"]["11+12"] = [5, '11', '12'];
DEV_HIGHLIGHT["HM-RC-19-B"]["13+14"] = [5, '13', '14'];
DEV_HIGHLIGHT["HM-RC-19-B"]["15+16"] = [5, '15', '16'];
DEV_LIST.push('HM-Sec-SD-2-Team');
DEV_DESCRIPTION["HM-Sec-SD-2-Team"] = "HM-Sec-SD-Team";
DEV_PATHS["HM-Sec-SD-2-Team"] = new Object();
DEV_PATHS["HM-Sec-SD-2-Team"]["50"] = "/config/img/devices/50/105_hm-sec-sd-2-team_thumb.png";
DEV_PATHS["HM-Sec-SD-2-Team"]["250"] = "/config/img/devices/250/105_hm-sec-sd-2-team.png";
DEV_HIGHLIGHT["HM-Sec-SD-2-Team"] = new Object();
DEV_LIST.push('263 147');
DEV_DESCRIPTION["263 147"] = "263_147";
DEV_PATHS["263 147"] = new Object();
DEV_PATHS["263 147"]["50"] = "/config/img/devices/50/PushButton-2ch-wm_thumb.png";
DEV_PATHS["263 147"]["250"] = "/config/img/devices/250/PushButton-2ch-wm.png";
DEV_HIGHLIGHT["263 147"] = new Object();
DEV_HIGHLIGHT["263 147"]["1a"] = [2, 0.244, 0.312, 0.428, 0.168];
DEV_HIGHLIGHT["263 147"]["1b"] = [2, 0.244, 0.56, 0.428, 0.168];
DEV_HIGHLIGHT["263 147"]["1"] = [5, '1a', '1b'];
DEV_LIST.push('HMW-IO-12-Sw7-DR');
DEV_DESCRIPTION["HMW-IO-12-Sw7-DR"] = "HMW-IO-12-Sw7-DR";
DEV_PATHS["HMW-IO-12-Sw7-DR"] = new Object();
DEV_PATHS["HMW-IO-12-Sw7-DR"]["50"] = "/config/img/devices/50/30_hmw-io-12-sw7-dr_thumb.png";
DEV_PATHS["HMW-IO-12-Sw7-DR"]["250"] = "/config/img/devices/250/30_hmw-io-12-sw7-dr.png";
DEV_HIGHLIGHT["HMW-IO-12-Sw7-DR"] = new Object();
DEV_HIGHLIGHT["HMW-IO-12-Sw7-DR"]["1"] = [2, 0.264, 0.7, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw7-DR"]["2"] = [2, 0.328, 0.7, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw7-DR"]["3"] = [2, 0.46, 0.7, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw7-DR"]["4"] = [2, 0.524, 0.7, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw7-DR"]["5"] = [2, 0.648, 0.7, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw7-DR"]["6"] = [2, 0.708, 0.7, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw7-DR"]["8"] = [2, 0.328, 0.764, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw7-DR"]["7"] = [2, 0.264, 0.764, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw7-DR"]["9"] = [2, 0.46, 0.764, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw7-DR"]["10"] = [2, 0.524, 0.764, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw7-DR"]["11"] = [2, 0.644, 0.764, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw7-DR"]["12"] = [2, 0.708, 0.764, 0.06, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw7-DR"]["13"] = [2, 0.268, 0.396, 0.12, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw7-DR"]["14"] = [2, 0.46, 0.396, 0.12, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw7-DR"]["15"] = [2, 0.648, 0.396, 0.12, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw7-DR"]["16"] = [2, 0.076, 0.46, 0.12, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw7-DR"]["17"] = [2, 0.264, 0.46, 0.12, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw7-DR"]["18"] = [2, 0.46, 0.46, 0.12, 0.06];
DEV_HIGHLIGHT["HMW-IO-12-Sw7-DR"]["19"] = [2, 0.648, 0.46, 0.12, 0.06];
DEV_LIST.push('HM-CC-RT-DN');
DEV_DESCRIPTION["HM-CC-RT-DN"] = "HM-CC-RT-DN";
DEV_PATHS["HM-CC-RT-DN"] = new Object();
DEV_PATHS["HM-CC-RT-DN"]["50"] = "/config/img/devices/50/83_hm-cc-rt-dn_thumb.png";
DEV_PATHS["HM-CC-RT-DN"]["250"] = "/config/img/devices/250/83_hm-cc-rt-dn.png";
DEV_HIGHLIGHT["HM-CC-RT-DN"] = new Object();
DEV_LIST.push('HM-WS550ST-IO');
DEV_DESCRIPTION["HM-WS550ST-IO"] = "HM-WS550ST-IO";
DEV_PATHS["HM-WS550ST-IO"] = new Object();
DEV_PATHS["HM-WS550ST-IO"]["50"] = "/config/img/devices/50/IP65_G201_thumb.png";
DEV_PATHS["HM-WS550ST-IO"]["250"] = "/config/img/devices/250/IP65_G201.png";
DEV_HIGHLIGHT["HM-WS550ST-IO"] = new Object();
DEV_LIST.push('HM-LC-Dim1L-CV');
DEV_DESCRIPTION["HM-LC-Dim1L-CV"] = "HM-LC-Dim1L-CV";
DEV_PATHS["HM-LC-Dim1L-CV"] = new Object();
DEV_PATHS["HM-LC-Dim1L-CV"]["50"] = "/config/img/devices/50/2_hm-lc-dim1l-cv_thumb.png";
DEV_PATHS["HM-LC-Dim1L-CV"]["250"] = "/config/img/devices/250/2_hm-lc-dim1l-cv.png";
DEV_HIGHLIGHT["HM-LC-Dim1L-CV"] = new Object();
DEV_LIST.push('HM-Sen-MDIR-O');
DEV_DESCRIPTION["HM-Sen-MDIR-O"] = "HM-Sen-MDIR-O";
DEV_PATHS["HM-Sen-MDIR-O"] = new Object();
DEV_PATHS["HM-Sen-MDIR-O"]["50"] = "/config/img/devices/50/80_hm-sen-mdir-o_thumb.png";
DEV_PATHS["HM-Sen-MDIR-O"]["250"] = "/config/img/devices/250/80_hm-sen-mdir-o.png";
DEV_HIGHLIGHT["HM-Sen-MDIR-O"] = new Object();
DEV_LIST.push('HM-RC-19');
DEV_DESCRIPTION["HM-RC-19"] = "HM-RC-19";
DEV_PATHS["HM-RC-19"] = new Object();
DEV_PATHS["HM-RC-19"]["50"] = "/config/img/devices/50/20_hm-rc-19_thumb.png";
DEV_PATHS["HM-RC-19"]["250"] = "/config/img/devices/250/20_hm-rc-19.png";
DEV_HIGHLIGHT["HM-RC-19"] = new Object();
DEV_HIGHLIGHT["HM-RC-19"]["1"] = [2, 0.296, 0.344, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19"]["3"] = [2, 0.296, 0.416, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19"]["5"] = [2, 0.296, 0.488, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19"]["7"] = [2, 0.296, 0.56, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19"]["9"] = [2, 0.296, 0.628, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19"]["11"] = [2, 0.296, 0.704, 0.036, 0.048];
DEV_HIGHLIGHT["HM-RC-19"]["13"] = [2, 0.296, 0.772, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19"]["15"] = [2, 0.296, 0.844, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19"]["2"] = [2, 0.468, 0.344, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19"]["4"] = [2, 0.468, 0.416, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19"]["6"] = [2, 0.468, 0.488, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19"]["8"] = [2, 0.468, 0.56, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19"]["10"] = [2, 0.468, 0.628, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19"]["12"] = [2, 0.468, 0.704, 0.036, 0.048];
DEV_HIGHLIGHT["HM-RC-19"]["14"] = [2, 0.468, 0.772, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19"]["16"] = [2, 0.468, 0.844, 0.036, 0.052];
DEV_HIGHLIGHT["HM-RC-19"]["17"] = [2, 0.58, 0.84, 0.044, 0.056];
DEV_HIGHLIGHT["HM-RC-19"]["18"] = [2, 0.312, 0.188, 0.168, 0.088];
DEV_HIGHLIGHT["HM-RC-19"]["1+2"] = [5, '1', '2'];
DEV_HIGHLIGHT["HM-RC-19"]["3+4"] = [5, '3', '4'];
DEV_HIGHLIGHT["HM-RC-19"]["5+6"] = [5, '5', '6'];
DEV_HIGHLIGHT["HM-RC-19"]["7+8"] = [5, '7', '8'];
DEV_HIGHLIGHT["HM-RC-19"]["9+10"] = [5, '9', '10'];
DEV_HIGHLIGHT["HM-RC-19"]["11+12"] = [5, '11', '12'];
DEV_HIGHLIGHT["HM-RC-19"]["13+14"] = [5, '13', '14'];
DEV_HIGHLIGHT["HM-RC-19"]["15+16"] = [5, '15', '16'];
DEV_LIST.push('263 145');
DEV_DESCRIPTION["263 145"] = "263_145";
DEV_PATHS["263 145"] = new Object();
DEV_PATHS["263 145"]["50"] = "/config/img/devices/50/38_hm-pbi-4-fm_thumb.png";
DEV_PATHS["263 145"]["250"] = "/config/img/devices/250/38_hm-pbi-4-fm.png";
DEV_HIGHLIGHT["263 145"] = new Object();
DEV_HIGHLIGHT["263 145"]["1_Key"] = [3, 0.18, 0.216, '1', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["263 145"]["1_Kreis"] = [4, 0.265, 0.500, 0.028, 0.028];
DEV_HIGHLIGHT["263 145"]["1"] = [5, '1_Key', '1_Kreis'];
DEV_HIGHLIGHT["263 145"]["2_Key"] = [3, 0.18, 0.216, '2', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["263 145"]["2_Kreis"] = [4, 0.287, 0.465, 0.028, 0.028];
DEV_HIGHLIGHT["263 145"]["2"] = [5, '2_Key', '2_Kreis'];
DEV_HIGHLIGHT["263 145"]["3_Key"] = [3, 0.18, 0.216, '3', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["263 145"]["3_Kreis"] = [4, 0.309, 0.430, 0.028, 0.028];
DEV_HIGHLIGHT["263 145"]["3"] = [5, '3_Key', '3_Kreis'];
DEV_HIGHLIGHT["263 145"]["4_Key"] = [3, 0.18, 0.216, '4', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["263 145"]["4_Kreis"] = [4, 0.331, 0.395, 0.028, 0.028];
DEV_HIGHLIGHT["263 145"]["4"] = [5, '4_Key', '4_Kreis'];
DEV_LIST.push('HM-LC-Bl1-SM-2');
DEV_DESCRIPTION["HM-LC-Bl1-SM-2"] = "HM-LC-Bl1-SM";
DEV_PATHS["HM-LC-Bl1-SM-2"] = new Object();
DEV_PATHS["HM-LC-Bl1-SM-2"]["50"] = "/config/img/devices/50/6_hm-lc-bl1-sm_thumb.png";
DEV_PATHS["HM-LC-Bl1-SM-2"]["250"] = "/config/img/devices/250/6_hm-lc-bl1-sm.png";
DEV_HIGHLIGHT["HM-LC-Bl1-SM-2"] = new Object();
DEV_LIST.push('HM-OU-LED16');
DEV_DESCRIPTION["HM-OU-LED16"] = "HM-OU-LED16";
DEV_PATHS["HM-OU-LED16"] = new Object();
DEV_PATHS["HM-OU-LED16"]["50"] = "/config/img/devices/50/78_hm-ou-led16_thumb.png";
DEV_PATHS["HM-OU-LED16"]["250"] = "/config/img/devices/250/78_hm-ou-led16.png";
DEV_HIGHLIGHT["HM-OU-LED16"] = new Object();
DEV_HIGHLIGHT["HM-OU-LED16"]["1"] = [2, 0.152, 0.218, 0.064, 0.056];
DEV_HIGHLIGHT["HM-OU-LED16"]["2"] = [2, 0.152, 0.277, 0.064, 0.056];
DEV_HIGHLIGHT["HM-OU-LED16"]["3"] = [2, 0.152, 0.336, 0.064, 0.056];
DEV_HIGHLIGHT["HM-OU-LED16"]["4"] = [2, 0.152, 0.395, 0.064, 0.056];
DEV_HIGHLIGHT["HM-OU-LED16"]["5"] = [2, 0.152, 0.454, 0.064, 0.056];
DEV_HIGHLIGHT["HM-OU-LED16"]["6"] = [2, 0.152, 0.513, 0.064, 0.056];
DEV_HIGHLIGHT["HM-OU-LED16"]["7"] = [2, 0.152, 0.572, 0.064, 0.056];
DEV_HIGHLIGHT["HM-OU-LED16"]["8"] = [2, 0.152, 0.631, 0.064, 0.056];
DEV_HIGHLIGHT["HM-OU-LED16"]["9"] = [2, 0.728, 0.218, 0.064, 0.056];
DEV_HIGHLIGHT["HM-OU-LED16"]["10"] = [2, 0.728, 0.277, 0.064, 0.056];
DEV_HIGHLIGHT["HM-OU-LED16"]["11"] = [2, 0.728, 0.336, 0.064, 0.056];
DEV_HIGHLIGHT["HM-OU-LED16"]["12"] = [2, 0.728, 0.395, 0.064, 0.056];
DEV_HIGHLIGHT["HM-OU-LED16"]["13"] = [2, 0.728, 0.454, 0.064, 0.056];
DEV_HIGHLIGHT["HM-OU-LED16"]["14"] = [2, 0.728, 0.513, 0.064, 0.056];
DEV_HIGHLIGHT["HM-OU-LED16"]["15"] = [2, 0.728, 0.572, 0.064, 0.056];
DEV_HIGHLIGHT["HM-OU-LED16"]["16"] = [2, 0.728, 0.631, 0.064, 0.056];
DEV_LIST.push('HM-RC-Key3-B');
DEV_DESCRIPTION["HM-RC-Key3-B"] = "HM-RC-Key3-B";
DEV_PATHS["HM-RC-Key3-B"] = new Object();
DEV_PATHS["HM-RC-Key3-B"]["50"] = "/config/img/devices/50/23_hm-rc-key3-b_thumb.png";
DEV_PATHS["HM-RC-Key3-B"]["250"] = "/config/img/devices/250/23_hm-rc-key3-b.png";
DEV_HIGHLIGHT["HM-RC-Key3-B"] = new Object();
DEV_HIGHLIGHT["HM-RC-Key3-B"]["1"] = [4, 0.252, 0.2, 0.16, 0.18];
DEV_HIGHLIGHT["HM-RC-Key3-B"]["2"] = [4, 0.492, 0.2, 0.16, 0.18];
DEV_HIGHLIGHT["HM-RC-Key3-B"]["3"] = [4, 0.34, 0.484, 0.228, 0.252];
DEV_HIGHLIGHT["HM-RC-Key3-B"]["1+2"] = [5, '1', '2'];
DEV_LIST.push('HM-LC-Sw4-SM');
DEV_DESCRIPTION["HM-LC-Sw4-SM"] = "HM-LC-Sw4-SM";
DEV_PATHS["HM-LC-Sw4-SM"] = new Object();
DEV_PATHS["HM-LC-Sw4-SM"]["50"] = "/config/img/devices/50/3_hm-lc-sw4-sm_thumb.png";
DEV_PATHS["HM-LC-Sw4-SM"]["250"] = "/config/img/devices/250/3_hm-lc-sw4-sm.png";
DEV_HIGHLIGHT["HM-LC-Sw4-SM"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw4-SM"]["1_Part1"] = [6, 0.136, 0.896, 0.136, 0.98, 0.012];
DEV_HIGHLIGHT["HM-LC-Sw4-SM"]["1_Part2"] = [6, 0.136, 0.98, 0.096, 0.916, 0.012];
DEV_HIGHLIGHT["HM-LC-Sw4-SM"]["1_Part3"] = [6, 0.136, 0.98, 0.176, 0.916, 0.012];
DEV_HIGHLIGHT["HM-LC-Sw4-SM"]["1_Arrow"] = [5, '1_Part1', '1_Part2', '1_Part3'];
DEV_HIGHLIGHT["HM-LC-Sw4-SM"]["2_Arrow"] = [7, '1_Arrow', 0.164, 0];
DEV_HIGHLIGHT["HM-LC-Sw4-SM"]["3_Arrow"] = [7, '1_Arrow', 0.328, 0];
DEV_HIGHLIGHT["HM-LC-Sw4-SM"]["4_Arrow"] = [7, '1_Arrow', 0.492, 0];
DEV_HIGHLIGHT["HM-LC-Sw4-SM"]["1_Key"] = [4, 0.244, 0.372, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-SM"]["2_Key"] = [4, 0.328, 0.372, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-SM"]["3_Key"] = [4, 0.404, 0.372, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-SM"]["4_Key"] = [4, 0.484, 0.372, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-SM"]["1"] = [5, '1_Arrow', '1_Key'];
DEV_HIGHLIGHT["HM-LC-Sw4-SM"]["2"] = [5, '2_Arrow', '2_Key'];
DEV_HIGHLIGHT["HM-LC-Sw4-SM"]["3"] = [5, '3_Arrow', '3_Key'];
DEV_HIGHLIGHT["HM-LC-Sw4-SM"]["4"] = [5, '4_Arrow', '4_Key'];
DEV_LIST.push('HM-CC-TC');
DEV_DESCRIPTION["HM-CC-TC"] = "HM-CC-TC";
DEV_PATHS["HM-CC-TC"] = new Object();
DEV_PATHS["HM-CC-TC"]["50"] = "/config/img/devices/50/42_hm-cc-tc_thumb.png";
DEV_PATHS["HM-CC-TC"]["250"] = "/config/img/devices/250/42_hm-cc-tc.png";
DEV_HIGHLIGHT["HM-CC-TC"] = new Object();
DEV_LIST.push('HM-PB-2-FM');
DEV_DESCRIPTION["HM-PB-2-FM"] = "HM-PB-2-FM";
DEV_PATHS["HM-PB-2-FM"] = new Object();
DEV_PATHS["HM-PB-2-FM"]["50"] = "/config/img/devices/50/PushButton-2ch-wm_thumb.png";
DEV_PATHS["HM-PB-2-FM"]["250"] = "/config/img/devices/250/PushButton-2ch-wm.png";
DEV_HIGHLIGHT["HM-PB-2-FM"] = new Object();
DEV_HIGHLIGHT["HM-PB-2-FM"]["2"] = [2, 0.244, 0.312, 0.428, 0.168];
DEV_HIGHLIGHT["HM-PB-2-FM"]["1"] = [2, 0.244, 0.56, 0.428, 0.168];
DEV_HIGHLIGHT["HM-PB-2-FM"]["1+2"] = [2, 0.244, 0.308, 0.428, 0.416];
DEV_LIST.push('263 134');
DEV_DESCRIPTION["263 134"] = "263_134";
DEV_PATHS["263 134"] = new Object();
DEV_PATHS["263 134"]["50"] = "/config/img/devices/50/66_hm-lc-dim1t-cv_thumb.png";
DEV_PATHS["263 134"]["250"] = "/config/img/devices/250/66_hm-lc-dim1t-cv.png";
DEV_HIGHLIGHT["263 134"] = new Object();
DEV_LIST.push('HM-LC-Sw2-DR');
DEV_DESCRIPTION["HM-LC-Sw2-DR"] = "HM-LC-Sw2-DR";
DEV_PATHS["HM-LC-Sw2-DR"] = new Object();
DEV_PATHS["HM-LC-Sw2-DR"]["50"] = "/config/img/devices/50/69_hm-lc-sw2-dr_thumb.png";
DEV_PATHS["HM-LC-Sw2-DR"]["250"] = "/config/img/devices/250/69_hm-lc-sw2-dr.png";
DEV_HIGHLIGHT["HM-LC-Sw2-DR"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw2-DR"]["1"] = [4, 0.095, 0.556, 0.045, 0.04];
DEV_HIGHLIGHT["HM-LC-Sw2-DR"]["2"] = [4, 0.285, 0.556, 0.045, 0.04];
DEV_LIST.push('HM-RC-Key3');
DEV_DESCRIPTION["HM-RC-Key3"] = "HM-RC-Key3";
DEV_PATHS["HM-RC-Key3"] = new Object();
DEV_PATHS["HM-RC-Key3"]["50"] = "/config/img/devices/50/23_hm-rc-key3-b_thumb.png";
DEV_PATHS["HM-RC-Key3"]["250"] = "/config/img/devices/250/23_hm-rc-key3-b.png";
DEV_HIGHLIGHT["HM-RC-Key3"] = new Object();
DEV_HIGHLIGHT["HM-RC-Key3"]["1"] = [4, 0.252, 0.2, 0.16, 0.18];
DEV_HIGHLIGHT["HM-RC-Key3"]["2"] = [4, 0.492, 0.2, 0.16, 0.18];
DEV_HIGHLIGHT["HM-RC-Key3"]["3"] = [4, 0.34, 0.484, 0.228, 0.252];
DEV_HIGHLIGHT["HM-RC-Key3"]["1+2"] = [5, '1', '2'];
DEV_LIST.push('HM-WDS10-TH-O');
DEV_DESCRIPTION["HM-WDS10-TH-O"] = "HM-WDS10-TH-O";
DEV_PATHS["HM-WDS10-TH-O"] = new Object();
DEV_PATHS["HM-WDS10-TH-O"]["50"] = "/config/img/devices/50/TH_CS_thumb.png";
DEV_PATHS["HM-WDS10-TH-O"]["250"] = "/config/img/devices/250/TH_CS.png";
DEV_HIGHLIGHT["HM-WDS10-TH-O"] = new Object();
DEV_LIST.push('HM-OU-CM-PCB');
DEV_DESCRIPTION["HM-OU-CM-PCB"] = "HM-OU-CM-PCB";
DEV_PATHS["HM-OU-CM-PCB"] = new Object();
DEV_PATHS["HM-OU-CM-PCB"]["50"] = "/config/img/devices/50/92_hm-ou-cm-pcb_thumb.png";
DEV_PATHS["HM-OU-CM-PCB"]["250"] = "/config/img/devices/250/92_hm-ou-cm-pcb.png";
DEV_HIGHLIGHT["HM-OU-CM-PCB"] = new Object();
DEV_LIST.push('HM-ES-PMSw1-Pl-DN-R2');
DEV_DESCRIPTION["HM-ES-PMSw1-Pl-DN-R2"] = "HM-ES-PMSw1-Pl-DN-R2";
DEV_PATHS["HM-ES-PMSw1-Pl-DN-R2"] = new Object();
DEV_PATHS["HM-ES-PMSw1-Pl-DN-R2"]["50"] = "/config/img/devices/50/107_hm-es-pmsw1-pl-R2_thumb.png";
DEV_PATHS["HM-ES-PMSw1-Pl-DN-R2"]["250"] = "/config/img/devices/250/107_hm-es-pmsw1-pl-R2.png";
DEV_HIGHLIGHT["HM-ES-PMSw1-Pl-DN-R2"] = new Object();
DEV_LIST.push('263 144');
DEV_DESCRIPTION["263 144"] = "263_144";
DEV_PATHS["263 144"] = new Object();
DEV_PATHS["263 144"]["50"] = "/config/img/devices/50/39_hm-swi-3-fm_thumb.png";
DEV_PATHS["263 144"]["250"] = "/config/img/devices/250/39_hm-swi-3-fm.png";
DEV_HIGHLIGHT["263 144"] = new Object();
DEV_HIGHLIGHT["263 144"]["1_Key"] = [3, 0.18, 0.216, '1', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["263 144"]["1_Kreis"] = [4, 0.220, 0.480, 0.028, 0.028];
DEV_HIGHLIGHT["263 144"]["1"] = [5, '1_Key', '1_Kreis'];
DEV_HIGHLIGHT["263 144"]["2_Key"] = [3, 0.18, 0.216, '2', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["263 144"]["2_Kreis"] = [4, 0.265, 0.405, 0.028, 0.028];
DEV_HIGHLIGHT["263 144"]["2"] = [5, '2_Key', '2_Kreis'];
DEV_HIGHLIGHT["263 144"]["3_Key"] = [3, 0.18, 0.216, '3', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["263 144"]["3_Kreis"] = [4, 0.310, 0.33, 0.028, 0.028];
DEV_HIGHLIGHT["263 144"]["3"] = [5, '3_Key', '3_Kreis'];
DEV_LIST.push('263 130');
DEV_DESCRIPTION["263 130"] = "263_130";
DEV_PATHS["263 130"] = new Object();
DEV_PATHS["263 130"]["50"] = "/config/img/devices/50/4_hm-lc-sw1-fm_thumb.png";
DEV_PATHS["263 130"]["250"] = "/config/img/devices/250/4_hm-lc-sw1-fm.png";
DEV_HIGHLIGHT["263 130"] = new Object();
DEV_HIGHLIGHT["263 130"]["1_AUS"] = [2, 0.288, 0.66, 0.068, 0.152];
DEV_HIGHLIGHT["263 130"]["1_EIN"] = [2, 0.548, 0.66, 0.068, 0.152];
DEV_HIGHLIGHT["263 130"]["1"] = [5, '1_AUS', '1_EIN'];
DEV_LIST.push('HM-LC-Sw1-FM');
DEV_DESCRIPTION["HM-LC-Sw1-FM"] = "HM-LC-Sw1-FM";
DEV_PATHS["HM-LC-Sw1-FM"] = new Object();
DEV_PATHS["HM-LC-Sw1-FM"]["50"] = "/config/img/devices/50/4_hm-lc-sw1-fm_thumb.png";
DEV_PATHS["HM-LC-Sw1-FM"]["250"] = "/config/img/devices/250/4_hm-lc-sw1-fm.png";
DEV_HIGHLIGHT["HM-LC-Sw1-FM"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw1-FM"]["1_AUS"] = [2, 0.288, 0.66, 0.068, 0.152];
DEV_HIGHLIGHT["HM-LC-Sw1-FM"]["1_EIN"] = [2, 0.548, 0.66, 0.068, 0.152];
DEV_HIGHLIGHT["HM-LC-Sw1-FM"]["1"] = [5, '1_AUS', '1_EIN'];
DEV_LIST.push('HM-LC-Dim1T-CV-2');
DEV_DESCRIPTION["HM-LC-Dim1T-CV-2"] = "HM-LC-Dim1T-CV";
DEV_PATHS["HM-LC-Dim1T-CV-2"] = new Object();
DEV_PATHS["HM-LC-Dim1T-CV-2"]["50"] = "/config/img/devices/50/66_hm-lc-dim1t-cv_thumb.png";
DEV_PATHS["HM-LC-Dim1T-CV-2"]["250"] = "/config/img/devices/250/66_hm-lc-dim1t-cv.png";
DEV_HIGHLIGHT["HM-LC-Dim1T-CV-2"] = new Object();
DEV_LIST.push('HM-Sen-Wa-Od');
DEV_DESCRIPTION["HM-Sen-Wa-Od"] = "HM-Sen-Wa-Od";
DEV_PATHS["HM-Sen-Wa-Od"] = new Object();
DEV_PATHS["HM-Sen-Wa-Od"]["50"] = "/config/img/devices/50/82_hm-sen-wa-od_thumb.png";
DEV_PATHS["HM-Sen-Wa-Od"]["250"] = "/config/img/devices/250/82_hm-sen-wa-od.png";
DEV_HIGHLIGHT["HM-Sen-Wa-Od"] = new Object();
DEV_LIST.push('HM-ES-PMSw1-DR');
DEV_DESCRIPTION["HM-ES-PMSw1-DR"] = "HM-ES-PMSw1-DR";
DEV_PATHS["HM-ES-PMSw1-DR"] = new Object();
DEV_PATHS["HM-ES-PMSw1-DR"]["50"] = "/config/img/devices/50/110_hm-es-pmsw1-dr_thump.png";
DEV_PATHS["HM-ES-PMSw1-DR"]["250"] = "/config/img/devices/250/110_hm-es-pmsw1-dr.png";
DEV_HIGHLIGHT["HM-ES-PMSw1-DR"] = new Object();
DEV_LIST.push('HM-MOD-Re-8');
DEV_DESCRIPTION["HM-MOD-Re-8"] = "HM-MOD-Re-8";
DEV_PATHS["HM-MOD-Re-8"] = new Object();
DEV_PATHS["HM-MOD-Re-8"]["50"] = "/config/img/devices/50/94_hm-mod-re-8_thumb.png";
DEV_PATHS["HM-MOD-Re-8"]["250"] = "/config/img/devices/250/94_hm-mod-re-8.png";
DEV_HIGHLIGHT["HM-MOD-Re-8"] = new Object();
DEV_LIST.push('HMW-LC-Bl1-DR-2');
DEV_DESCRIPTION["HMW-LC-Bl1-DR-2"] = "HMW-LC-Bl1-DR";
DEV_PATHS["HMW-LC-Bl1-DR-2"] = new Object();
DEV_PATHS["HMW-LC-Bl1-DR-2"]["50"] = "/config/img/devices/50/27_hmw-lc-bl1-dr_thumb.png";
DEV_PATHS["HMW-LC-Bl1-DR-2"]["250"] = "/config/img/devices/250/27_hmw-lc-bl1-dr.png";
DEV_HIGHLIGHT["HMW-LC-Bl1-DR-2"] = new Object();
DEV_HIGHLIGHT["HMW-LC-Bl1-DR-2"]["1"] = [2, 0.452, 0.772, 0.044, 0.06];
DEV_HIGHLIGHT["HMW-LC-Bl1-DR-2"]["2"] = [2, 0.5, 0.772, 0.048, 0.06];
DEV_HIGHLIGHT["HMW-LC-Bl1-DR-2"]["3"] = [2, 0.452, 0.388, 0.096, 0.06];
DEV_LIST.push('HM-LC-Sw4-WM');
DEV_DESCRIPTION["HM-LC-Sw4-WM"] = "HM-LC-Sw4-WM";
DEV_PATHS["HM-LC-Sw4-WM"] = new Object();
DEV_PATHS["HM-LC-Sw4-WM"]["50"] = "/config/img/devices/50/76_hm-lc-sw4-wm_thumb.png";
DEV_PATHS["HM-LC-Sw4-WM"]["250"] = "/config/img/devices/250/76_hm-lc-sw4-wm.png";
DEV_HIGHLIGHT["HM-LC-Sw4-WM"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw4-WM"]["Channel1"] = [2, 0.208, 0.766, 0.065, 0.060];
DEV_HIGHLIGHT["HM-LC-Sw4-WM"]["Channel2"] = [2, 0.276, 0.766, 0.065, 0.060];
DEV_HIGHLIGHT["HM-LC-Sw4-WM"]["Channel3"] = [2, 0.344, 0.766, 0.065, 0.060];
DEV_HIGHLIGHT["HM-LC-Sw4-WM"]["Channel4"] = [2, 0.412, 0.766, 0.065, 0.060];
DEV_HIGHLIGHT["HM-LC-Sw4-WM"]["1_val"] = [3, 0.372, 0.288, '1', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-LC-Sw4-WM"]["2_val"] = [3, 0.372, 0.288, '2', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-LC-Sw4-WM"]["3_val"] = [3, 0.372, 0.288, '3', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-LC-Sw4-WM"]["4_val"] = [3, 0.372, 0.288, '4', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-LC-Sw4-WM"]["Circle1"] = [4, 0.534, 0.762, 0.044, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-WM"]["Circle2"] = [4, 0.583, 0.762, 0.044, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-WM"]["Circle3"] = [4, 0.637, 0.762, 0.044, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-WM"]["Circle4"] = [4, 0.693, 0.762, 0.044, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-WM"]["1"] = [5, 'Channel1', '1_val', 'Circle1'];
DEV_HIGHLIGHT["HM-LC-Sw4-WM"]["2"] = [5, 'Channel2', '2_val', 'Circle2'];
DEV_HIGHLIGHT["HM-LC-Sw4-WM"]["3"] = [5, 'Channel3', '3_val', 'Circle3'];
DEV_HIGHLIGHT["HM-LC-Sw4-WM"]["4"] = [5, 'Channel4', '4_val', 'Circle4'];
DEV_LIST.push('WS888');
DEV_DESCRIPTION["WS888"] = "WS888";
DEV_PATHS["WS888"] = new Object();
DEV_PATHS["WS888"]["50"] = "/config/img/devices/50/9_hm-ws550-us_thumb.png";
DEV_PATHS["WS888"]["250"] = "/config/img/devices/250/9_hm-ws550-us.png";
DEV_HIGHLIGHT["WS888"] = new Object();
DEV_HIGHLIGHT["WS888"]["1"] = [3, 0.440, 0.200, '1', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["WS888"]["2"] = [3, 0.440, 0.200, '2', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["WS888"]["3"] = [3, 0.440, 0.200, '3', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["WS888"]["4"] = [3, 0.440, 0.200, '4', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["WS888"]["5"] = [3, 0.440, 0.200, '5', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["WS888"]["6"] = [3, 0.440, 0.200, '6', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["WS888"]["7"] = [3, 0.440, 0.200, '7', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["WS888"]["8"] = [3, 0.440, 0.200, '8', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["WS888"]["9"] = [3, 0.440, 0.200, '9', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["WS888"]["10"] = [3, 0.405, 0.200, '10', 0.124, 'verdana', Font.BOLD];
DEV_LIST.push('HM-PB-2-WM55');
DEV_DESCRIPTION["HM-PB-2-WM55"] = "HM-PB-2-WM55";
DEV_PATHS["HM-PB-2-WM55"] = new Object();
DEV_PATHS["HM-PB-2-WM55"]["50"] = "/config/img/devices/50/75_hm-pb-2-wm55_thumb.png";
DEV_PATHS["HM-PB-2-WM55"]["250"] = "/config/img/devices/250/75_hm-pb-2-wm55.png";
DEV_HIGHLIGHT["HM-PB-2-WM55"] = new Object();
DEV_HIGHLIGHT["HM-PB-2-WM55"]["2"] = [2, 0.204, 0.23, 0.546, 0.128];
DEV_HIGHLIGHT["HM-PB-2-WM55"]["1"] = [2, 0.204, 0.65, 0.546, 0.128];
DEV_LIST.push('HM-CC-VG-1');
DEV_DESCRIPTION["HM-CC-VG-1"] = "HM-CC-VG-1";
DEV_PATHS["HM-CC-VG-1"] = new Object();
DEV_PATHS["HM-CC-VG-1"]["50"] = "/config/img/devices/50/95_group_hm-cc-vg-1_thumb.png";
DEV_PATHS["HM-CC-VG-1"]["250"] = "/config/img/devices/250/95_group_hm-cc-vg-1.png";
DEV_HIGHLIGHT["HM-CC-VG-1"] = new Object();
DEV_LIST.push('HM-WS550-US');
DEV_DESCRIPTION["HM-WS550-US"] = "HM-WS550-US";
DEV_PATHS["HM-WS550-US"] = new Object();
DEV_PATHS["HM-WS550-US"]["50"] = "/config/img/devices/50/9_hm-ws550-us_thumb.png";
DEV_PATHS["HM-WS550-US"]["250"] = "/config/img/devices/250/9_hm-ws550-us.png";
DEV_HIGHLIGHT["HM-WS550-US"] = new Object();
DEV_HIGHLIGHT["HM-WS550-US"]["1"] = [3, 0.440, 0.200, '1', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-WS550-US"]["2"] = [3, 0.440, 0.200, '2', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-WS550-US"]["3"] = [3, 0.440, 0.200, '3', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-WS550-US"]["4"] = [3, 0.440, 0.200, '4', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-WS550-US"]["5"] = [3, 0.440, 0.200, '5', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-WS550-US"]["6"] = [3, 0.440, 0.200, '6', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-WS550-US"]["7"] = [3, 0.440, 0.200, '7', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-WS550-US"]["8"] = [3, 0.440, 0.200, '8', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-WS550-US"]["9"] = [3, 0.440, 0.200, '9', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-WS550-US"]["10"] = [3, 0.405, 0.200, '10', 0.124, 'verdana', Font.BOLD];
DEV_LIST.push('HM-LC-Dim1PWM-CV-2');
DEV_DESCRIPTION["HM-LC-Dim1PWM-CV-2"] = "HM-LC-Dim1PWM-CV";
DEV_PATHS["HM-LC-Dim1PWM-CV-2"] = new Object();
DEV_PATHS["HM-LC-Dim1PWM-CV-2"]["50"] = "/config/img/devices/50/2_hm-lc-dim1l-cv_thumb.png";
DEV_PATHS["HM-LC-Dim1PWM-CV-2"]["250"] = "/config/img/devices/250/79_hm-lc-dim1pwm-cv.png";
DEV_HIGHLIGHT["HM-LC-Dim1PWM-CV-2"] = new Object();
DEV_LIST.push('HM-PBI-4-FM');
DEV_DESCRIPTION["HM-PBI-4-FM"] = "HM-PBI-4-FM";
DEV_PATHS["HM-PBI-4-FM"] = new Object();
DEV_PATHS["HM-PBI-4-FM"]["50"] = "/config/img/devices/50/38_hm-pbi-4-fm_thumb.png";
DEV_PATHS["HM-PBI-4-FM"]["250"] = "/config/img/devices/250/38_hm-pbi-4-fm.png";
DEV_HIGHLIGHT["HM-PBI-4-FM"] = new Object();
DEV_HIGHLIGHT["HM-PBI-4-FM"]["1_Key"] = [3, 0.18, 0.216, '1', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-PBI-4-FM"]["1_Kreis"] = [4, 0.265, 0.500, 0.028, 0.028];
DEV_HIGHLIGHT["HM-PBI-4-FM"]["1"] = [5, '1_Key', '1_Kreis'];
DEV_HIGHLIGHT["HM-PBI-4-FM"]["2_Key"] = [3, 0.18, 0.216, '2', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-PBI-4-FM"]["2_Kreis"] = [4, 0.287, 0.465, 0.028, 0.028];
DEV_HIGHLIGHT["HM-PBI-4-FM"]["2"] = [5, '2_Key', '2_Kreis'];
DEV_HIGHLIGHT["HM-PBI-4-FM"]["3_Key"] = [3, 0.18, 0.216, '3', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-PBI-4-FM"]["3_Kreis"] = [4, 0.309, 0.430, 0.028, 0.028];
DEV_HIGHLIGHT["HM-PBI-4-FM"]["3"] = [5, '3_Key', '3_Kreis'];
DEV_HIGHLIGHT["HM-PBI-4-FM"]["4_Key"] = [3, 0.18, 0.216, '4', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-PBI-4-FM"]["4_Kreis"] = [4, 0.331, 0.395, 0.028, 0.028];
DEV_HIGHLIGHT["HM-PBI-4-FM"]["4"] = [5, '4_Key', '4_Kreis'];
DEV_LIST.push('HM-LC-Sw1-Pl-DN-R3');
DEV_DESCRIPTION["HM-LC-Sw1-Pl-DN-R3"] = "HM-LC-Sw1-Pl-DN-R3";
DEV_PATHS["HM-LC-Sw1-Pl-DN-R3"] = new Object();
DEV_PATHS["HM-LC-Sw1-Pl-DN-R3"]["50"] = "/config/img/devices/50/107_hm-es-pmsw1-pl-R3_thumb.png";
DEV_PATHS["HM-LC-Sw1-Pl-DN-R3"]["250"] = "/config/img/devices/250/107_hm-es-pmsw1-pl-R3.png";
DEV_HIGHLIGHT["HM-LC-Sw1-Pl-DN-R3"] = new Object();
DEV_LIST.push('HM-ES-PMSw1-Pl-DN-R3');
DEV_DESCRIPTION["HM-ES-PMSw1-Pl-DN-R3"] = "HM-ES-PMSw1-Pl-DN-R3";
DEV_PATHS["HM-ES-PMSw1-Pl-DN-R3"] = new Object();
DEV_PATHS["HM-ES-PMSw1-Pl-DN-R3"]["50"] = "/config/img/devices/50/107_hm-es-pmsw1-pl-R3_thumb.png";
DEV_PATHS["HM-ES-PMSw1-Pl-DN-R3"]["250"] = "/config/img/devices/250/107_hm-es-pmsw1-pl-R3.png";
DEV_HIGHLIGHT["HM-ES-PMSw1-Pl-DN-R3"] = new Object();
DEV_LIST.push('HM-LC-Sw2-FM-2');
DEV_DESCRIPTION["HM-LC-Sw2-FM-2"] = "HM-LC-Sw2-FM";
DEV_PATHS["HM-LC-Sw2-FM-2"] = new Object();
DEV_PATHS["HM-LC-Sw2-FM-2"]["50"] = "/config/img/devices/50/5_hm-lc-sw2-fm_thumb.png";
DEV_PATHS["HM-LC-Sw2-FM-2"]["250"] = "/config/img/devices/250/5_hm-lc-sw2-fm.png";
DEV_HIGHLIGHT["HM-LC-Sw2-FM-2"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw2-FM-2"]["1_AUS"] = [2, 0.34, 0.66, 0.068, 0.148];
DEV_HIGHLIGHT["HM-LC-Sw2-FM-2"]["1_EIN"] = [2, 0.6, 0.66, 0.068, 0.148];
DEV_HIGHLIGHT["HM-LC-Sw2-FM-2"]["2_AUS"] = [2, 0.256, 0.66, 0.068, 0.148];
DEV_HIGHLIGHT["HM-LC-Sw2-FM-2"]["2_EIN"] = [2, 0.508, 0.66, 0.068, 0.148];
DEV_HIGHLIGHT["HM-LC-Sw2-FM-2"]["1"] = [5, '1_AUS', '1_EIN'];
DEV_HIGHLIGHT["HM-LC-Sw2-FM-2"]["2"] = [5, '2_AUS', '2_EIN'];
DEV_LIST.push('HM-LC-Dim2T-SM-2');
DEV_DESCRIPTION["HM-LC-Dim2T-SM-2"] = "HM-LC-Dim2T-SM";
DEV_PATHS["HM-LC-Dim2T-SM-2"] = new Object();
DEV_PATHS["HM-LC-Dim2T-SM-2"]["50"] = "/config/img/devices/50/64_hm-lc-dim2T-sm_thumb.png";
DEV_PATHS["HM-LC-Dim2T-SM-2"]["250"] = "/config/img/devices/250/64_hm-lc-dim2T-sm.png";
DEV_HIGHLIGHT["HM-LC-Dim2T-SM-2"] = new Object();
DEV_HIGHLIGHT["HM-LC-Dim2T-SM-2"]["1_Part1"] = [6, 0.539, 0.864, 0.539, 0.948, 0.012];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM-2"]["1_Part2"] = [6, 0.539, 0.948, 0.49, 0.884, 0.012];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM-2"]["1_Part3"] = [6, 0.539, 0.948, 0.588, 0.884, 0.012];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM-2"]["1_Arrow"] = [5, '1_Part1', '1_Part2', '1_Part3'];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM-2"]["2_Arrow"] = [7, '1_Arrow', 0.179, 0];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM-2"]["1_Key"] = [4, 0.25, 0.26, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM-2"]["2_Key"] = [4, 0.328, 0.26, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM-2"]["1"] = [5, '1_Arrow', '1_Key'];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM-2"]["2"] = [5, '2_Arrow', '2_Key'];
DEV_LIST.push('HM-ES-TX-WM');
DEV_DESCRIPTION["HM-ES-TX-WM"] = "HM-ES-TX-WM";
DEV_PATHS["HM-ES-TX-WM"] = new Object();
DEV_PATHS["HM-ES-TX-WM"]["50"] = "/config/img/devices/50/102_hm-es-tx-wm_thumb.png";
DEV_PATHS["HM-ES-TX-WM"]["250"] = "/config/img/devices/250/102_hm-es-tx-wm.png";
DEV_HIGHLIGHT["HM-ES-TX-WM"] = new Object();
DEV_LIST.push('HM-LC-Sw1-SM');
DEV_DESCRIPTION["HM-LC-Sw1-SM"] = "HM-LC-Sw1-SM";
DEV_PATHS["HM-LC-Sw1-SM"] = new Object();
DEV_PATHS["HM-LC-Sw1-SM"]["50"] = "/config/img/devices/50/8_hm-lc-sw1-sm_thumb.png";
DEV_PATHS["HM-LC-Sw1-SM"]["250"] = "/config/img/devices/250/8_hm-lc-sw1-sm.png";
DEV_HIGHLIGHT["HM-LC-Sw1-SM"] = new Object();
DEV_LIST.push('HM-LC-Dim1T-FM-644');
DEV_DESCRIPTION["HM-LC-Dim1T-FM-644"] = "HM-LC-Dim1T-FM";
DEV_PATHS["HM-LC-Dim1T-FM-644"] = new Object();
DEV_PATHS["HM-LC-Dim1T-FM-644"]["50"] = "/config/img/devices/50/65_hm-lc-dim1t-fm_thumb.png";
DEV_PATHS["HM-LC-Dim1T-FM-644"]["250"] = "/config/img/devices/250/65_hm-lc-dim1t-fm.png";
DEV_HIGHLIGHT["HM-LC-Dim1T-FM-644"] = new Object();
DEV_LIST.push('HM-Sec-TiS');
DEV_DESCRIPTION["HM-Sec-TiS"] = "HM-Sec-TiS";
DEV_PATHS["HM-Sec-TiS"] = new Object();
DEV_PATHS["HM-Sec-TiS"]["50"] = "/config/img/devices/50/47_hm-sec-tis_thumb.png";
DEV_PATHS["HM-Sec-TiS"]["250"] = "/config/img/devices/250/47_hm-sec-tis.png";
DEV_HIGHLIGHT["HM-Sec-TiS"] = new Object();
DEV_LIST.push('HM-WDS30-T-O');
DEV_DESCRIPTION["HM-WDS30-T-O"] = "HM-WDS30-T-O";
DEV_PATHS["HM-WDS30-T-O"] = new Object();
DEV_PATHS["HM-WDS30-T-O"]["50"] = "/config/img/devices/50/IP65_G201_thumb.png";
DEV_PATHS["HM-WDS30-T-O"]["250"] = "/config/img/devices/250/IP65_G201.png";
DEV_HIGHLIGHT["HM-WDS30-T-O"] = new Object();
DEV_LIST.push('HMW-Sec-TR-FM');
DEV_DESCRIPTION["HMW-Sec-TR-FM"] = "HMW-Sec-TR-FM";
DEV_PATHS["HMW-Sec-TR-FM"] = new Object();
DEV_PATHS["HMW-Sec-TR-FM"]["50"] = "/config/img/devices/50/33_hmw-sec-tr-fm_thumb.png";
DEV_PATHS["HMW-Sec-TR-FM"]["250"] = "/config/img/devices/250/33_hmw-sec-tr-fm.png";
DEV_HIGHLIGHT["HMW-Sec-TR-FM"] = new Object();
DEV_LIST.push('HM-LC-Sw4-SM-2');
DEV_DESCRIPTION["HM-LC-Sw4-SM-2"] = "HM-LC-Sw4-SM";
DEV_PATHS["HM-LC-Sw4-SM-2"] = new Object();
DEV_PATHS["HM-LC-Sw4-SM-2"]["50"] = "/config/img/devices/50/3_hm-lc-sw4-sm_thumb.png";
DEV_PATHS["HM-LC-Sw4-SM-2"]["250"] = "/config/img/devices/250/3_hm-lc-sw4-sm.png";
DEV_HIGHLIGHT["HM-LC-Sw4-SM-2"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw4-SM-2"]["1_Part1"] = [6, 0.136, 0.896, 0.136, 0.98, 0.012];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-2"]["1_Part2"] = [6, 0.136, 0.98, 0.096, 0.916, 0.012];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-2"]["1_Part3"] = [6, 0.136, 0.98, 0.176, 0.916, 0.012];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-2"]["1_Arrow"] = [5, '1_Part1', '1_Part2', '1_Part3'];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-2"]["2_Arrow"] = [7, '1_Arrow', 0.164, 0];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-2"]["3_Arrow"] = [7, '1_Arrow', 0.328, 0];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-2"]["4_Arrow"] = [7, '1_Arrow', 0.492, 0];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-2"]["1_Key"] = [4, 0.244, 0.372, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-2"]["2_Key"] = [4, 0.328, 0.372, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-2"]["3_Key"] = [4, 0.404, 0.372, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-2"]["4_Key"] = [4, 0.484, 0.372, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-2"]["1"] = [5, '1_Arrow', '1_Key'];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-2"]["2"] = [5, '2_Arrow', '2_Key'];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-2"]["3"] = [5, '3_Arrow', '3_Key'];
DEV_HIGHLIGHT["HM-LC-Sw4-SM-2"]["4"] = [5, '4_Arrow', '4_Key'];
DEV_LIST.push('ZEL STG RM FSS UP3');
DEV_DESCRIPTION["ZEL STG RM FSS UP3"] = "ZEL_STG_RM_FSS_UP3";
DEV_PATHS["ZEL STG RM FSS UP3"] = new Object();
DEV_PATHS["ZEL STG RM FSS UP3"]["50"] = "/config/img/devices/50/39_hm-swi-3-fm_thumb.png";
DEV_PATHS["ZEL STG RM FSS UP3"]["250"] = "/config/img/devices/250/39_hm-swi-3-fm.png";
DEV_HIGHLIGHT["ZEL STG RM FSS UP3"] = new Object();
DEV_HIGHLIGHT["ZEL STG RM FSS UP3"]["1_Key"] = [3, 0.18, 0.216, '1', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["ZEL STG RM FSS UP3"]["1_Kreis"] = [4, 0.220, 0.480, 0.028, 0.028];
DEV_HIGHLIGHT["ZEL STG RM FSS UP3"]["1"] = [5, '1_Key', '1_Kreis'];
DEV_HIGHLIGHT["ZEL STG RM FSS UP3"]["2_Key"] = [3, 0.18, 0.216, '2', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["ZEL STG RM FSS UP3"]["2_Kreis"] = [4, 0.265, 0.405, 0.028, 0.028];
DEV_HIGHLIGHT["ZEL STG RM FSS UP3"]["2"] = [5, '2_Key', '2_Kreis'];
DEV_HIGHLIGHT["ZEL STG RM FSS UP3"]["3_Key"] = [3, 0.18, 0.216, '3', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["ZEL STG RM FSS UP3"]["3_Kreis"] = [4, 0.310, 0.33, 0.028, 0.028];
DEV_HIGHLIGHT["ZEL STG RM FSS UP3"]["3"] = [5, '3_Key', '3_Kreis'];
DEV_LIST.push('atent');
DEV_DESCRIPTION["atent"] = "atent";
DEV_PATHS["atent"] = new Object();
DEV_PATHS["atent"]["50"] = "/config/img/devices/50/73_hm-atent_thumb.png";
DEV_PATHS["atent"]["250"] = "/config/img/devices/250/73_hm-atent.png";
DEV_HIGHLIGHT["atent"] = new Object();
DEV_HIGHLIGHT["atent"]["1"] = [4, 0.177, 0.216, 0.166, 0.166];
DEV_HIGHLIGHT["atent"]["2"] = [4, 0.438, 0.216, 0.166, 0.166];
DEV_HIGHLIGHT["atent"]["3"] = [4, 0.273, 0.49, 0.24, 0.235];
DEV_HIGHLIGHT["atent"]["1+2"] = [5, '1', '2'];
DEV_LIST.push('HM-LC-Dim1L-CV-644');
DEV_DESCRIPTION["HM-LC-Dim1L-CV-644"] = "HM-LC-Dim1L-CV";
DEV_PATHS["HM-LC-Dim1L-CV-644"] = new Object();
DEV_PATHS["HM-LC-Dim1L-CV-644"]["50"] = "/config/img/devices/50/2_hm-lc-dim1l-cv_thumb.png";
DEV_PATHS["HM-LC-Dim1L-CV-644"]["250"] = "/config/img/devices/250/2_hm-lc-dim1l-cv.png";
DEV_HIGHLIGHT["HM-LC-Dim1L-CV-644"] = new Object();
DEV_LIST.push('ZEL STG RM FEP 230V');
DEV_DESCRIPTION["ZEL STG RM FEP 230V"] = "ZEL_STG_RM_FEP_230V";
DEV_PATHS["ZEL STG RM FEP 230V"] = new Object();
DEV_PATHS["ZEL STG RM FEP 230V"]["50"] = "/config/img/devices/50/7_hm-lc-bl1-fm_thumb.png";
DEV_PATHS["ZEL STG RM FEP 230V"]["250"] = "/config/img/devices/250/7_hm-lc-bl1-fm.png";
DEV_HIGHLIGHT["ZEL STG RM FEP 230V"] = new Object();
DEV_LIST.push('HM-Dis-TD-T');
DEV_DESCRIPTION["HM-Dis-TD-T"] = "HM-Dis-TD-T";
DEV_PATHS["HM-Dis-TD-T"] = new Object();
DEV_PATHS["HM-Dis-TD-T"]["50"] = "/config/img/devices/50/81_hm-dis-td-t_thumb.png";
DEV_PATHS["HM-Dis-TD-T"]["250"] = "/config/img/devices/250/81_hm-dis-td-t.png";
DEV_HIGHLIGHT["HM-Dis-TD-T"] = new Object();
DEV_LIST.push('HM-Sec-SCo');
DEV_DESCRIPTION["HM-Sec-SCo"] = "HM-Sec-SCo";
DEV_PATHS["HM-Sec-SCo"] = new Object();
DEV_PATHS["HM-Sec-SCo"]["50"] = "/config/img/devices/50/98_hm-sec-sco_thumb.png";
DEV_PATHS["HM-Sec-SCo"]["250"] = "/config/img/devices/250/98_hm-sec-sco.png";
DEV_HIGHLIGHT["HM-Sec-SCo"] = new Object();
DEV_LIST.push('WS550');
DEV_DESCRIPTION["WS550"] = "Funk- Wetterstation";
DEV_PATHS["WS550"] = new Object();
DEV_PATHS["WS550"]["50"] = "/config/img/devices/50/9_hm-ws550-us_thumb.png";
DEV_PATHS["WS550"]["250"] = "/config/img/devices/250/9_hm-ws550-us.png";
DEV_HIGHLIGHT["WS550"] = new Object();
DEV_HIGHLIGHT["WS550"]["1"] = [3, 0.440, 0.200, '1', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["WS550"]["2"] = [3, 0.440, 0.200, '2', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["WS550"]["3"] = [3, 0.440, 0.200, '3', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["WS550"]["4"] = [3, 0.440, 0.200, '4', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["WS550"]["5"] = [3, 0.440, 0.200, '5', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["WS550"]["6"] = [3, 0.440, 0.200, '6', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["WS550"]["7"] = [3, 0.440, 0.200, '7', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["WS550"]["8"] = [3, 0.440, 0.200, '8', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["WS550"]["9"] = [3, 0.440, 0.200, '9', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["WS550"]["10"] = [3, 0.405, 0.200, '10', 0.124, 'verdana', Font.BOLD];
DEV_LIST.push('HM-MOD-EM-8');
DEV_DESCRIPTION["HM-MOD-EM-8"] = "HM-MOD-EM-8";
DEV_PATHS["HM-MOD-EM-8"] = new Object();
DEV_PATHS["HM-MOD-EM-8"]["50"] = "/config/img/devices/50/99_hm-mod-em-8_thumb.png";
DEV_PATHS["HM-MOD-EM-8"]["250"] = "/config/img/devices/250/99_hm-mod-em-8.png";
DEV_HIGHLIGHT["HM-MOD-EM-8"] = new Object();
DEV_LIST.push('ZEL STG RM HS 4');
DEV_DESCRIPTION["ZEL STG RM HS 4"] = "ZEL_STG_RM_HS_4";
DEV_PATHS["ZEL STG RM HS 4"] = new Object();
DEV_PATHS["ZEL STG RM HS 4"]["50"] = "/config/img/devices/50/18_hm-rc-4_thumb.png";
DEV_PATHS["ZEL STG RM HS 4"]["250"] = "/config/img/devices/250/18_hm-rc-4.png";
DEV_HIGHLIGHT["ZEL STG RM HS 4"] = new Object();
DEV_HIGHLIGHT["ZEL STG RM HS 4"]["1"] = [4, 0.268, 0.236, 0.16, 0.164];
DEV_HIGHLIGHT["ZEL STG RM HS 4"]["2"] = [4, 0.476, 0.236, 0.16, 0.164];
DEV_HIGHLIGHT["ZEL STG RM HS 4"]["3"] = [4, 0.268, 0.48, 0.16, 0.164];
DEV_HIGHLIGHT["ZEL STG RM HS 4"]["4"] = [4, 0.476, 0.48, 0.16, 0.164];
DEV_HIGHLIGHT["ZEL STG RM HS 4"]["1+2"] = [5, '1', '2'];
DEV_HIGHLIGHT["ZEL STG RM HS 4"]["3+4"] = [5, '3', '4'];
DEV_LIST.push('HM-LC-Dim2T-SM');
DEV_DESCRIPTION["HM-LC-Dim2T-SM"] = "HM-LC-Dim2T-SM";
DEV_PATHS["HM-LC-Dim2T-SM"] = new Object();
DEV_PATHS["HM-LC-Dim2T-SM"]["50"] = "/config/img/devices/50/64_hm-lc-dim2T-sm_thumb.png";
DEV_PATHS["HM-LC-Dim2T-SM"]["250"] = "/config/img/devices/250/64_hm-lc-dim2T-sm.png";
DEV_HIGHLIGHT["HM-LC-Dim2T-SM"] = new Object();
DEV_HIGHLIGHT["HM-LC-Dim2T-SM"]["1_Part1"] = [6, 0.539, 0.864, 0.539, 0.948, 0.012];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM"]["1_Part2"] = [6, 0.539, 0.948, 0.49, 0.884, 0.012];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM"]["1_Part3"] = [6, 0.539, 0.948, 0.588, 0.884, 0.012];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM"]["1_Arrow"] = [5, '1_Part1', '1_Part2', '1_Part3'];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM"]["2_Arrow"] = [7, '1_Arrow', 0.179, 0];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM"]["1_Key"] = [4, 0.25, 0.26, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM"]["2_Key"] = [4, 0.328, 0.26, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM"]["1"] = [5, '1_Arrow', '1_Key'];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM"]["2"] = [5, '2_Arrow', '2_Key'];
DEV_LIST.push('HM-LC-Sw2-PB-FM');
DEV_DESCRIPTION["HM-LC-Sw2-PB-FM"] = "HM-LC-Sw2-PB-FM";
DEV_PATHS["HM-LC-Sw2-PB-FM"] = new Object();
DEV_PATHS["HM-LC-Sw2-PB-FM"]["50"] = "/config/img/devices/50/PushButton-4ch-wm_thumb.png";
DEV_PATHS["HM-LC-Sw2-PB-FM"]["250"] = "/config/img/devices/250/PushButton-4ch-wm.png";
DEV_HIGHLIGHT["HM-LC-Sw2-PB-FM"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw2-PB-FM"]["1"] = [2, 0.24, 0.312, 0.204, 0.412];
DEV_HIGHLIGHT["HM-LC-Sw2-PB-FM"]["2"] = [2, 0.46, 0.312, 0.204, 0.412];
DEV_LIST.push('263 167 Gruppe');
DEV_DESCRIPTION["263 167 Gruppe"] = "263_167_Gruppe";
DEV_PATHS["263 167 Gruppe"] = new Object();
DEV_PATHS["263 167 Gruppe"]["50"] = "/config/img/devices/50/52_hm-sec-sd-team_thumb.png";
DEV_PATHS["263 167 Gruppe"]["250"] = "/config/img/devices/250/52_hm-sec-sd-team.png";
DEV_HIGHLIGHT["263 167 Gruppe"] = new Object();
DEV_LIST.push('HM-LC-Dim1TPBU-FM');
DEV_DESCRIPTION["HM-LC-Dim1TPBU-FM"] = "HM-LC-Dim1TPBU-FM";
DEV_PATHS["HM-LC-Dim1TPBU-FM"] = new Object();
DEV_PATHS["HM-LC-Dim1TPBU-FM"]["50"] = "/config/img/devices/50/PushButton-2ch-wm_thumb.png";
DEV_PATHS["HM-LC-Dim1TPBU-FM"]["250"] = "/config/img/devices/250/PushButton-2ch-wm.png";
DEV_HIGHLIGHT["HM-LC-Dim1TPBU-FM"] = new Object();
DEV_LIST.push('HM-LC-Dim1T-CV');
DEV_DESCRIPTION["HM-LC-Dim1T-CV"] = "HM-LC-Dim1T-CV";
DEV_PATHS["HM-LC-Dim1T-CV"] = new Object();
DEV_PATHS["HM-LC-Dim1T-CV"]["50"] = "/config/img/devices/50/66_hm-lc-dim1t-cv_thumb.png";
DEV_PATHS["HM-LC-Dim1T-CV"]["250"] = "/config/img/devices/250/66_hm-lc-dim1t-cv.png";
DEV_HIGHLIGHT["HM-LC-Dim1T-CV"] = new Object();
DEV_LIST.push('HM-LC-DDC1-PCB');
DEV_DESCRIPTION["HM-LC-DDC1-PCB"] = "HM-LC-DDC1-PCB";
DEV_PATHS["HM-LC-DDC1-PCB"] = new Object();
DEV_PATHS["HM-LC-DDC1-PCB"]["50"] = "/config/img/devices/50/54a_lc-ddc1_thumb.png";
DEV_PATHS["HM-LC-DDC1-PCB"]["250"] = "/config/img/devices/250/54a_lc-ddc1-pcb.png";
DEV_HIGHLIGHT["HM-LC-DDC1-PCB"] = new Object();
DEV_LIST.push('ZEL STG RM FSA');
DEV_DESCRIPTION["ZEL STG RM FSA"] = "ZEL_STG_RM_FSA";
DEV_PATHS["ZEL STG RM FSA"] = new Object();
DEV_PATHS["ZEL STG RM FSA"]["50"] = "/config/img/devices/50/43_hm-cc-vd_thumb.png";
DEV_PATHS["ZEL STG RM FSA"]["250"] = "/config/img/devices/250/43_hm-cc-vd.png";
DEV_HIGHLIGHT["ZEL STG RM FSA"] = new Object();
DEV_LIST.push('DEVICE');
DEV_DESCRIPTION["DEVICE"] = "DEVICE";
DEV_PATHS["DEVICE"] = new Object();
DEV_PATHS["DEVICE"]["50"] = "/config/img/devices/50/unknown_device_thumb.png";
DEV_PATHS["DEVICE"]["250"] = "/config/img/devices/250/unknown_device.png";
DEV_HIGHLIGHT["DEVICE"] = new Object();
DEV_HIGHLIGHT["DEVICE"]["Icon"] = [3, 0.092, 0.6, 'Icon_folgt', 0.14, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["DEVICE"]["1_channel"] = [3, 0.44, 0.232, '1', 0.18, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["DEVICE"]["1"] = [5, '1_channel', 'Icon'];
DEV_HIGHLIGHT["DEVICE"]["2_channel"] = [3, 0.44, 0.232, '2', 0.18, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["DEVICE"]["2"] = [5, '2_channel', 'Icon'];
DEV_LIST.push('HM-CC-SCD');
DEV_DESCRIPTION["HM-CC-SCD"] = "HM-CC-SCD";
DEV_PATHS["HM-CC-SCD"] = new Object();
DEV_PATHS["HM-CC-SCD"]["50"] = "/config/img/devices/50/57_hm-cc-scd_thumb.png";
DEV_PATHS["HM-CC-SCD"]["250"] = "/config/img/devices/250/57_hm-cc-scd.png";
DEV_HIGHLIGHT["HM-CC-SCD"] = new Object();
DEV_LIST.push('HM-LC-Sw1-Pl-CT-R1');
DEV_DESCRIPTION["HM-LC-Sw1-Pl-CT-R1"] = "HM-LC-Sw1-Pl-CT-R1";
DEV_PATHS["HM-LC-Sw1-Pl-CT-R1"] = new Object();
DEV_PATHS["HM-LC-Sw1-Pl-CT-R1"]["50"] = "/config/img/devices/50/109_hm-lc-sw1-pl-ct_thump.png";
DEV_PATHS["HM-LC-Sw1-Pl-CT-R1"]["250"] = "/config/img/devices/250/109_hm-lc-sw1-pl-ct.png";
DEV_HIGHLIGHT["HM-LC-Sw1-Pl-CT-R1"] = new Object();
DEV_LIST.push('HM-RC-4-B');
DEV_DESCRIPTION["HM-RC-4-B"] = "HM-RC-4-B";
DEV_PATHS["HM-RC-4-B"] = new Object();
DEV_PATHS["HM-RC-4-B"]["50"] = "/config/img/devices/50/18_hm-rc-4_thumb.png";
DEV_PATHS["HM-RC-4-B"]["250"] = "/config/img/devices/250/18_hm-rc-4.png";
DEV_HIGHLIGHT["HM-RC-4-B"] = new Object();
DEV_HIGHLIGHT["HM-RC-4-B"]["1"] = [4, 0.268, 0.236, 0.16, 0.164];
DEV_HIGHLIGHT["HM-RC-4-B"]["2"] = [4, 0.476, 0.236, 0.16, 0.164];
DEV_HIGHLIGHT["HM-RC-4-B"]["3"] = [4, 0.268, 0.48, 0.16, 0.164];
DEV_HIGHLIGHT["HM-RC-4-B"]["4"] = [4, 0.476, 0.48, 0.16, 0.164];
DEV_HIGHLIGHT["HM-RC-4-B"]["1+2"] = [5, '1', '2'];
DEV_HIGHLIGHT["HM-RC-4-B"]["3+4"] = [5, '3', '4'];
DEV_LIST.push('HM-LC-Sw4-DR');
DEV_DESCRIPTION["HM-LC-Sw4-DR"] = "HM-LC-Sw4-DR";
DEV_PATHS["HM-LC-Sw4-DR"] = new Object();
DEV_PATHS["HM-LC-Sw4-DR"]["50"] = "/config/img/devices/50/68_hm-lc-sw4-dr_thumb.png";
DEV_PATHS["HM-LC-Sw4-DR"]["250"] = "/config/img/devices/250/68_hm-lc-sw4-dr.png";
DEV_HIGHLIGHT["HM-LC-Sw4-DR"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw4-DR"]["1"] = [4, 0.088, 0.556, 0.048, 0.04];
DEV_HIGHLIGHT["HM-LC-Sw4-DR"]["2"] = [4, 0.280, 0.556, 0.048, 0.04];
DEV_HIGHLIGHT["HM-LC-Sw4-DR"]["3"] = [4, 0.472, 0.556, 0.048, 0.04];
DEV_HIGHLIGHT["HM-LC-Sw4-DR"]["4"] = [4, 0.656, 0.556, 0.048, 0.04];
DEV_LIST.push('HM-LC-Sw4-DR-2');
DEV_DESCRIPTION["HM-LC-Sw4-DR-2"] = "HM-LC-Sw4-DR";
DEV_PATHS["HM-LC-Sw4-DR-2"] = new Object();
DEV_PATHS["HM-LC-Sw4-DR-2"]["50"] = "/config/img/devices/50/68_hm-lc-sw4-dr_thumb.png";
DEV_PATHS["HM-LC-Sw4-DR-2"]["250"] = "/config/img/devices/250/68_hm-lc-sw4-dr.png";
DEV_HIGHLIGHT["HM-LC-Sw4-DR-2"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw4-DR-2"]["1"] = [4, 0.088, 0.556, 0.048, 0.04];
DEV_HIGHLIGHT["HM-LC-Sw4-DR-2"]["2"] = [4, 0.280, 0.556, 0.048, 0.04];
DEV_HIGHLIGHT["HM-LC-Sw4-DR-2"]["3"] = [4, 0.472, 0.556, 0.048, 0.04];
DEV_HIGHLIGHT["HM-LC-Sw4-DR-2"]["4"] = [4, 0.656, 0.556, 0.048, 0.04];
DEV_LIST.push('ZEL STG RM WT 2');
DEV_DESCRIPTION["ZEL STG RM WT 2"] = "ZEL_STG_RM_WT_2";
DEV_PATHS["ZEL STG RM WT 2"] = new Object();
DEV_PATHS["ZEL STG RM WT 2"]["50"] = "/config/img/devices/50/75_hm-pb-2-wm55_thumb.png";
DEV_PATHS["ZEL STG RM WT 2"]["250"] = "/config/img/devices/250/75_hm-pb-2-wm55.png";
DEV_HIGHLIGHT["ZEL STG RM WT 2"] = new Object();
DEV_HIGHLIGHT["ZEL STG RM WT 2"]["2"] = [2, 0.204, 0.23, 0.546, 0.128];
DEV_HIGHLIGHT["ZEL STG RM WT 2"]["1"] = [2, 0.204, 0.65, 0.546, 0.128];
DEV_LIST.push('HM-LC-Sw1-PB-FM');
DEV_DESCRIPTION["HM-LC-Sw1-PB-FM"] = "HM-LC-Sw1-PB-FM";
DEV_PATHS["HM-LC-Sw1-PB-FM"] = new Object();
DEV_PATHS["HM-LC-Sw1-PB-FM"]["50"] = "/config/img/devices/50/PushButton-2ch-wm_thumb.png";
DEV_PATHS["HM-LC-Sw1-PB-FM"]["250"] = "/config/img/devices/250/PushButton-2ch-wm.png";
DEV_HIGHLIGHT["HM-LC-Sw1-PB-FM"] = new Object();
DEV_LIST.push('HM-LC-Sw4-Ba-PCB');
DEV_DESCRIPTION["HM-LC-Sw4-Ba-PCB"] = "HM-LC-Sw4-Ba-PCB";
DEV_PATHS["HM-LC-Sw4-Ba-PCB"] = new Object();
DEV_PATHS["HM-LC-Sw4-Ba-PCB"]["50"] = "/config/img/devices/50/88_hm-lc-sw4-ba-pcb_thumb.png";
DEV_PATHS["HM-LC-Sw4-Ba-PCB"]["250"] = "/config/img/devices/250/88_hm-lc-sw4-ba-pcb.png";
DEV_HIGHLIGHT["HM-LC-Sw4-Ba-PCB"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw4-Ba-PCB"]["1"] = [2, 0.140, 0.704, 0.092, 0.052];
DEV_HIGHLIGHT["HM-LC-Sw4-Ba-PCB"]["2"] = [2, 0.328, 0.704, 0.092, 0.052];
DEV_HIGHLIGHT["HM-LC-Sw4-Ba-PCB"]["3"] = [2, 0.512, 0.704, 0.092, 0.052];
DEV_HIGHLIGHT["HM-LC-Sw4-Ba-PCB"]["4"] = [2, 0.688, 0.704, 0.092, 0.052];
DEV_LIST.push('HM-WDC7000');
DEV_DESCRIPTION["HM-WDC7000"] = "HM-WDC7000";
DEV_PATHS["HM-WDC7000"] = new Object();
DEV_PATHS["HM-WDC7000"]["50"] = "/config/img/devices/50/9_hm-ws550-us_thumb.png";
DEV_PATHS["HM-WDC7000"]["250"] = "/config/img/devices/250/9_hm-ws550-us.png";
DEV_HIGHLIGHT["HM-WDC7000"] = new Object();
DEV_HIGHLIGHT["HM-WDC7000"]["1"] = [3, 0.440, 0.200, '1', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-WDC7000"]["2"] = [3, 0.440, 0.200, '2', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-WDC7000"]["3"] = [3, 0.440, 0.200, '3', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-WDC7000"]["4"] = [3, 0.440, 0.200, '4', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-WDC7000"]["5"] = [3, 0.440, 0.200, '5', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-WDC7000"]["6"] = [3, 0.440, 0.200, '6', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-WDC7000"]["7"] = [3, 0.440, 0.200, '7', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-WDC7000"]["8"] = [3, 0.440, 0.200, '8', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-WDC7000"]["9"] = [3, 0.440, 0.200, '9', 0.124, 'verdana', Font.BOLD];
DEV_HIGHLIGHT["HM-WDC7000"]["10"] = [3, 0.405, 0.200, '10', 0.124, 'verdana', Font.BOLD];
DEV_LIST.push('HM-Sec-SFA-SM');
DEV_DESCRIPTION["HM-Sec-SFA-SM"] = "HM-Sec-SFA-SM";
DEV_PATHS["HM-Sec-SFA-SM"] = new Object();
DEV_PATHS["HM-Sec-SFA-SM"]["50"] = "/config/img/devices/50/55_hm-sec-sfa-sm_thumb.png";
DEV_PATHS["HM-Sec-SFA-SM"]["250"] = "/config/img/devices/250/55_hm-sec-sfa-sm.png";
DEV_HIGHLIGHT["HM-Sec-SFA-SM"] = new Object();
DEV_HIGHLIGHT["HM-Sec-SFA-SM"]["1_Taster"] = [4, 0.348, 0.388, 0.08, 0.08];
DEV_HIGHLIGHT["HM-Sec-SFA-SM"]["1_Led"] = [4, 0.372, 0.304, 0.036, 0.036];
DEV_HIGHLIGHT["HM-Sec-SFA-SM"]["1"] = [5, '1_Taster', '1_Led'];
DEV_HIGHLIGHT["HM-Sec-SFA-SM"]["2_Taster"] = [4, 0.552, 0.388, 0.08, 0.08];
DEV_HIGHLIGHT["HM-Sec-SFA-SM"]["2_Led"] = [4, 0.576, 0.304, 0.036, 0.036];
DEV_HIGHLIGHT["HM-Sec-SFA-SM"]["2"] = [5, '2_Taster', '2_Led'];
DEV_LIST.push('HM-WS550STH-I');
DEV_DESCRIPTION["HM-WS550STH-I"] = "HM-WS550STH-I";
DEV_PATHS["HM-WS550STH-I"] = new Object();
DEV_PATHS["HM-WS550STH-I"]["50"] = "/config/img/devices/50/13_hm-ws550sth-i_thumb.png";
DEV_PATHS["HM-WS550STH-I"]["250"] = "/config/img/devices/250/13_hm-ws550sth-i.png";
DEV_HIGHLIGHT["HM-WS550STH-I"] = new Object();
DEV_LIST.push('HM-LC-Bl1-FM-2');
DEV_DESCRIPTION["HM-LC-Bl1-FM-2"] = "HM-LC-Bl1-FM";
DEV_PATHS["HM-LC-Bl1-FM-2"] = new Object();
DEV_PATHS["HM-LC-Bl1-FM-2"]["50"] = "/config/img/devices/50/7_hm-lc-bl1-fm_thumb.png";
DEV_PATHS["HM-LC-Bl1-FM-2"]["250"] = "/config/img/devices/250/7_hm-lc-bl1-fm.png";
DEV_HIGHLIGHT["HM-LC-Bl1-FM-2"] = new Object();
DEV_LIST.push('HM-Sen-MDIR-WM55');
DEV_DESCRIPTION["HM-Sen-MDIR-WM55"] = "HM-Sen-MDIR-WM55";
DEV_PATHS["HM-Sen-MDIR-WM55"] = new Object();
DEV_PATHS["HM-Sen-MDIR-WM55"]["50"] = "/config/img/devices/50/103_hm-sen-mdir-wm55_thumb.png";
DEV_PATHS["HM-Sen-MDIR-WM55"]["250"] = "/config/img/devices/250/103_hm-sen-mdir-wm55.png";
DEV_HIGHLIGHT["HM-Sen-MDIR-WM55"] = new Object();
DEV_HIGHLIGHT["HM-Sen-MDIR-WM55"]["1"] = [2, 0.192, 0.660, 0.524, 0.12];
DEV_HIGHLIGHT["HM-Sen-MDIR-WM55"]["2"] = [2, 0.192, 0.252, 0.524, 0.12];
DEV_HIGHLIGHT["HM-Sen-MDIR-WM55"]["1+2"] = [5, '1', '2'];
DEV_LIST.push('HM-LC-Sw1-Pl-DN-R1');
DEV_DESCRIPTION["HM-LC-Sw1-Pl-DN-R1"] = "HM-LC-Sw1-Pl-DN-R1";
DEV_PATHS["HM-LC-Sw1-Pl-DN-R1"] = new Object();
DEV_PATHS["HM-LC-Sw1-Pl-DN-R1"]["50"] = "/config/img/devices/50/93_hm-es-pmsw1-pl_thumb.png";
DEV_PATHS["HM-LC-Sw1-Pl-DN-R1"]["250"] = "/config/img/devices/250/93_hm-es-pmsw1-pl.png";
DEV_HIGHLIGHT["HM-LC-Sw1-Pl-DN-R1"] = new Object();
DEV_LIST.push('HM-RC-Key4-3');
DEV_DESCRIPTION["HM-RC-Key4-3"] = "HM-RC-4";
DEV_PATHS["HM-RC-Key4-3"] = new Object();
DEV_PATHS["HM-RC-Key4-3"]["50"] = "/config/img/devices/50/84_hm-rc-4-x_thumb.png";
DEV_PATHS["HM-RC-Key4-3"]["250"] = "/config/img/devices/250/86_hm-rc-key4-3.png";
DEV_HIGHLIGHT["HM-RC-Key4-3"] = new Object();
DEV_HIGHLIGHT["HM-RC-Key4-3"]["arrow_part1"] = [6, 0.312, 0.288, 0.416, 0.288, 0.012];
DEV_HIGHLIGHT["HM-RC-Key4-3"]["arrow_part2"] = [6, 0.312, 0.288, 0.352, 0.248, 0.012];
DEV_HIGHLIGHT["HM-RC-Key4-3"]["arrow_part3"] = [6, 0.312, 0.288, 0.352, 0.328, 0.012];
DEV_HIGHLIGHT["HM-RC-Key4-3"]["Arrow"] = [5, 'arrow_part1', 'arrow_part2', 'arrow_part3'];
DEV_HIGHLIGHT["HM-RC-Key4-3"]["1_Arrow"] = [7, 'Arrow', 0.25, 0.0];
DEV_HIGHLIGHT["HM-RC-Key4-3"]["2_Arrow"] = [7, 'Arrow', 0.238, 0.156];
DEV_HIGHLIGHT["HM-RC-Key4-3"]["3_Arrow"] = [7, 'Arrow', 0.228, 0.312];
DEV_HIGHLIGHT["HM-RC-Key4-3"]["4_Arrow"] = [7, 'Arrow', 0.212, 0.468];
DEV_HIGHLIGHT["HM-RC-Key4-3"]["1"] = [5, '2_Arrow'];
DEV_HIGHLIGHT["HM-RC-Key4-3"]["2"] = [5, '1_Arrow'];
DEV_HIGHLIGHT["HM-RC-Key4-3"]["3"] = [5, '4_Arrow'];
DEV_HIGHLIGHT["HM-RC-Key4-3"]["4"] = [5, '3_Arrow'];
DEV_HIGHLIGHT["HM-RC-Key4-3"]["1+2"] = [5, '1_Arrow', '2_Arrow'];
DEV_HIGHLIGHT["HM-RC-Key4-3"]["3+4"] = [5, '3_Arrow', '4_Arrow'];
DEV_LIST.push('HM-Sec-Win');
DEV_DESCRIPTION["HM-Sec-Win"] = "HM-Sec-Win";
DEV_PATHS["HM-Sec-Win"] = new Object();
DEV_PATHS["HM-Sec-Win"]["50"] = "/config/img/devices/50/15_hm-sec-win_thumb.png";
DEV_PATHS["HM-Sec-Win"]["250"] = "/config/img/devices/250/15_hm-sec-win.png";
DEV_HIGHLIGHT["HM-Sec-Win"] = new Object();
DEV_LIST.push('HM-LC-Dim1T-Pl-644');
DEV_DESCRIPTION["HM-LC-Dim1T-Pl-644"] = "HM-LC-Dim1T-Pl";
DEV_PATHS["HM-LC-Dim1T-Pl-644"] = new Object();
DEV_PATHS["HM-LC-Dim1T-Pl-644"]["50"] = "/config/img/devices/50/OM55_DimmerSwitch_thumb.png";
DEV_PATHS["HM-LC-Dim1T-Pl-644"]["250"] = "/config/img/devices/250/OM55_DimmerSwitch.png";
DEV_HIGHLIGHT["HM-LC-Dim1T-Pl-644"] = new Object();
DEV_HIGHLIGHT["HM-LC-Dim1T-Pl-644"]["1_part1"] = [2, 0.548, 0.468, 0.072, 0.052];
DEV_HIGHLIGHT["HM-LC-Dim1T-Pl-644"]["1_part2"] = [2, 0.612, 0.452, 0.028, 0.056];
DEV_HIGHLIGHT["HM-LC-Dim1T-Pl-644"]["1"] = [5, '1_part1', '1_part2'];
DEV_LIST.push('HMW-IO-4-FM');
DEV_DESCRIPTION["HMW-IO-4-FM"] = "HMW-IO-4-FM";
DEV_PATHS["HMW-IO-4-FM"] = new Object();
DEV_PATHS["HMW-IO-4-FM"]["50"] = "/config/img/devices/50/29_hmw-io-4-fm_thumb.png";
DEV_PATHS["HMW-IO-4-FM"]["250"] = "/config/img/devices/250/29_hmw-io-4-fm.png";
DEV_HIGHLIGHT["HMW-IO-4-FM"] = new Object();
DEV_HIGHLIGHT["HMW-IO-4-FM"]["1"] = [6, 0.616, 0.736, 0.612, 0.836, 0.02];
DEV_HIGHLIGHT["HMW-IO-4-FM"]["2"] = [6, 0.672, 0.736, 0.668, 0.836, 0.02];
DEV_HIGHLIGHT["HMW-IO-4-FM"]["3"] = [6, 0.724, 0.736, 0.724, 0.836, 0.02];
DEV_HIGHLIGHT["HMW-IO-4-FM"]["4"] = [6, 0.78, 0.736, 0.78, 0.836, 0.02];
DEV_LIST.push('HM-OU-CF-Pl');
DEV_DESCRIPTION["HM-OU-CF-Pl"] = "HM-OU-CF-Pl";
DEV_PATHS["HM-OU-CF-Pl"] = new Object();
DEV_PATHS["HM-OU-CF-Pl"]["50"] = "/config/img/devices/50/60_hm-ou-cf-pl_thumb.png";
DEV_PATHS["HM-OU-CF-Pl"]["250"] = "/config/img/devices/250/60_hm-ou-cf-pl.png";
DEV_HIGHLIGHT["HM-OU-CF-Pl"] = new Object();
DEV_HIGHLIGHT["HM-OU-CF-Pl"]["Light_circle"] = [4, 0.688, 0.224, 0.118, 0.112];
DEV_HIGHLIGHT["HM-OU-CF-Pl"]["Light_beam_1"] = [6, 0.628, 0.28, 0.656, 0.28, 0.016];
DEV_HIGHLIGHT["HM-OU-CF-Pl"]["Light_beam_2"] = [6, 0.656, 0.2, 0.68, 0.22, 0.016];
DEV_HIGHLIGHT["HM-OU-CF-Pl"]["Light_beam_3"] = [6, 0.74, 0.168, 0.74, 0.196, 0.016];
DEV_HIGHLIGHT["HM-OU-CF-Pl"]["Light_beam_4"] = [6, 0.82, 0.196, 0.8, 0.216, 0.016];
DEV_HIGHLIGHT["HM-OU-CF-Pl"]["Light_beam_5"] = [6, 0.824, 0.28, 0.856, 0.28, 0.016];
DEV_HIGHLIGHT["HM-OU-CF-Pl"]["Light_beam_6"] = [6, 0.68, 0.34, 0.664, 0.36, 0.016];
DEV_HIGHLIGHT["HM-OU-CF-Pl"]["Light_beam_7"] = [6, 0.74, 0.364, 0.74, 0.392, 0.016];
DEV_HIGHLIGHT["HM-OU-CF-Pl"]["Light_beam_8"] = [6, 0.8, 0.34, 0.82, 0.36, 0.016];
DEV_HIGHLIGHT["HM-OU-CF-Pl"]["1"] = [5, 'Light_circle', 'Light_beam_1', 'Light_beam_2', 'Light_beam_3', 'Light_beam_4', 'Light_beam_5', 'Light_beam_6', 'Light_beam_7', 'Light_beam_8'];
DEV_HIGHLIGHT["HM-OU-CF-Pl"]["SP_1"] = [6, 0.644, 0.676, 0.672, 0.676, 0.016];
DEV_HIGHLIGHT["HM-OU-CF-Pl"]["SP_2"] = [6, 0.672, 0.676, 0.672, 0.816, 0.016];
DEV_HIGHLIGHT["HM-OU-CF-Pl"]["SP_3"] = [6, 0.644, 0.816, 0.672, 0.816, 0.016];
DEV_HIGHLIGHT["HM-OU-CF-Pl"]["SP_4"] = [6, 0.644, 0.676, 0.644, 0.816, 0.016];
DEV_HIGHLIGHT["HM-OU-CF-Pl"]["SP_5"] = [6, 0.672, 0.676, 0.716, 0.632, 0.016];
DEV_HIGHLIGHT["HM-OU-CF-Pl"]["SP_6"] = [6, 0.716, 0.632, 0.716, 0.86, 0.016];
DEV_HIGHLIGHT["HM-OU-CF-Pl"]["SP_7"] = [6, 0.672, 0.816, 0.716, 0.86, 0.016];
DEV_HIGHLIGHT["HM-OU-CF-Pl"]["SP_beam_1"] = [6, 0.75, 0.7, 0.832, 0.632, 0.016];
DEV_HIGHLIGHT["HM-OU-CF-Pl"]["SP_beam_2"] = [6, 0.75, 0.748, 0.832, 0.748, 0.016];
DEV_HIGHLIGHT["HM-OU-CF-Pl"]["SP_beam_3"] = [6, 0.75, 0.796, 0.832, 0.86, 0.016];
DEV_HIGHLIGHT["HM-OU-CF-Pl"]["2"] = [5, 'SP_1', 'SP_2', 'SP_3', 'SP_4', 'SP_5', 'SP_6', 'SP_7', 'SP_beam_1', 'SP_beam_2', 'SP_beam_3'];
DEV_LIST.push('HM-Sec-WDS');
DEV_DESCRIPTION["HM-Sec-WDS"] = "HM-Sec-WDS";
DEV_PATHS["HM-Sec-WDS"] = new Object();
DEV_PATHS["HM-Sec-WDS"]["50"] = "/config/img/devices/50/49_hm-sec-wds_thumb.png";
DEV_PATHS["HM-Sec-WDS"]["250"] = "/config/img/devices/250/49_hm-sec-wds.png";
DEV_HIGHLIGHT["HM-Sec-WDS"] = new Object();
DEV_LIST.push('HM-LC-Dim1L-Pl-644');
DEV_DESCRIPTION["HM-LC-Dim1L-Pl-644"] = "HM-LC-Dim1L-Pl";
DEV_PATHS["HM-LC-Dim1L-Pl-644"] = new Object();
DEV_PATHS["HM-LC-Dim1L-Pl-644"]["50"] = "/config/img/devices/50/OM55_DimmerSwitch_thumb.png";
DEV_PATHS["HM-LC-Dim1L-Pl-644"]["250"] = "/config/img/devices/250/OM55_DimmerSwitch.png";
DEV_HIGHLIGHT["HM-LC-Dim1L-Pl-644"] = new Object();
DEV_HIGHLIGHT["HM-LC-Dim1L-Pl-644"]["1_part1"] = [2, 0.548, 0.468, 0.072, 0.052];
DEV_HIGHLIGHT["HM-LC-Dim1L-Pl-644"]["1_part2"] = [2, 0.612, 0.452, 0.028, 0.056];
DEV_HIGHLIGHT["HM-LC-Dim1L-Pl-644"]["1"] = [5, '1_part1', '1_part2'];
DEV_LIST.push('HM-LC-Dim2T-SM-644');
DEV_DESCRIPTION["HM-LC-Dim2T-SM-644"] = "HM-LC-Dim2T-SM";
DEV_PATHS["HM-LC-Dim2T-SM-644"] = new Object();
DEV_PATHS["HM-LC-Dim2T-SM-644"]["50"] = "/config/img/devices/50/64_hm-lc-dim2T-sm_thumb.png";
DEV_PATHS["HM-LC-Dim2T-SM-644"]["250"] = "/config/img/devices/250/64_hm-lc-dim2T-sm.png";
DEV_HIGHLIGHT["HM-LC-Dim2T-SM-644"] = new Object();
DEV_HIGHLIGHT["HM-LC-Dim2T-SM-644"]["1_Part1"] = [6, 0.539, 0.864, 0.539, 0.948, 0.012];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM-644"]["1_Part2"] = [6, 0.539, 0.948, 0.49, 0.884, 0.012];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM-644"]["1_Part3"] = [6, 0.539, 0.948, 0.588, 0.884, 0.012];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM-644"]["1_Arrow"] = [5, '1_Part1', '1_Part2', '1_Part3'];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM-644"]["2_Arrow"] = [7, '1_Arrow', 0.179, 0];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM-644"]["1_Key"] = [4, 0.25, 0.26, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM-644"]["2_Key"] = [4, 0.328, 0.26, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM-644"]["1"] = [5, '1_Arrow', '1_Key'];
DEV_HIGHLIGHT["HM-LC-Dim2T-SM-644"]["2"] = [5, '2_Arrow', '2_Key'];
DEV_LIST.push('HMW-Sys-PS7-DR');
DEV_DESCRIPTION["HMW-Sys-PS7-DR"] = "HMW-Sys-PS7-DR";
DEV_PATHS["HMW-Sys-PS7-DR"] = new Object();
DEV_PATHS["HMW-Sys-PS7-DR"]["50"] = "/config/img/devices/50/36_hmw-sys-ps7-dr_thumb.png";
DEV_PATHS["HMW-Sys-PS7-DR"]["250"] = "/config/img/devices/250/36_hmw-sys-ps7-dr.png";
DEV_HIGHLIGHT["HMW-Sys-PS7-DR"] = new Object();
DEV_LIST.push('HM-RC-4');
DEV_DESCRIPTION["HM-RC-4"] = "HM-RC-4";
DEV_PATHS["HM-RC-4"] = new Object();
DEV_PATHS["HM-RC-4"]["50"] = "/config/img/devices/50/18_hm-rc-4_thumb.png";
DEV_PATHS["HM-RC-4"]["250"] = "/config/img/devices/250/18_hm-rc-4.png";
DEV_HIGHLIGHT["HM-RC-4"] = new Object();
DEV_HIGHLIGHT["HM-RC-4"]["1"] = [4, 0.268, 0.236, 0.16, 0.164];
DEV_HIGHLIGHT["HM-RC-4"]["2"] = [4, 0.476, 0.236, 0.16, 0.164];
DEV_HIGHLIGHT["HM-RC-4"]["3"] = [4, 0.268, 0.48, 0.16, 0.164];
DEV_HIGHLIGHT["HM-RC-4"]["4"] = [4, 0.476, 0.48, 0.16, 0.164];
DEV_HIGHLIGHT["HM-RC-4"]["1+2"] = [5, '1', '2'];
DEV_HIGHLIGHT["HM-RC-4"]["3+4"] = [5, '3', '4'];
DEV_LIST.push('HM-PB-6-WM55');
DEV_DESCRIPTION["HM-PB-6-WM55"] = "HM-PB-6-WM55";
DEV_PATHS["HM-PB-6-WM55"] = new Object();
DEV_PATHS["HM-PB-6-WM55"]["50"] = "/config/img/devices/50/86_hm-pb-6-wm55_thumb.png";
DEV_PATHS["HM-PB-6-WM55"]["250"] = "/config/img/devices/250/86_hm-pb-6-wm55.png";
DEV_HIGHLIGHT["HM-PB-6-WM55"] = new Object();
DEV_HIGHLIGHT["HM-PB-6-WM55"]["1"] = [2, 0.164, 0.232, 0.112, 0.156];
DEV_HIGHLIGHT["HM-PB-6-WM55"]["2"] = [2, 0.588, 0.232, 0.112, 0.156];
DEV_HIGHLIGHT["HM-PB-6-WM55"]["3"] = [2, 0.164, 0.428, 0.112, 0.156];
DEV_HIGHLIGHT["HM-PB-6-WM55"]["4"] = [2, 0.588, 0.428, 0.112, 0.156];
DEV_HIGHLIGHT["HM-PB-6-WM55"]["5"] = [2, 0.164, 0.616, 0.112, 0.156];
DEV_HIGHLIGHT["HM-PB-6-WM55"]["6"] = [2, 0.588, 0.616, 0.112, 0.156];
DEV_HIGHLIGHT["HM-PB-6-WM55"]["1+2"] = [5, '1', '2'];
DEV_HIGHLIGHT["HM-PB-6-WM55"]["3+4"] = [5, '3', '4'];
DEV_HIGHLIGHT["HM-PB-6-WM55"]["5+6"] = [5, '5', '6'];
DEV_LIST.push('HMW-LC-Sw2-DR');
DEV_DESCRIPTION["HMW-LC-Sw2-DR"] = "HMW-LC-Sw2-DR";
DEV_PATHS["HMW-LC-Sw2-DR"] = new Object();
DEV_PATHS["HMW-LC-Sw2-DR"]["50"] = "/config/img/devices/50/26_hmw-lc-sw2-dr_thumb.png";
DEV_PATHS["HMW-LC-Sw2-DR"]["250"] = "/config/img/devices/250/26_hmw-lc-sw2-dr.png";
DEV_HIGHLIGHT["HMW-LC-Sw2-DR"] = new Object();
DEV_HIGHLIGHT["HMW-LC-Sw2-DR"]["1"] = [2, 0.448, 0.764, 0.048, 0.064];
DEV_HIGHLIGHT["HMW-LC-Sw2-DR"]["2"] = [2, 0.496, 0.764, 0.052, 0.068];
DEV_HIGHLIGHT["HMW-LC-Sw2-DR"]["3"] = [2, 0.232, 0.384, 0.104, 0.068];
DEV_HIGHLIGHT["HMW-LC-Sw2-DR"]["4"] = [2, 0.448, 0.384, 0.104, 0.068];
DEV_LIST.push('HM-Sec-Key-S');
DEV_DESCRIPTION["HM-Sec-Key-S"] = "HM-Sec-Key-S";
DEV_PATHS["HM-Sec-Key-S"] = new Object();
DEV_PATHS["HM-Sec-Key-S"]["50"] = "/config/img/devices/50/14_hm-sec-key_thumb.png";
DEV_PATHS["HM-Sec-Key-S"]["250"] = "/config/img/devices/250/14_hm-sec-key.png";
DEV_HIGHLIGHT["HM-Sec-Key-S"] = new Object();
DEV_LIST.push('HM-LC-Dim2L-SM-644');
DEV_DESCRIPTION["HM-LC-Dim2L-SM-644"] = "HM-LC-Dim2L-SM";
DEV_PATHS["HM-LC-Dim2L-SM-644"] = new Object();
DEV_PATHS["HM-LC-Dim2L-SM-644"]["50"] = "/config/img/devices/50/45_hm-lc-dim2l-sm_thumb.png";
DEV_PATHS["HM-LC-Dim2L-SM-644"]["250"] = "/config/img/devices/250/45_hm-lc-dim2l-sm.png";
DEV_HIGHLIGHT["HM-LC-Dim2L-SM-644"] = new Object();
DEV_HIGHLIGHT["HM-LC-Dim2L-SM-644"]["1_Part1"] = [6, 0.530, 0.896, 0.530, 0.98, 0.012];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM-644"]["1_Part2"] = [6, 0.530, 0.98, 0.49, 0.916, 0.012];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM-644"]["1_Part3"] = [6, 0.530, 0.98, 0.574, 0.916, 0.012];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM-644"]["1_Arrow"] = [5, '1_Part1', '1_Part2', '1_Part3'];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM-644"]["2_Arrow"] = [7, '1_Arrow', 0.168, 0];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM-644"]["1_Key"] = [4, 0.25, 0.33, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM-644"]["2_Key"] = [4, 0.328, 0.33, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM-644"]["1"] = [5, '1_Arrow', '1_Key'];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM-644"]["2"] = [5, '2_Arrow', '2_Key'];
DEV_LIST.push('HM-Sen-DB-PCB');
DEV_DESCRIPTION["HM-Sen-DB-PCB"] = "HM-Sen-DB-PCB";
DEV_PATHS["HM-Sen-DB-PCB"] = new Object();
DEV_PATHS["HM-Sen-DB-PCB"]["50"] = "/config/img/devices/50/101_hm-sen-db-pcb_thumb.png";
DEV_PATHS["HM-Sen-DB-PCB"]["250"] = "/config/img/devices/250/101_hm-sen-db-pcb.png";
DEV_HIGHLIGHT["HM-Sen-DB-PCB"] = new Object();
DEV_LIST.push('HM-LC-Dim2L-SM');
DEV_DESCRIPTION["HM-LC-Dim2L-SM"] = "HM-LC-Dim2L-SM";
DEV_PATHS["HM-LC-Dim2L-SM"] = new Object();
DEV_PATHS["HM-LC-Dim2L-SM"]["50"] = "/config/img/devices/50/45_hm-lc-dim2l-sm_thumb.png";
DEV_PATHS["HM-LC-Dim2L-SM"]["250"] = "/config/img/devices/250/45_hm-lc-dim2l-sm.png";
DEV_HIGHLIGHT["HM-LC-Dim2L-SM"] = new Object();
DEV_HIGHLIGHT["HM-LC-Dim2L-SM"]["1_Part1"] = [6, 0.530, 0.896, 0.530, 0.98, 0.012];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM"]["1_Part2"] = [6, 0.530, 0.98, 0.49, 0.916, 0.012];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM"]["1_Part3"] = [6, 0.530, 0.98, 0.574, 0.916, 0.012];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM"]["1_Arrow"] = [5, '1_Part1', '1_Part2', '1_Part3'];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM"]["2_Arrow"] = [7, '1_Arrow', 0.168, 0];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM"]["1_Key"] = [4, 0.25, 0.33, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM"]["2_Key"] = [4, 0.328, 0.33, 0.04, 0.044];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM"]["1"] = [5, '1_Arrow', '1_Key'];
DEV_HIGHLIGHT["HM-LC-Dim2L-SM"]["2"] = [5, '2_Arrow', '2_Key'];
DEV_LIST.push('ZEL STG RM FWT');
DEV_DESCRIPTION["ZEL STG RM FWT"] = "ZEL_STG_RM_FWT";
DEV_PATHS["ZEL STG RM FWT"] = new Object();
DEV_PATHS["ZEL STG RM FWT"]["50"] = "/config/img/devices/50/42_hm-cc-tc_thumb.png";
DEV_PATHS["ZEL STG RM FWT"]["250"] = "/config/img/devices/250/42_hm-cc-tc.png";
DEV_HIGHLIGHT["ZEL STG RM FWT"] = new Object();
DEV_LIST.push('HM-Sec-RHS');
DEV_DESCRIPTION["HM-Sec-RHS"] = "HM-Sec-RHS";
DEV_PATHS["HM-Sec-RHS"] = new Object();
DEV_PATHS["HM-Sec-RHS"]["50"] = "/config/img/devices/50/17_hm-sec-rhs_thumb.png";
DEV_PATHS["HM-Sec-RHS"]["250"] = "/config/img/devices/250/17_hm-sec-rhs.png";
DEV_HIGHLIGHT["HM-Sec-RHS"] = new Object();
DEV_LIST.push('HM-PB-4Dis-WM-2');
DEV_DESCRIPTION["HM-PB-4Dis-WM-2"] = "HM-PB-4Dis-WM-2";
DEV_PATHS["HM-PB-4Dis-WM-2"] = new Object();
DEV_PATHS["HM-PB-4Dis-WM-2"]["50"] = "/config/img/devices/50/70_hm-pb-4dis-wm_thumb.png";
DEV_PATHS["HM-PB-4Dis-WM-2"]["250"] = "/config/img/devices/250/70_hm-pb-4dis-wm.png";
DEV_HIGHLIGHT["HM-PB-4Dis-WM-2"] = new Object();
DEV_HIGHLIGHT["HM-PB-4Dis-WM-2"]["2"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM-2"]["1"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM-2"]["4"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM-2"]["3"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM-2"]["6"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM-2"]["5"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM-2"]["8"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM-2"]["7"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM-2"]["10"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM-2"]["9"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM-2"]["12"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM-2"]["11"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM-2"]["14"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM-2"]["13"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM-2"]["16"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM-2"]["15"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM-2"]["18"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM-2"]["17"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM-2"]["20"] = [2, 0.204, 0.244, 0.556, 0.12];
DEV_HIGHLIGHT["HM-PB-4Dis-WM-2"]["19"] = [2, 0.204, 0.68, 0.556, 0.12];
DEV_LIST.push('263 131');
DEV_DESCRIPTION["263 131"] = "263_131";
DEV_PATHS["263 131"] = new Object();
DEV_PATHS["263 131"]["50"] = "/config/img/devices/50/PushButton-2ch-wm_thumb.png";
DEV_PATHS["263 131"]["250"] = "/config/img/devices/250/PushButton-2ch-wm.png";
DEV_HIGHLIGHT["263 131"] = new Object();
DEV_HIGHLIGHT["263 131"]["1a"] = [2, 0.244, 0.312, 0.428, 0.168];
DEV_HIGHLIGHT["263 131"]["1b"] = [2, 0.244, 0.56, 0.428, 0.168];
DEV_HIGHLIGHT["263 131"]["1"] = [5, '1a', '1b'];
DEV_LIST.push('HM-ES-PMSw1-Pl-DN-R1');
DEV_DESCRIPTION["HM-ES-PMSw1-Pl-DN-R1"] = "HM-ES-PMSw1-Pl-DN-R1";
DEV_PATHS["HM-ES-PMSw1-Pl-DN-R1"] = new Object();
DEV_PATHS["HM-ES-PMSw1-Pl-DN-R1"]["50"] = "/config/img/devices/50/93_hm-es-pmsw1-pl_thumb.png";
DEV_PATHS["HM-ES-PMSw1-Pl-DN-R1"]["250"] = "/config/img/devices/250/93_hm-es-pmsw1-pl.png";
DEV_HIGHLIGHT["HM-ES-PMSw1-Pl-DN-R1"] = new Object();
DEV_LIST.push('HM-LC-Sw1-Pl-DN-R4');
DEV_DESCRIPTION["HM-LC-Sw1-Pl-DN-R4"] = "HM-LC-Sw1-Pl-DN-R4";
DEV_PATHS["HM-LC-Sw1-Pl-DN-R4"] = new Object();
DEV_PATHS["HM-LC-Sw1-Pl-DN-R4"]["50"] = "/config/img/devices/50/107_hm-es-pmsw1-pl-R4_thumb.png";
DEV_PATHS["HM-LC-Sw1-Pl-DN-R4"]["250"] = "/config/img/devices/250/107_hm-es-pmsw1-pl-R4.png";
DEV_HIGHLIGHT["HM-LC-Sw1-Pl-DN-R4"] = new Object();
DEV_LIST.push('ZEL STG RM FDK');
DEV_DESCRIPTION["ZEL STG RM FDK"] = "ZEL_STG_RM_FDK";
DEV_PATHS["ZEL STG RM FDK"] = new Object();
DEV_PATHS["ZEL STG RM FDK"]["50"] = "/config/img/devices/50/17_hm-sec-rhs_thumb.png";
DEV_PATHS["ZEL STG RM FDK"]["250"] = "/config/img/devices/250/17_hm-sec-rhs.png";
DEV_HIGHLIGHT["ZEL STG RM FDK"] = new Object();
DEV_LIST.push('HM-LC-Sw1-FM-2');
DEV_DESCRIPTION["HM-LC-Sw1-FM-2"] = "HM-LC-Sw1-FM";
DEV_PATHS["HM-LC-Sw1-FM-2"] = new Object();
DEV_PATHS["HM-LC-Sw1-FM-2"]["50"] = "/config/img/devices/50/4_hm-lc-sw1-fm_thumb.png";
DEV_PATHS["HM-LC-Sw1-FM-2"]["250"] = "/config/img/devices/250/4_hm-lc-sw1-fm.png";
DEV_HIGHLIGHT["HM-LC-Sw1-FM-2"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw1-FM-2"]["1_AUS"] = [2, 0.288, 0.66, 0.068, 0.152];
DEV_HIGHLIGHT["HM-LC-Sw1-FM-2"]["1_EIN"] = [2, 0.548, 0.66, 0.068, 0.152];
DEV_HIGHLIGHT["HM-LC-Sw1-FM-2"]["1"] = [5, '1_AUS', '1_EIN'];
DEV_LIST.push('HM-CCU-1');
DEV_DESCRIPTION["HM-CCU-1"] = "HM-CCU-1";
DEV_PATHS["HM-CCU-1"] = new Object();
DEV_PATHS["HM-CCU-1"]["50"] = "/config/img/devices/50/24_hm-cen-3-1_thumb.png";
DEV_PATHS["HM-CCU-1"]["250"] = "/config/img/devices/250/24_hm-cen-3-1.png";
DEV_HIGHLIGHT["HM-CCU-1"] = new Object();
DEV_LIST.push('HM-Sec-Key');
DEV_DESCRIPTION["HM-Sec-Key"] = "HM-Sec-Key";
DEV_PATHS["HM-Sec-Key"] = new Object();
DEV_PATHS["HM-Sec-Key"]["50"] = "/config/img/devices/50/14_hm-sec-key_thumb.png";
DEV_PATHS["HM-Sec-Key"]["250"] = "/config/img/devices/250/14_hm-sec-key.png";
DEV_HIGHLIGHT["HM-Sec-Key"] = new Object();
DEV_LIST.push('HMW-LC-Dim1L-DR');
DEV_DESCRIPTION["HMW-LC-Dim1L-DR"] = "HMW-LC-Dim1L-DR";
DEV_PATHS["HMW-LC-Dim1L-DR"] = new Object();
DEV_PATHS["HMW-LC-Dim1L-DR"]["50"] = "/config/img/devices/50/28_hmw-lc-dim1l-dr_thumb.png";
DEV_PATHS["HMW-LC-Dim1L-DR"]["250"] = "/config/img/devices/250/28_hmw-lc-dim1l-dr.png";
DEV_HIGHLIGHT["HMW-LC-Dim1L-DR"] = new Object();
DEV_HIGHLIGHT["HMW-LC-Dim1L-DR"]["1"] = [2, 0.312, 0.756, 0.056, 0.06];
DEV_HIGHLIGHT["HMW-LC-Dim1L-DR"]["2"] = [2, 0.368, 0.752, 0.048, 0.068];
DEV_HIGHLIGHT["HMW-LC-Dim1L-DR"]["3"] = [2, 0.368, 0.388, 0.048, 0.064];
DEV_LIST.push('HM-LC-Sw1PBU-FM-CUSTOM');
DEV_DESCRIPTION["HM-LC-Sw1PBU-FM-CUSTOM"] = "HM-LC-Sw1PBU-FM-CUSTOM";
DEV_PATHS["HM-LC-Sw1PBU-FM-CUSTOM"] = new Object();
DEV_PATHS["HM-LC-Sw1PBU-FM-CUSTOM"]["50"] = "/config/img/devices/50/PushButton-2ch-wm_thumb.png";
DEV_PATHS["HM-LC-Sw1PBU-FM-CUSTOM"]["250"] = "/config/img/devices/250/PushButton-2ch-wm.png";
DEV_HIGHLIGHT["HM-LC-Sw1PBU-FM-CUSTOM"] = new Object();
DEV_HIGHLIGHT["HM-LC-Sw1PBU-FM-CUSTOM"]["1"] = [2, 0.244, 0.312, 0.428, 0.168];
DEV_HIGHLIGHT["HM-LC-Sw1PBU-FM-CUSTOM"]["2"] = [2, 0.244, 0.56, 0.428, 0.168];
//======================================================================
//Defines
//======================================================================
GD_TYPE = new Array();
GD_TYPE["UNDEFINED"] = 0;
GD_TYPE["CIRCLE"]    = 1;
GD_TYPE["RECTANGLE"] = 2;
GD_TYPE["STRING"]    = 3;
GD_TYPE["ELLIPSE"]   = 4;
GD_TYPE["FORMSET"]   = 5;
GD_TYPE["LINE"]      = 6;
GD_TYPE["OFFSET"]    = 7;

//Bedeutung einer Position im Array DEV_HIGHLIGHT
//Typangabe
gd_type = 0;

//circle, point
gd_xx = 1;
gd_yy = 2;
gd_rr = 3;

//rectangle, line, ellipse
gd_dx = 3;
gd_dy = 4;

//String
gd_string     = 3;
gd_fontsize   = 4;
gd_fontfamily = 5;
gd_fontstyle  = 6;

//Line
gd_x1     = 1;
gd_y1     = 2;
gd_x2     = 3;
gd_y2     = 4;
gd_stroke = 5;

//Offset
gd_nameoff = 1;
gd_xoff    = 2;
gd_yoff    = 3;
//======================================================================

DEV_TypeExists = function(type)
{
	return DEV_LIST.indexOf(type) >= 0;
};

DEV_getDescription = function(type)
{
	//if (DEV_TypeExists(type)) descr = DEV_DESCRIPTION[type];

	var descr;
	
	try {
		descr = DEV_DESCRIPTION[type];
	} catch (e) { }

	if (!descr) descr = type;

	return descr;
};

DEV_getImagePath = function(type, size)
{
	//if (DEV_TypeExists(type)) path = DEV_PATHS[type][size];
	var path;
	
	try {
		path = DEV_PATHS[type][size];
	} catch (e) { }

	if (! path) path = "#";
	
	return path;
};

DEV_getImageHighlight = function(type, form)
{
	var form;
	
	try {
		form = DEV_HIGHLIGHT[type][form];
	} catch (e) { }

	if (! form) form = null;

	return form;
};
elvST = new Array();
elvST['ACTOR_SECURITY'] = '${stringTableActorSecurityTitle}';
elvST['ACTOR_SECURITY|SECURE_STATE=TRUE'] = '${stringTableActorSecuritySecureStateTrue}';
elvST['ACTOR_SECURITY|SECURE_STATE=FALSE'] = '${stringTableActorSecuritySecureStateFalse}';
elvST['ACTOR_SECURITY|ON_TIME'] = '${stringTableActorSecurityOnTime}';
elvST['ACTOR_WINDOW'] = '${stringTableActorWindowTitle}';
elvST['ACTOR_WINDOW|ERROR=NO_ERROR'] = '${stringTableActorWindowNoError}';
elvST['ACTOR_WINDOW|ERR_WINDOW_NOT_FOUND=TRUE'] = '${stringTableActorWindowErrorNotFound}';
elvST['ACTOR_WINDOW|ERR_DETECT_EIA485_SERVICE=TRUE'] = '${stringTableActorWindowErrorETA485}';
elvST['ACTOR_WINDOW|ERR_TTM_INTERNAL=TRUE'] = '${stringTableActorWindowErrorTipTronicModul}';
elvST['ACTOR_WINDOW|ERR_TTCU_INTERNAL_TEST=TRUE'] = '${stringTableActorWindowErrorWindowControlDevice}';
elvST['ACTOR_WINDOW|ERR_TTM_OVERVOLT=OVERVOLT'] = '${stringTableActorWindowErrorVoltageOver}';
elvST['ACTOR_WINDOW|ERR_TTM_OVERVOLT=NO_ERROR'] = '${stringTableActorWindowErrorVoltageOverNoError}';
elvST['ACTOR_WINDOW|STICKY_ERR_TTM_OVERVOLT=WAS_OVERVOLT'] = '${stringTableActorWindowErrorStickyWasVoltageOver}';
elvST['ACTOR_WINDOW|STICKY_ERR_TTM_OVERVOLT=OVERVOLT'] = '${stringTableActorWindowErrorVoltageOver}';
elvST['ACTOR_WINDOW|ERR_TTM_UNDERVOLT=UNDERVOLT'] = '${stringTableActorWindowErrorVoltageUnder}';
elvST['ACTOR_WINDOW|ERR_TTM_UNDERVOLT=NO_ERROR'] = '${stringTableActorWindowErrorVoltageUnderNoError}';
elvST['ACTOR_WINDOW|STICKY_ERR_TTM_UNDERVOLT=WAS_UNDERVOLT'] = '${stringTableActorWindowErrorStickyWasVoltageUnder}';
elvST['ACTOR_WINDOW|STICKY_ERR_TTM_UNDERVOLT=UNDERVOLT'] = '${stringTableActorWindowErrorVoltageUnder}';
elvST['ACTOR_WINDOW|ERR_TTCU_LOCK_ROLLERS_SHORTED=TRUE'] = '${stringTableActorWindowErrorLockRoller}';
elvST['ACTOR_WINDOW|ERR_TTCU_SENSOR_STRIP_SHORTED=TRUE'] = '${stringTableActorWindowErrorSensorStrip_0}';
elvST['ACTOR_WINDOW|ERR_TTCU_SENSOR_STRIP_DISCONNECTED=TRUE'] = '${stringTableActorWindowErrorSensorStrip_1}';
elvST['ACTOR_WINDOW|ERR_TTCU_TURN_TILT_ACT_NO_SPEED_SIGNAL=TRUE'] = '${stringTableActorWindowErrorNoSpeedSignal}';
elvST['ACTOR_WINDOW|ERR_TTCU_TURN_TILT_ACT_SHORTED=TRUE'] = '${stringTableActorWindowErrorTurnTiltAct_0}';
elvST['ACTOR_WINDOW|ERR_TTCU_TURN_TILT_ACT_BLOCKED=TRUE'] = '${stringTableActorWindowErrorTurnTiltAct_1}';
elvST['ACTOR_WINDOW|ERR_TTCU_TURN_TILT_ACT_OVERCURRENT=TRUE'] = '${stringTableActorWindowErrorTurnTiltAct_2}';
elvST['ACTOR_WINDOW|ERR_TTCU_TURN_TILT_ACT_CONTACT_PROBLEM=TRUE'] = '${stringTableActorWindowErrorTurnTiltAct_3}';
elvST['ACTOR_WINDOW|ERR_TTCU_TURN_TILT_ACT_ASYNCHRON=TRUE'] = '${stringTableActorWindowErrorAsynchron}';
elvST['ACTOR_WINDOW|ERR_TTCU_MAGNET_ERROR=TRUE'] = '${stringTableActorWindowErrorMagnet}';
elvST['ACTOR_WINDOW|ERR_TTCU_POWER_ONTIME_EXCEEDED=TRUE'] = '${stringTableActorWindowErrorOntimeExceeded}';
elvST['ACTOR_WINDOW|ERR_TTCU_STOP_AFTER_10_CLOSING_TRIES=TRUE'] = '${stringTableActorWindowErrorCancel10}';
elvST['ACTOR_WINDOW|ERR_TTCU_TURN_TILT_ACT_ALLOY_MOSFET=TRUE'] = '${stringTableActorWindowErrorMOSFET}';
elvST['ACTOR_WINDOW|ERR_WIN_STAY_IN_INITIAL_OPERATION=TRUE'] = '${stringTableActorWindowErrorStayInInitial}';
elvST['ACTOR_WINDOW|ERR_TTCU_WRONG_VOLTAGE_POLARITY=TRUE'] = '${stringTableActorWindowErrorVoltageWrongPolarity}';
elvST['ACTOR_WINDOW|FREE_TO_USE=TRUE'] = '${stringTableActorWindowErrorFreeToUse}';
elvST['ACTOR_WINDOW|HANDLE_LED_MODE=OFF'] = '${stringTableActorWindowLEDOff}';
elvST['ACTOR_WINDOW|HANDLE_LED_MODE=DIMMED_ON'] = '${stringTableActorWindowLEDDimmed}';
elvST['ACTOR_WINDOW|HANDLE_LED_MODE=FULL_ON'] = '${stringTableActorWindowLEDOn}';
elvST['ACTOR_WINDOW|HANDLE_LOCK=TRUE'] = '${stringTableActorWindowHandleLockTrue}';
elvST['ACTOR_WINDOW|HANDLE_LOCK=FALSE'] = '${stringTableActorWindowHandleLockFalse}';
elvST['ACTOR_WINDOW|LEVEL'] = '${stringTableActorWindowLevel}';
elvST['ACTOR_WINDOW|LEVEL=LOCKED'] = '${stringTableActorWindowLevelLocked}';
elvST['ACTOR_WINDOW|ON_TIME'] = '${stringTableActorWindowOnTime}';
elvST['ACTOR_WINDOW|RELEASE_TURN=TRUE'] = '${stringTableActorWindowReleaseTurnTrue}';
elvST['ACTOR_WINDOW|RELEASE_TURN=FALSE'] = '${stringTableActorWindowReleaseTurnFalse}';
elvST['ACTOR_WINDOW|SHEV_POS=ZULUFT_DEACTIVATED'] = '${stringTableActorWindowVentDeactivated}';
elvST['ACTOR_WINDOW|SHEV_POS=ZULUFT_UNBLOCKED'] = '${stringTableActorWindowVentUnblocked}';
elvST['ACTOR_WINDOW|SHEV_POS=ZULUFT_BLOCKED'] = '${stringTableActorWindowVentBlocked}';
elvST['ACTOR_WINDOW|STATUSINFO_MINDELAY'] = '${stringTableActorWindowStatusInfoMinDelay}';
elvST['ACTOR_WINDOW|STATUSINFO_MINDELAY=NOT_USED'] = '${stringTableActorWindowStatusInfoNotUsed}';
elvST['ACTOR_WINDOW|STATUSINFO_RANDOM'] = '${stringTableActorWindowStatusInfoRandom}';
elvST['ACTOR_WINDOW|STOP'] = '${stringTableActorWindowStop}';
elvST['ACTOR_WINDOW|WINTER_MODE'] = '${stringTableActorWindowWinterMode}';
elvST['ACTOR_WINDOW|WINTER_MODE=NOT_USED'] = '${stringTableActorWindowWinterModeNotUsed}';
elvST['ACTOR_WINDOW|WIN_RELEASE=TRUE'] = '${stringTableActorWindowReleaseTrue}';
elvST['ACTOR_WINDOW|WIN_RELEASE=FALSE'] = '${stringTableActorWindowReleaseFalse}';
elvST['ACTOR_WINDOW|WIN_RELEASE_ACT'] = '${stringTableActorWindowReleaseAction}';
elvST['AKKU|LEVEL'] = '${stringTableAccuLevel}';
elvST['AKKU|STATUS=CHARGE'] = '${stringTableAccuCharging}';
elvST['AKKU|STATUS=DISCHARGE'] = '${stringTableAccuDischarge}';
elvST['AKKU|STATUS=STATE_UNKNOWN'] = '${stringTableAccuStateUnkown}';
elvST['AKKU|STATUS=TRICKLE_CHARGE'] = '${stringTableAccuTrickleCharg}';
elvST['ALARMACTUATOR'] = '${stringTableAlarmActuatorTitle}';
elvST['ALARMACTUATOR|ERROR_BATTERY=BATTERY_DEFECT'] = '${stringTableBatteryDefect}';
elvST['ALARMACTUATOR|ERROR_BATTERY=NO_ERROR'] = '${stringTableBatteryNotDefect}';
elvST['ALARMACTUATOR|CYCLIC_INFO_MSG'] = '${stringTableAlarmActuatorCyclicInfoMsg}';
elvST['ALARMACTUATOR|ON_TIME'] = '${stringTableAlarmActuatorOnTime}';
elvST['ALARMACTUATOR|SABOTAGE_MSG'] = '${stringTableAlarmActuatorSabotageMsg}';
elvST['ALARMACTUATOR|STATE=FALSE'] = '${stringTableAlarmActuatorStateFalse}';
elvST['ALARMACTUATOR|STATE=TRUE'] = '${stringTableAlarmActuatorStateTrue}';
elvST['ALL_LEDS'] = '${stringTableAllLEDs}';
elvST['ANALOG_INPUT'] = '${stringTableAnalog}';
elvST['ANALOG_OUTPUT'] = '${stringTableAnalog}';
elvST['BACKLIGHT_AT_CHARGE'] = '${stringTableBackLightAtCharge}';
elvST['BACKLIGHT_AT_KEYSTROKE'] = '${stringTableBackLightAtKeystroke}';
elvST['BACKLIGHT_AT_MOTION'] = '${stringTableBackLightAtMotion}';
elvST['BACKLIGHT_ON_TIME'] = '${stringTableBackLightOnTime}';
elvST['BAT_DEFECT_LIMIT'] = '${stringTableBatDefectLimit}';
elvST['BLIND'] = '${stringTableBlindTitle}';
elvST['BLIND|CHANGE_OVER_DELAY'] = '${stringTableBlindChangeOverDelay}';
elvST['BLIND|LEVEL'] = '${stringTableBlindLevel}';
elvST['BLIND|REFERENCE_RUNNING_TIME_BOTTOM_TOP'] = '${stringTableBlindRunnintTimeBottomTop}';
elvST['BLIND|REFERENCE_RUNNING_TIME_TOP_BOTTOM'] = '${stringTableBlindRunningTimeTopBottom}';
elvST['BLIND|REFERENCE_RUN_COUNTER'] = '${stringTableBlindRefRunCounter}';
elvST['BLIND|STATUSINFO_MINDELAY'] = '${stringTableStatusInfoMinDelay}';
elvST['BLIND|STATUSINFO_RANDOM'] = '${stringTableStatusInfoRandom}';
elvST['BLIND|STOP'] = '${stringTableBlindStop}';
elvST['BURST_RX'] = '${stringTableBurstRX}';
elvST['BUTTON_LOCK'] = '${stringTableButtonLock}';
elvST['BUTTON_RESPONSE_WITHOUT_BACKLIGHT'] = '${stringTableButtonResponseWithoutBacklight}';
elvST['CAPACITIVE_FILLING_LEVEL_SENSOR'] = '${stringTableCapacitiveFillingSensorTitle}';
elvST['CAPACITIVE_FILLING_LEVEL_SENSOR|CASE_DESIGN'] = '${stringTableCapacitiveFillingSensorCaseDesign}';
elvST['CAPACITIVE_FILLING_LEVEL_SENSOR|CASE_DESIGN=HORIZONTAL_BARREL'] = '${stringTableCapacitiveFillingSensorCaseDesignHor}';
elvST['CAPACITIVE_FILLING_LEVEL_SENSOR|CASE_DESIGN=VERTICAL_BARREL'] = '${stringTableCapacitiveFillingSensorCaseDesignVer}';
elvST['CAPACITIVE_FILLING_LEVEL_SENSOR|CASE_DESIGN=RECTANGLE'] = '${stringTableCapacitiveFillingSensorCaseDesginRect}';
elvST['CAPACITIVE_FILLING_LEVEL_SENSOR|CASE_HIGH'] = '${stringTableCapacitiveFillingSensorCaseHeight}';
elvST['CAPACITIVE_FILLING_LEVEL_SENSOR|CASE_WIDTH'] = '${stringTableCapacitiveFillingSensorCaseWidth}';
elvST['CAPACITIVE_FILLING_LEVEL_SENSOR|CASE_LENGTH'] = '${stringTableCapacitiveFillingSensorCaseLength}';
elvST['CAPACITIVE_FILLING_LEVEL_SENSOR|CONTROLTEXT_FILLINGLEVEL'] = '${stringTableCapacitiveFillingSensorTextFillingLevel}';
elvST['CAPACITIVE_FILLING_LEVEL_SENSOR|CONTROLTEXT_CALC_FILLINGLEVEL'] = '${stringTableCapacitiveFillingSensorTextCalcFillingLevel}';
elvST['CAPACITIVE_FILLING_LEVEL_SENSOR|FILL_LEVEL'] = '${stringTableCapacitiveFillingSensorFillingLevel100perc}';
elvST['CAPACITIVE_FILLING_LEVEL_SENSOR|FILL_LEVEL_UPPER_THRESHOLD'] = '${stringTableCapacitiveFillingSensorFillingLevelUpperThres}';
elvST['CAPACITIVE_FILLING_LEVEL_SENSOR|FILL_LEVEL_LOWER_THRESHOLD'] = '${stringTableCapacitiveFillingSensorFillingLevelLowerThres}';
elvST['CAPACITIVE_FILLING_LEVEL_SENSOR|FILLING_LEVEL'] = '${stringTableCapacitiveFillingSensorFillingLevel}';
elvST['CAPACITIVE_FILLING_LEVEL_SENSOR|MEA_LENGTH'] = '${stringTableCapacitiveFillingSensorMeaLength}';
elvST['CAPACITIVE_FILLING_LEVEL_SENSOR|USE_CUSTOM'] = '${stringTableCapacitiveFillingSensorCustomCal}';
elvST['CAPACITIVE_FILLING_LEVEL_SENSOR|WATER_LOWER_THRESHOLD_CH'] = '${stringTableCapacitiveFillingSensorWaterLowerThres}';
elvST['CAPACITIVE_FILLING_LEVEL_SENSOR|WATER_UPPER_THRESHOLD_CH'] = '${stringTableCapacitiveFillingSensorWaterUpperThres}';
elvST['CENTRAL_KEY|DBL_PRESS_TIME'] = '${stringTableCentralKeyDblPressTime}';
elvST['CENTRAL_KEY|LONG_PRESS_TIME'] = '${stringTableCentralKeyLongPressTime}';
elvST['CHARACTERISTIC_LINEAR'] = '${stringTableCharasteristicLinear}';
elvST['CHARACTERISTIC_SQUARE'] = '${stringTableCharasteristicSquare}';
elvST['CLIMATECONTROL_RECEIVER'] = '${stringTableClimateControlReceiver}';
elvST['CLIMATECONTROL_REGULATOR'] = '${stringTableClimateControlRegTitle}';
elvST['CLIMATECONTROL_REGULATOR|ADJUSTING_COMMAND'] = '${stringTableClimateControlRegAdjCommand}';
elvST['CLIMATECONTROL_REGULATOR|ADJUSTING_DATA'] = '${stringTableClimateControlRegAdjData}';
elvST['CLIMATECONTROL_REGULATOR|DECALCIFICATION_DAY'] = '${stringTableClimateControlRegDecalcDay}';
elvST['CLIMATECONTROL_REGULATOR|DECALCIFICATION_HOUR'] = '${stringTableClimateControlRegDecalcHour}';
elvST['CLIMATECONTROL_REGULATOR|DECALCIFICATION_MINUTE'] = '${stringTableClimateControlRegDecalcMin}';
elvST['CLIMATECONTROL_REGULATOR|DISPLAY_TEMPERATUR_HUMIDITY_CHANGE'] = '${stringTableClimateControlRegDisplayTempHum}';
elvST['CLIMATECONTROL_REGULATOR|DISPLAY_TEMPERATUR_HUMIDITY_CHANGE=TEMPERATUR_AND_HUMIDITY'] = '${stringTableClimateControlRegDisplayTempHumTH}';
elvST['CLIMATECONTROL_REGULATOR|DISPLAY_TEMPERATUR_HUMIDITY_CHANGE=TEMPERATUR_ONLY'] = '${stringTableClimateControlRegDisplayTempHumT}';
elvST['CLIMATECONTROL_REGULATOR|DISPLAY_TEMPERATUR_INFORMATION'] = '${stringTableClimateControlRegDisplayTempInfo}';
elvST['CLIMATECONTROL_REGULATOR|DISPLAY_TEMPERATUR_INFORMATION=ACTUAL_VALUE'] = '${stringTableClimateControlRegDisplayTempInfoActualTemp}';
elvST['CLIMATECONTROL_REGULATOR|DISPLAY_TEMPERATUR_INFORMATION=SET_POINT'] = '${stringTableClimateControlRegDisplayTempInfoSetPoint}';
elvST['CLIMATECONTROL_REGULATOR|DISPLAY_TEMPERATUR_UNIT'] = '${stringTableClimateControlRegTempUnit}';
elvST['CLIMATECONTROL_REGULATOR|DISPLAY_TEMPERATUR_UNIT=CELSIUS'] = '${stringTableClimateControlRegTempUnitC}';
elvST['CLIMATECONTROL_REGULATOR|DISPLAY_TEMPERATUR_UNIT=FAHRENHEIT'] = '${stringTableClimateControlRegTempUnitF}';
elvST['CLIMATECONTROL_REGULATOR|MODE_TEMPERATUR_REGULATOR'] = '${stringTableClimateControlRegRegulator}';
elvST['CLIMATECONTROL_REGULATOR|MODE_TEMPERATUR_REGULATOR=AUTO'] = '${stringTableClimateControlRegRegulatorAuto}';
elvST['CLIMATECONTROL_REGULATOR|MODE_TEMPERATUR_REGULATOR=CENTRAL'] = '${stringTableClimateControlRegRegulatorCentral}';
elvST['CLIMATECONTROL_REGULATOR|MODE_TEMPERATUR_REGULATOR=MANUAL'] = '${stringTableClimateControlRegRegulatorManu}';
elvST['CLIMATECONTROL_REGULATOR|MODE_TEMPERATUR_REGULATOR=PARTY'] = '${stringTableClimateControlRegRegulatorParty}';
elvST['CLIMATECONTROL_REGULATOR|MODE_TEMPERATUR_VALVE'] = '${stringTableClimateControlRegValve}';
elvST['CLIMATECONTROL_REGULATOR|MODE_TEMPERATUR_VALVE=AUTO'] = '${stringTableClimateControlRegValveAuto}';
elvST['CLIMATECONTROL_REGULATOR|MODE_TEMPERATUR_VALVE=CLOSE_VALVE'] = '${stringTableClimateControlRegValveClose}';
elvST['CLIMATECONTROL_REGULATOR|MODE_TEMPERATUR_VALVE=OPEN_VALVE'] = '${stringTableClimateControlRegValveOpen}';
elvST['CLIMATECONTROL_REGULATOR|PARTY_END_TIME'] = '${stringTableClimateControlRegPartyEndTime}';
elvST['CLIMATECONTROL_REGULATOR|SETPOINT'] = '${stringTableClimateControlRegSetpoint}';
elvST['CLIMATECONTROL_REGULATOR|SETPOINT=VENT_CLOSED'] = '${stringTableClimateControlRegSetpointVentClosed}';
elvST['CLIMATECONTROL_REGULATOR|SETPOINT=VENT_OPEN'] = '${stringTableClimateControlRegSetpointVentOpen}';
elvST['CLIMATECONTROL_REGULATOR|STATE=FALSE'] = '${stringTableClimateControlRegStateFalse}';
elvST['CLIMATECONTROL_REGULATOR|STATE=TRUE'] = '${stringTableClimateControlRegStateTrue}';
elvST['CLIMATECONTROL_REGULATOR|TEMPERATUR_COMFORT_VALUE'] = '${stringTableClimateControlRegComfortValue}';
elvST['CLIMATECONTROL_REGULATOR|TEMPERATUR_LOWERING_VALUE'] = '${stringTableClimateControlRegLoweringValue}';
elvST['CLIMATECONTROL_REGULATOR|TEMPERATUR_PARTY_VALUE'] = '${stringTableClimateControlRegPartyValue}';
elvST['CLIMATECONTROL_REGULATOR|TEMPERATUR_SET_POINT'] = '${stringTableClimateControlRegSetPoint}';
elvST['CLIMATECONTROL_REGULATOR|TEMPERATUR_WINDOW_OPEN_VALUE'] = '${stringTableClimateControlRegWindowOpenValue}';
elvST['CLIMATECONTROL_VENT_DRIVE'] = '${stringTableClimateControlVentDriveTitle}';
elvST['CLIMATECONTROL_VENT_DRIVE|ERROR=ADJUSTING_RANGE_TO_SMALL'] = '${stringTableClimateControlVentDriveErrorAdjRangeToSmall}';
elvST['CLIMATECONTROL_VENT_DRIVE|ERROR=LOWBAT'] = '${stringTableClimateControlVentDriveErrorLowBat}';
elvST['CLIMATECONTROL_VENT_DRIVE|ERROR=VALVE_DRIVE_BLOCKED'] = '${stringTableClimateControlVentDriveErrorValveDriveBlocked}';
elvST['CLIMATECONTROL_VENT_DRIVE|ERROR=VALVE_DRIVE_LOOSE'] = '${stringTableClimateControlVentDriveErrorValveDriveLoose}';
elvST['CLIMATECONTROL_VENT_DRIVE|VALVE_ERROR_POSITION'] = '${stringTableClimateControlVentDriveValveErrorPos}';
elvST['CLIMATECONTROL_VENT_DRIVE|VALVE_OFFSET_VALUE'] = '${stringTableClimateControlVentDriveValveOffsetVal}';
elvST['CLIMATECONTROL_VENT_DRIVE|VALVE_STATE'] = '${stringTableClimateControlVentDriveValveState}';
elvST['CLIMATECONTROL_RT_RECEIVER'] = '${stringTableClimateControlRTReceiver}';
elvST['CLIMATECONTROL_RT_TRANSCEIVER'] = '${stringTableClimateControlRTTransceiver}';
elvST['CLIMATECONTROL_RT_TRANSCEIVER|FAULT_REPORTING=NO_FAULT'] = '${stringTableClimateControlRTTransceiverNoFault}';
elvST['CLIMATECONTROL_RT_TRANSCEIVER|FAULT_REPORTING=VALVE_TIGHT'] = '${stringTableClimateControlRTTransceiverValveTight}';
elvST['CLIMATECONTROL_RT_TRANSCEIVER|FAULT_REPORTING=ADJUSTING_RANGE_TOO_LARGE'] = '${stringTableClimateControlRTTransceiverAdjustingRangeTooLarge}';
elvST['CLIMATECONTROL_RT_TRANSCEIVER|FAULT_REPORTING=ADJUSTING_RANGE_TOO_SMALL'] = '${stringTableClimateControlRTTransceiverAdjustingRangeTooSmall}';
elvST['CLIMATECONTROL_RT_TRANSCEIVER|FAULT_REPORTING=COMMUNICATION_ERROR'] = '${stringTableClimateControlRTTransceiverCommunicationError}';
elvST['CLIMATECONTROL_RT_TRANSCEIVER|FAULT_REPORTING=LOWBAT'] = '${stringTableClimateControlRTTransceiverLowBat}';
elvST['CLIMATECONTROL_RT_TRANSCEIVER|FAULT_REPORTING=VALVE_ERROR_POSITION'] = '${stringTableClimateControlRTTransceiverValveErrorPosition}';
elvST['CONDITION_CURRENT'] = '${stringTableConditionCurrentTitle}';
elvST['CONDITION_FREQUENCY'] = '${stringTableConditionFrequencyTitle}';
elvST['CONDITION_POWER'] = '${stringTableConditionPowerTitle}';
elvST['CONDITION_VOLTAGE'] = '${stringTableConditionVoltageTitle}';
elvST['DECISION_VALUE'] = '${stringTableConditionValue}';
elvST['COND_TX_CYCLIC_ABOVE'] = '${stringTableCondTxCyclicAbove}';
elvST['COND_TX_CYCLIC_Below'] = '${stringTableCondTxCyclicBelow}';
elvST['COND_TX_DECISION_ABOVE'] = '${stringTableCondTxDecisionAbove}';
elvST['COND_TX_DECISION_BELOW'] = '${stringTableCondTxDecisionBelow}';
elvST['COND_TX_FALLING'] = '${stringTableCondTxFalling}';
elvST['COND_TX_RISING'] = '${stringTableCondTxRising}';
elvST['COND_TX_THRESHOLD_HI_POWER'] = '${stringTableCondThresholdHiPower}';
elvST['COND_TX_THRESHOLD_LO_POWER'] = '${stringTableCondThresholdLoPower}';
elvST['COMPATIBILITY_MODE'] = '${stringTableCompatibilityMode}';
elvST['CONF_BUTTON_TIME'] = '${stringTableConfButtonTime}';
elvST['CONF_BUTTON_TIME=PERMANENT'] = '${stringTableConfButtonTimePermanent}';
elvST['CYCLIC_INFO_MSG'] = '${stringTableCyclicInfoMsg}';
elvST['CYCLIC_INFO_MSG_DIS'] = '${stringTableCyclicInfoMsgDis}';
elvST['CYCLIC_INFO_MSG_PAUSE'] = '${stringTableCyclicInfoMsgPause}';
elvST['DDC|STATE'] = '${stringTableDDCState}';
elvST['DEV_RPT_CNT_MAX'] = '${stringTableDevRptCntMax}';
elvST['DEVICE_LED_MODE'] = '${stringTableDeviceLEDMode}';
elvST['DEVICE_LED_MODE=OFF'] = '${stringTableDeviceLEDModeOff}';
elvST['DEVICE_LED_MODE=ON'] = '${stringTableDeviceLEDModeOn}';
elvST['DIGITAL_ANALOG_INPUT|BEHAVIOUR'] = '${stringTableDigitalAnalogInputBehaviour}';
elvST['DIGITAL_ANALOG_INPUT|STATE=FALSE'] = '${stringTableDigitalAnalogInputStateFalse}';
elvST['DIGITAL_ANALOG_INPUT|STATE=TRUE'] = '${stringTableDigitalAnalogInputStateTrue}';
elvST['DIGITAL_ANALOG_INPUT|VALUE'] = '${stringTableDigitalAnalogInputValue}';
elvST['DIGITAL_ANALOG_INPUT|CALIBRATION'] = '${stringTableDigitalAnalogInputCalibration}';
elvST['DIGITAL_ANALOG_OUTPUT|BEHAVIOUR'] = '${stringTableDigitalAnalogOutputBehaviour}';
elvST['DIGITAL_ANALOG_OUTPUT|FREQUENCY'] = '${stringTableDigitalAnalogOutputFrequency}';
elvST['DIGITAL_ANALOG_OUTPUT|STATE=FALSE'] = '${stringTableDigitalAnalogOutputStateFalse}';
elvST['DIGITAL_ANALOG_OUTPUT|STATE=TRUE'] = '${stringTableDigitalAnalogOutputStateTrue}';
elvST['DIGITAL_ANALOG_OUTPUT|PULSETIME'] = '${stringTableDigitalAnalogOutputPulseTime}';
elvST['DIGITAL_INPUT'] = '${stringTableDigitalInput}';
elvST['DIGITAL_INPUT|BEHAVIOUR'] = '${stringTableDigitalInputBehaviour}';
elvST['DIGITAL_INPUT|FREQUENCY'] = '${stringTableDigitalInputFrequency}';
elvST['DIGITAL_INPUT|STATE=FALSE'] = '${stringTableDigitalInputStateFalse}';
elvST['DIGITAL_INPUT|STATE=TRUE'] = '${stringTableDigitalInputStateTrue}';
elvST['DIGITAL_OUTPUT'] = '${stringTableDigitalOutput}';
elvST['DIGITAL_OUTPUT|STATE=FALSE'] = '${stringTableDigitalOutputStateFalse}';
elvST['DIGITAL_OUTPUT|STATE=TRUE'] = '${stringTableDigitalOutputStateTrue}';
elvST['DIMMER'] = '${stringTableDimmerTitle}';
elvST['DIMMER|CHARACTERISTIC'] = '${stringTableDimmerCharacteristic}';
elvST['DIMMER|ERROR=LOAD_FAILURE'] = '${stringTableDimmerErrorLoad}';
elvST['DIMMER|FUSE_DELAY'] = '${stringTableDimmerFuseDelay}';
elvST['DIMMER|LEVEL'] = '${stringTableDimmerLevel}';
elvST['LEVEL_REAL'] = '${stringTableDimmerLevelReal}';
elvST['DIMMER|LOAD_ERROR_CALIB'] = '${stringTableDimmerLoadErrorCal}';
elvST['DIMMER|LOAD_APPEAR_BEHAVIOUR'] = '${stringTableDimmerLoadAppearBehaviour}';
elvST['DIMMER|LOGIC_COMBINATION'] = '${stringTableDimmerLogicCombination}';
elvST['DIMMER|OLD_LEVEL'] = '${stringTableDimmerOldLevel}';
elvST['DIMMER|ON_TIME'] = '${stringTableDimmerOnTime}';
elvST['DIMMER|OVERTEMP_LEVEL'] = '${stringTableDimmerOverTempLevel}';
elvST['DIMMER|POWERUP_ACTION'] = '${stringTableDimmerPowerUpAction}';
elvST['DIMMER|RAMP_TIME'] = '${stringTableDimmerRampTime}';
elvST['DIMMER|RAMP_STOP'] = '${stringTableDimmerRampStop}';
elvST['DIMMER|REDUCE_LEVEL'] = '${stringTableDimmerReduceLevel}';
elvST['DIMMER|REDUCE_TEMP_LEVEL'] = '${stringTableDimmerReduceTempLevel}';
elvST['DIMMER|STATUSINFO_MINDELAY'] = '${stringTableDimmerStatusInfoMinDelay}';
elvST['DIMMER|ERROR_OVERLOAD'] = '${stringTableDimmerErrorOverload}';
elvST['DIMMER|ERROR_OVERHEAT'] = '${stringTableDimmerErrorOverheat}';
elvST['DIMMER|STATUSINFO_RANDOM'] = '${stringTableStatusInfoRandom}';
elvST['DIMMER|ERROR_REDUCED'] = '${stringTableDimmerErrorReduced}';
elvST['DISPLAY|ALARM_COUNT'] = '${stringTableDisplayAlarmCount}';
elvST['DISPLAY|ARROW_DOWN'] = '${stringTableDisplayArrowDown}';
elvST['DISPLAY|ARROW_UP'] = '${stringTableDisplayArrowUp}';
elvST['DISPLAY_BACKLIGHT_MODE'] = '${stringTableDisplayBacklightMode}';
elvST['DISPLAY_BACKLIGHT_MODE=AUTO'] = '${stringTableDisplayBacklightModeAuto}';
elvST['DISPLAY_BACKLIGHT_MODE=OFF'] = '${stringTableDisplayBacklightModeOff}';
elvST['DISPLAY_BACKLIGHT_MODE=ON'] = '${stringTableDisplayBacklightModeOn}';
elvST['DISPLAY|BACKLIGHT'] = '${stringTableDisplayBacklight}';
elvST['DISPLAY_BACKLIGHT_TIME'] = '${stringTableDisplayBacklightTime}';
elvST['DISPLAY|BACKLIGHT=BLINK_FAST'] = '${stringTableDisplayBacklightBlinkFast}';
elvST['DISPLAY|BACKLIGHT=BLINK_SLOW'] = '${stringTableDisplayBacklightBlinkSlow}';
elvST['DISPLAY|BACKLIGHT=OFF'] = '${stringTableDisplayBacklightOff}';
elvST['DISPLAY|BACKLIGHT=ON'] = '${stringTableDisplayBacklightOn}';
elvST['DISPLAY|BACKLIGHT_AT_ALARM'] = '${stringTableDisplayBacklightAtAlarm}';
elvST['DISPLAY|BACKLIGHT_AT_ALARM=BLINK_FAST'] = '${stringTableDisplayBacklightAtAlarmBlinkFast}';
elvST['DISPLAY|BACKLIGHT_AT_ALARM=BLINK_SLOW'] = '${stringTableDisplayBacklightAtAlarmBlinkSlow}';
elvST['DISPLAY|BACKLIGHT_AT_ALARM=OFF'] = '${stringTableDisplayBacklightAtAlarmOff}';
elvST['DISPLAY|BACKLIGHT_AT_ALARM=ON'] = '${stringTableDisplayBacklightAtAlarmOn}';
elvST['DISPLAY|BACKLIGHT_AT_SERVICE'] = '${stringTableDisplayBacklightAtService}';
elvST['DISPLAY|BACKLIGHT_AT_SERVICE=BLINK_FAST'] = '${stringTableDisplayBacklightAtServiceBlinkFast}';
elvST['DISPLAY|BACKLIGHT_AT_SERVICE=BLINK_SLOW'] = '${stringTableDisplayBacklightAtServiceBlinkSlow}';
elvST['DISPLAY|BACKLIGHT_AT_SERVICE=OFF'] = '${stringTableDisplayBacklightAtServiceOff}';
elvST['DISPLAY|BACKLIGHT_AT_SERVICE=ON'] = '${stringTableDisplayBacklightAtServiceOn}';
elvST['DISPLAY|BACKLIGHT_AT_STATUS'] = '${stringTableDisplayBacklightAtState}';
elvST['DISPLAY|BACKLIGHT_AT_STATUS=BLINK_FAST'] = '${stringTableDisplayBacklightAtStateBlinkFast}';
elvST['DISPLAY|BACKLIGHT_AT_STATUS=BLINK_SLOW'] = '${stringTableDisplayBacklightAtStateBlinkSlow}';
elvST['DISPLAY|BACKLIGHT_AT_STATUS=OFF'] = '${stringTableDisplayBacklightAtStateOff}';
elvST['DISPLAY|BACKLIGHT_AT_STATUS=ON'] = '${stringTableDisplayBacklightAtStateOn}';
elvST['DISPLAY|BEEP=NONE'] = '${stringTableDisplayBeepNone}';
elvST['DISPLAY|BEEP=TONE1'] = '${stringTableDisplayBeepTone1}';
elvST['DISPLAY|BEEP=TONE2'] = '${stringTableDisplayBeepTone2}';
elvST['DISPLAY|BEEP=TONE3'] = '${stringTableDisplayBeepTone3}';
elvST['DISPLAY|BEEP_AT_ALARM'] = '${stringTableDisplayBeepAtAlarm}';
elvST['DISPLAY|BEEP_AT_ALARM=NONE'] = '${stringTableDisplayBeepAtAlarmNone}';
elvST['DISPLAY|BEEP_AT_ALARM=TONE1'] = '${stringTableDisplayBeepAtAlarmTone1}';
elvST['DISPLAY|BEEP_AT_ALARM=TONE2'] = '${stringTableDisplayBeepAtAlarmTone2}';
elvST['DISPLAY|BEEP_AT_ALARM=TONE3'] = '${stringTableDisplayBeepAtAlarmTone3}';
elvST['DISPLAY|BEEP_AT_SERVICE'] = '${stringTableDisplayBeepAtService}';
elvST['DISPLAY|BEEP_AT_SERVICE=NONE'] = '${stringTableDisplayBeepAtServiceNone}';
elvST['DISPLAY|BEEP_AT_SERVICE=TONE1'] = '${stringTableDisplayBeepAtServiceTone1}';
elvST['DISPLAY|BEEP_AT_SERVICE=TONE2'] = '${stringTableDisplayBeepAtServiceTone2}';
elvST['DISPLAY|BEEP_AT_SERVICE=TONE3'] = '${stringTableDisplayBeepAtServiceTone3}';
elvST['DISPLAY|BEEP_AT_STATUSINFO'] = '${stringTableDisplayBeepAtStatusInfo}';
elvST['DISPLAY|BEEP_AT_STATUSINFO=NONE'] = '${stringTableDisplayBeepAtStatusInfoNone}';
elvST['DISPLAY|BEEP_AT_STATUSINFO=TONE1'] = '${stringTableDisplayBeepAtStatusInfoTone1}';
elvST['DISPLAY|BEEP_AT_STATUSINFO=TONE2'] = '${stringTableDisplayBeepAtStatusInfoTone2}';
elvST['DISPLAY|BEEP_AT_STATUSINFO=TONE3'] = '${stringTableDisplayBeepAtStatusInfoTone3}';
elvST['DISPLAY|BELL'] = '${stringTableDisplayBell}';
elvST['DISPLAY|BLIND'] = '${stringTableDisplayBlind}';
elvST['DISPLAY|BULB'] = '${stringTableDisplayBulb}';
elvST['DISPLAY|CLOCK'] = '${stringTableDisplayClock}';
elvST['DISPLAY|DOOR'] = '${stringTableDisplayDoor}';
elvST['DISPLAY|PHONE'] = '${stringTableDisplayPhone}';
elvST['DISPLAY|SCENE'] = '${stringTableDisplayScene}';
elvST['DISPLAY|MESSAGE_SHOW_TIME'] = '${stringTableDisplayMessageShowTime}';
elvST['DISPLAY|MESSAGE_SHOW_TIME=PERMANENT'] = '${stringTableDisplayMessageShowTimePermanent}';
elvST['DISPLAY|SERVICE_COUNT'] = '${stringTableDisplayServiceCount}';
elvST['DISPLAY|SUBMIT'] = '${stringTableDisplaySubmit}';
elvST['DISPLAY|SWITCH'] = '${stringTableDisplaySwitch}';
elvST['DISPLAY|TEXT'] = '${stringTableDisplayText}';
elvST['DISPLAY|WINDOW'] = '${stringTableDisplayWindow}';
elvST['DISPLAY|UNIT=CELSIUS'] = '${stringTableDisplayUnitCelsius}';
elvST['DISPLAY|UNIT=FAHRENHEIT'] = '${stringTableDisplayUnitFahrenheit}';
elvST['DISPLAY|UNIT=NONE'] = '${stringTableDisplayUnitNone}';
elvST['DISPLAY|UNIT=PERCENT'] = '${stringTableDisplayUnitPercent}';
elvST['DISPLAY|UNIT=WATT'] = '${stringTableDisplayUnitWatt}';
elvST['DISPLAY_ENERGYOPTIONS'] = '${stringTableDisplayEnergyOptions}';
elvST['DISPLAY_BRIGHTNESS'] = '${stringTableDisplayBrightness}';
elvST['ERROR'] = '${stringTableError}';
elvST['ERROR_BATTERY=TRUE'] = '${stringTableBatteryOk}';
elvST['ERROR_BATTERY=FALSE'] = '${stringTableBatteryFailure}';
elvST['ERROR=NO_ERROR'] = '${stringTableErrorNoError}';
elvST['ERROR_OVERHEAT=FALSE'] = '${stringTableErrorOverheatFalse}';
elvST['ERROR_OVERHEAT=TRUE'] = '${stringTableErrorOverheatTrue}';
elvST['ERROR_OVERLOAD=FALSE'] = '${stringTableErrorOverloadFalse}';
elvST['ERROR_OVERLOAD=TRUE'] = '${stringTableErrorOverloadTrue}';
elvST['ERROR_POWER=TRUE'] = '${stringTableErrorPowerTrue}';
elvST['ERROR_POWER=FALSE'] = '${stringTableErrorPowerFalse}';
elvST['ERROR_REDUCED=FALSE'] = '${stringTableErrorReducedFalse}';
elvST['ERROR_REDUCED=TRUE'] = '${stringTableErrorReducedTrue}';
elvST['ERROR_SABOTAGE=FALSE'] = '${stringTableErrorSabotageFalse}';
elvST['ERROR_SABOTAGE=TRUE'] = '${stringTableErrorSabotageTrue}';
elvST['FREQUENCY_INPUT'] = '${stringTableFrequencyInput}';
elvST['GLOBAL_BUTTON_LOCK'] = '${stringTableGlobalButtonLock}';
elvST['INHIBIT'] = '${stringTableInhibit}';
elvST['INHIBIT=FALSE'] = '${stringTableInhibitFalse}';
elvST['INHIBIT=TRUE'] = '${stringTableInhibitTrue}';
elvST['INPUT_OUTPUT'] = '${stringTableInputOutput}';
elvST['INPUT_OUTPUT|BEHAVIOUR'] = '${stringTableInputOutputBehaviour}';
elvST['INPUT_OUTPUT|BEHAVIOUR=INPUT'] = '${stringTableInputOutputBehaviourInput}';
elvST['INPUT_OUTPUT|BEHAVIOUR=OUTPUT'] = '${stringTableInputOutputBehaviourOutput}';
elvST['INPUT_OUTPUT|INPUT_LOCKED'] = '${stringTableInputOutputInputLocked}';
elvST['INPUT_OUTPUT|INPUT_TYPE'] = '${stringTableInputOutputInputType}';
elvST['INPUT_OUTPUT|INPUT_TYPE=PUSHBUTTON'] = '${stringTableInputOutputTypePushButton}';
elvST['INPUT_OUTPUT|INPUT_TYPE=SWITCH'] = '${stringTableInputOutputTypeSwitch}';
elvST['INPUT_OUTPUT|LONGPRESS_TIME'] = '${stringTableInputOutputLongPressA}';
elvST['INPUT_OUTPUT|LONG_PRESS_TIME'] = '${stringTableInputOutputLongPressB}';
elvST['INPUT_OUTPUT|STATE=FALSE'] = '${stringTableInputOutputStateFalse}';
elvST['INPUT_OUTPUT|STATE=TRUE'] = '${stringTableInputOutputStateTrue}';
elvST['KEYMATIC'] = '${stringTableKeyMaticTitle}';
elvST['KEYMATIC|ANGLE_LOCKED'] = '${stringTableKeyMaticAngleLocked}';
elvST['KEYMATIC|ANGLE_MAX'] = '${stringTableKeyMaticAngleMax}';
elvST['KEYMATIC|ANGLE_OPEN'] = '${stringTableKeyMaticAngleOpen}';
elvST['KEYMATIC|ERROR=CLUTCH_FAILURE'] = '${stringTableKeyMaticErrorClutch}';
elvST['KEYMATIC|ERROR=MOTOR_ABORTED'] = '${stringTableKeyMaticErrorMotorAborted}';
elvST['KEYMATIC|HOLD_PWM'] = '${stringTableKeyMaticHoldPWM}';
elvST['KEYMATIC|HOLD_TIME'] = '${stringTableKeyMaticHoldTime}';
elvST['KEYMATIC|LED_FLASH_LOCKED'] = '${stringTableKeyMaticLEDFlashLocked}';
elvST['KEYMATIC|LED_FLASH_UNLOCKED'] = '${stringTableKeyMaticLEDFlashUnlocked}';
elvST['KEYMATIC|OPEN'] = '${stringTableKeyMaticOpen}';
elvST['KEYMATIC|RELOCK_DELAY'] = '${stringTableKeyMaticRelockDelay}';
elvST['KEYMATIC|RELOCK_DELAY=NOT_USED'] = '${stringTableKeyMaticRelockDelayNotUsed}';
elvST['KEYMATIC|SETUP_DIR'] = '${stringTableKeyMaticSetupDir}';
elvST['KEYMATIC|SETUP_DIR=LEFT'] = '${stringTableKeyMaticSetupDirLeft}';
elvST['KEYMATIC|SETUP_DIR=RIGHT'] = '${stringTableKeyMaticSetupDirRight}';
elvST['KEYMATIC|SETUP_POSITION'] = '${stringTableKeyMaticSetupPosition}';
elvST['KEYMATIC|STATE=FALSE'] = '${stringTableKeyMaticStateFalse}';
elvST['KEYMATIC|STATE=TRUE'] = '${stringTableKeyMaticStateTrue}';
elvST['KEYMATIC|STATE_UNCERTAIN=FALSE'] = '${stringTableKeyMaticStateUncertainFalse}';
elvST['KEYMATIC|STATE_UNCERTAIN=TRUE'] = '${stringTableKeyMaticStateUncertainTrue}';
elvST['KEYPRESS_SIGNAL'] = '${stringTableKeyPressSignal}';
elvST['KEY'] = '${stringTableKeyTitle}';
elvST['KEY|CHANNEL_FUNCTION'] = '${stringTableKeyChannelFunction}';
elvST['KEY|DBL_PRESS_TIME'] = '${stringTableKeyDblPressTime}';
elvST['KEY|INPUT_LOCKED'] = '${stringTableKeyInputLocked}';
elvST['KEY|INPUT_TYPE'] = '${stringTableKeyInputType}';
elvST['KEY|INPUT_TYPE=PUSHBUTTON'] = '${stringTableKeyInputTypePushButton}';
elvST['KEY|INPUT_TYPE=SWITCH'] = '${stringTableKeyInputTypeSwitch}';
elvST['KEY|LONG_PRESS_TIME'] = '${stringTableKeyLongPressTimeA}';
elvST['KEY|LONGPRESS_TIME'] = '${stringTableKeyLongPressTimeB}';
elvST['KEY|CHANNEL_FUNCTION=BUTTON_BEHAVIOR'] = '${stringTableKeyButtonBehavior}';
elvST['KEY|CHANNEL_FUNCTION=SWITCH_BEHAVIOR'] = '${stringTableKeySwitchBehavior}';
elvST['KEY|CHANNEL_FUNCTION=BINARY_BEHAVIOR'] = '${stringTableKeyBinaryBehavior}';
elvST['KEY|CHANNEL_FUNCTION=INACTIVE'] = '${stringTableKeyInactive}';
elvST['KEY|MSG_FOR_POS_A'] = '${stringTableKeyMsgPosClosed}';
elvST['KEY|MSG_FOR_POS_A=CLOSED'] = '${stringTableKeyMsgPosA0}';
elvST['KEY|MSG_FOR_POS_A=NO_MSG'] = '${stringTableKeyMsgPosA1}';
elvST['KEY|MSG_FOR_POS_A=OPEN'] = '${stringTableKeyMsgPosA2}';
elvST['KEY|MSG_FOR_POS_B'] = '${stringTableKeyMsgPosOpen}';
elvST['KEY|MSG_FOR_POS_B=CLOSED'] = '${stringTableKeyMsgPosA0}';
elvST['KEY|MSG_FOR_POS_B=NO_MSG'] = '${stringTableKeyMsgPosA1}';
elvST['KEY|MSG_FOR_POS_B=OPEN'] = '${stringTableKeyMsgPosA2}';
elvST['KEY|TEXT1'] = '${stringTableKeyText1}';
elvST['KEY|TEXT2'] = '${stringTableKeyText2}';
elvST['KEY|TEXTLINE_1'] = '${stringTableKeyTextLine}';
elvST['KEY|TEXTLINE_2'] = '${stringTableKeyTextLine}';
elvST['LANGUAGE'] = '${stringTableLanguage}';
elvST['LANGUAGE=ENGLISH'] = '${stringTableLanguageEnglish}';
elvST['LANGUAGE=GERMAN'] = '${stringTableLanguageGerman}';
elvST['LED_SLEEP_MODE=OFF'] = '${stringTableLEDSleepModeOff}';
elvST['LED_SLEEP_MODE=ON'] = '${stringTableLEDSleepModeOn}';
elvST['LED_STATUS=OFF'] = '${stringTableLEDStatusOff}';
elvST['LED_STATUS=RED'] = '${stringTableLEDStatusRed}';
elvST['LED_STATUS=GREEN'] = '${stringTableLEDStatusGreen}';
elvST['LED_STATUS=ORANGE'] = '${stringTableLEDStatusOrange}';
elvST['LIVE_MODE_RX'] = '${stringTableLiveModeRX}';
elvST['LOCAL_RESET_DISABLE'] = '${stringTableLocalResetDisable}';
elvST['LOGGING'] = '${stringTableLogging}';
elvST['LOGGING=FALSE'] = '${stringTableLoggingFalse}';
elvST['LOGGING=OFF'] = '${stringTableLoggingOff}';
elvST['LOGGING=ON'] = '${stringTableLoggingOn}';
elvST['LOGGING=TRUE'] = '${stringTableLoggingTrue}';
elvST['LOGGING_TIME'] = '${stringTableLoggingTime}';
elvST['LOGIC_INACTIVE'] = '${stringTableLogicInactive}';
elvST['LOGIC_OR'] = '${stringTableLogicOR}';
elvST['LOGIC_AND'] = '${stringTableLogicAND}';
elvST['LOGIC_XOR'] = '${stringTableLogicXOR}';
elvST['LOGIC_NOR'] = '${stringTableLogicNOR}';
elvST['LOGIC_NAND'] = '${stringTableLogicNAND}';
elvST['LOGIC_ORINVERS'] = '${stringTableLogicORINVERS}';
elvST['LOGIC_ANDINVERS'] = '${stringTableLogicANDINVERS}';
elvST['LOGIC_PLUS'] = '${stringTableLogicPLUS}';
elvST['LOGIC_MINUS'] = '${stringTableLogicMINUS}';
elvST['LOGIC_MUL'] = '${stringTableLogicMUL}';
elvST['LOGIC_PLUSINVERS'] = '${stringTableLogicPLUSINVERS}';
elvST['LOGIC_MINUSINVERS'] = '${stringTableLogicMINUSINVERS}';
elvST['LOGIC_MULINVERS'] = '${stringTableLogicMULINVERS}';
elvST['LOGIC_INVERSPLUS'] = '${stringTableLogicINVERSPLUS}';
elvST['LOGIC_INVERSMINUS'] = '${stringTableLogicINVERSMINUS}';
elvST['LOGIC_INVERSMUL'] = '${stringTableLogicINVERSMUL}';
elvST['LOW_BAT_LIMIT'] = '${stringTableBatteryLowBatLimit}';
elvST['LOWBAT=FALSE'] = '${stringTableBatteryOk}';
elvST['LOWBAT=TRUE'] = '${stringTableBatteryEmpty}';
elvST['MAINTENANCE|ERROR_BATTERY=BATTERY_DEFECT'] = '${stringTableBatteryFailure}';
elvST['MAINTENANCE|ERROR_BATTERY=NO_ERROR'] = '${stringTableBatteryOk}';
elvST['MAINTENANCE|CONFIG_PENDING'] = '${stringTableConfigPending}';
elvST['MAINTENANCE|LOWBAT'] = '${stringTableBatteryLow}';
elvST['MAINTENANCE|STICKY_BATTERY=BATTERY_DEFECT'] = '${stringTableBatteryFailure}';
elvST['MAINTENANCE|STICKY_BATTERY=BATTERY_WAS_DEFECT'] = '${stringTableBatteryWasDefect}';
elvST['MAINTENANCE|STICKY_POWER=POWER_FAILURE'] = '${stringTablePowerNotAvailable}';
elvST['MAINTENANCE|STICKY_POWER=WAS_POWER_FAILURE'] = '${stringTablePowerWasNotAvailable}';
elvST['MAINTENANCE|STICKY_SABOTAGE=SABOTAGE'] = '${stringTableSabotage}';
elvST['MAINTENANCE|STICKY_SABOTAGE=WAS_SABOTAGED'] = '${stringTableSabotageContactWasActive}';
elvST['MAINTENANCE|STICKY_UNREACH'] = '${stringTableStickyUnreach}';
elvST['MAINTENANCE|HMW_STICKY_UNREACH'] = '${stringTableStickyUnreach}';
elvST['MAINTENANCE|UNREACH'] = '${stringTableUnreach}';
elvST['minutes'] = '${stringTableMinute}';
elvST['MODUS_BUTTON_LOCK'] = '${stringTableModusButtonLock}';
elvST['MOTION_DETECTOR'] = '${stringTableMotionDetectorTitle}';
elvST['MOTION_DETECTOR|BRIGHTNESS'] = '${stringTableMotionDetectorBrightness}';
elvST['MOTION_DETECTOR|BRIGHTNESS_FILTER'] = '${stringTableMotionDetectorBrightnessFilter}';
elvST['MOTION_DETECTOR|ERROR=SABOTAGE'] = '${stringTableMotionDetectorErrorSabotage}';
elvST['MOTION_DETECTOR|EVENT_FILTER_NUMBER'] = '${stringTableMotionDetectorEventFilterNumber}';
elvST['MOTION_DETECTOR|EVENT_FILTER_PERIOD'] = '${stringTableMotionDetectorEventFilterPeriod}';
elvST['MOTION_DETECTOR|MIN_INTERVAL'] = '${stringTableMotionDetectorMinInterval}';
elvST['MOTION_DETECTOR|MOTION=FALSE'] = '${stringTableMotionDetectorMotionFalse}';
elvST['MOTION_DETECTOR|MOTION=TRUE'] = '${stringTableMotionDetectorMotionTrue}';
elvST['MOTION_DETECTOR|CAPTURE_WITHIN_INTERVAL'] = '${stringTableMotionDetectorCaptureWithinInterval}';
elvST['PARAM_SELECT'] = '${stringTableParamSelect}';
elvST['PARAM_SELECT=INACTIVE'] = '${stringTableParamSelectInactive}';
elvST['PARAM_SELECT=T1'] = '${stringTableParamSelectT1}';
elvST['PARAM_SELECT=T2'] = '${stringTableParamSelectT2}';
elvST['PARAM_SELECT=T1-T2'] = '${stringTableParamSelectT1MinusT2}';
elvST['PARAM_SELECT=T2-T1'] = '${stringTableParamSelectT2MinusT1}';
elvST['POWER|BAT_LEVEL'] = '${stringTableBatteryCapacity}';
elvST['POWER|LOWBAT=FALSE'] = '${stringTableBatteryOk}';
elvST['POWER|LOWBAT=TRUE'] = '${stringTableBatteryEmpty}';
elvST['POWER|USBH_POWERFAIL=FALSE'] = '${stringTableUSBHostActive}';
elvST['POWER|USBH_POWERFAIL=TRUE'] = '${stringTableUSBHostNotActive}';
elvST['POWER|U_SOURCE_FAIL=FALSE'] = '${stringTablePowerSupplyOk}';
elvST['POWER|U_SOURCE_FAIL=TRUE'] = '${stringTablePowerSupplyNotOk}';
elvST['POWER|U_USBD_OK=FALSE'] = '${stringTableUSBNotActive}';
elvST['POWER|U_USBD_OK=TRUE'] = '${stringTableUSBActive}';
elvST['POWERMETER|AVERAGING'] = '${stringTablePowerMeterAveraging}';
elvST['POWERMETER|TX_MINDELAY'] = '${stringTablePowerMeterTxMinDelay}';
elvST['POWERMETER|TX_THRESHOLD_POWER'] = '${stringTablePowerMeterTxThresholdPower}';
elvST['POWERMETER|TX_THRESHOLD_CURRENT'] = '${stringTablePowerMeterTxThresholdCurrent}';
elvST['POWERMETER|TX_THRESHOLD_VOLTAGE'] = '${stringTablePowerMeterTxThresholdVoltage}';
elvST['POWERMETER|TX_THRESHOLD_FREQUENCY'] = '${stringTablePowerMeterTxThresholdFrequency}';
elvST['POWERMETER|ENERGY_COUNTER'] = '${stringTablePowerMeterEnergyCounter}';
elvST['POWERMETER|POWER'] = '${stringTablePowerMeterPower}';
elvST['POWERMETER|CURRENT'] = '${stringTablePowerMeterCurrent}';
elvST['POWERMETER|VOLTAGE'] = '${stringTablePowerMeterVoltage}';
elvST['POWERMETER|FREQUENCY'] = '${stringTablePowerMeterFrequency}';
elvST['POWERMETER_IGL|ENERGY_COUNTER'] = '${stringTablePowerMeterEnergyCounter}';
elvST['POWERMETER_IGL|GAS_ENERGY_COUNTER'] = '${stringTablePowerMeterEnergyCounterGas}';
elvST['POWERMETER_IGL|POWER'] = '${stringTablePowerMeterPower}';
elvST['POWERMETER_IGL|GAS_POWER'] = '${stringTableGasConsumption}';
elvST['POWERUP_OFF'] = '${stringTablePowerUpOFF} ';
elvST['POWERUP_ON'] = '${stringTablePowerUpON}';
elvST['PRESS_LONG'] = '${stringTableKeyPressLong}';
elvST['PRESS_LONG=TRUE'] = '${stringTableKeyPressLongTrue}';
elvST['PRESS_SHORT'] = '${stringTableKeyPressShort}';
elvST['PRESS_SHORT=TRUE'] = '${stringTableKeyPressShortTrue}';
elvST['PULSE_SENSOR'] = '${stringTablePulseSensorTitle}';
elvST['PULSE_SENSOR|SEQUENCE_OK'] = '${stringTablePulseSensorSequenceOk}';
elvST['PULSE_SENSOR|SEQUENCE_PULSE_1'] = '${stringTablePulseSensorSequencePulse1}';
elvST['PULSE_SENSOR|SEQUENCE_PULSE_1=NOT_USED'] = '${stringTablePulseSensorSequencePulse1Unused}';
elvST['PULSE_SENSOR|SEQUENCE_PULSE_2'] = '${stringTablePulseSensorSequencePulse2}';
elvST['PULSE_SENSOR|SEQUENCE_PULSE_2=NOT_USED'] = '${stringTablePulseSensorSequencePulse2Unused}';
elvST['PULSE_SENSOR|SEQUENCE_PULSE_3'] = '${stringTablePulseSensorSequencePulse3}';
elvST['PULSE_SENSOR|SEQUENCE_PULSE_3=NOT_USED'] = '${stringTablePulseSensorSequencePulse3Unused}';
elvST['PULSE_SENSOR|SEQUENCE_PULSE_4'] = '${stringTablePulseSensorSequencePulse4}';
elvST['PULSE_SENSOR|SEQUENCE_PULSE_4=NOT_USED'] = '${stringTablePulseSensorSequencePulse4Unused}';
elvST['PULSE_SENSOR|SEQUENCE_PULSE_5'] = '${stringTablePulseSensorSequencePulse5}';
elvST['PULSE_SENSOR|SEQUENCE_PULSE_5=NOT_USED'] = '${stringTablePulseSensorSequencePulse5Unused}';
elvST['PULSE_SENSOR|SEQUENCE_TOLERANCE'] = '${stringTablePulseSensorSequenceTolerance}';
elvST['RAINDETECTOR'] = '${stringTableRainDetector}';
elvST['RAINDETECTOR|EVENT_FILTERTIME'] = '${stringTableRainDetectorEventFilterTime}';
elvST['RAINDETECTOR|STATE=DRY'] = '${stringTableRainDetectorDry}';
elvST['RAINDETECTOR|STATE=RAIN'] = '${stringTableRainDetectorRain}';
elvST['RAINDETECTOR|STATE_HIGH_HOLD_TIME'] = '${stringTableRainDetectorStateHighHoldTime}';
elvST['RAINDETECTOR|EVENT_RELEASE_FILTER_TIME'] = '${stringTableRainDetectorEventReleaseFilterTime}';
elvST['RAINDETECTOR|COND_TX_THRESHOLD_HI'] = '${stringTableRainDetectorCondTxThresholdHi}';
elvST['RAINDETECTOR|COND_TX_THRESHOLD_LO'] = '${stringTableRainDetectorCondTxThresholdLo}';
elvST['RAINDETECTOR_HEAT|STATE=TRUE'] = '${stringTableRainDetectorHeatingOn}';
elvST['RAINDETECTOR_HEAT|STATE=FALSE'] = '${stringTableRainDetectorHeatingOff}';
elvST['RESTART_OFF'] = '${stringTableRestartOff}';
elvST['RESTART_LAST'] = '${stringTableRestartLast}';
elvST['RESTART_BUTTONPRESS'] = '${stringTableRestartButtonPress}';
elvST['RESTART_BUTTONPRESS_IF_WAS_ON'] = '${stringTableRestartButtonPressIfWasOn}';
elvST['REMOTECONTROL_RECEIVER'] = '${stringTableRemoteControlReceiver}';
elvST['RGBW_AUTOMATIC'] = '${stringTableRGBWAutomaticTitle}';
elvST['RGBW_AUTOMATIC|PROGRAM'] = '${stringTableRGBWProgram}';
elvST['RGBW_AUTOMATIC|COLOR_CHANGE_SPEED'] = '${stringTableRGBWColorChangeSpeed}';
elvST['RGBW_COLOR'] = '${stringTableRGBWColorTitle}';
elvST['RGBW_COLOR|COLOR'] = '${stringTableRGBWColorValue}';
elvST['RGBW_COLOR|WHITE_ADJUSTMENT_VALUE_BLUE'] = '${stringTableRGBWWhiteAdjustmentBlue}';
elvST['RGBW_COLOR|WHITE_ADJUSTMENT_VALUE_GREEN'] = '${stringTableRGBWWhiteAdjustmentGreen}';
elvST['RGBW_COLOR|WHITE_ADJUSTMENT_VALUE_RED'] = '${stringTableRGBWWhiteAdjustmentRed}';
elvST['ROTARY_HANDLE_SENSOR'] = '${stringTableRHSTitle}';
elvST['ROTARY_HANDLE_SENSOR|ERROR=SABOTAGE'] = '${stringTableRHSErrorSabotage}';
elvST['ROTARY_HANDLE_SENSOR|EVENT_DELAYTIME'] = '${stringTableRHSEventDelayTime}';
elvST['ROTARY_HANDLE_SENSOR|MSG_FOR_POS_A'] = '${stringTableRHSMsgPosA}';
elvST['ROTARY_HANDLE_SENSOR|MSG_FOR_POS_A=CLOSED'] = '${stringTableRHSMsgPosAClosed}';
elvST['ROTARY_HANDLE_SENSOR|MSG_FOR_POS_A=NO_MSG'] = '${stringTableRHSMsgPosANoMsg}';
elvST['ROTARY_HANDLE_SENSOR|MSG_FOR_POS_A=OPEN'] = '${stringTableRHSMsgPosAOpen}';
elvST['ROTARY_HANDLE_SENSOR|MSG_FOR_POS_A=TILTED'] = '${stringTableRHSMsgPosATilted}';
elvST['ROTARY_HANDLE_SENSOR|MSG_FOR_POS_B'] = '${stringTableRHSMsgPosB}';
elvST['ROTARY_HANDLE_SENSOR|MSG_FOR_POS_B=CLOSED'] = '${stringTableRHSMsgPosBClosed}';
elvST['ROTARY_HANDLE_SENSOR|MSG_FOR_POS_B=NO_MSG'] = '${stringTableRHSMsgPosBNoMsg}';
elvST['ROTARY_HANDLE_SENSOR|MSG_FOR_POS_B=OPEN'] = '${stringTableRHSMsgPosBOpen}';
elvST['ROTARY_HANDLE_SENSOR|MSG_FOR_POS_B=TILTED'] = '${stringTableRHSMsgPosBTilted}';
elvST['ROTARY_HANDLE_SENSOR|MSG_FOR_POS_C'] = '${stringTableRHSMsgPosC}';
elvST['ROTARY_HANDLE_SENSOR|MSG_FOR_POS_C=CLOSED'] = '${stringTableRHSMsgPosCClosed}';
elvST['ROTARY_HANDLE_SENSOR|MSG_FOR_POS_C=NO_MSG'] = '${stringTableRHSMsgPosCNoMsg}';
elvST['ROTARY_HANDLE_SENSOR|MSG_FOR_POS_C=OPEN'] = '${stringTableRHSMsgPosCOpen}';
elvST['ROTARY_HANDLE_SENSOR|MSG_FOR_POS_C=TILTED'] = '${stringTableRHSMsgPosCTilted}';
elvST['ROTARY_HANDLE_SENSOR|STATE=CLOSED'] = '${stringTableRHSStateClosed}';
elvST['ROTARY_HANDLE_SENSOR|STATE=OPEN'] = '${stringTableRHSStateOpen}';
elvST['ROTARY_HANDLE_SENSOR|STATE=TILTED'] = '${stringTableRHSStateTilted}';
elvST['RS485_IDLE_TIME'] = '${stringTableRS485IdleTime}';
elvST['SABOTAGE_MSG'] = '${stringTableSabotageMsg}';
elvST['SABOTAGE|SHAKING'] = '${stringTableSabotageContact}';
elvST['SENSOR=FALSE'] = '${stringTableSensorFalse}';
elvST['SENSOR=TRUE'] = '${stringTableSensorTrue}';
elvST['SENSOR|INPUT_LOCKED'] = '${stringTableSensorInputLocked}';
elvST['SENSOR_FOR_CARBON_DIOXIDE'] = '${stringTableSensorCO2Title}';
elvST['SENSOR_FOR_CARBON_DIOXIDE|EVENT_FILTERTIME'] = '${stringTableSensorCO2EventFilterTime}';
elvST['SENSOR_FOR_CARBON_DIOXIDE|MSG_FOR_POS_A'] = '${stringTableSensorCO2MsgPosA0}';
elvST['SENSOR_FOR_CARBON_DIOXIDE|MSG_FOR_POS_A=LEVEL_NORMAL'] = '${stringTableSensorCO2MsgPosA1}';
elvST['SENSOR_FOR_CARBON_DIOXIDE|MSG_FOR_POS_A=NO_MSG'] = '${stringTableSensorCO2MsgPosA2}';
elvST['SENSOR_FOR_CARBON_DIOXIDE|MSG_FOR_POS_B'] = '${stringTableSensorCO2MsgPosB0}';
elvST['SENSOR_FOR_CARBON_DIOXIDE|MSG_FOR_POS_B=NO_MSG'] = '${stringTableSensorCO2MsgPosB1}';
elvST['SENSOR_FOR_CARBON_DIOXIDE|MSG_FOR_POS_B=LEVEL_NORMAL'] = '${stringTableSensorCO2MsgPosB2}';
elvST['SENSOR_FOR_CARBON_DIOXIDE|MSG_FOR_POS_B=LEVEL_ADDED'] = '${stringTableSensorCO2MsgPosB3}';
elvST['SENSOR_FOR_CARBON_DIOXIDE|MSG_FOR_POS_B=LEVEL_ADDED_STRONG'] = '${stringTableSensorCO2MsgPosB4}';
elvST['SENSOR_FOR_CARBON_DIOXIDE|MSG_FOR_POS_C'] = '${stringTableSensorCO2MsgPosC0}';
elvST['SENSOR_FOR_CARBON_DIOXIDE|MSG_FOR_POS_C=NO_MSG'] = '${stringTableSensorCO2MsgPosC1}';
elvST['SENSOR_FOR_CARBON_DIOXIDE|MSG_FOR_POS_C=LEVEL_NORMAL'] = '${stringTableSensorCO2MsgPosC2}';
elvST['SENSOR_FOR_CARBON_DIOXIDE|MSG_FOR_POS_C=LEVEL_ADDED'] = '${stringTableSensorCO2MsgPosC3}';
elvST['SENSOR_FOR_CARBON_DIOXIDE|MSG_FOR_POS_C=LEVEL_ADDED_STRONG'] = '${stringTableSensorCO2MsgPosC4}';
elvST['SENSOR_FOR_CARBON_DIOXIDE|MSG_FOR_POS_D'] = '${stringTableSensorCO2MsgPosD0}';
elvST['SENSOR_FOR_CARBON_DIOXIDE|MSG_FOR_POS_D=NO_MSG'] = '${stringTableSensorCO2MsgPosD1}';
elvST['SENSOR_FOR_CARBON_DIOXIDE|MSG_FOR_POS_D=LEVEL_NORMAL'] = '${stringTableSensorCO2MsgPosD2}';
elvST['SENSOR_FOR_CARBON_DIOXIDE|MSG_FOR_POS_D=LEVEL_ADDED'] = '${stringTableSensorCO2MsgPosD3}';
elvST['SENSOR_FOR_CARBON_DIOXIDE|MSG_FOR_POS_D=LEVEL_ADDED_STRONG'] = '${stringTableSensorCO2MsgPosD4}';
elvST['SENSOR_FOR_CARBON_DIOXIDE|STATE=LEVEL_NORMAL'] = '${stringTableSensorCO2LevelOk}';
elvST['SENSOR_FOR_CARBON_DIOXIDE|STATE=LEVEL_ADDED'] = '${stringTableSensorCO2LevelHigh}';
elvST['SENSOR_FOR_CARBON_DIOXIDE|STATE=LEVEL_ADDED_STRONG'] = '${stringTableSensorCO2LevelStrong}';
elvST['SENSOR_WINDOW'] = '${stringTableSensorWindowTitle}';
elvST['SENSOR_WINDOW|EVENT_DELAYTIME'] = '${stringTableSensorWindowEventDelayTime}';
elvST['SENSOR_WINDOW|EVENT_DELAYTIME=NOT_USED'] = '${stringTableActorWindowStatusInfoNotUsed}';
elvST['SENSOR_WINDOW|LEVEL'] = '${stringTableActorWindowLevel}';
elvST['SENSOR_WINDOW|TIPTRONIC_STATE=TT_LOCKED'] = '${stringTableActorWindowTT_0}';
elvST['SENSOR_WINDOW|TIPTRONIC_STATE=TT_UNLOCKS_IN_TILT_POSITION'] = '${stringTableActorWindowTT_1}';
elvST['SENSOR_WINDOW|TIPTRONIC_STATE=TT_IS_UNLOCKED_IN_TILT_POSITION_VENT_FRAME_IS_DUE'] = '${stringTableActorWindowTT_2}';
elvST['SENSOR_WINDOW|TIPTRONIC_STATE=TT_OPENS_IN_TILT_POSITION'] = '${stringTableActorWindowTT_3}';
elvST['SENSOR_WINDOW|TIPTRONIC_STATE=TT_IS_IN_TILT_POSITION_PARTITIAL_OPEND'] = '${stringTableActorWindowTT_4}';
elvST['SENSOR_WINDOW|TIPTRONIC_STATE=TT_IS_IN_TILT_POSITION_FULL_OPEND'] = '${stringTableActorWindowTT_5}';
elvST['SENSOR_WINDOW|TIPTRONIC_STATE=TT_CLOSES_FROM_TILT_POSITION'] = '${stringTableActorWindowTT_6}';
elvST['SENSOR_WINDOW|TIPTRONIC_STATE=TT_LOCKS_FROM_TILT_POSITION'] = '${stringTableActorWindowTT_7}';
elvST['SENSOR_WINDOW|TIPTRONIC_STATE=TT_UNLOCKS_IN_TURN_POSITION'] = '${stringTableActorWindowTT_8}';
elvST['SENSOR_WINDOW|TIPTRONIC_STATE=TT_IS_UNLOCKED_IN_TURN_POSITION_VENT_FRAME_IS_DUE'] = '${stringTableActorWindowTT_9}';
elvST['SENSOR_WINDOW|TIPTRONIC_STATE=TT_COULT_BE_OPEND_MANUAL_IN_TURN_POSITION'] = '${stringTableActorWindowTT_10}';
elvST['SENSOR_WINDOW|TIPTRONIC_STATE=TT_VENT_FRAME_IS_DUE_WINDOW_LOCKS_FROM_TURN_POSITION'] = '${stringTableActorWindowTT_11}';
elvST['SENSOR_WINDOW|TIPTRONIC_STATE=TIPTRONIC_UNKNOWN_STATE1'] = '${stringTableActorWindowTT_12}';
elvST['SENSOR_WINDOW|TIPTRONIC_STATE=TIPTRONIC_UNKNOWN_STATE2'] = '${stringTableActorWindowTT_13}';
elvST['SENSOR_WINDOW|TIPTRONIC_STATE=TIPTRONIC_WINDOW_IN_SHEV_POSITION'] = '${stringTableActorWindowTT_14}';
elvST['SENSOR_WINDOW|TIPTRONIC_STATE=TT_INITIAL_OPERATION'] = '${stringTableActorWindowTT_15}';
elvST['SENSOR_WINDOW|WIN_RELEASE=TRUE'] = '${stringTableActorWindowReleaseTrue}';
elvST['SENSOR_WINDOW|WIN_RELEASE=FALSE'] = '${stringTableActorWindowReleaseFalse}';
elvST['SENSOR_WINDOW|WINDOW_TYPE=TIPTRONIC_UNKNOWN_WINDOW_TYPE'] = '${stringTableSensorWindowType_0}';
elvST['SENSOR_WINDOW|WINDOW_TYPE=TIPTRONIC_TURN_AND_TILT'] = '${stringTableSensorWindowType_1}';
elvST['SENSOR_WINDOW|WINDOW_TYPE=TIPTRONIC_TURN_AND_TILT_TURN_LOCKED'] = '${stringTableSensorWindowType_2}';
elvST['SENSOR_WINDOW|WINDOW_TYPE=TIPTRONIC_TOPLIGHT'] = '${stringTableSensorWindowType_3}';
elvST['SENSOR_WINDOW|WINDOW_TYPE=TIPTRONIC_TURN'] = '${stringTableSensorWindowType_4}';
elvST['SENSOR_WINDOW|WINDOW_TYPE=TIPTRONIC_SHEV_TURN'] = '${stringTableSensorWindowType_5}';
elvST['SENSOR_WINDOW|WINDOW_TYPE=TIPTRONIC_SHEV_TILT'] = '${stringTableSensorWindowType_6}';
elvST['SHUTTER_CONTACT'] = '${stringTableShutterContactTitle}';
elvST['SHUTTER_CONTACT|ERROR=SABOTAGE'] = '${stringTableShutterContactErrorSabotage}';
elvST['SHUTTER_CONTACT|EVENT_DELAYTIME'] = '${stringTableShutterContactEventDelayTime}';
elvST['SHUTTER_CONTACT|MSG_FOR_POS_A'] = '${stringTableShutterContactMsgPosA0}';
elvST['SHUTTER_CONTACT|MSG_FOR_POS_A=CLOSED'] = '${stringTableShutterContactMsgPosA1}';
elvST['SHUTTER_CONTACT|MSG_FOR_POS_A=NO_MSG'] = '${stringTableShutterContactMsgPosA2}';
elvST['SHUTTER_CONTACT|MSG_FOR_POS_A=OPEN'] = '${stringTableShutterContactMsgPosA3}';
elvST['SHUTTER_CONTACT|MSG_FOR_POS_B'] = '${stringTableShutterContactMsgPosB0}';
elvST['SHUTTER_CONTACT|MSG_FOR_POS_B=CLOSED'] = '${stringTableShutterContactMsgPosB1}';
elvST['SHUTTER_CONTACT|MSG_FOR_POS_B=NO_MSG'] = '${stringTableShutterContactMsgPosB2}';
elvST['SHUTTER_CONTACT|MSG_FOR_POS_B=OPEN'] = '${stringTableShutterContactMsgPosB3}';
elvST['SHUTTER_CONTACT|STATE=FALSE'] = '${stringTableShutterContactStateFalse}';
elvST['SHUTTER_CONTACT|STATE=TRUE'] = '${stringTableShutterContactStateTrue}';
elvST['SIGNAL'] = '${stringTableSignal}';
elvST['SIGNAL_TONE'] = '${stringTableSignalTone}';
elvST['SIGNAL_TONE=HIGH'] = '${stringTableSignalToneHigh}';
elvST['SIGNAL_TONE=LOW'] = '${stringTableSignalToneLow}';
elvST['SIGNAL_TONE=MID'] = '${stringTableSignalToneMid}';
elvST['SIGNAL_TONE=VERY_HIGH'] = '${stringTableSignalToneVeryHigh}';
elvST['SIGNAL_LED'] = '${stringTableSignalLEDTitle}';
elvST['SIGNAL_LED|ACT_NUM'] = '${stringTableSignalLEDActNum}';
elvST['SIGNAL_LED|ACT_TYP'] = '${stringTableSignalLEDActType}';
elvST['SIGNAL_LED|ON_TIME'] = '${stringTableSignalLEDOnTime}';
elvST['SIGNAL_LED|STATE=TRUE'] = '${stringTableSignalLEDStateTrue}';
elvST['SIGNAL_LED|STATE=FALSE'] = '${stringTableSignalLEDStateFalse}';
elvST['SIGNAL_CHIME'] = '${stringTableSignalChimeTitle}';
elvST['SIGNAL_CHIME|ACT_NUM'] = '${stringTableSignalChimeActNum}';
elvST['SIGNAL_CHIME|ACT_TYP'] = '${stringTableSignalChimeActType}';
elvST['SIGNAL_CHIME|ON_TIME'] = '${stringTableSignalChimeOnTime}';
elvST['SIGNAL_CHIME|STATE=TRUE'] = '${stringTableSignalChimeStateTrue}';
elvST['SIGNAL_CHIME|STATE=FALSE'] = '${stringTableSignalChimeStateFalse}';
elvST['SMOKE_DETECTOR|ERROR_ALARM_TEST=NO_ERROR'] = '${stringTableSmokeDetectorAlarmTestOK}';
elvST['SMOKE_DETECTOR|ERROR_ALARM_TEST=ALARM_TEST_FAILED'] = '${stringTableSmokeDetectorAlarmTestFailure}';
elvST['SMOKE_DETECTOR|ERROR_SMOKE_CHAMBER=NO_ERROR'] = '${stringTableSmokeDetectorSmokeChamberOK}';
elvST['SMOKE_DETECTOR|ERROR_SMOKE_CHAMBER=DEGRADED_SMOKE_CHAMBER'] = '${stringTableSmokeDetectorSmokeChamberFailure}';
elvST['SMOKE_DETECTOR|STATE=FALSE'] = '${stringTableSmokeDetectorStateFalse}';
elvST['SMOKE_DETECTOR|STATE=TRUE'] = '${stringTableSmokeDetectorStateTrue}';
elvST['SMOKE_DETECTOR_TEAM'] = '${stringTableSmokeDetectorTitle}';
elvST['SMOKE_DETECTOR_TEAM|STATE=FALSE'] = '${stringTableSmokeDetectorStateFalse}';
elvST['SMOKE_DETECTOR_TEAM|STATE=TRUE'] = '${stringTableSmokeDetectorStateTrue}';
elvST['SMOKE_DETECTOR_TEAM_V2'] = '${stringTableSmokeDetectorTitle}';
elvST['SMOKE_DETECTOR_TEAM_V2|STATE=FALSE'] = '${stringTableSmokeDetectorStateFalse}';
elvST['SMOKE_DETECTOR_TEAM_V2|STATE=TRUE'] = '${stringTableSmokeDetectorStateTrue}';
elvST['STANDBY_TIME'] = '${stringTableStandByTime}';
elvST['STATUS_INDICATOR'] = '${stringTableStatusIndicatorTitle}';
elvST['STATUS_INDICATOR|STATE=TRUE'] = '${stringTableStatusIndicatorStateTrue}';
elvST['STATUS_INDICATOR|STATE=FALSE'] = '${stringTableStatusIndicatorStateFalse}';
elvST['STATUS_INDICATOR|ON_TIME'] = '${stringTableStatusIndicatorOnTime}';
elvST['STATUS_INDICATOR|INHIBIT=TRUE'] = '${stringTableStatusIndicatorInhibitTrue}';
elvST['STATUS_INDICATOR|INHIBIT=FALSE'] = '${stringTableStatusIndicatorInhibitFalse}';
elvST['SUBMIT'] = '${stringTableSubmit}';
elvST['SWITCH'] = '${stringTableSwitchTitle}';
elvST['SWITCH|AES_ACTIVE'] = '${stringTableSwitchAESActive}';
elvST['SWITCH|ON_TIME'] = '${stringTableSwitchOnTime}';
elvST['SWITCH|STATE=FALSE'] = '${stringTableSwitchStateFalse}';
elvST['SWITCH|STATE=TRUE'] = '${stringTableSwitchStateTrue}';
elvST['SWITCH|STATUSINFO_MINDELAY'] = '${stringTableSwitchStatusInfoMinDelay}';
elvST['SWITCH|STATUSINFO_RANDOM'] = '${stringTableStatusInfoRandom}';
elvST['SWITCH|STATUSINFO_RANDOM_A'] = '${stringTableStatusInfoRandomA}';
elvST['SWITCH_INTERFACE'] = '${stringTableSwitchInterfaceTitle}';
elvST['SWITCH_INTERFACE|PRESS'] = '${stringTableSwitchInterfacePress}';
elvST['SWITCH_INTERFACE|STATE=FALSE'] = '${stringTableSwitchInterfaceStateFalse}';
elvST['SWITCH_INTERFACE|STATE=TRUE'] = '${stringTableSwitchInterfaceStateTrue}';
elvST['SWITCH_TRANSMIT'] = '${stringTableSwitchTransmitTitle}';
elvST['SWITCH_TRANSMIT|TWO_POINT_HYSTERESIS'] = '${stringTableSwitchTransmitTwoPointHysteresis}';
elvST['TEMPERATURE_COMFORT'] = '${stringTableTemperatureComfort}';
elvST['TEMPERATURE_LOWERING'] = '${stringTableTemperatureLowering}';
elvST['TEMPERATURE_MINIMUM'] = '${stringTableTemperatureMinimum}';
elvST['TEMPERATURE_MAXIMUM'] = '${stringTableTemperatureMaximum}';
elvST['TEMPERATUREFALL_MODUS'] = '${stringTableTemperatureModus}';
elvST['TEMPERATUREFALL_VALUE'] = '${stringTableTemperatureValue}';
elvST['TEMPERATUREFALL_WINDOW_OPEN'] = '${stringTableTemperatureWindowOpen}';
elvST['TEMPERATUREFALL_WINDOW_OPEN_TIME_PERIOD'] = '${stringTableTemperatureOpenTimePeriod}';
elvST['THERMALCONTROL_TRANSMIT'] = '${stringTableThermalControlTitle}';
elvST['TILT_SENSOR'] = '${stringTableTiltSensorTitle}';
elvST['TILT_SENSOR|EVENT_FILTERTIME'] = '${stringTableTiltSensorEventFilterTime}';
elvST['TILT_SENSOR|MSG_FOR_POS_A'] = '${stringTableTiltSensorMsgPosA0}';
elvST['TILT_SENSOR|MSG_FOR_POS_A=CLOSED'] = '${stringTableTiltSensorMsgPosA1}';
elvST['TILT_SENSOR|MSG_FOR_POS_A=NO_MSG'] = '${stringTableTiltSensorMsgPosA2}';
elvST['TILT_SENSOR|MSG_FOR_POS_A=OPEN'] = '${stringTableTiltSensorMsgPosA3}';
elvST['TILT_SENSOR|MSG_FOR_POS_B'] = '${stringTableTiltSensorMsgPosB0}';
elvST['TILT_SENSOR|MSG_FOR_POS_B=CLOSED'] = '${stringTableTiltSensorMsgPosB1}';
elvST['TILT_SENSOR|MSG_FOR_POS_B=NO_MSG'] = '${stringTableTiltSensorMsgPosB2}';
elvST['TILT_SENSOR|MSG_FOR_POS_B=OPEN'] = '${stringTableTiltSensorMsgPosB3}';
elvST['TILT_SENSOR|STATE=FALSE'] = '${stringTableTiltSensorStateFalse}';
elvST['TILT_SENSOR|STATE=TRUE'] = ' ${stringTableTiltSensorStateTrue}';
elvST['TRANSMIT_TRY_MAX'] = '${stringTableTransmitTryMax}';
elvST['TRANSMIT_DEV_TRY_MAX'] = '${stringTableTransmitDevTryMax}';
elvST['USER_COLOR'] = '${stringTableSubmit}';
elvST['USER_PROGRAM'] = '${stringTableSubmit}';
elvST['VENT_CLOSED'] = '${stringTableVentClosed}';
elvST['VENT_OPEN'] = '${stringTableVentOpen}';
elvST['VIRTUAL_DIMMER'] = '${stringTableVirtualDimmerTitle}';
elvST['VIRTUAL_DIMMER|ERROR=LOAD_FAILURE'] = '${stringTableVirtualDimmerErrorLoadFailure}';
elvST['VIRTUAL_DIMMER|ERROR_OVERLOAD'] = '${stringTableDimmerErrorOverload}';
elvST['VIRTUAL_DIMMER|ERROR_OVERHEAT'] = '${stringTableDimmerErrorOverheat}';
elvST['VIRTUAL_DIMMER|ERROR_REDUCED'] = '${stringTableDimmerErrorReduced}';
elvST['VIRTUAL_DIMMER|LOGIC_COMBINATION'] = '${stringTableVirtualDimmerLogicCombination}';
elvST['VIRTUAL_DIMMER|POWERUP_ACTION'] = '${stringTableVirtualDimmerPowerUpAction}';
elvST['VIRTUAL_DIMMER|STATUSINFO_MINDELAY'] = '${stringTableVirtualDimmerStatusInfoMinDelay}';
elvST['VIRTUAL_DIMMER|STATUSINFO_RANDOM'] = '${stringTableVirtualDimmerStatusInfoRandom}';
elvST['VIRTUAL_DIMMER|RAMP_STOP'] = '${stringTableDimmerRampStop}';
elvST['VIRTUAL_KEY'] = '${stringTableVirtualKeyTitle}';
elvST['VIRTUAL_KEY|LEVEL'] = '${stringTableVirtualKeyLevel}';
elvST['VOLUME_100$'] = '{stringTableVolume10}';
elvST['VOLUME_90'] = '{stringTableVolume9}';
elvST['VOLUME_80'] = '{stringTableVolume8}';
elvST['VOLUME_70'] = '{stringTableVolume7}';
elvST['VOLUME_60'] = '{stringTableVolume6}';
elvST['VOLUME_50'] = '{stringTableVolume5}';
elvST['VOLUME_40'] = '{stringTableVolume4}';
elvST['VOLUME_30'] = '{stringTableVolume3}';
elvST['VOLUME_20'] = '{stringTableVolume2}';
elvST['VOLUME_10'] = '{stringTableVolume1}';
elvST['VOLUME_0'] = '{stringTableVolume0}';
elvST['WATERDETECTIONSENSOR'] = '${stringTableWDSTitle}';
elvST['WATERDETECTIONSENSOR|EVENT_FILTERTIME'] = '${stringTableWDSEventFilterTime}';
elvST['WATERDETECTIONSENSOR|MSG_FOR_POS_A'] = '${stringTableWDSMsgPosA0}';
elvST['WATERDETECTIONSENSOR|MSG_FOR_POS_A=DRY'] = '${stringTableWDSMsgPosA1}';
elvST['WATERDETECTIONSENSOR|MSG_FOR_POS_A=NO_MSG'] = '${stringTableWDSMsgPosA2}';
elvST['WATERDETECTIONSENSOR|MSG_FOR_POS_B'] = '${stringTableWDSMsgPosB0}';
elvST['WATERDETECTIONSENSOR|MSG_FOR_POS_B=DRY'] = '${stringTableWDSMsgPosB1}';
elvST['WATERDETECTIONSENSOR|MSG_FOR_POS_B=NO_MSG'] = '${stringTableWDSMsgPosB2}';
elvST['WATERDETECTIONSENSOR|MSG_FOR_POS_B=WATER'] = '${stringTableWDSMsgPosB3}';
elvST['WATERDETECTIONSENSOR|MSG_FOR_POS_B=WET'] = '${stringTableWDSMsgPosB4}';
elvST['WATERDETECTIONSENSOR|MSG_FOR_POS_C'] = '${stringTableWDSMsgPosC0}';
elvST['WATERDETECTIONSENSOR|MSG_FOR_POS_C=NO_MSG'] = '${stringTableWDSMsgPosC1}';
elvST['WATERDETECTIONSENSOR|MSG_FOR_POS_C=WATER'] = '${stringTableWDSMsgPosC2}';
elvST['WATERDETECTIONSENSOR|MSG_FOR_POS_C=WET'] = '${stringTableWDSMsgPosC3}';
elvST['WATERDETECTIONSENSOR|STATE=DRY'] = '${stringTableWDSStateDry}';
elvST['WATERDETECTIONSENSOR|STATE=WATER'] = '${stringTableWDSStateWater}';
elvST['WATERDETECTIONSENSOR|STATE=WET'] = '${stringTableWDSStateWet}';
elvST['WATERDETECTIONSENSOR|EVENT_FILTERTIME'] = '${stringTableWDSEventFilterTime}';
elvST['WEATHER'] = '${stringTableWeatherTitle}';
elvST['WEATHER|AIR_PRESSURE'] = '${stringTableWeatherAirPressure}';
elvST['WEATHER|BRIGHTNESS'] = '${stringTableWeatherBrightness}';
elvST['WEATHER|HUMIDITY'] = '${stringTableWeatherHumidity}';
elvST['WEATHER|RAINING'] = '${stringTableWeatherRaining}';
elvST['WEATHER|RAINING=FALSE'] = '${stringTableWeatherRainingFalse}';
elvST['WEATHER|RAINING=TRUE'] = '${stringTableWeatherRainingTrue}';
elvST['WEATHER|RAIN_COUNTER'] = '${stringTableWeatherRainCounter}';
elvST['WEATHER|STORM_LOWER_THRESHOLD'] = '${stringTableWeatherStormLowerThres}';
elvST['WEATHER|STORM_UPPER_THRESHOLD'] = '${stringTableWeatherStormUpperThres}';
elvST['WEATHER|SUNSHINEDURATION'] = '${stringTableWeatherSunshineDuration}';
elvST['WEATHER|SUNSHINE_THRESHOLD'] = '${stringTableWeatherSunshineThres}';
elvST['WEATHER|TEMPERATURE'] = '${stringTableWeatherTemperature}';
elvST['WEATHER|WIND_DIRECTION'] = '${stringTableWeatherWindDir}';
elvST['WEATHER|WIND_DIRECTION_RANGE'] = '${stringTableWeatherWindDirRange}';
elvST['WEATHER|WIND_SPEED'] = '${stringTableWeatherWindSpeed}';
elvST['WEATHER_RECEIVER'] = '${stringTableWeatherReceiver}';
elvST['WEATHER_TRANSMIT|TEMPERATURE'] = '${stringTableWeatherTemperature}';
elvST['WEATHER_TRANSMIT|HUMIDITY'] = '${stringTableWeatherHumidity}';
elvST['WINDOW_SWITCH_RECEIVER'] = '${stringTableWindowSwitchReceiver}';
elvST['WINMATIC'] = '${stringTableWinMaticTitle}';
elvST['WINMATIC|ERROR=MOTOR_TILT_ERROR'] = '${stringTableWinMaticErrorMotorTilt}';
elvST['WINMATIC|ERROR=MOTOR_TURN_ERROR'] = '${stringTableWinMaticErrorMotorTurn}';
elvST['WINMATIC|LEVEL'] = '${stringTableWinMaticLevel}';
elvST['WINMATIC|LEVEL=LOCKED'] = '${stringTableWinMaticLevelLocked}';
elvST['WINMATIC|MOUNT_SIDE'] = '${stringTableWinMaticMountSide}';
elvST['WINMATIC|MOUNT_SIDE=LEFT'] = '${stringTableWinMaticMountSideLeft}';
elvST['WINMATIC|MOUNT_SIDE=RIGHT'] = '${stringTableWinMaticMountSideRight}';
elvST['WINMATIC|PULL_FORCE'] = '${stringTableWinMaticPullForce}';
elvST['WINMATIC|PUSH_FORCE'] = '${stringTableWinMaticPushForce}';
elvST['WINMATIC|RELOCK_DELAY'] = '${stringTableWinMaticReLockDelay}';
elvST['WINMATIC|RELOCK_DELAY=NOT_USED'] = '${stringTableWinMaticReLockDelayNotUsed}';
elvST['WINMATIC|SPEED'] = '${stringTableWinMaticSpeed}';
elvST['WINMATIC|STATE_UNCERTAIN=FALSE'] = '${stringTableWinMaticStateUncertainFalse}';
elvST['WINMATIC|STATE_UNCERTAIN=TRUE'] = '${stringTableWinMaticStateUncertainTrue}';
elvST['WINMATIC|STOP'] = '${stringTableWinMaticStop}';
elvST['WINMATIC|TILT_MAX'] = '${stringTableWinMaticTiltMax}';
elvST['AUTO_MODE'] = '${stringTableClimateControlRTTransceiverAutoMode}';
elvST['ACTUAL_HUMIDITY'] = '${stringTableWeatherHumidity}';
elvST['ACTUAL_TEMPERATURE'] = '${stringTableClimateControlRTTransceiverActualTemp}';
elvST['BATTERY_STATE'] = '${stringTableClimateControlRTTransceiverBatteryState}';
elvST['BOOST_MODE'] = '${stringTableClimateControlRTTransceiverBoostMode}';
elvST['BOOST_STATE'] = '${stringTableBoostState}';
elvST['COMFORT_MODE'] = '${stringTableClimateControlRTTransceiverComfortMode}';
elvST['COMMUNICATION_REPORTING'] = '${stringTableCommunicatingReporting}';
elvST['COMMUNICATION_REPORTING=TRUE'] = '${stringTableCommunicatingReportingTrue}';
elvST['COMMUNICATION_REPORTING=FALSE'] = '${stringTableCommunicatingReportingFalse}';
elvST['CONTROL_MODE=AUTO-MODE'] = '${stringTableClimateControlRTTransceiverAutoMode}';
elvST['CONTROL_MODE=BOOST-MODE'] = '${stringTableClimateControlRTTransceiverBoostMode}';
elvST['CONTROL_MODE=MANU-MODE'] = '${stringTableClimateControlRTTransceiverManuMode}';
elvST['CONTROL_MODE=PARTY-MODE'] = '${stringTableClimateControlRTTransceiverPartyMode}';
elvST['DEVICE_IN_BOOTLOADER'] = '${stringTableDeviceInBootloader}';
elvST['ERROR_POWER=NO_ERROR'] = '${stringTablePowerAvailable}';
elvST['ERROR_POWER=POWER_FAILURE'] = '${stringTablePowerNotAvailable}';
elvST['ERROR_SABOTAGE=NO_ERROR'] = '${stringTableSabotageContactOk}';
elvST['ERROR_SABOTAGE=SABOTAGE'] = '${stringTableSabotage}';
elvST['EXPECT_AES'] = '${stringTableExpectAES}';
elvST['LED_ONTIME'] = '${stringTableLEDOnTime}';
elvST['LEVEL'] = '${stringTableDimmerLevel}';
elvST['LEVEL_REAL'] = '${stringTableDimmerLevelReal}';
elvST['LOWBAT_REPORTING'] = '${stringTableLowbatReporting}';
elvST['LOWBAT_REPORTING=FALSE'] = '${stringTableLowbatReportingFalse}';
elvST['LOWBAT_REPORTING=TRUE'] = '${stringTableLowbatReportingTrue}';
elvST['LOWERING_MODE'] = '${stringTableClimateControlRTTransceiverLoweringMode}';
elvST['MANU_MODE'] = '${stringTableClimateControlRTTransceiverManuMode}';
elvST['NOT_USED'] = '${stringTableNotUsed}';
elvST['OLD_LEVEL'] = '${stringTableDimmerOldLevel}';
elvST['ON_TIME'] = '${stringTableDimmerOnTime}';
elvST['PARTY_MODE_SUBMIT'] = '${stringTablePartyModeSubmit}';
elvST['PARTY_START_DAY'] = '${stringTablePartyStartDay}';
elvST['PARTY_START_MONTH'] = '${stringTablePartyStartMonth}';
elvST['PARTY_START_TIME'] = '${stringTablePartyStartTime}';
elvST['PARTY_START_YEAR'] = '${stringTablePartyStartYear}';
elvST['PARTY_STOP_DAY'] = '${stringTablePartyStopDay}';
elvST['PARTY_STOP_MONTH'] = '${stringTablePartyStopMonth}';
elvST['PARTY_STOP_TIME'] = '${stringTablePartyStopTime}';
elvST['PARTY_STOP_YEAR'] = '${stringTablePartyStopYear}';
elvST['PARTY_TEMPERATURE'] = '${stringTablePartyTemperature}';
elvST['PEER_NEEDS_BURST'] = '${stringTablePeerNeedsBurst}';
elvST['POWERUP_ACTION'] = '${stringTableDimmerPowerUpAction}';
elvST['RAMP_TIME'] = '${stringTableDimmerRampTime}';
elvST['SET_TEMPERATURE'] = '${stringTableClimateControlRTTransceiverSetTemperature}';
elvST['UPDATE_PENDING'] = '${stringTableUpdatePending}';
elvST['VALVE_STATE'] = '${stringTableClimateControlRTTransceiverVentPos}';
elvST['WAKEUP_DEFAULT_CHANNEL'] = '${stringTableWakeupDefaultChannel}';
elvST['WAKEUP_BEHAVIOUR'] = '${stringTableButtonResponseWithoutChannelChooser}';
elvST['WINDOW_OPEN_REPORTING'] = '${stringTableWindowOpenReporting}';
elvST['WINDOW_OPEN_REPORTING=FALSE'] = '${stringTableWindowOpenReportingFalse}';
elvST['WINDOW_OPEN_REPORTING=TRUE'] = '${stringTableWindowOpenReportingTrue}';
elvST['WS_CS'] = '${stringTableWSCS}';
elvST['WS_TH'] = '${stringTableWSTH}';
/*
Übersetzt den Inhalt der HTML-Elemente <span class="stringtable_value">...</span>
und <select class="stringtable_select">...</select>
*/
st_setStringTableValues = function()
{
	var translation;
	
	//In <span class="stringtable_value">...</span> eingeschlossene Wörter übersetzen
	var temp = document.getElementsByClassName('stringtable_value');
  
    var wrappers = new Array();
	for (var i=0; i<temp.length; i++)
	{	
		wrappers[i]=temp[i];
	}
    
	for (var i=0; i<wrappers.length; i++)
	{	
		wrappers[i].innerHTML = st_getValue( wrappers[i].innerHTML ).escapeHTML();
		wrappers[i].className += "_translated";
	}
	//-------------------------------------------------------------------------

	//Comboboxen übersetzen <select class="stringtable_select" ... >...</select>
	var temp = document.getElementsByClassName('stringtable_select');

	var selboxes = new Array();
	for (var i = 0, len = temp.length; i < len; i++)
	{
		selboxes[i] = temp[i];
	}
	
	for (var i=0; i<selboxes.length; i++)
	{
		var selectelem = selboxes[i];

		if (selectelem.type != "select-one") continue;
		
		for (var k=0; k<selectelem.options.length; k++)
		{
			selectelem.options[k].text = st_getValue(selectelem.options[k].text).escapeHTML();
		}

		selectelem.className += "_translated";
	}
	//-------------------------------------------------------------------------
	
	//Input-Felder übersetzen <input class="stringtable_input" ...> 
	var temp = document.getElementsByClassName('stringtable_input');

	var input = new Array();
	for (var i = 0, len = temp.length; i < len; i++)
	{
		input[i] = temp[i];
	}

	for (var i = 0; i < input.length; i ++)
	{
		input[i].value = st_getValue(input[i].value).escapeHTML();
		input[i].className += "_translated";
	}

};

//Eingabeparameter
//context: <channeltype>|<value_id>(=<value>)?
//context: <channeltype>|<value_id>
//context: <value_id>
//Rückgabeparameter:
//return: übersetzung, wenn context gefunden in den Spezialisierungsgraden:
//	1. <channeltype>|<value_id>(=<value>)?
//	2. <channeltype>|<value_id>
//	3. <value_id>
//	sonst: value, wenn value aus dem context extrahiert werden kann
//	sonst: context wird wieder zurückgegeben.
st_getValue = function(context)
{
	var translation;
	var tokens;
	var channel_type;
	var value_id_assign; //Inhalt: <value_id>=<value>
	var value_id;
	var value;
		
	//Voller context vorhanden?=========================================
	translation = elvST[context];

	if (translation && translation != "") return translation;
	//==================================================================
	
	//Gibt es einen Eintrag nur mit value_id_assign?====================
	tokens = context.split('|');
	value_id_assign = "";
	
	if (tokens.length > 1)
	{
		//channel_type = tokens[0];
		value_id_assign = tokens[1];
		translation = elvST[ value_id_assign ];
		if (translation && translation != "") return translation;
	}
	//==================================================================

	//Gibt es einen Eintrag nur mit dem Variablennamen?=================
	tokens = context.split('=');
	value = "";
	
	if (tokens.length > 1)
	{
		//value_id = tokens[0];
		value = tokens[1];
		translation = elvST[ value ];
		if      (translation && translation != "") return translation;
		else if (value       && value       != "") return value;
	}
	//==================================================================
	
	//Gibt es einen Eintrag im INPUT-Feld?==============================

	tokens = context.split(" ");
	translation = "";

	for (var i = 0; i < tokens.length; i++)
	{
		if (typeof elvST[tokens[i]] != 'undefined') 
		{
			tokens[i] = elvST[tokens[i]];
		}
		translation += tokens[i] + " ";
	}
	if (translation && translation != "") return translation;
	//==================================================================

	if (value_id_assign && value_id_assign != "") return value_id_assign;
	else                                          return context;
};
/**
 * expand.js
 * JavaScript Erweiterungen.
 **/

Singleton = {
  create: function(base, members)
  {
		var _members = "";
    if (typeof(members) != "undefined") { var _members = members; }
    var singleton = Class.create(base, _members); 
    return new singleton();
  }
};

Interface = {

  /**
   * Erstellt eine neue Schnittstelle
   **/
  create: function(members)
  {
    return members;
  },
  
  /**
   * Prüft, ob ein Objekt eine spezielle Schnittstelle implementiert
   **/
  isImplemented: function(obj, iface)
  {
    for (name in iface)
    {
      if (typeof(obj[name]) == "undefined") { return false; }
    }
    return true;
  }
  
};
 
Array.prototype.ex_joinItem = function(name, separator)
{
  var _separator = " ";
  var result = "";
  
  if (typeof(separator) != "undefined") { _separator = separator; }
  
  if (0 < this.length)
  {
    result = this[0][name];
    for (var i = 1, len = this.length; i < len; i++)
    {
      result += separator + this[i][name];
    }
  }
  
  return result;
}; 
 
/**
 * Wie join, nur dass jeweils eine Eigenschaft verkettet wird
 **/
Array.prototype.ex_joinProperty = function(name, separator)
{
  var _separator = " ";
  var result = "";
  
  if (typeof(separator) != "undefined") { _separator = separator; }
  
  if (0 < this.length)
  {
    result = this[0][name]();
    for (var i = 1, len = this.length; i < len; i++)
    {
      result += separator + this[i][name]();
    }
  }
  
  return result;
};

/**
 * Sortiert ein Array anhand eines Elements
 * name: Bezeichnung des Elements
 * sortReverse: Optional. Dreht die Sortierreihenfolge um
 **/
Array.prototype.ex_sortBy = function(name, sortReverse)
{
  this.sort(function(a,b) { return Object.ex_compare(a[name], b[name]); });
  if (sortReverse) { this.reverse(); }
  
  return this;
};

/**
 * Sortiert eine Array anhand einer Eigenschaft
 * name: Bezeichnung der Eigenschaft
 * sortReverse: Optional. Dreht die Sortierreihenfolge um
 **/
Array.prototype.ex_sortByProperty = function(name, sortReverse)
{
  this.sort(function(a, b) { return Object.ex_compare(a[name](), b[name]()); });
  if (sortReverse) { this.reverse(); }
  
  return this;
};

/**
 * Vergleicht zwei Objekte
 **/
Object.ex_compare = function(objA, objB)
{
  if (typeof(objA.ex_compareTo) != "undefined") { return objA.ex_compareTo(objB); }
  else                                         { return 0; }
};

/**
 * Vergleicht eine Zahl mit einer anderen
 **/
Number.prototype.ex_compareTo = function(other)
{
  if (typeof(other) == "number") { return (this - other); }
  else                           { return 0; }
};

/**
 * Vergleicht zwei Zeichenketten (case-insensitiv)
 **/
String.prototype.ex_compareTo = function(other)
{
  if (typeof(other) == "string")
  {
    var strA = this.toLowerCase();
    var strB = other.toLowerCase();
  
    if      (strA > strB) { return 1; }
    else if (strA < strB) { return -1; }
  }
  
  return 0;
};

/**
 * Ermittelt, ob ein Element in einem Array vorhanden ist
 **/
Array.prototype.ex_contains = function(item)
{
  return (0 <= this.indexOf(item));
};

/**
 * Fügt einem Array ein Element hinzu, falls
 * dieses noch nicht enthalten ist.
 **/
Array.prototype.ex_pushUnique = function(item)
{
  if (!this.ex_contains(item)) { this.push(item); }
  return this;
};
/*******************************************************************************
 * xmlhttprequest.js
 * Browserunabhängiger Zugriff auf das XMLHttpRequest-Objekt.
 *
 * Autor      : Falk Werner
 * Erstellt am: 04.06.2008
 ******************************************************************************/

/*############################################################################*/
/*# Funktionen                                                               #*/
/*############################################################################*/
 
/*******************************************************************************
 * XMLHttpRequest_create ()
 * Erstellt browserunabhängig ein neuen XMLHttpRequest-Objekt.
 *
 * Dieser Code wurde inspiriert von folgendem Buch:
 * Titel : Ajax - schnell und kompakt
 * Autor : Christian Wenz
 * Verlag: entwickler.press (Software & Support verlag GmbH)
 * ISBN  : 978-3-939084-81-5
 ******************************************************************************/
XMLHttpRequest_create = function ()
{
  var xmlHttp = null;
  
  if ( window.XMLHttpRequest )
  {
    xmlHttp = new XMLHttpRequest();
  }
  else if ( window.ActiveXObject )
  {
    try
    {
      xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
    }
    catch (ex)
    {
      try 
      {
        xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
      }
      catch (ex)
      {
        // leer
      }
    }
  }
  
  return xmlHttp;
};

/*******************************************************************************
 * XMLHttpRequest_supported ()
 * Prüft, ob das XMLHttpRequest-Objekt verfügbar ist.
 *
 * Rückgabe:
 *  true  - Das XMLHttpRequest-Objekt ist verfügbar.
 *  false - Das XMLHttpRequest-Objekt ist NICHT verfügbar.
 ******************************************************************************/
XMLHttpRequest_supported = function ()
{
  var request = XMLHttpRequest_create();
  
  if (null !== xmlHttpRequest) { return true;  }
  else                        { return false; }
};
/**
 * httploader.js
 **/
 
/**
 * Lädt XML- bzw Textdateien synchron.
 **/ 
HttpLoader = new function()
{
  /*####################*/
  /*# Private Elemente #*/
  /*####################*/
  
  /**
   * Hängt die Version der HomeMatic WebUI an eine URL an,
   * um Probleme mit dem Browsercache zu umgehen.
   **/
  var addVersion = function(url)
  {
    if (0 <= url.indexOf("?")) { return url + "&_version_=" + WEBUI_VERSION; }
    else                       { return url + "?_version_=" + WEBUI_VERSION; }
  };
  
  /**
   * Lädt synchron Daten und gibt das XMLHttpRequest-Objekt zurück.
   **/
  var load = function(method, url, data)
  {
    url = addVersion(url);
    var xhr = XMLHttpRequest_create();
    
    if (null !== xhr)
    {
      xhr.open(method, url, false);
      xhr.send(data);
      if ((xhr.status != 200) && (xhr.status !== 0)) { xhr = null; }
    }
    
    return xhr;
  };
 
  /*########################*/
  /*# Öffentliche Elemente #*/
  /*########################*/
  
  /**
   * Lädt einen Text synchron.
   **/
  this.getText = function(url)
  {
    var xhr = load("GET", url, null);
    
    if (null !== xhr) { return xhr.responseText; }
    else              { return ""; }
  };
  
  /**
   * Lädt ein XML-Dokument synchron.
   **/
  this.getXML = function(url)
  {
    var xhr = load("GET", url, null);
    
    if (null !== xhr) { return xhr.responseXML; }
    else              { return null; }
  };

}();
/**
 * eq3.js
 **/

/**
 * Namensraum eQ3
 **/
eQ3 = {};

/**
 * Singleton für systemweite Hilfsfunktionen
 **/
eQ3.system = {

	MAX_OBJECT_ID: 1000000,		//< größte Id, die ein Objekt haben kann
	
	m_objects: {},						//< Enthält alle registierten Objekte
	m_id: 0,									//< vorgeschlagene Id für das nächste Objekt
	m_objectCount: 0,					//< Aktuelle Anzahl der registrieten Objekte (zu Debug-Zwecken)
	
	/**
	 * @fn m_getNextFreeId
	 * @brief Liefert die nächste freie Id, die einem Objekt zugewiesen 
	 *        werden kann. 
	 **/
	m_getNextFreeId: function()
	{
		var MAX_OBJECT_ID = eQ3.system.MAX_OBJECT_ID;
		var objects       = eQ3.system.m_objects;
		var id            = eQ3.system.m_id;
		var count         = 0;
		
		while ( typeof(objects[id]) != "undefined" )
		{
			id++;
			if (id > MAX_OBJECT_ID) { id = 0; }
			
			count++;
			if (count > MAX_OBJECT_ID) { throw new Error("max. object count reached"); }
		}
		
		if (id < MAX_OBJECT_ID) { eQ3.system.m_id = id + 1; }
		else                    { eQ3.system.m_id = 0;      }
		
		return id;
	},
	
	/**
	 * @fn registerObject
	 * @brief Weist einem Objekt eine Id zu, über die es angesprochen werden kann
	 */
	registerObject: function(object)
	{
		var id = eQ3.system.m_getNextFreeId();
		eQ3.system.m_objects[id] = object;
		eQ3.system.m_objectCount++;
		
		return id;
	},
	
	/**
	 * @fn unregisterObject
	 * @brief Gibt eine Objekt-Id frei.
	 **/
	unregisterObject: function(id)
	{
		if ( typeof(eQ3.system.m_objects[id]) != "undefined" )
		{
			eQ3.system.m_objects[id] = undefined;
			eQ3.system.m_objectCount--;
		}
	},
	
	/**
	 * @fn getObjectById
	 * @brief liefert ein registriertes Objekt anhand seiner Id.
	 **/
	getObjectById: function(id)
	{
		return eQ3.system.m_objects[id];
	}
	
};

/**
 * @fn $o
 * @brief Shortcut für eq3.system.getObjectById
 **/
$o = eQ3.system.getObjectById;


/**
 * Klasse für allgemeine Ereignisse
 **/
eQ3.Event = Class.create({

  /**
   * Konstruktor. Erstellt ein neues Ereignis.
   **/
  initialize: function()
  {
    this.reset();
  },
  
  /**
   * Fügt einen neuen Event-Listener hinzu.
   * Falls ein Listener bereits existiert, wird er kein zweites Mal hinzugefügt.
   **/
  add: function(listener)
  {
    if (!this.m_listeners.ex_contains(listener))
    {
      this.m_listeners.push(listener);
    }
    return this;
  },
  
  /**
   * Entfernt einen Event-Listener.
   **/
  remove: function(listener)
  {
    this.m_listeners = this.m_listeners.without(listener);
    return this;
  },
  
  /**
   * Löst das Ereinigs aus
   **/
  fire: function(source, event)
  {
    var listeners = this.m_listeners.clone();
    listeners.each(function(listener) { listener(source, event); });
    return this;
  },
  
  /**
   * Setzt das Ereignis zurück.
   * Löscht alle angemeldeten Event-Handler.
   **/
  reset: function()
  {
    this.m_listeners = [];
    return this;
  }

});
/**
 * debug.js
 **/
 
/**
 * Debug-Schnittstelle
 **/
Debug =  Singleton.create({
  isEnabled: true,
  
  /**
   * Wirft eine Exception, falls eine Zusicherung nicht
   * eingehalten werden kann.
   **/
  assert: function(expression, message)
  {
    if (true !== expression) 
    {
      if (typeof(message) != "undefined") { throw new Error("assertion failed: " + message); }
      else { throw new Error("assertions failed"); }
    }
  }
});
/**
 * jsonrpc.js
 * JSON-RPC
 *
 * JSON-RPC Spezifikation: http://json-rpc.org/wiki/specification
 *
 * Autor: Falk Werner
 **/

/**
 * Allgemeine JSON-RPC Fehler
 **/
JSONRPC_ERROR = 
{
	INVALID_JSON: 
	{
		"result": null,
    "error" : {"code": 200, "text": "invalid response"},
    "id"    : null
	}
}; 
 
/**
 * 
 **/
jsonrpc_check = function(response)
{
	if ((null       === response)                   || 
			("undefined" == typeof(response["result"])) ||
			("undefined" == typeof(response["error"])))
	{
		response = JSONRPC_ERROR.INVALID_JSON;
	}
	
	return response;
};

/**
 * JSON-RPC Aufruf.
 * Falls der Parameter callback nicht angegeben ist, handelt es sich um
 * einen asynchronen Aufruf.
 **/
jsonrpc = function(url, method, params, callback)
{
  if (typeof(callback) != "undefined") { return jsonrpc_async(url, method, params, callback); }
  else { return jsonrpc_sync(url, method, params); }
};

/**
 * Asynchroner JSON-RPC Aufruf.
 **/
jsonrpc_async = function(url, method, params, callback)
{
	var user_callback = callback;
	var xhr           = XMLHttpRequest_create();
	
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function()
	{
		if (4 == xhr.readyState)
		{
			var result = null;
			if ((0 === xhr.status) || (200 == xhr.status))
			{
				try        { result = eval("(" + xhr.responseText + ")"); }
				catch (ex) { result = null; }
			}
			if (user_callback) { user_callback(jsonrpc_check(result)); }
		}
	};
	xhr.send(Object.toJSON({"version": "1.1", "method": method, "params": params }));
  
  return true;
};

/**
 * Sychroner JSON-RPC Aufruf.
 **/
jsonrpc_sync = function(url, method, params)
{
	var result = null;
	var xhr    = XMLHttpRequest_create();
	
	xhr.open("POST", url, false);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.send(Object.toJSON({"version": "1.1", "method": method, "params": params }));
  if ((0 === xhr.status) || (200 == xhr.status))
  {
    try        { result = eval("(" + xhr.responseText + ")"); }
    catch (ex) { result = null; }
  }
	return jsonrpc_check(result);
};

/**
 * JSON-RPC Aufruf ohne Rückgabewert.
 **/
jsonrpc_notify = function(url, method, params)
{
	var xhr           = XMLHttpRequest_create();
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.send(Object.toJSON({"version": "1.1", "method": method, "params": params}));
};
/**
 * drag.js
 * Drag & Drop
 **/
 
Drag = function(element, event, callback)
{

  var m_x = (document.all) ? window.event.clientX : event.pageX;
  var m_y = (document.all) ? window.event.clientY : event.pageY;
  var m_element  = element; 
  var m_callback = callback;
  var m_top      = m_y - element.offsetTop;      
  var m_left     = m_x - element.offsetLeft;      
  
  /**
   * Callback. Wird beim Bewegen der Maus aufgerufen
   **/
  var onMouseMove = function(event)
  {
    m_x = (document.all) ? window.event.clientX : event.pageX;
    m_y = (document.all) ? window.event.clientY : event.pageY;
    
    if (m_element !== null)
    {
      Element.setStyle(m_element, {
        top : (m_y - m_top ) + "px",
        left: (m_x - m_left) + "px"
      });
    }
  };
  
  /**
   * Callback. Wird beim Loslassen der Maus aufgerufen
   **/
  var onMouseUp = function(event)
  {
    var x = (document.all) ? window.event.clientX : event.pageX;
    var y = (document.all) ? window.event.clientY : event.pageY;
    
    Event.stopObserving(document, "mousemove", onMouseMove);
    Event.stopObserving(document, "mouseip", onMouseUp);
    
    if (m_callback) { m_callback(m_element, x, y); }
  };
  
  Element.absolutize(m_element);
  Element.setStyle(m_element, {marginTop: "0px", marginLeft: "0px"}); // BugFix: relativ positionierte Elemente werden über margin ausgerichtet, absolutize() setzz dies jedoch nicht zurück
  Element.observe(document, "mousemove", onMouseMove);
  Element.observe(document, "mouseup", onMouseUp);

};
/**
 * configdata.js
 **/
 
/**
 * @fileOverview Daten für die Konfgurationsseiten
 * @author F. Werner (eQ-3)
 **/
 
ConfigData = Singleton.create({

  initialize: function()
  {
    this.isPresent = false;
  },
  
  check: function(callback)
  {
    if (this.isPresent === false)
    {
      this.isPresent = true;      
      new ConfigDataLoader(callback);
    }
    else
    {
      if (callback) { callback(); }
    }
  },

  destroy: function()
  {
    this.isPresent = false;
  }

});

ConfigDataLoader = Class.create({

  initialize: function(callback)
  {
    var that = this;
    
    this.TASKLIST = [
      {name: "WEBUILOADER_DEVICES"  , action: function() { DeviceList.reload(that); }},
      {name: "WEBUILOADER_ROOMS"    , action: function() { RoomList.reload(that); }},
      {name: "WEBUILOADER_FUNCTIONS", action: function() { SubsectionList.reload(that); }}
    ];
    
    var screenWidth  = WebUI.getWidth();
    var screenHeight = WebUI.getHeight();
    var frameWidth   = ConfigDataLoader.CONTENT_WIDTH;
    var frameHeight  = ConfigDataLoader.CONTENT_HEIGHT;
    var frameX = parseInt((screenWidth  - frameWidth ) / 2);
    var frameY = parseInt((screenHeight - frameHeight) / 2);

    this.m_currentTask = -1;
    this.m_callback = callback;
    
    this.m_layer = document.createElement("div");
    this.m_layer.className = "DialogLayer";
        
    this.m_frame = new UI.Frame()
      .setTitle(translateKey('infoLoadConfigData'))
      .setContentSize(frameWidth, frameHeight)
      .setPosition(frameX, frameY)
      .add(new UI.Text()
        .setPosition(10,10)
        .setWidth(frameWidth - 10)
        //.setHtml(ConfigDataLoader.CONTENT)
        .setHtml("<img src='/ise/img/ajaxload_white.gif' style='float:left;margin-right:10px' />" + translateKey('infoLoadConfigDataPlsWait'))
      );
      
    this.m_layer.appendChild(this.m_frame.getElement());
    Layer.add(this.m_layer);
    
    this.ready();
  },

  ready: function()
  {
    this.m_currentTask++;
    if (this.m_currentTask < this.TASKLIST.length)
    {
      this.TASKLIST[this.m_currentTask].action();
    }
    else
    {
      this.m_frame.dispose();
      Layer.remove(this.m_layer);
    
      if (this.m_callback) { this.m_callback(); }
    }
  },
  
  reportLoadingState: function(state)
  {
    var width = parseInt((this.m_currentTask + state) * 100);
    //this.m_frame.setTitle(ConfigDataLoader.TITLE + " (" + width + "%)");
    this.m_frame.setTitle(translateKey('infoLoadConfigData') + " (" + width + "%)");
  }
  
});

ConfigDataLoader.CONTENT_WIDTH = 320;
ConfigDataLoader.CONTENT_HEIGHT = 60;
ConfigDataLoader.TITLE = translateKey('infoLoadConfigData');
ConfigDataLoader.CONTENT = "<img src='/ise/img/ajaxload_white.gif' style='float:left;margin-right:10px' />" + translateKey('infoLoadConfigDataPlsWait');
/**
 * webui.js
 * Allgemeine Funktionen der Web-Oberfläche.
 **/
 
WebUI = Singleton.create({  
  HEADER_HEIGHT: 72,   // Höhe der Kopfzeile
  MENUBAR_HEIGHT: 34,   // Höhe der Navigationsleiste
  FOOTER_HEIGHT: 47,   // Höhe der Fußleiste
  BOTTOM_HEIGHT: 27,   // Höhe des weißen Bereichs unter der Seite
  MIN_WIDTH: 750,  
  MIN_HEIGHT: 400,
 
  serviceMessageCount: 0, 

  initialize: function()
  {
    this.STATIC_HEIGHT = this.HEADER_HEIGHT + this.MENUBAR_HEIGHT + this.FOOTER_HEIGHT + this.BOTTOM_HEIGHT;
    
    this.currentPage         = null;    // Aktuelle Seite
    this.currentPageOptions  = null;    // Argumente der aktuellen Seite
    this.previousPage        = null;    // Vorherige Seite
    this.previousPageOptions = null;    // Argumente der vorherigen Seite
    this.onResizeHandler     = null;    // EventHandler: onResize

    this.onResizeHandler = this.onResize.bindAsEventListener(this);
    Event.observe(window, "resize", this.onResizeHandler);
  },  
  
  /**
   * Ereignis. Wird bei der Änderung der Fenstergröße aufgerufen.
   * Passt die Steuerelemente entsprechend der Änderung an.
   */
  onResize: function()
  {
    var height       = WebUI.getHeight();
    var width        = WebUI.getWidth();         
    var bodyOverflow = "hidden";
   
    if (width  < this.MIN_WIDTH)  { width  = this.MIN_WIDTH;  bodyOverflow = "auto"; }
    if (height < this.MIN_HEIGHT) { height = this.MIN_HEIGHT; bodyOverflow = "auto"; }
    var contentHeight = height - this.STATIC_HEIGHT;

    if ($("body"))    { Element.setStyle("body", {"overflow": bodyOverflow, "width": width  + "px", "height": height + "px"}); }    
    if ($("header"))  { Element.setStyle("header" , {"height": this.HEADER_HEIGHT  + "px", "width": width + "px"}); }
    if ($("menubar")) { Element.setStyle("menubar", {"height": this.MENUBAR_HEIGHT + "px", "width": width + "px"}); }
    if ($("content")) { Element.setStyle("content", {"height": contentHeight       + "px", "width": width + "px"}); }
    if ($("footer"))  { Element.setStyle("footer" , {"height": this.FOOTER_HEIGHT  + "px", "width": width + "px"}); }
    
    if (this.currentPage) { this.currentPage.resize(); }
    
  },

  /*########################*/
  /*# Öffentliche Elemente #*/
  /*########################*/
  
  start: function()
  {
    this.USERNAME = jQuery.trim(homematic('User.getUserName', {'userID': userId}));
    this.USERLANGUAGE = homematic('User.getLanguage', {'userName': this.USERNAME});
  
    // Refresher starten
    iseRefrCycle = 3;
    conInfo("Refreshing started.");
    if (PLATFORM == 'Central') {new iseRefresher(iseRefrCycle);}
    iseRefrTimer = 0;
    
   $("body").innerHTML = "";
  
    // Dummy-Element
    var dummyElement = document.createElement("div");
    dummyElement.id  = "dummy";
    Element.setStyle(dummyElement, {display:"none"});
    $("body").appendChild(dummyElement);
  
    // Globale Werte (SessionId)
    var globalValues = document.createElement("div");
    globalValues.id = "global_values";
    Element.setStyle(globalValues, {display:"none",visibility:"hidden"});
    var globalValuesForm = document.createElement("form");
    globalValuesForm.action = "#";
    var globalValuesSid = document.createElement("global_sid");
    globalValuesSid.id = "global_sid";
    globalValuesSid.type = "hidden";
    globalValuesSid.name = "sid";
    globalValuesSid.value = SessionId;
    globalValuesForm.appendChild(globalValuesSid);
    globalValues.appendChild(globalValuesForm);
    $("body").appendChild(globalValues);
    
    // picDiv: Vergrößerte Bild von HomeMatic Geräten und Kanälen
    var picDiv = document.createElement("div");
    picDiv.id  = "picDiv";
    Element.setStyle(picDiv, {
      position       : "absolute",
      left           : "0px",
      top            : "0px",
      width          : "250px",
      height         : "250px",
      zIndex         : "9999",
      visibility     : "hidden",
      margin         : "0",
      padding        : "0",
      backgroundColor: WebUI.getColor("white")
    });
    $("body").appendChild(picDiv);
    jg_250 = new jsGraphics("picDiv");
    InitGD(jg_250, 250);  

    // Elemente für Popup-Fenster der ersten Ebene
    var trLayer = document.createElement("div");
    trLayer.id = "trlayer";
    Element.setStyle(trLayer, {
      position: "absolute",
      top:      "0",
      left:     "0",
      width:    "100%",
      height:   "100%",
      zIndex:   "149", // 259
      backgroundImage: "url('/ise/img/tr50.gif')",
      display:         "none"
    });
    $("body").appendChild(trLayer);
    
    var centerBox = document.createElement("div");
    centerBox.id = "centerbox";
    Element.setStyle(centerBox, {
      position: "absolute",
      zIndex:   "159",  // 299
      width:    "100%",
      top:      "50%",
      display:  "none"
    });
    $("body").appendChild(centerBox);
    
    var progressBox = document.createElement("div");
    progressBox.id = "progressbox";
    Element.setStyle(progressBox, {
      position: "absolute",
      zIndex:   "159",  // 299
      width:    "100%",
      top:      "50%", 
      display:  "none"
    });
    $("body").appendChild(progressBox);
    
    // Elemente für Popup-Fenster der zweiten Ebene
    var trLayer2 = document.createElement("div");
    trLayer2.id = "trlayer2";
    Element.setStyle(trLayer2, {
      position: "absolute",
      top:      "0",
      left:     "0",
      width:    "100%",
      height:   "100%",
      backgroundImage: "url('/ise/img/tr50.gif')",
      display: "none"
    });
    $("body").appendChild(trLayer2);
    
    var centerBox2 = document.createElement("div");
    centerBox2.id = "centerbox2";
    Element.setStyle(centerBox2, {
     position: "absolute",
     zIndex:   "299",
     width:    "100%",
     top:      "50%",
     display:  "none"
    });
    $("body").appendChild(centerBox2);
    
    // Elemente für den Seiteninhalt
    Layer.init();
    var layer0 = document.createElement("div");
    Element.addClassName(layer0, "Layer0");
    Layer.add(layer0);
    
    var header = document.createElement("div");
    header.id = "header";
    header.lang = this.USERLANGUAGE;
    layer0.appendChild(header);
    
    var menuBar = document.createElement("div");
    menuBar.id = "menubar";
    layer0.appendChild(menuBar);
    
    var content = document.createElement("div");
    content.id = "content";
    Element.setStyle(content, {cursor: "wait"});
    layer0.appendChild(content);
    
    var footer = document.createElement("div");
    footer.id = "footer";
    layer0.appendChild(footer);
    
    // Weitere Elemente
    var popupContainer = document.createElement("div");
    popupContainer.id = "popup_container";
    Element.setStyle(popupContainer, {display: "none"});
    $("body").appendChild(popupContainer);
    
    var canvas = document.createElement("div");
    canvas.id = "canvas";
    Element.setStyle(canvas, {display:"none"});
    $("body").appendChild(canvas);

    HeaderBar.load();

     if (!forceUpdate) {
       jQuery("#AlarmServiceMsg").show();
       MainMenu.create($("menubar"));
     }

//    MainMenu.show();
//    mainMenu = createMainMenu($("menubar"));
    $("content").style.cursor = "default";      
    WebUI.resize();
    WebUI.enter(StartPage);   

    if (PLATFORM == 'Central') {
      regaMonitor = new ReGaMonitor();
      InterfaceMonitor.start();
      homematic.com.init();
    }
    else 
    {
        WebUI.serviceMessageCount = setServiceMessage();
        new PeriodicalExecuter(function() {
        var newServiceMessageCount = setServiceMessage(); 
        if ((newServiceMessageCount != WebUI.serviceMessageCount) && (WebUI.currentPage == ServiceMessagesPage))
        { 
          WebUI.serviceMessageCount = newServiceMessageCount;
          WebUI.reload(); 
        }
      }, 5);
    }
  },
  
  /**
   * Read-Only. Breite des Browserfensters (Pixel).
   */
  getWidth: function()
  {
    var width = 0;
  
    if (window.innerWidth)
    {
      width = window.innerWidth;
    }
    else if ((window.document.documentElement) &&
           (window.document.documentElement.clientWidth))
    {
      width = window.document.documentElement.clientWidth;
    }
    else
    {
      width = window.document.body.offsetWidth;
    }
  
    return width;
  },
  
  /**
   * Read-Only. Höhe des Browserfensters (Pixel).
   */
  getHeight: function()
  {
    var height = 0;
  
    if (window.innerHeight)
    {
      height = window.innerHeight;
    }
    else if ((window.document.documentElement) && 
           (window.document.documentElement.clientHeight))
    {
      height = window.document.documentElement.clientHeight;
    }
    else
    {
      height = window.document.body.offsetHeight;
    }
  
    return height;  
  },
  
  setContent: function(contentElement)
  {
    if ($("content"))
    {
      $("content").innerHTML = "";
      $("content").appendChild(contentElement);
    }
    else
    {
      throw new Error("content not defined");
    }
  },
  /**
   * Ruft das onResize-Ereignis auf.
   **/
  resize: function()
  {
    this.onResize();
  },
  
  /**
   * Lädt eine Seite.
   */
  enter: function(page, options)
  {
    Debug.assert(Interface.isImplemented(page, IPage), "WebUI.enter: Interface IPage not implemented");
    
    if (this.currentPage) { this.currentPage.leave(); }
    
    this.previousPage        = this.currentPage;
    this.previousPageOptions = this.currentPageOptions;
    this.currentPage         = page;
    this.currentPageOptions  = options;
    
    this.currentPage.enter(options);
  },
  
  reload: function()
  {
    if (this.currentPage)
    {
      this.currentPage.leave();
      this.currentPage.enter(this.currentPageOptions);
    }
  },
  
  /**
   * Zurück zur vorherigen Seite.
   */
  goBack: function()
  {
    if (null !== this.previousPage) { this.enter(this.previousPage, this.previousPageOptions); }
  },
  
  /**
   * @var m_isColorMapLoaded
   * @brief [intern] Gibt an, ob die Farbtabelle bereits geladen ist
   **/
  m_isColorMapLoaded: false,
  
  /**
   * @var m_colorMap
   * @brief [intern] Farbtabelle
   **/
  m_colorMap: {},

  /**
   * @fn getColor
   * @brief Liefert den Wert einer Systemfarbe anhand ihrer Id.
   *
   * @param  colorId [string] Id des Systemfarbe
   * @return [string] Farbwert
   **/
  getColor: function(colorId)
  {
    if (false == this.m_isColorMapLoaded)
    {
      this.m_loadColorMap();
    }
  
    var color = this.m_colorMap[colorId];
  
    if (typeof(color) != "string")
    {
      throw new Error("WebUI.getColor: unknown color id (" + colorId  + ")");
    }
  
    return color;
  },
  
  /**
   * @fn m_loadColorMap
   * @brief [intern] Lädt die Farbtabelle
   **/
  m_loadColorMap: function()
  {
    this.m_colorMap = homematic("WebUI.getColors");
    this.m_isColorMapLoaded = true;
  }
 
});
/**
 * @file controlbtn.js
 * @brief ControlBtn
 **/
 
ControlBtn = {

  CLASSNAME_ON : "ControlBtnOn",          //< CSS-Klasse "aktiv"
  CLASSNAME_OFF: "ControlBtnOff",          //< CSS-Klasse "inaktiv"
  CLASSNAME_PUSHED: "ControlBtnPushed",    //< CSS-Klasse "gedrückt"

  /**
   * Entfernt alle ControlBtn-Klassenamen von dem Element
   **/
  removeClassNames: function(element)
  {
    if (element)
    {
      $(element).removeClassName(this.CLASSNAME_ON);
      $(element).removeClassName(this.CLASSNAME_OFF);
      $(element).removeClassName(this.CLASSNAME_PUSHED);
    }
  },

  /**
   * Zeigt das Element als aktiven ControlBtn an
   **/
  on: function(element)
  {
    if (element)
    {
      this.removeClassNames(element);
      $(element).addClassName(this.CLASSNAME_ON);
    }
  },
  
  /**
   * Zeigt das Element als inaktiven ControlBrn an
   **/
  off: function(element)
  {
    if (element)
    {
      this.removeClassNames(element);
      $(element).addClassName(this.CLASSNAME_OFF);
    }
  },
  
  /**
   * Zeigt das Element als gedrückten ControlBtn an
   **/
  pushed: function(element)
  {
    if (element)
    {
      this.removeClassNames(element);
      $(element).addClassName(this.CLASSNAME_PUSHED);
    }
  }

};/**
 * @file  cursor.js
 * @brief Zugriff auf den Cursor
 **/

/**
 * Cursor-Objekt
 **/
Cursor = {
	
	NORMAL: "auto",		//< normaler Cursor
	WAIT  : "wait",		//< Sanduhr
	
	/**
	 * Setzt den Cursor-Typ.
	 * @param cursorType Cursor-Typ
	 **/
	set: function( cursorType)
	{
		document.body.style.cursor = cursorType;
	}
	
};/**
 * stringfilter.js
 **/
 
/**
 * Konstrukor. Filter für Zeichenketten
 **/
StringFilter = function(name, callback)
{
  /*####################*/
  /*# Private Elemente #*/
  /*####################*/
  
  
  var m_name     = name;
  var m_value    = "";
  var m_callback = callback;
  
  var m_id     = name.replace(/\,/g, "_");
  var m_textId = m_id + "Text";
    
  var isSet = function()
  {
    return (m_value !== "");
  };
  
  /*########################*/
  /*# Öffentliche Elemente #*/
  /*########################*/
  
  /**
   * Liefert den HTML-Code des Filters
   **/
  this.getHTML = function(colspan)
  {
    var _colspan_ = colspan;
    if (typeof(_colspan_) == "undefined") { _colspan_ = 1; }
    
    return StringFilter.TEMPLATE.process({
      colspan: _colspan_,
      name   : m_name,
      id     : m_id,
      textId : m_textId,
      isSet  : isSet(),
      value  : m_value
    });
  };
  
	/**
	 * Zeigt den Filter an.
	 **/
	this.show = function()
	{
		var filterElement = $(m_id);
		var textElement = $(m_textId);
		
		if ((filterElement) && (textElement))
		{
			filterElement.show();
			textElement.focus();
		}
	};
	
  /**
   * Prüft, ob der Filter auf einen Text zutrifft
   **/
  this.match = function(text)
  {
    if (false === isSet()) { return true; }
    
    //var patternList = m_value.toLowerCase().split("|");
    var patternList = m_value.split("|");
    //text            = text.toLowerCase();
    
    for (var i = 0, len = patternList.length; i < len; i++)
    {
      if (0 <= text.indexOf(patternList[i])) { return true; }
    }
    
    return false;
  };
  
  /**
   * Schließt den Filter und ruft dei Callback-Funktion auf
   **/
  this.set = function()
  {
    if ($(m_textId)) { m_value = $(m_textId).value;}
    if ($(m_id))     { $(m_id).hide(); }
    if (m_callback)  { m_callback(); }
  };
  
  /**
   * Schließt den Filter ohne Änderungen zu übernehmen
   **/
  this.close = function()
  {
    if ($(m_textId)) { $(m_textId).value = m_value; }
    if ($(m_id)) { $(m_id).hide(); }
  };
  
  /**
   * Setzt den Filter zurück
   **/
  this.reset = function()
  {
    m_value = "";
    this.close();
  };

  /**
   * Prüft, ob Enter oder ESC gedrückt wurde und schließt den Filter entsprechend
   */
  this.checkEnterEsc = function(key)
  {
    switch (key) {
      case 13:
        this.set();
        break;
      case 27:
        this.close();
        break;
    }
  };

  /*###################*/
  /*# Initialisierung #*/
  /*###################*/
  
  this.reset();
  
};

StringFilter.TEMPLATE = TrimPath.parseTemplate(STRINGFILTER_JST);
/**
 * listfilter.js
 **/

/**
 * Konstruktor. ListFilter
 **/
ListFilter = Class.create({
  
  /**
   * Konstruktor
   **/
  initialize: function(name, list, callback)
  {
    this.name     = name;
    this.list     = list.clone();
    this.callback = callback;
    this.id       = name.replace(/\./g, "_");
    this.formId   = this.id + "Form";
    this.reset();
  },

  /**
   * Prüft, ob der Filter aktiv ist
   **/
  isSet: function()
  {
    for (var i = 0, len = this.list.length; i < len; i++)
    {
      if (true === this.list[i]._selected) { return true; }
    }
    return false;
  },
  
  /**
   * Wählt ein Listenelement aus
   **/
  select: function(id, selected)
  {
    for (var i = 0, len = this.list.length; i < len; i++)
    {
      if (id == this.list[i].id) 
      {
        this.list[i]._selected = selected;
        break;
      }
    }
  },
  
  /**
   * Prüft, ob ein Listenelement ausgewählt ist
   **/
  isSelected: function(id)
  {
    for (var i = 0, len = this.list.length; i < len; i++)
    {
      if (id == this.list[i].id) { return this.list._selected; }
    }
    return false;
  },
    
  /**
   * Liefert den HTML-Code des Filters
   **/
  getHTML: function()
  {
    return ListFilter.TEMPLATE.process({
      list  : this.list,
      isSet : this.isSet(),
      name  : this.name,
      id    : this.id,
      formId: this.formId
    });
  },
   
  matchString: function(str)
  {
    if (false === this.isSet()) { return true; }
    
    for (var i = 0, len = this.list.length; i < len; i++)
    {
      if (true === this.list[i]._selected) 
      {
        if (this.list[i].name == str) { return true; }
      } 
    }
    return false;
  },
  
  matchStringArray: function(list)
  {
    if (false === this.isSet()) { return true; }
    
    for (var i = 0, len = this.list.length; i < len; i++)
    {
      if (true === this.list[i]._selected) 
      {
        var name = this.list[i].name;
        if (0 <= list.indexOf(name)) { return true; }
      } 
    }
    return false;
  },
  
  matchArray: function(list)
  {
    if (false === this.isSet()) { return true; }
    
    for (var i = 0, len = this.list.length; i < len; i++)
    {
      if (true === this.list[i]._selected) 
      {
        var id = this.list[i].id;
        for (var j = 0; j < list.length; j++)
        {
          if (list[j].id == id) { return true; }
        }
      } 
    }
    return false;
  },
  
  /**
   * Schließt den Filter und ruft die Callback-Funktion auf
   **/
  set: function()
  {
    if ($(this.formId))
    {
      var values = $(this.formId).values;

      for (var i = 0, len = values.length; i < len; i++)
      {
        this.select(values[i].value, values[i].checked);
      }
      
      if ($(this.id))    { $(this.id).hide(); }
      if (this.callback) { this.callback(); }
    }
  },
  
  /**
   * Schließt den Filter ohne Änderungen zu übernhemen
   **/
  close: function()
  {
    if ($(this.formId))
    {
      var values = $(this.formId).values;
      
      for (var i = 0, len = values.length; i < len; i++)
      {
        values[i].checked = this.isSelected(values[i].value);
      }
    }
    
    if ($(this.id)) { $(this.id).hide(); }
  },
  
  /**
   * Setzt den Filter zurück
   **/
  reset: function()
  {
    for (var i = 0, len = this.list.length; i < len; i++)
    {
      this.list[i]._selected = false;
    }
    
    this.close();
  }
  
});

ListFilter.TEMPLATE = TrimPath.parseTemplate(LISTFILTER_JST);
/**
 * ui.js
 **/

/**
 * Namensraum für UI-Komponenten
 **/ 
UI = { };

/**
 * Basisklasse für UI-Komponenten
 **/
UI.Component = Class.create({

  /**
   * Konstruktor. Erstellt eine UI-Komponente
   **/
  initialize: function()
  {
    this.m_isEnabled = true;
    this.m_element = document.createElement("div");
  },

  /**
   * Liefert das DOM-Element der Komponente
   **/
  getElement: function()
  {
    return this.m_element;
  },
  
  /**
   * Setzt die Breite der Komponente in Pixeln
   **/
  setWidth: function(width)
  {
    Element.setStyle(this.m_element, {
      width: parseInt(width) + "px"
    });
    return this;
  },
  
  /**
   * Setzt die Höhe der Komponente in Pixeln
   **/
  setHeight: function(height)
  {
    Element.setStyle(this.m_element, {
      height: parseInt(height) + "px"
    });
    return this;
  },
  
  /**
   * Setzt die Position der Komponente
   **/
  setPosition: function(x, y)
  {
    Element.setStyle(this.m_element, {
      top : parseInt(y) + "px",
      left: parseInt(x) + "px"
    });
    return this;
  },
  
  /**
   * Ermittelt, ob die Komponente aktiv ist
   **/
  isEnabled: function() 
  {
    return this.m_isEnabled;
  },
  
	/**
	 * Aktiviert bzw. Deaktiviert die Komponente.
	 **/
	setIsEnabled: function(isEnabled)
	{
		if (isEnabled) { this.enable();  }
		else           { this.disable(); }
		
		return this;
	},
	
  /**
   * Setzt die Komponente auf aktiv.
   **/
  enable: function()
  {
    if (this.m_overlay) { Element.remove(this.m_overlay); }
    this.m_overlay = null;
    this.m_isEnabled = true;
    return this;
  },
  
  /**
   * Setzt die Komponente auf inaktiv.
   **/
  disable: function()
  {
    if (!this.m_overlay)
    {
      this.m_overlay = document.createElement("div");
      this.m_overlay.className = "UIDisabled";
      this.m_element.appendChild(this.m_overlay);
    }
    this.m_isEnabled = false;
    return this;
  },

  /**
   * Entfernt die Komponente
   **/
  dispose: function()
  {
    Element.remove(this.m_element);
    return this;
  }
  
});

UI.InputComponent = Class.create(UI.Component, {

  initialize: function()
  {
    this.m_isEnabled = true;
    this.m_element   = document.createElement("div");
  },
  
  enable: function()
  {
    if (this.m_isEnabled === false)
    {
      this.m_element.disabled = false;
      this.m_element.readonly = true;
      this.m_isEnabled = true;
    }
    return this;
  },
  
  disable: function()
  {
    if (this.m_isEnabled === true)
    {
      this.m_element.disabled = true;
      this.m_element.readonly = false;
      this.m_isEnabled = false;
    }
    return this;
  }

});

/**
 * Basisklasse für UI-Container
 **/
UI.Container = Class.create(UI.Component, {

  /**
   * Erstellt einen UI-Container
   **/
  initialize: function()
  {
    this.m_isEnabled = true;
    this.m_element = document.createElement("div");
    this.m_content = m_element;
  },

  /**
   * Fügt dem Container eine neue Komponente hinzu
   **/
  add: function(component)
  {
    this.m_components.push(component);
    this.m_content.appendChild(component.getElement());
    return this;
  },
  
  /**
   * Entfernt eine Komponente aus dem Container
   **/
  remove: function(component)
  {
    this.m_components = this.m_components.without(component);
    component.dispose();
    return this;
  },
  
  /**
   * Entfernt den Container und alle seine Komponenten
   **/
  dispose: function()
  {
    var components = this.m_components;
    components.each(function(component) {
      this.remove(component);
    }, this);
    Element.remove(this.m_element);
    return this;
  }

});
/**
 * frame.js
 **/

/**
 * Rahmen für Dialog-Fenster
 **/ 
UI.Frame = Class.create(UI.Container, {

  initialize: function()
  {
    var _this_ = this;
  
    this.m_isEnabled  = true; 
    this.m_components = [];
  
    this.m_contentWidth  = UI.Frame.DEFAULT_CONTENT_WIDTH;
    this.m_contentHeight = UI.Frame.DEFAULT_CONTENT_HEIGHT;

    this.m_element = document.createElement("div");
    this.m_element.className = UI.Frame.CLASS_NAME;
  
    this.m_title = document.createElement("div");
    this.m_title.className = UI.Frame.TITLE_CLASS;
    this.m_title.appendChild(document.createTextNode(UI.Frame.DEFAULT_TITLE));
    Event.observe(this.m_title, "mousedown", function(event) {
        new Drag(_this_.m_element, event); 
    });
    this.m_element.appendChild(this.m_title);
  
    this.m_content = document.createElement("div");
    this.m_content.className = UI.Frame.CONTENT_CLASS;
    this.m_element.appendChild(this.m_content);
  
    this.m_resize();
  },

  /**
   * Aktualisiert die Abmessungen des Frames
   **/
  m_resize: function()
  {
    this.m_width  = this.m_contentWidth  + (2 * UI.Frame.BORDER_SIZE);
    this.m_height = this.m_contentHeight + (3 * UI.Frame.BORDER_SIZE) + UI.Frame.TITLE_HEIGHT;
    
    Element.setStyle(this.m_element, {
      width : this.m_width  + "px",
      height: this.m_height + "px"
    });
    Element.setStyle(this.m_title, {
      top   : UI.Frame.BORDER_SIZE  + "px",
      left  : UI.Frame.BORDER_SIZE  + "px",
      width : this.m_contentWidth   + "px",
      height: UI.Frame.TITLE_HEIGHT + "px",
      lineHeight: UI.Frame.TITLE_HEIGHT + "px"
    });
    Element.setStyle(this.m_content, {
      top   : ((2 * UI.Frame.BORDER_SIZE) + UI.Frame.TITLE_HEIGHT) + "px",
      left  : UI.Frame.BORDER_SIZE + "px",
      width : this.m_contentWidth  + "px",
      height: this.m_contentHeight + "px"
    });
    
    return this;
  },
  
  /**
   * Setzt die Höhe und Breite des Content-Bereichs.
   **/
  setContentSize: function(contentWidth, contentHeight)
  {
    this.m_contentWidth  = parseInt(contentWidth);
    this.m_contentHeight = parseInt(contentHeight);
    
    this.m_resize();
    return this;
  },
  
  /**
   * Liefert die Breite des Content-Bereichs in Pixeln
   **/
  getContentWidth: function()
  {
    return this.m_contentWidth;
  },
  
  /**
   * Liefert die Höhe des Content-Bereichs in Pixeln
   **/
  getContentHeight: function()
  {
    return this.m_contentHeight;
  },
  
  /**
   * Liefert die Gesamtbreite des Frames in Pixlen
   **/
  getWidth: function()
  {
    return this.m_width;
  },
  
  /**
   * Liefert die Gesamthöhe des Frames in Pixeln
   **/
  getHeight: function()
  {
    return this.m_height;
  },
  
  /**
   * Setzt den Titel
   **/
  setTitle: function(title)
  {
    this.m_title.innerHTML = "";
    this.m_title.appendChild(document.createTextNode(title));
    return this;
  },
  
  _enable: function()
  {
    this.m_isEnabled = true;
    Element.removeClassName(this.m_element, UI.Frame.CLASS_NAME_DISABLED);
    Element.removeClassName(this.m_title, UI.Frame.TITLE_CLASS_DISABLED);
    Element.removeClassName(this.m_content, UI.Frame.CONTENT_CLASS_DISABLED);
    return this;
  },
  
  _disable: function()
  {
    this.m_isEnabled = false;
    Element.addClassName(this.m_element, UI.Frame.CLASS_NAME_DISABLED);
    Element.addClassName(this.m_title, UI.Frame.TITLE_CLASS_DISABLED);
    Element.addClassName(this.m_content, UI.Frame.CONTENT_CLASS_DISABLED);
    return this;
  }
  
}); 

/**
 * Konstanten
 **/
UI.Frame.DEFAULT_CONTENT_WIDTH  = 320; 
UI.Frame.DEFAULT_CONTENT_HEIGHT = 240;
UI.Frame.DEFAULT_TITLE = "UI.Frame";
UI.Frame.TITLE_HEIGHT = 20;
UI.Frame.BORDER_SIZE = 2;
UI.Frame.CLASS_NAME    = "UIFrame";
UI.Frame.TITLE_CLASS   = "UIFrameTitle";
UI.Frame.CONTENT_CLASS = "UIFrameContent";
UI.Frame.CLASS_NAME_DISABLED = "UIFrameDisabled";
UI.Frame.TITLE_CLASS_DISABLED = "UIFrameTitleDisabled";
UI.Frame.CONTENT_CLASS_DISABLED = "UIFrameContentDisabled";
/**
 * label.js
 **/

/**
 * Einzeliges Textfeld
 **/
UI.Label = Class.create(UI.Component, {

  /**
   * Konstruktor. Erstellt ein einzeiliges Textfeld.
   **/ 
  initialize: function()
  {
    this.m_isEnabled = true;

    this.m_element = document.createElement("div");
    this.m_element.className = UI.Label.CLASS_NAME;
    this.m_element.appendChild(document.createTextNode(UI.Label.DEFAULT_TEXT));
  },

  /**
   * Setzt den Text des Labels
   **/
  setText: function(text)
  {
    this.m_element.innerHTML = "";
    this.m_element.appendChild(document.createTextNode(text));
    return this;
  },
  
  /**
   * Setzt die Breite des Labels.
   * Neben numerischen Angaben ist auch der Wert "auto" erlaubt.
   **/
  setWidth: function(width)
  {
    if (width != "auto") { width = parseInt(width) + "px"; }
    Element.setStyle(this.m_element, { width: width });
    return this;
  },
  
  /**
   * Setzt die Höhe des Labels.
   * Neben numerischen Angaben ist auch der Wert "auto" erlaubt.
   * Es wird immer auch die Zeilenhöhe gesetzt!
   **/
  setHeight: function(height)
  {
    var lineHeight = "100%";
    if (height != "auto") 
    {
      height     = parseInt(height) + "px"; 
      lineHeight = height;
    }
    
    Element.setStyle(this.m_element, {
      height    : height,
      lineHeight: lineHeight});
    return this;
  }
  
}); 

/**
 * Konstanten
 **/
UI.Label.CLASS_NAME   = "UILabel";
UI.Label.DEFAULT_TEXT = "UI.Label";
/**
 * ui.text.js
 **/

UI.Text = Class.create(UI.Component, {

  /**
   * Konstruktor. Erzeugt ein neues Textfeld.
   **/
  initialize: function()
  {
    this.m_isEnabled = true;
    
    this.m_text = document.createElement("span");
    this.m_text.appendChild(document.createTextNode(UI.Text.DEFAULT_TEXT));
    
    this.m_element = document.createElement("div");
    this.m_element.className = UI.Text.CLASS_NAME;
    this.m_element.appendChild(this.m_text);
  },

  /**
   * Setzt den Text-Inhalt des Textfeldes
   **/
  setText: function(text)
  {
    this.m_text.innerHTML = "";
    this.m_text.appendChild(document.createTextNode(text));
    return this;
  },

  /**
   * Setzt den HTML-Inhalt des Textfeldes
   **/
  setHtml: function(html)
  {
    this.m_text.innerHTML = html;
    return this;
  },

  setID : function(id) {
    this.m_text.setAttribute("id",id);
    return this;
  },

  setAlignment: function(alignment)
  {
    Element.setStyle(this.m_element, {"textAlign": alignment});
    return this;
  },
  
  /**
   * Setzt die Breite des Labels.
   * Neben numerischen Angaben ist auch der Wert "auto" erlaubt.
   **/
  setWidth: function(width)
  {
    if (width != "auto") { width = parseInt(width) + "px"; }
    Element.setStyle(this.m_element, { width: width });
    return this;
  },
  
  /**
   * Setzt die Höhe des Labels.
   * Neben numerischen Angaben ist auch der Wert "auto" erlaubt.
   **/
  setHeight: function(height)
  {
    if (height != "auto") { height = parseInt(height) + "px"; }
    Element.setStyle(this.m_element, { height    : height });
    return this;
  }
});
 
/**
 * Konstanten
 **/
UI.Text.CLASS_NAME = "UIText";
UI.Text.DEFAULT_TEXT = "UI Text";
/**
 * scrollpane.js
 **/
 
UI.ScrollPane = Class.create(UI.Container, {
  
  /**
   * Konstruktor. Erstellt eine neue ScrollPane
   **/
  initialize: function()
  {
    this.m_isEnabled = true;
    this.m_components = [];
  
    this.m_element = document.createElement("div");
    this.m_element.className = UI.ScrollPane.CLASS_NAME;
    
    this.m_content = document.createElement("div");
    this.m_content.className = UI.ScrollPane.CONTENT_CLASS_NAME;
    this.m_element.appendChild(this.m_content);
  
    this.setWidth(UI.ScrollPane.DEFAULT_WIDTH)
      .setHeight(UI.ScrollPane.DEFAULT_HEIGHT);
  },
  
  /**
   * Setzt die Breite der Komponente in Pixeln
   **/
  setWidth: function(width)
  {
    Element.setStyle(this.m_element, {
      width: parseInt(width) + "px"
    });
    Element.setStyle(this.m_content, {
      width: parseInt(width) + "px"
    });
    return this;
  },
  
  /**
   * Setzt die Höhe der Komponente in Pixeln
   **/
  setHeight: function(height)
  {
    Element.setStyle(this.m_element, {
      height: parseInt(height) + "px"
    });
    Element.setStyle(this.m_content, {
      height: parseInt(height) + "px"
    });
    return this;
  }
  
});

UI.ScrollPane.CLASS_NAME = "UIScrollPane";
UI.ScrollPane.CONTENT_CLASS_NAME = "UIScrollPaneContent";
UI.ScrollPane.DEFAULT_WIDTH  = 100;
UI.ScrollPane.DEFAULT_HEIGHT = 100;

/**
 * button.js
 **/
 
/**
 * Button
 **/
UI.Button = Class.create(UI.Component, {

  /**
   * Konstrukor. Erstellt einen neuen Button
   **/
  initialize: function()
  {
    var _this_ = this;
    
    this.m_isEnabled = true;
    this.m_action    = null;
    
    this.m_element = document.createElement("div");
    this.m_element.className = UI.Button.CLASS_NAME;
    Element.setStyle(this.m_element, {
      width : UI.Button.DEFAULT_WIDTH  + "px",
      height: UI.Button.DEFAULT_HEIGHT + "px"
    });
    
    this.m_text = document.createElement("div");
    this.m_text.className = UI.Button.TEXT_CLASS_NAME;
    this.m_text.appendChild(document.createTextNode(UI.Button.DEFAULT_TEXT));
    Element.setStyle(this.m_text, {
      top: UI.Button.BORDER_SIZE + "px",
      left: UI.Button.BORDER_SIZE + "px",
      width: (UI.Button.DEFAULT_WIDTH  - (2 * UI.Button.BORDER_SIZE)) + "px",
      height: (UI.Button.DEFAULT_HEIGHT - (2 * UI.Button.BORDER_SIZE)) + "px",
      lineHeight: (UI.Button.DEFAULT_HEIGHT - (2 * UI.Button.BORDER_SIZE)) + "px"
    });
    Event.observe(this.m_text, "click", function(event) {
      if (_this_.m_action) { _this_.m_action(event); }
    });
    Event.observe(this.m_text, "mouseover", this._onMouseOver);
    Event.observe(this.m_text, "mouseout" , this._onMouseOut);
    Event.observe(this.m_text, "mousedown", this._onMouseDown);
    Event.observe(this.m_text, "mouseup"  , this._onMouseUp);
    this.m_element.appendChild(this.m_text);
    
  },
  
  /**
   * Setzt den Text des Button
   **/
  setText: function(text)
  {
    this.m_text.innerHTML = "";
    this.m_text.appendChild(document.createTextNode(text));
    return this;
  },
  
  /**
   * Setzt den OnClick-EventHandler
   **/
  setAction: function(action, context)
  {
    if (typeof(context) != "undefined") { this.m_action = action.bind(context); }
    else                                { this.m_action = action; }
    return this;
  },
	
	_onMouseOver: function(event)
	 {
		//this.className = "UIButtonHighlight";
	 },
	 
	 _onMouseOut: function(event)
	 {
		//this.className = "UIButtonText";
	 },
	 
	 _onMouseDown: function(event)
	 {
		//this.className = "UIButtonPressed";
	 },
	 
	 _onMouseUp: function(event)
	 {
		//this.className = "UIButtonHighlight";
	 }

});

UI.Button.TEXT_CLASS_NAME = "UIButtonText StdButton";
UI.Button.CLASS_NAME      = "UIButton";
UI.Button.HIGHLIGHT_CLASS_NAME = "UIButtonHighlight";
UI.Button.DEFAULT_TEXT    = "UI.Button";
UI.Button.BORDER_SIZE     = 0;
UI.Button.DEFAULT_WIDTH   = 150;
UI.Button.DEFAULT_HEIGHT  = 22; 
/**
 * textedit.js
 **/
 
/**
 * Text-Eingabefeld
 **/
UI.TextEdit = Class.create(UI.InputComponent, {

  initialize: function()
  {
    this.m_isEnabled = true;
    
    this.m_element = document.createElement("input");
    this.m_element.className = UI.TextEdit.CLASS_NAME;
    this.m_element.type = "text";
    this.m_element.value = UI.TextEdit.DEFAULT_VALUE;
  },
  
  setText: function(text)
  {
    this.m_element.value = text;
    return this;
  },
  
  getText: function()
  {
    return this.m_element.value;
  }


});

UI.TextEdit.CLASS_NAME = "UITextEdit";
UI.TextEdit.DEFAULT_VALUE = "";/**
 * textedit.js
 **/
 
/**
 * Text-Eingabefeld
 **/
UI.PasswordEdit = Class.create(UI.InputComponent, {

  initialize: function()
  {
    this.m_isEnabled = true;
    
    this.m_element = document.createElement("input");
    this.m_element.className = UI.PasswordEdit.CLASS_NAME;
    this.m_element.type = "password";
    this.m_element.value = UI.PasswordEdit.DEFAULT_VALUE;
  },
  
  setText: function(text)
  {
    this.m_element.value = text;
    return this;
  },
  
  getText: function()
  {
    return this.m_element.value;
  }


});

UI.PasswordEdit.CLASS_NAME = "UITextEdit";
UI.PasswordEdit.DEFAULT_VALUE = "";/**
 * textarea.js
 **/
 
/**
 * @fileOverview UI.Textarea
 * @author F. Werner (eQ-3)
 **/
 
/**
 * @class UI.Textarea
 **/
UI.Textarea = Class.create(UI.InputComponent, {

  initialize: function()
  {
    this.isEnabled = true;
    
    this.m_element = document.createElement("textarea");
    this.m_element.className = UI.Textarea.CLASS_NAME;
    Element.writeAttribute(this.m_element, "wrap", "off");
    this.m_element.value = UI.Textarea.DEFAULT_VALUE;
  },
  
  setText: function(text)
  {
    this.m_element.value = text;
    return this;
  },
  
	setWrap: function(isWrap)
	{
		if (isWrap) { Element.writeAttribute(this.m_element, "wrap", "soft"); }
		else        { Element.writeAttribute(this.m_element, "wrap", "off"); }
	
		return this;
	},
	
  getText: function()
  {
    return this.m_element.value;
  }

});

UI.Textarea.CLASS_NAME = "UITextArea";
UI.Textarea.DEFAULT_VALUE = "";
/**
 * listbox.js
 **/
 
/**
 * Auswahl aus einer Liste
 **/
UI.ListBox = Class.create(UI.InputComponent, {

  /**
   * Konstruktor. Erstellt eine neue Listbox
   **/
  initialize: function()
  {
    this.m_isEnabled = true;
    this.m_onChangeHandler = this.m_onChange.bind(this);
    
    this.m_items = [];
    
    this.m_element = document.createElement("select");
    this.m_element.className = UI.ListBox.CLASS_NAME;
    Event.observe(this.m_element, "change", this.m_onChangeHandler);
  },
  
  m_onChange: function(event)
  {
    if (this.m_onChangeCallback)
    {
      this.m_onChangeCallback(this.getSelectedItem());
    }
  },
  
  getSelectedItem: function()
  {
    return this.m_items[this.m_element.selectedIndex];
  },
  
  setOnChangeCallback: function(onChangeCallback)
  {
    this.m_onChangeCallback = onChangeCallback;
    return this;
  },
  
  add: function(item)
  {
    var option = document.createElement("option");
    option.appendChild(document.createTextNode(item.name));
    this.m_element.appendChild(option);
    this.m_items.push(item);
    return this;
  },
    
  remove: function(item)
  {
    /* todo */
  },
    
  selectItem: function(item)
  {
    return this.selectIndex(this.m_items.indexOf(item));
  },
	
	/**
	 * @fn selectItemById
	 * Wählt ein
	 **/
	selectItemById: function(id)
	{
		var items = this.m_items;
		
		for (var i = 0, len = items.length; i < len; i++)
		{
			var item = items[i];
			if (item.id == id) { this.selectIndex(i); }
		}

		return this;
	},
  
  selectIndex: function(index)
  {
    this.m_element.selectedIndex = index;
    return this;
  }
  
  
  

});

UI.ListBox.CLASS_NAME = "UIListbox";/**
 * ui.checkbox.js
 **/
 
UI.Checkbox = Class.create(UI.Component, {

  /**
   * Konstruktor. Erzeugt eine neue Checkbox.
   **/
  initialize: function()
  {
    this.m_isEnabled = true;
    this.m_action = null;
    
    this.m_checkbox = document.createElement("input");
    this.m_checkbox.type = "checkbox";
    this.m_checkbox.checked = UI.Checkbox.DEFAUT_CHECKED;
    Event.observe(this.m_checkbox, "click", this.onChange.bind(this));
    
    this.m_text = document.createElement("span");
    this.m_text.appendChild(document.createTextNode(UI.Checkbox.DEFALUT_TEXT));
    
    this.m_element = document.createElement("div");
    this.m_element.className = UI.Checkbox.CLASS_NAME;
    this.m_element.appendChild(this.m_checkbox);
    this.m_element.appendChild(this.m_text);
  },

  setText: function(text)
  {
    this.m_text.innerHTML = "";
    this.m_text.appendChild(document.createTextNode(text));
    return this;
  },
  
  setIsChecked: function(isChecked)
  {
    this.m_checkbox.checked = isChecked;
    return this;
  },
  
  isChecked: function()
  {
    return this.m_checkbox.checked;
  },
  
  /**
   * Setzt die Breite des Labels.
   * Neben numerischen Angaben ist auch der Wert "auto" erlaubt.
   **/
  setWidth: function(width)
  {
    if (width != "auto") { width = parseInt(width) + "px"; }
    Element.setStyle(this.m_element, { width: width });
    return this;
  },
  
  /**
   * Setzt die Höhe des Labels.
   * Neben numerischen Angaben ist auch der Wert "auto" erlaubt.
   **/
  setHeight: function(height)
  {
    if (height != "auto") { height = parseInt(height) + "px"; }
    Element.setStyle(this.m_element, { height    : height });
    return this;
  },
  
  setAction: function(action, context)
  {
    this.m_action = action.bind(context);
    return this;
  },

  onChange: function()
  {
    if (this.m_action)
    {
      this.m_action(this);
    }
  }
  
});

UI.Checkbox.CLASS_NAME = "UICheckbox";
UI.Checkbox.DEFAULT_TEXT = "UI Checkbox";
UI.Checkbox.DEFAULT_CHECKED = false;/**
 * image.js
 **/

/**
 * Image
 **/
UI.Image = Class.create(UI.Component, {

  /**
   * Konstruktor. Erstellt ein Image
   **/ 
  initialize: function()
  {
    this.m_isEnabled = true;

    this.m_element = document.createElement("img");
    this.m_element.className = UI.Image.CLASS_NAME;
  },

  setPath: function(path)
  {
    this.m_element.alt = "";
    this.m_element.src = path;
    return this;
  },

  setId: function(id)
  {
    this.m_element.id = id;
    return this;
  },

  getId: function()
  {
    return this.m_element.id;
  }
});

/**
 * Konstanten
 **/
UI.Image.CLASS_NAME   = "UIImage";
/**
 * room.js
 * Raum.
 **/
  
Room = Class.create({
  
  /**
   * Konstruktor
   **/
  initialize: function(data)
  {
    this.id          = "";
    this.name        = "";
    this.description = "";
    this.channelIds  = [];
    
    this.addChannelEvent    = new eQ3.Event();
    this.removeChannelEvent = new eQ3.Event();
    
    this.update(data);
  },
  
  /**
   * Aktualisiert den Raum
   **/
  update: function(data)
  {
    var channelIds = this.channelIds.clone();
    channelIds.each(function(id) { this.removeChannel(id); }, this);

    this.id          = data["id"];           // Id
    this.name        = data["name"];         // Name 
    this.description = data["description"];  // Beschreibung
    this.channelIds  = [];                   // Ids der Kanäle
    
    data["channelIds"].each(function(id) { this.addChannel(id); }, this);
  },
  
  /**
   * Fügt einen Kanal hinzu.
   * writeBack: [bool] Optional: false. Falls true, wird die Änderung an die HomeMatic Zentrale übermittelt.
   **/
  addChannel: function(channelId, writeBack)
  {
    if (!this.channelIds.ex_contains(channelId))
    {
      if (writeBack) { homematic("Room.addChannel", {id: this.id, channelId: channelId}); }
      this.channelIds.push(channelId);
      this.addChannelEvent.fire(this, {channelId: channelId});
    }
  },
  
  /**
   * Entfernt einen Kanal.
   * writeBack: [bool] Optional: false. Falls true, wird die Änderung an die HomeMatic Zentrale übermittelt.
   **/
  removeChannel: function(channelId, writeBack)
  {
    if (this.channelIds.ex_contains(channelId))
    {
      if (writeBack) { homematic("Room.removeChannel", {id: this.id, channelId: channelId}); }
      this.channelIds = this.channelIds.without(channelId);
      this.removeChannelEvent.fire(this, {channelId: channelId});
    }
  },
  
  /**
   * Prüft, ob ein Kanal in dem Raum definiert ist.
   **/
  contains: function(channelId)
  {
    return (0 <= this.channelIds.indexOf(channelId));
  },
  
  /**
   * Liefert die Ids aller Programme, die wenigesten einen Kanal des Raums verwenden
   **/
  listProgramIds: function()
  {
    return homematic("Room.listProgramIds", {id: this.id});
  }
  
});

/**
 * roomlist.js
 * Raumliste.
 **/
 
/**
 * Raumliste.
 **/
RoomList = Singleton.create({

  /**
   * Konstruktor
   **/
  initialize: function()
  {
    this.addEvent    = new eQ3.Event();
    this.removeEvent = new eQ3.Event();
    
    this.m_rooms = {};
  },
 
  /**
   * Callback. Aktualisiert einen Raum.
   **/
  update: function(data, callback)
  {
    var room;
    
    if (data !== null)
    {
      var id = data["id"];
      room = this.m_rooms[id];
      
      if (typeof(room) != "undefined")
      {
        room.update(data);
      }
      else
      {
        room = new Room(data);
        this.m_rooms[id] = room;
        this.addEvent.fire(this, {room: room});
      }
    }
    
    if (callback) { callback(); }
    return room;
  },
  
  /**
   * Liefert die Liste aller Räume.
   **/
  list: function() 
  { 
    return Object.values(this.m_rooms);
  },
  
  /**
   * Initialisiert die Raumliste.
   **/
  reload: function(loader)
  {
    var _this_   = this;
    var _loader_ = loader;
    
    homematic("Room.getAll", null, function(rooms) {
      if (rooms)
      {
        for (var i = 0, len = rooms.length; i < len; i++)
        {
          _this_.update(rooms[i]);
        }
      }
//      _loader_.reportLoadingState(1);
      _loader_.ready();
    });
  },
  
  /**
   * Startet die Aktualiserung eines Raums.
   **/
  beginUpdate: function(id, callback)
  {
    var _this_ = this;
    var _callback_ = callback;
    
    homematic("Room.get", {"id": id}, function(data) { _this_.update(data, _callback_); });
  },

  /**
   * Ermittelt einen Raum anhand seiner Id.
   **/
  get: function(id)
  {
    var room = this.m_rooms[id];
    if (typeof(room) != "undefined") { return room; }
    else                             { return null; }
  },
  
  remove: function(room)
  {
    var channelIds = room.channelIds.clone();
    
    delete this.m_rooms[room.id];
    channelIds.each(function(id) { room.removeChannel(id); });
    this.removeEvent.fire(this, {room: room});
  }
  
});
/**
 * subsection.js
 * Gewerk.
 **/
 
Subsection = Class.create({
  
  /**
   * Konstruktor
   **/
  initialize: function(data)
  {
    this.id          = "";
    this.name        = "";
    this.description = "";
    this.channelIds  = [];
    
    this.addChannelEvent    = new eQ3.Event();
    this.removeChannelEvent = new eQ3.Event();
    
    this.update(data);
  },
  
  /**
   * Aktualisiert den Raum
   **/
  update: function(data)
  {
    var channelIds = this.channelIds.clone();
    channelIds.each(function(id) { this.removeChannel(id); }, this);
  
    this.id          = data["id"];            // Id
    this.name        = data["name"];          // Name
    this.description = data["description"];   // Beschreibung
    this.channelIds  = [];                    // Ids der Kanäle
    
    data["channelIds"].each(function(id) { this.addChannel(id); }, this);
  },
  
  /**
   * Fügt einen Kanal hinzu.
   * writeback: [bool] Optional (false). Falls true, wird die Änderung an die HomeMatic Zentrale übermittelt.
   **/
  addChannel: function(channelId, writeBack)
  {
    if (!this.channelIds.ex_contains(channelId))
    {
      if (writeBack) { homematic("Subsection.addChannel", {id: this.id, channelId: channelId}); }
      this.channelIds.push(channelId);
      this.addChannelEvent.fire(this, {channelId: channelId});
    }
  },
  
  /**
   * Entfernt einen Kanal.
   * writeBack: [bool] Optional (false). Falls true, wird die Änderung an die HomeMatic Zentrale übermittelt.
   **/
  removeChannel: function(channelId, writeBack)
  {
    if (this.channelIds.ex_contains(channelId))
    {
      if (writeBack) { homematic("Subsection.removeChannel", {id: this.id, channelId: channelId}); }
      this.channelIds = this.channelIds.without(channelId);
      this.removeChannelEvent.fire(this, {channelId: channelId});
    }
  },
  
  /**
   * Prüft, ob ein Kanal in dem Raum definiert ist.
   **/
  contains: function(channelId)
  {
    return (0 <= this.channelIds.indexOf(channelId));
  },
  
  /**
   * Liefert die Ids aller Programme, die mindestens einen Kanal in dem Gewerk verwenden
   **/
  listProgramIds: function()
  {
    return homematic("Subsection.listProgramIds", {id: this.id});
  }
  
});
/**
 * SubsectionList.js
 * Gewerkeliste.
 **/
 
/**
 * Gewerkeliste
 **/
SubsectionList = Singleton.create({

  /**
   * Konstruktor
   **/
  initialize: function()
  {
    this.addEvent    = new eQ3.Event();
    this.removeEvent = new eQ3.Event();
  
    this.m_subsections = {};
  },
  
  /**
   * Callback. Aktualiert ein Gewerk.
   **/
  update: function(data, callback)
  {
    var subsection;
    
    if (data !== null)
    {
      var id = data["id"];
      subsection = this.m_subsections[id];
      
      if (typeof(subsection) != "undefined")
      {
        subsection.update(data);
      }
      else
      {
        subsection = new Subsection(data);
        this.m_subsections[id] = subsection;
        this.addEvent.fire(this, {subsection: subsection});
      }
    }
    
    if (callback) { callback(); }
    return subsection;
  },
    
  /**
   * Liefert die Liste aller Gewerke.
   **/
  list: function()
  {
    return Object.values(this.m_subsections);
  },

  /**
   * Lädt die Gewerkeliste erneut
   **/
  reload: function(loader)
  {
    var _this_   = this;
    var _loader_ = loader;

    homematic("Subsection.getAll", null, function(subsections) {
      if (subsections)
      {
        subsections.each(function (subsection) { _this_.update(subsection); });
      }
//      _loader_.reportLoadingState(1);
      _loader_.ready();
    });
  },
  
  /**
   * Startet die Aktualisierung eines Gewerks.
   **/
  beginUpdate: function(id, callback)
  {
    var _this_     = this;
    var _callback_ = callback;
    
    homematic("Subsection.get", {"id": id}, function(data) { _this_.update(data, _callback_); });
  },
  
  /**
   * Liefert ein Gewerk anhand seiner Id.
   **/
  get: function(id)
  {
    return this.m_subsections[id];
  },
  
  remove: function(subsection)
  {
    var channelIds = subsection.channelIds.clone();
    
    delete this.m_subsections[subsection.id];
    channelIds.each(function(id) { subsection.removeChannel(id); });
    this.removeEvent.fire(this, {subsection: subsection});
  }
  
}); 
/**
 * devicetype.js
 **/
 
/**
 * Gerätetyp.
 **/
DeviceType = Class.create({
 
  initialize: function(id)
  {
    this.id          = id;
    this.name        = id;
    this.description = DEV_getDescription(id);
  },
  
  isDeletable: function()
  {
    return DeviceTypeList.isDeletable(this);
  },
  
  /**
   * Liefert den HTML-Code eines Thumbnails für das Gerät.
   **/
  getThumbnailHTML: function(formName)
  { 
    return DeviceTypeList.getThumbnailHTML(this.id, formName);
  },
  
  /**
   * Liefert den HTML-Code eines Bildes für das Gerät.
   **/
  getImageHTML: function(formName)
  {
    return DeviceTypeList.getImageHTML(this.id, formName);
  }
  
});/**
 * devicetypelist.js
 **/

/**
 * Liste der verfügbaren Gerätetypen.
 **/
DeviceTypeList = Singleton.create({
  THUMBNAIL_SIZE: 50,   // Größe eines (quadratischen) Thumbnails
  IMAGE_SIZE: 250,   // Größe eines (quadratischen) Bildes
  
  /**
   * Liste der nicht löschbaren Gerätetypen
   **/
  m_undeletableTypeNames: [
    "HM-CCU-1",
    "HM-RCV-50",
    "HMW-RCV-50",
    "HM-Sec-SD-Team",
    "HM-Sec-SD-2-Team"
  ],
  
  /**
   * Konstruktor
   **/
  initialize: function()
  {
    this.deviceTypes = {};     // verfügbare Gerätetypen
    
    for (var i = 0, len = DEV_LIST.length; i < len; i++)
    {
      var deviceType = new DeviceType(DEV_LIST[i]);
      this.deviceTypes[deviceType.id] = deviceType;
    }
  
    this.unknownType = this.deviceTypes["DEVICE"];    
  },
  
  /**
   * Ermittelt, ob ein Gerät von diesem Typ gelöscht werden kann.
   **/
  isDeletable: function(deviceType)
  {
    return !this.m_undeletableTypeNames.ex_contains(deviceType.name);
  },
  
  /**
   * Erstellt den HTML-Code zu einem Bild bzw. Thumbnail
   **/
  getPictureHTML: function(typeId, formName, size)
  {   
    var wrapper, canvas, jg, result;
    
    wrapper = document.createElement("div");
    Element.setStyle(wrapper, {display: "none"});    
    $("body").appendChild(wrapper);
    
    canvas = document.createElement("div");
    wrapper.appendChild(canvas);
    Element.setStyle(canvas, {
      position: "absolute",
      left:     "0px",
      top:      "0px"      
    });    
    
    jg = new jsGraphics(canvas);
    InitGD(jg, size);
    Draw(jg, typeId, size, formName);
    
    result = wrapper.innerHTML;
    
    Element.remove(wrapper);
    return result;
  },
  
  /**
   * Liefert die Liste aller Gerätetypen.
   **/
  listDeviceTypes: function()
  {
    return Object.values(this.deviceTypes);
  },
  
  /**
   * Liefert einen Geratetypen anhand seiner Id
   **/
  getDeviceType: function(id)
  {
    var deviceType = this.deviceTypes[id];
    
    if (typeof(deviceType) != "undefined") { return deviceType; }
    else                                   { return this.unknownType; }
  },
  
  /**
   * Liefert den HTML-Code eines Thumbnails
   **/
  getThumbnailHTML: function(typeId, formName)
  {
    return this.getPictureHTML(typeId, formName, this.THUMBNAIL_SIZE);
  },
  
  /**
   * Liefert den HTML-Code eines Bildes
   **/
  getImageHTML: function(typeId, formName)
  {
    return this.getPictureHTML(typeId, formName, this.IMAGE_SIZE);
  }

});
 /**
 * channel.js
 **/

/**
 * Kanal
 **/
Channel = Class.create({
  /**
   * Konstruktor
   **/
  initialize: function(device, data)
  {
    this.updateEvent = new eQ3.Event();
    
    this.update(device, data);
  },
  
  /**
   * Aktualisiert die Kanaldaten
   **/
  update: function(device, data)
  {
    var deviceType = device.deviceType;

    if ((device) && (data))
    {
      this.id = data["id"];            
      this.name = data["name"];
      this.nameExtention = "";
      this.address = data["address"];       
      this.deviceId = data["deviceId"];  
      this.device = device;
      this.deviceType = deviceType;
      this.typeName = deviceType.name;
      this.typeDescription = deviceType.description;
      this.channelType = data["channelType"];
      this.partnerId = data["partnerId"];  
      this.groupId = (this.id < this.partnerId) ? this.id + "_" + this.partnerId : this.partnerId + "_" +this.id;
      this.index = data["index"];
      this.category = translateKey(Channel.getCategoryName(data["category"]));
      this.mode = translateKey(Channel.getModeName(data["mode"]));
      this.isAesAvailable = data["isAesAvailable"];  
      this.isLogged = data["isLogged"];      
      this.isVisible = data["isVisible"];      
      this.isReadyConfig = data["isReady"];  
      this.isVirtual = data["isVirtual"];      
      this.isLogable = data["isLogable"];      
      this.isReadable = data["isReadable"];      
      this.isWritable = data["isWritable"];      
      this.isEventable = data["isEventable"];     
      this.isUsable = (this.isWritable && data["isUsable"]);          
      this.thumbnailHTML = deviceType.getThumbnailHTML(this.index);
      this.imageHTML = deviceType.getImageHTML(this.index);
    }

    this.m_extendName();

    this.rooms = this.m_getRooms();
    this.subsections = this.m_getSubsections();
    
    
  },

  m_extendName: function() {
    var ext = getExtendedDescription(this.deviceType.id,this.index);
    if (ext.length > 0) {
      this.nameExtention += "<br/>" + ext;
    }
  },

  /**
   * Ermittelt alls Räume, in denen der Kanal definiert ist
   **/
  m_getRooms: function()
  {
    var result = [];
    var rooms  = RoomList.list();
    var id     = this.id;
    
    rooms.each(function(room) {
      if (room.contains(id)) { result.push(room); }
    });
    
    return result;
  },
  
  /**
   * Ermittelt alls Gewerke, in denen der Kanal definiert ist
   **/
  m_getSubsections: function()
  {
    var result       = [];
    var subsections  = SubsectionList.list();
    var id           = this.id;
    
    subsections.each(function(subsection) {
      if (subsection.contains(id)) { result.push(subsection); }
    });
    
    return result;
  },
    
  /**
   * Legt den Namen des Kanals fest
   **/
  setName: function(name)
  {
    if (this.name != name)
    {
      var result = homematic("Channel.setName", {id: this.id, name: name});
      if (typeof(result) == "string")
      {
        this.name = result;
        this.updateEvent.fire(this, {reason: "setName", isUsable: this.name}); 
      }
    }
    
    return this.name;
  },
  
  /**
   * Legt fest, ob der Kanal für normale Anwender sichtbar ist
   **/
  setVisibility: function(isVisible)
  {
    if (this.isVisible != isVisible)
    {
      var result = homematic("Channel.setVisibility", {id: this.id, isVisible: isVisible});
      if (typeof(result) == "boolean")
      {
        this.isVisible = result;
        this.updateEvent.fire(this, {reason: "setVisibility", isUsable: this.isVisible}); 
      }
    }
    
    return this.isVisible;
  },
  
  /**
   * Legt fest, ob der Kanal für normale Anwender bedienbar ist
   **/
  setUsability: function(isUsable)
  {
    if (this.isUsable != isUsable)
    {
      var result = homematic("Channel.setUsability", {id: this.id, isUsable: isUsable});
      if (typeof(result) == "boolean")
      {
        this.isUsable = result;
        this.updateEvent.fire(this, {reason: "setUsability", isUsable: this.isUsable}); 
      }
    }
    
    return this.isUsable;
  },
  
  /**
   * Legt fest, ob der Kanal protokolliert wird
   **/
  setLogging: function(isLogged)
  {
    if (this.isLogged != isLogged)
    {
      var result = homematic("Channel.setLogging", {id: this.id, isLogged: isLogged});
      if (typeof(result) == "boolean")
      {
        this.isLogged = result;
        this.updateEvent.fire(this, {reason: "setLogging", isLogged: this.isLogged}); 
      }
    }
    
    return this.isLogged;
  },
  
  /**
   * Legt den Übertragungsmodus des Kanals fest.
   **/
  setMode: function(mode)
  {

    if (this.mode != mode)
    {
      var result = homematic("Channel.setMode", {id: this.id, mode: Channel.getMode(mode)});
      if (typeof(result) == "string")
      {
        this.mode = translateKey(Channel.getModeName(result));
        this.updateEvent.fire(this, {reason: "setMode", mode: this.mode});
      }
    }
    return this.mode;
  },

  getName: function()
  {
    return this.name;
  },

  /**
   * Liefert die Kanalgruppe
   **/
  getChannelGroup: function()
  {
    return DeviceList.getChannelGroup(this.groupId);
  },
  
  addToRoom: function(room)
  {
    if (!this.rooms.ex_contains(room))
    {
      this.rooms.push(room);
      this.rooms.ex_sortBy("name");
      this.updateEvent.fire(this, {reason: "addToRoom", room: room}); 
    }
  },
  
  removeFromRoom: function(room)
  {
    if (this.rooms.ex_contains(room))
    {
      this.rooms = this.rooms.without(room);
      this.rooms.ex_sortBy("name");
      this.updateEvent.fire(this, {reason: "removeFromRoom", room: room}); 
    }
  },
  
  /**
   * Fügt dem Kanal ein Gewerk hinzu.
   * Diese Methode dient lediglich zur Aktualisierung des Datenmodells.
   * Um den Kanal einem Gewerk hinzuzufügen, sollte 
   *   Subsection.addChannel(channel, true)
   * verwendet werden.
   **/
  addToSubsection: function(subsection)
  {
    if (!this.subsections.ex_contains(subsection))
    {
      this.subsections.push(subsection);
      this.subsections.ex_sortBy("name");
      this.updateEvent.fire(this, {reason: "addToSubsection", subsection: subsection}); 
    }
  },
  
  /**
   * Entfernt den Kanal aus einem Gewerk.
   * Diese Methode dient lediglich zur Aktualisierung des Datenmodells.
   * Um den Kanal aus dem Gewerk zu löschen, sollte 
   *   Subsection.removeChannel(channel, true)
   * verwendet werden.
   **/
  removeFromSubsection: function(subsection)
  {
    if (this.subsections.ex_contains(subsection))
    {
      this.subsections = this.subsections.without(subsection);
      this.subsections.ex_sortBy("name");
      this.updateEvent.fire(this, {reason: "removeFroSubsections", subsection: subsection}); 
    }
   },
  
  
  /**
   * Liefert eine Liste sämtlicher Programme (Ids), die den Kanal verwenden
   **/
  listProgramIds: function()
  {
    return homematic("Channel.listProgramIds", {"id": this.id});
  },
  
  /**
   * Ermittelt, ob der Kanal den Funktionstest unterstützt.
   **/
  supportsComTest: function()
  {
    return this.isEventable;
  }
  
});
 
/*##############*/
/*# Konstanten #*/
/*##############*/

Channel.CATEGORY =
{
  NONE:     "lblChannelNotLinkable",
  SENDER:   "lblSender",
  RECEIVER: "lblReceiver"

};

Channel.MODE =
{
  DEFAULT: "lblStandard",
  AES    : "lblSecured"
};

Channel.INVALID_ID = "";   

/*########################*/
/*# Statische Funktionen #*/
/*########################*/

/**
 * Liefert den Übertragungsmodus anhand seines Namens.
 **/
Channel.getMode = function(modeName)
{
  switch (modeName)
  {
    //case translateKey(Channel.MODE.DEFAULT): return "MODE_DEFAULT";
    //case translateKey(Channel.MODE.AES)    : return "MODE_AES";
    case "Standard" : return "MODE_DEFAULT";
    case "Gesichert"    : return "MODE_AES";
    default: return "MODE_DEFAULT";
  }
};

/**
 * Liefert den Namen eines Übertragungs-Modus
 **/
Channel.getModeName = function(mode)
{
  switch (mode)
  {
    case "MODE_DEFAULT":  return Channel.MODE.DEFAULT;
    case "MODE_AES":      return Channel.MODE.AES;
    default:              return Channel.MODE.DEFAULT;
  }
};

/**
 * Liefert den Namen einer Kategorie.
 **/
Channel.getCategoryName = function(category)
{
  switch (category)
  {
    case "CATEGORY_NONE":      return Channel.CATEGORY.NONE; 
    case "CATEGORY_SENDER":    return Channel.CATEGORY.SENDER; 
    case "CATEGORY_RECEIVER":  return Channel.CATEGORY.RECEIVER; 
    default:                   return Channel.CATEGORY.NONE;
  }
};
/**
 * channelgroup.js
 **/
 
/**
 * Kanalgruppe.
 **/
ChannelGroup = Class.create({
  
  /**
   * Konstruktor
   **/
  initialize: function(device, channel)
  {
    this.m_updateChannelHandler = this.m_onUpdateChannel.bind(this);
    
    this.id              = channel.groupId;
    this.device          = device;
    this.typeName        = device.deviceType.name;
    this.typeDescription = device.deviceType.description;
    this.channels        = [];
    this.thumbnailHTML   = null;
    this.imageHTML       = null;    
    
    this.update(device, channel);
  },

  /**
   * Aktualisiert die Kanalgruppe
   **/
  update: function(device, channel)
  {
    if ((device) && (channel))
    {
      var deviceType = device.deviceType;
      
      channel.updateEvent.add(this.m_updateChannelHandler);
      
      this.channels.ex_pushUnique(channel);
      this.channels.ex_sortBy("index");
      this.formName = this.channels.ex_joinItem("index", "+");
      this.name     = this.channels.ex_joinItem("name", " ");
      this.address  = this.channels.ex_joinItem("address", " ");
      this.thumbnailHTML = deviceType.getThumbnailHTML(this.formName);
      this.imageHTML     = deviceType.getImageHTML(this.formName);
    }
    
    this.isUsable        = false;
    this.isVisible       = false;
    this.isLogged        = false;
    this.categories      = [];
    this.modes           = [];
    this.rooms           = [];
    this.subsections     = [];

    this.channels.each(function(channel) {
      this.isUsable  |= channel.isUsable;
      this.isVisible |= channel.isVisible;
      this.isLogged  |= channel.isLogged;
      this.categories.push(channel.category);
      this.modes.push(channel.mode);
      this.rooms = this.rooms.concat(channel.rooms);
      this.subsections = this.subsections.concat(channel.subsections);
    }, this);
    
    this.categories  = this.categories.uniq();
    this.modes       = this.modes.uniq();
    this.rooms       = this.rooms.uniq().ex_sortBy("name");
    this.subsections = this.subsections.uniq().ex_sortBy("name");
  },
  
  m_onUpdateChannel: function(channel, eventArgs)
  {
    this.update(this.device, channel);
  },
  
  addSubsection: function(subsection)
  {
    if (!this.subsections.ex_contains(subsection))
    {
      this.subsections.push(subsection);
      this.subsections.ex_sortBy("name");
    }
  },
  
  removeSubsection: function(subsection)
  {
    if (this.subsections.ex_contains(subsection))
    {
      this.subsections = this.subsections.without(subsection);
    }
  },

  /**
   * Liefert die Ids aller Programme, welche mindestens einen Kanal der Gruppe verwenden
   **/
  listProgramIds: function()
  {
    var ids = [];
    this.channels.each(function(channel) {
      ids = ids.concat(homematic("Channel.listProgramIds", {"id": channel.id})); 
    });
    return ids.uniq();
  }
    
});

/**
 * device.js
 **/
 
/**
 * HomeMatic Gerät.
 **/
Device = Class.create({

  /**
   * Konstruktor
   **/
  initialize: function(data)
  {
    this.m_updateChannelHandler = this.m_onUpdateChannel.bind(this);
    
    this.update(data);
  },
  
  /**
   * Aktualisiert die Gerätedaten
   **/
  update: function(data)
  {
    if (data)
    {
      var deviceType = DeviceTypeList.getDeviceType(data["type"]);
    
      this.id  = data["id"];
      this.name = data["name"];
      this.address = data["address"];
      this.interfaceName = data["interface"];
      this.isReadyConfig = data["readyConfig"];
      this.thumbnailHTML = deviceType.getThumbnailHTML();
      this.imageHTML = deviceType.getImageHTML();
      this.deviceType = deviceType;
      this.typeName = deviceType.name;
      this.typeDescription = deviceType.description;
      this.isDeletable = deviceType.isDeletable();
      this.isOperateGroupOnly = (data["operateGroupOnly"] == "true") ? true : false;
    
      this.channels = new Array();
      this.groups = new Array();
      this.singles = new Array();
      data["channels"].each(function(data) {
        var channel = DeviceList.updateChannel(this, data);
        channel.updateEvent.add(this.m_updateChannelHandler);
        this.channels.push(channel);
      
        if (channel.partnerId == Channel.INVALID_ID)
        {
          this.singles.push(channel);
        }
        else
        {
          var group = DeviceList.updateChannelGroup(this, channel);
          this.groups.ex_pushUnique(group);
        }
      }, this);
    }
    
    this.isWritable  = false;
    this.isVisible   = false;
    this.isUsable    = false;
    this.isLogged    = false;
    this.isLogable   = false;
    this.categories  = [];
    this.modes       = [];
    this.rooms       = [];
    this.subsections = [];
    
    this.channels.each(function(channel) {
      this.isWritable |= channel.isWritable;
      this.isVisible  |= channel.isVisible;
      this.isUsable   |= channel.isUsable;
      this.isLogged   |= channel.isLogged;
      this.isLogable  |= channel.isLogable; 
      this.categories.push(channel.category);
      this.modes.push(channel.mode);
      this.rooms       = this.rooms.concat(channel.rooms);
      this.subsections = this.subsections.concat(channel.subsections);
    }, this);
    
    this.categories  = this.categories.uniq();
    this.modes       = this.modes.uniq();
    this.rooms       = this.rooms.uniq().ex_sortBy("name");
    this.subsections = this.subsections.uniq().ex_sortBy("name");
  },
  
  /**
   * Legt den Namen des Geräts fest.
   **/
  setName: function(name)
  {
    if (name != this.name)
    {
      var result = homematic("Device.setName", {id: this.id, name: name});
      if (typeof(result) == "string")
      {
        this.name = result;
      }
    }
    
    return this.name;
  },

  setUsable: function(isUsable)
  {
  },
  
  setVisible: function(isVisible)
  {
  },
  
  setLogging: function(isLogged)
  {
  },  
  
  m_onUpdateChannel: function(channel, eventArgs)
  {
    this.update();
  },
  
  addSubsection: function(subsection)
  {
    if (!this.subsections.ex_contains(subsection))
    {
      this.subsections.push(subsection);
      this.subsections.ex_sortBy("name");
    }
  },
  
  removeSubsection: function(subsection)
  {
    if (this.subsections.ex_contains(subsection))
    {
      this.subsections = this.subsections.without(subsection);
    }
  },

  getName: function()
  {
    return this.name;
  },

  /**
   * Liefert den HTML-Code des Geräte-Vorschau-Bildes
   **/
  getThumbnailHTML: function()
  {
    if (this.thumbnailHTML === null)
    {
      this.thumbnailHTML = this.deviceType.getThumbnailHTML();
    }
    
    return this.thumbnailHTML;
  },
  
  /**
   * Liefert den HTML-Code des Gerätebildes
   **/
  getImageHTML: function()
  {
    if (this.imageHTML === null)
    {
      this.imageHTML = this.deviceType.getImageHTML();
    }
    
    return this.imageHTML;
  },
  
  /**
   * Liefert die Ids der Programme, die mindestens einen Kanal des Geräts verwenden
   **/
  listProgramIds: function()
  {
    return homematic("Device.listProgramIds", {id: this.id});
  },
  
  /**
   * Ermittelt, ob das Gerät direkte Verknüpfungen oder Programme besitzt.
   **/
  hasLinksOrPrograms: function(callback)
  {
    return homematic("Device.hasLinksOrPrograms", {id: this.id}, callback);
  },
  
  /**
   * Asynchron. Versucht ein Gerät zu löschen.
   **/
  remove: function(flags, callback)
  {
    var _this_     = this;
    var _callback_ = callback;
    
    homematic("Interface.deleteDevice", {
      "interface": this.interfaceName,
      address:     this.address,
      flags:       flags
    }, function(result, error) {
      if (result === true)
      {
        // DeviceList.removeDevice(_this_);
      }
      if (_callback_) { _callback_(result, error); }
    });
  }
  
});
/**
 * devicelist.js
 * Geräteliste.
 **/

/**
 * Geräteliste.
 **/
DeviceList = Singleton.create({

  /**
   * Konstruktor
   **/
  initialize: function()
  {
    this.m_addRoomHandler = this.m_onAddRoom.bind(this);
    this.m_removeRoomHandler = this.m_onRemoveRoom.bind(this);
    this.m_addChannelToRoomHandler      = this.m_onAddChannelToRoom.bind(this);
    this.m_removeChannelFromRoomHandler = this.m_onRemoveChannelFromRoom.bind(this);
    
    this.m_addSubsectionHandler = this.m_onAddSubsection.bind(this);
    this.m_removeSubsectionHandler = this.m_onRemoveSubsection.bind(this);
    this.m_addChannelToSubsectionHandler      = this.m_onAddChannelToSubsection.bind(this);
    this.m_removeChannelFromSubsectionHandler = this.m_onRemoveChannelFromSubsection.bind(this);

    this.addEvent    = new eQ3.Event();
    this.removeEvent = new eQ3.Event();
    
    this.devices  = {};
    this.channels = {};
    this.groups   = {};
  },
  
  /**
   * Aktualisiert ein Gerät
   **/
  updateDevice: function(data, callback)
  {
    var device;
    
    if (data !== null)
    {
      var id = data["id"];
      device = this.devices[id];

      if (typeof(device) != "undefined") 
      {
        device.update(data); 
      }
      else
      {
        device =  new Device(data); 
        this.devices[id] = device;
        this.addEvent.fire(this, {device: device});
      }
    }
    
    if (callback) { callback(); }
    return device;
  },
  
  /**
   * Aktualisiert einen Kanal
   **/
  updateChannel: function(device, data)
  {
    var channel;
    
    if (data !== null)
    {
      var id  = data["id"];
      channel = this.channels[id];
      
      if (typeof(channel) != "undefined") 
      { 
        channel.update(device, data); 
      }
      else
      { 
        channel = new Channel(device, data); 
        this.channels[id] = channel; 
      }
    }
    
    return channel;
  },
  
  /**
   * Aktualisiert eine Kanalgruppe
   **/
  updateChannelGroup: function(device, channel)
  {
    var id = channel.groupId;
    var group  = this.groups[id];
      
    if (typeof(group) != "undefined") 
    {
      group.update(device, channel); 
    }
    else
    {
      group = new ChannelGroup(device, channel);
      this.groups[id] = group;
    }
    
    return group;
  },
  
  /**
   * Entfernt ein Gerät aus dem Datenmodell
   **/
  removeDevice: function(device)
  {
    // alert("removeDevice: " + device.id);
  
    delete this.devices[device.id];
    device.groups.each(function(group) { delete this.groups[group.id]; }, this);
    device.channels.each(function(channel) { delete this.channels[channel.id]; }, this);
    
    this.removeEvent.fire(this, {device: device});
  },

  /**
   * Liefert die Liste aller Geräte.
   **/
  listDevices: function()
  {
    return Object.values(this.devices);
  },
  
  /**
   * Liefert die Liste aller Kanalgruppen.
   **/
  listChannelGroups: function()
  {
    return Object.values(this.groups);
  },
  
  /**
   * Liefert die Liste aller Kanäle.
   **/
  listChannels: function()
  {
    return Object.values(this.channels);
  },
  
  /**
   * Liefert die Liste aller Kanäle ohne Gruppen-Partner.
   **/
  listSingleChannels: function()
  {
    var singles = new Array();
    for (var id in m_devices) { singles = singles.concat(m_devices[id].SingleChannels()); }
    return singles;
  },
  
  /**
   * Lädt die Geräteliste erneut
   **/
  reload: function(loader)
  {
    eQ3.HomeMatic.Event.subscribe("delete", function(type, data) {
      var address = data;
      var device = DeviceList.getDeviceByAddress(address);
      
      if (device) { DeviceList.removeDevice(device); }
    });
    RoomList.addEvent.add(this.m_addRoomHandler);
    RoomList.removeEvent.add(this.m_removeRoomHandler);
    SubsectionList.addEvent.add(this.m_addSubsectionHandler);
    SubsectionList.removeEvent.add(this.m_removeSubsectionHandler);
  
    var _loader_ = loader;
    var _this_   = this;
    var _ids_    = [];
    var current = 0;

    var typeCCU1 = "HM-CCU-1";
    
    var loadNext = function()
    {
      if (current < _ids_.length)
      {
        _this_.beginUpdateDevice(_ids_[current], loadNext);
        current++;
        _loader_.reportLoadingState(current / _ids_.length);
      }
      else
      {
        _loader_.ready();
      }
    };
    
    this.devices  = {};
    this.channels = {};
    this.groups   = {};

    var self=this;
    homematic("Device.listAllDetail", null, function(deviceList) {
      // alert("after listAllDetail devices: " + deviceList);
      jQuery.each(deviceList, function (index, data) {
      // console.dir (data);
        if (data !== null && (data["type"] != typeCCU1))
        {
          var id = data["id"];
          device = self.devices[id];

          if (typeof(device) != "undefined")
          {
            device.update(data);
          }
          else
          {
            device =  new Device(data);
            self.devices[id] = device;
            self.addEvent.fire(this, {device: device});
          }
        }
      });
      loader.ready();
    });
/**
    homematic("Device.listAll", null, function(ids) {
      if (ids !== null)
      {
        _ids_ = ids;
        loadNext();
      }
      else
      {
        loader.ready();
      }
    });
  */
  },
  
  /**
   * Startet die Akualisierung eines Geräts.
   **/
  beginUpdateDevice:function(id, callback)
  {
    var _this_ = this;
    var _callback_ = callback;
    
    homematic("Device.get", {"id": id}, function(data) { _this_.updateDevice(data, _callback_); });
  },
  
  /**
   * Liefert ein Gerät anhand seiner Id.
   **/
  getDevice: function(id)
  {
    return this.devices[id];
  },
  
  /**
   * Liefert ein Gerät anhand seiner Seriennummer.
   **/
  getDeviceByAddress: function(address)
  {
    for (var id in this.devices)
    {
      var device = this.devices[id];
      if (device.address == address)
      {
        return device;
      }
    }
    
    return undefined;
  },
  
  /**
   * Liefert eine Kanalgruppe anhand ihrer Id
   **/
  getChannelGroup: function(id)
  {
    return this.groups[id];
  },
  
  /**
   * Liefert einen Kanal anhand seiner Id.
   **/
  getChannel: function(id)
  {
    return this.channels[id];
  },
  
  /**
   * Liefert einen Kanal anhand seiner Seriennummer.
   **/
  getChannelByAddress: function(address)
  {
    for (var id in this.channels)
    {
      var channel = this.channels[id];
      if (channel.address == address)
      {
        return channel;
      }
    }
    
    return undefined;  
  },
  
  /**
   * Event-Handler. 
   * Wird aufgerufen, sobald ein Raum hinzugefügt wurde.
   **/
  m_onAddRoom: function(roomList, eventArgs)
  {
    var room = eventArgs.room;
    room.addChannelEvent.add(this.m_addChannelToRoomHandler);
    room.removeChannelEvent.add(this.m_removeChannelFromRoomHandler);
    
    room.channelIds.each(function(id) {
      var channel = DeviceList.getChannel(id);
      if (channel) { channel.addToRoom(room); }
    });
  },
  
  /**
   * Event-Handler.
   * Wird aufgerufen, sobald ein Raum gelöscht wurde.
   **/
  m_onRemoveRoom: function(roomList, eventArgs)
  {
    var room = eventArgs.room;
    room.addChannelEvent.add(this.m_addChannelToRoomHandler);
    room.removeChannelEvent.add(this.m_removeChannelFromRoomHandler);
    
    room.channelIds.each(function(id) {
      var channel = DeviceList.getChannel(id);
      if (channel) { channel.removeFromRoom(room); }
    });
  },
  
  /**
   * Event-Handler.
   * Wird aufgerufen, sobald ein Kanal einem Raum hinzugefügr wurde.
   **/
  m_onAddChannelToRoom: function(room, eventArgs)
  {
    var channel = this.channels[eventArgs.channelId];
    if (channel) { channel.addToRoom(room); } 
  },
  
  /**
   * Event-Handler.
   * Wird aufgerufen, sobald ein Kanal aus einem Raum entfernt wurde.
   **/
  m_onRemoveChannelFromRoom: function(room, eventArgs)
  {
    var channel = this.channels[eventArgs.channelId];
    if (channel) { channel.removeFromRoom(room); }
  },
  
  /**
   * Event-Handler.
   * Wird aufgerufen, sobald ein neues Gewerk hinzugefügt wurde.
   **/
  m_onAddSubsection: function(subsectionList, eventArgs)
  {
    var subsection = eventArgs.subsection;
    subsection.addChannelEvent.add(this.m_addChannelToSubsectionHandler);
    subsection.removeChannelEvent.add(this.m_removeChannelFromSubsectionHandler);
    
    subsection.channelIds.each(function(id) {
      var channel = DeviceList.getChannel(id);
      if (channel) { channel.addToSubsection(subsection); }
    });
  },
  
  /**
   * Event-Handler.
   * Wird aufgerufen, sobald ein Gewerk gelöscht wurde.
   **/
  m_onRemoveSubsection: function(subsectionList, eventArgs)
  {
    var subsection = eventArgs.subsection;
    subsection.addChannelEvent.add(this.m_addChannelToSubsectionHandler);
    subsection.removeChannelEvent.add(this.m_removeChannelFromSubsectionHandler);
    
    subsection.channelIds.each(function(id) {
      var channel = DeviceList.getChannel(id);
      if (channel) { channel.removeFromSubsection(subsection); }
    });  
  },
  
  /**
   * Event-Handler.
   * Wird aufgerufen, sobald ein Kanal einem Gewerk hinzugefügt wurde.
   **/
  m_onAddChannelToSubsection: function(subsection, eventArgs)
  {
    var channel = this.channels[eventArgs.channelId];
    if (channel) { channel.addToSubsection(subsection); } 
  },
  
  /**
   * Event-Handler.
   * Wird aufgerufen, sobald ein Kanal aus einem Gewerk entfernt wurde.
   **/
  m_onRemoveChannelFromSubsection: function(subsection, eventArgs)
  {
    var channel = this.channels[eventArgs.channelId];
    if (channel) { channel.removeFromSubsection(subsection); }
  }

});
/**
 * layer.js
 * Ebenen
 **/

/**
 * Ebenenverwaltung.
 **/ 
Layer = new function()
{
  /*####################*/
  /*# Private Elemente #*/
  /*####################*/
  
  var Z_INDEX_INCR = 100;    // Inkrement für den Ebenenindex
  
  var m_container = null;   // Container für die Ebenen
  var m_maxIndex  = 0;      // Maximal vergebener Index
  var m_layer     = {};     // Speichert die Indizes aller Ebenen
  
  /**
   * Ermittelt den maximalen Z-Index.
   **/
  var getMaxIndex = function()
  {
    var maxIndex = 0;
    
    for (id in m_layer)
    {
      var index = m_layer[id];
      if (index > maxIndex) { maxIndex = index; }
    }
    
    return maxIndex;
  };
  
  /*########################*/
  /*# Öffentliche Elemente #*/
  /*########################*/
  
  /**
   * Initialisiert die Ebenenverwaltung.
   **/
  this.init = function()
  {
    m_container = document.createElement("div");
    m_maxIndex  = 0;
    m_layer     = {};
    
    Element.addClassName(m_container, "LayerContainer");
    $("body").appendChild(m_container);
  };
  
  /**
   * Fügt eine Ebene hinzu.
   **/
  this.add = function(layer)
  {
    m_maxIndex     = getMaxIndex() + Z_INDEX_INCR;
    layer._layerId = m_maxIndex;
    m_layer[layer._layerId] = m_maxIndex;
    
    Element.setStyle(layer, {"zIndex": m_maxIndex, "position": "absolute"});
    m_container.appendChild(layer);    
  };
  
  /**
   * Entfernt eine Ebene.
   **/
  this.remove = function(layer)
  {
    try {
      delete(m_layer[layer._layerId]);
      m_maxIndex = getMaxIndex();
      m_container.removeChild(layer);
    } catch(e) {};
  };
  
}();
/**
 * dialogbox.js
 * Autor: Falk Werner, eQ-3 Entwicklung GmbH
 **/
 
/**
 * Allgmeine Dialogbox für die Kommunikation mit dem Benutzer.
 **/
DialogBox = function(callback, width, height)
{
  /*####################*/
  /*# Private Elemente #*/
  /*####################*/
 
  var DEFAULT_CONTENT_WIDTH  = 320; // Konstante. Standardbreite des Arbeitsbereichs
  var DEFAULT_CONTENT_HEIGHT = 80;  // Konstante. Standardhöhe des Arbeitsbereichs
  var TITLE_HEIGHT           = 20;  // Konstante. Höhe der Titelleiste  
  var FOOTER_HEIGHT          = 40;  // Konstante. Höhe der Fußleiste
  var BORDER_WIDTH           = 2;   // Konstante. Breite des Dialog-Rahmens
  var BUTTON_HEIGHT          = 32;  // Konstante. Höhe eines Buttons
  var BUTTON_WIDTH           = 100; // Konstante. Breite eines Buttons
  var BUTTON_BORDER          = 1;   // Konstante. Rahmenbreite eines Buttons
 
  var m_wrapper;              // DOM-Element. Dialog-Hintergrund
  var m_dialog;               // DOM-Element. Dialogfenster
  var m_title;                // DOM-Element. Dialog-Titel
  var m_content;              // DOM-Element. Inhalt
  var m_footer;               // DOM-Element. Fußleiste
  var m_callback = callback;  // Rückruffunktion
    
  /**
   * Interne Klasse.
   **/
  var DialogBoxButton = function(caption, dialogResult, style)
  {    
    /*####################*/
    /*# Private Elemente #*/
    /*####################*/
    
    var m_button;                       // DOM-Element. Button
    var m_caption;                      // DOM-Element. Beschriftung
    var m_onClickListener;              // onClick-Ereignis
    var m_dialogResult = dialogResult;  // Rückgabewert
    
    /**
     * onClick-Ereignis-Handler.
     **/
    var onClick = function()
    {
      if (m_callback) { m_callback(dialogResult); }
    };
    
    /*########################*/
    /*# Öffentliche Elemente #*/
    /*########################*/
    
    /**
     * Setzt die Beschriftung des Buttons.
     **/
    this.setCaption = function(caption)
    {
      if ("undefined" != typeof(caption))
      {
        m_caption.innerHTML = "";
        m_caption.appendChild(document.createTextNode(caption));
      }  
    };
    
    /**
     * Ermittelt das DOM-Element.
     **/
    this.getElement = function()
    {
      return m_button;
    };
    
    /*###################*/
    /*# Initialisierung #*/
    /*###################*/
    
    // Button-Style
    if ("undefined" == typeof(style["width"])) { style["width"] = BUTTON_WIDTH + "px"; }
    if ("undefined" == typeof(style["float"])) { style["float"] = "left"; }
    style["height"] = BUTTON_HEIGHT + "px";
    style["margin"] = parseInt((FOOTER_HEIGHT - BUTTON_HEIGHT) / 2) + "px";
    
    // Button-Beschriftung
    m_caption = document.createElement("div");
    Element.addClassName(m_caption, "DialogButtonCaption");
    Element.setStyle(m_caption, 
    {
      "margin"    : BUTTON_BORDER + "px",
      "lineHeight": (BUTTON_HEIGHT - (2 * BUTTON_BORDER)) + "px"
    });
    m_caption.appendChild(document.createTextNode(caption));
      
    // Button-Element
    var margin = parseInt((FOOTER_HEIGHT - BUTTON_HEIGHT - (2 * BUTTON_BORDER)) / 2);
    m_button = document.createElement("div");
    Element.addClassName(m_button, "DialogButton");
    Element.setStyle(m_button, style);
    m_button.appendChild(m_caption);    
  
    // Event-Handler
    m_onClickListener = onClick.bindAsEventListener(this);
    Event.observe(m_caption, "click", m_onClickListener);
  };
  
  /*########################*/
  /*# Öffentliche Elemente #*/
  /*########################*/
  
  /**
   * Zeigt die Dialogbox an.
   **/
  this.show = function()
  {
    Layer.add(m_wrapper);
    m_wrapper.show();
  };
  
  /**
   * Schließt die Dialogbox und entfernt sie aus dem DOM.
   **/
  this.close = function()
  {
    Layer.remove(m_wrapper);
  };
    
  /**
   * Setzt den Titel der Dialogbox.
   **/
  this.setTitle = function(title)
  {
    m_title.innerHTML = "";
    m_title.appendChild(document.createTextNode(title));
  };
  
  /**
   * Setzt den Inhalt der Dialogbox mit einem HTML-Text.
   **/
  this.setContentHTML = function(contentHTML)
  {
    m_content.innerHTML = contentHTML;
  };
  
  /**
   * Setzt den Inhalt der Dialogbox mit einem DOM-Element.
   **/
  this.setContent = function(content)
  {
    m_content.innerHTML = "";
    m_content.appendChild(content);
  };
  
  /**
   * Fügt dem Dialog einen Button hinzu.
   **/
  this.addButton = function(caption, dialogResult, style)
  {
    var button = new DialogBoxButton(caption, dialogResult, style);
    m_footer.appendChild(button.getElement());    
    
    return button;
  };
    
  /*###################*/
  /*# Initialisierung #*/
  /*###################*/

  var contentHeight = DEFAULT_CONTENT_HEIGHT;
  var contentWidth  = DEFAULT_CONTENT_WIDTH;
  if ("undefined" != typeof(height)) { contentHeight = height; }
  if ("undefined" != typeof(width )) { contentWidth  = width;  }
  
  var dialogWidth  = contentWidth + (2 * BORDER_WIDTH);
  var dialogHeight = contentHeight + TITLE_HEIGHT + FOOTER_HEIGHT + (4 * BORDER_WIDTH); 
  
  // Titelleiste
  m_title = document.createElement("div");
  Element.addClassName(m_title, "DialogBoxTitle");
  Element.setStyle(m_title, 
  {
    "top"   : BORDER_WIDTH + "px",
    "left"  : BORDER_WIDTH + "px",
    "width" : contentWidth + "px",
    "height": TITLE_HEIGHT + "px"
  });
  
  // Arbeitsbereich
  m_content = document.createElement("div");
  Element.addClassName(m_content, "DialogBoxContent");
  Element.setStyle(m_content, 
  {
    "top"   : TITLE_HEIGHT + (2 * BORDER_WIDTH) + "px",
    "left"  : BORDER_WIDTH + "px",    
    "width" : contentWidth + "px",
    "height": contentHeight + "px"
  });
  
  // Fußleiste
  m_footer = document.createElement("div");
  Element.addClassName(m_footer, "DialogBoxFooter");
  Element.setStyle(m_footer, 
  {
    "top"   : TITLE_HEIGHT + contentHeight + (3 * BORDER_WIDTH) + "px",
    "left"  : BORDER_WIDTH + "px",
    "width" : contentWidth + "px",
    "height": FOOTER_HEIGHT + "px"
  });
  
  // Dialog
  m_dialog = document.createElement("div");
  Element.addClassName(m_dialog, "DialogBox");
  Element.setStyle(m_dialog,   
  {
    "top"   : parseInt((WebUI.getHeight() - dialogHeight) / 2) + "px",
    "left"  : parseInt((WebUI.getWidth()  - dialogWidth)  / 2) + "px",
    "width" : dialogWidth + "px",
    "height": dialogHeight + "px"
  });
  m_dialog.appendChild(m_title);
  m_dialog.appendChild(m_content);
  m_dialog.appendChild(m_footer);
  new Draggable(m_dialog);
  
  // Dialog-Rahmen
  m_wrapper = document.createElement("div");
  Element.addClassName(m_wrapper, "DialogBoxWrapper");
  m_wrapper.appendChild(m_dialog);  
};
 
/**
 * DialogResult
 * Vordefinierte Rückgabewerte der DialogBox.
 **/ 
DialogResult = 
{
  "ABORT" : -1,    
  "CANCEL": -2,   
  "IGNORE": -3,
  "NO"    : -4,
  "NONE"  : -5,
  "OK"    : -6,
  "RETRY" : -7,
  "YES"   : -8
};

/**
 * messagebox.js
 * Autor: Falk Werner, eQ-3 Entwicklung GmbH
 **/
 

MessageBox = Class.create({

	initialize: function()
	{
    var screenWidth  = WebUI.getWidth();
    var screenHeight = WebUI.getHeight();
    var frameWidth   = MessageBox.DEFAULT_CONTENT_WIDTH + 20;
    var frameHeight  = MessageBox.DEFAULT_CONTENT_HEIGHT + 50;
    var frameX       = parseInt((screenWidth  - frameWidth)  / 2);
    var frameY       = parseInt((screenHeight - frameHeight) / 2);

    this.screenWidth = screenWidth;
    this.screenHeight = screenHeight;
		this.m_action = null;
    this.frameWidth = frameWidth;
    this.frameHeight = frameHeight;
		
		this.m_layer = document.createElement("div");

		this.m_layer.className = "DialogLayer";
		
		this.m_content = new UI.Text()
			.setText("")
			.setPosition(10, 10)
			.setWidth(this.frameWidth - 20)
			.setHeight(this.frameHeight - 50);
			
		this.m_okButton = new UI.Button()
			.setPosition(parseInt((this.frameWidth - 150) / 2), this.frameHeight - 30)
			.setText("OK")
			.setAction(this.ok, this);
			
		this.m_frame = new UI.Frame()
			.setTitle("Info")
			.setContentSize(this.frameWidth, this.frameHeight)
			.setPosition(frameX, frameY)
			.add(this.m_content)
			.add(this.m_okButton);
			
		this.m_layer.appendChild(this.m_frame.getElement());
		Layer.add(this.m_layer);
	
	},

  setId: function(id)
  {
    this.m_layer.id = id;
    return this;
  },

  centerBarGraph: function(id)
  {
     jQuery("#" + id).css("padding-left" , parseInt((this.frameWidth - 150) / 2));
  },

	setTitle: function(title)
	{
		this.m_frame.setTitle(title);
		return this;
	},
	
	setContentSize: function(width, height)
	{
		this.m_content.setWidth(width);
		this.m_frame.setContentSize(parseInt(width) + 20, parseInt(height) + 50);
		this.m_content.setWidth(width);
    this.m_content.setHeight(height);
		this.m_okButton.setPosition(parseInt(((width - 140) / 2)), parseInt(height) + 10);
    this.m_frame.setPosition(parseInt((this.screenWidth  - width)  / 2),parseInt((this.screenHeight - height) / 2) );
		return this;
	},

  hideOkButton: function()
  {
    jQuery(".UIButton").hide();
  },

	setText: function(text)
	{
		this.m_content.setText(text);
		return this;
	},
	
	setHtml: function(html)
	{
		this.m_content.setHtml(html);
		return this;
	},
	
	setAction: function(action, context)
	{
		if (typeof(context) != "undefined") { this.m_action = action.bind(context); }
		else { this.m_action = action; }
		
		return this;
	},
	
	ok: function()
	{
		Layer.remove(this.m_layer);
		if (typeof this.m_action == "function") { this.m_action(); }
	}

});

MessageBox.DEFAULT_CONTENT_HEIGHT = 80;
MessageBox.DEFAULT_CONTENT_WIDTH  = 320; 

MessageBox.show = function(title, content, callback, width, height, id, barGraphId)
{
	var msgBox = new MessageBox()
		.setTitle(title)
		.setHtml(content);
    
    translatePage(".DialogLayer");
	
	if (callback && callback != "")
	{ 
		msgBox.setAction(callback); 
	}

	if ((width && width != "") && (height && height != ""))
	{
		msgBox.setContentSize(width, height);
	}

  if (id) {
    msgBox.setId(id);
  }

  if (barGraphId) {
    msgBox.hideOkButton();
    msgBox.centerBarGraph(barGraphId);
  }

};


/**
 * yesnodialog.js
 **/
 
/**
 * Dialogbox mit den Schaltflächen "Ja" und "Neine"
 * Normalerweise wird als content Text übergeben,
 * wenn contentType 'html' gesetzt ist, kann auch HTML übergeben werden.
 * Die Höhe des Dialoges sollte sich dynamisch der Contentgröße anpassen.
 **/
YesNoDialog = Class.create({
 
  initialize: function(title, content, callback, contentType)
  {
    var _this_ = this;

    this.m_contentType = contentType;
    this.m_callback = callback;
    this.m_layer = document.createElement("div");
    this.m_layer.className = "YesNoDialogLayer"; 

    var dialog = document.createElement("div");
    dialog.className = "YesNoDialog";
    
    var titleElement = document.createElement("div");
    titleElement.className = "YesNoDialogTitle";
    titleElement.appendChild(document.createTextNode(title));
    titleElement.onmousedown = function(event) { new Drag(this.parentNode, event); };
    dialog.appendChild(titleElement);
    
    var contentWrapper = document.createElement("div");
    contentWrapper.className = "YesNoDialogContentWrapper";
    
    var contentElement = document.createElement("div");
    contentElement.className = "YesNoDialogContent";

    if (this.m_contentType == "html") {
      contentElement.innerHTML = content;
    } else {
      contentElement.appendChild(document.createTextNode(content));
    }

    contentWrapper.appendChild(contentElement);
    
    dialog.appendChild(contentWrapper);

    var footer = document.createElement("div");
    footer.className= "YesNoDialogFooter";
    
    var yesButton = document.createElement("div");
    yesButton.className = "YesNoDialog_yesButton borderRadius5px colorGradient50px";
    yesButton.appendChild(document.createTextNode(translateKey('dialogYes')));
    yesButton.onclick = function() { _this_.yes(); };
    footer.appendChild(yesButton);
    
    var noButton = document.createElement("div");
    noButton.className = "YesNoDialog_noButton borderRadius5px colorGradient50px";
    noButton.appendChild(document.createTextNode(translateKey('dialogNo')));
    noButton.onclick = function() { _this_.no(); };
    footer.appendChild(noButton);
    
    dialog.appendChild(footer);
    
    this.m_layer.appendChild(dialog);
    
    Layer.add(this.m_layer);

    //AG sorgt dafür, daß die Dialoghöhe sich dynamisch dem Content anpasst.
    jQuery(".YesNoDialog").css("height", jQuery(".YesNoDialogContentWrapper").height() + 78);
    jQuery(".YesNoDialogFooter").css("top", jQuery(".YesNoDialogContentWrapper").height() + 26);


  },
    
  close: function(result)
  {
    Layer.remove(this.m_layer);
    if (this.m_callback) { this.m_callback(result); }
  },
  
  yes: function()
  {
    this.close(YesNoDialog.RESULT_YES);
  },
  
  no: function()
  {
    this.close(YesNoDialog.RESULT_NO);
  }
  
});

YesNoDialog.RESULT_NO = 0;
YesNoDialog.RESULT_YES = 1;
/**
 * euladialog.js
 **/
 
/**
 * Dialogbox mit den Schaltflächen "Ja" und "Neine"
 * Normalerweise wird als content Text übergeben,
 * wenn contentType 'html' gesetzt ist, kann auch HTML übergeben werden.
 * Die Höhe des Dialoges sollte sich dynamisch der Contentgröße anpassen.
 **/
EulaDialog = Class.create({
 
  initialize: function(title, content, callback, contentType)
  {
    var _this_ = this;

    this.m_contentType = contentType;
    this.m_callback = callback;
    this.m_layer = document.createElement("div");
    this.m_layer.className = "EulaDialogLayer"; 

    var dialog = document.createElement("div");
    dialog.className = "EulaDialog";
    
    var titleElement = document.createElement("div");
    titleElement.className = "EulaDialogTitle";
    titleElement.appendChild(document.createTextNode(title));
    titleElement.onmousedown = function(event) { new Drag(this.parentNode, event); };
    dialog.appendChild(titleElement);
    
    var contentWrapper = document.createElement("div");
    contentWrapper.className = "EulaDialogContentWrapper";
    
    var contentElement = document.createElement("div");
    contentElement.className = "EulaDialogContent";

    if (this.m_contentType == "html") {
      contentElement.innerHTML = content;
    } else {
      contentElement.appendChild(document.createTextNode(content));
    }

    contentWrapper.appendChild(contentElement);
    
    dialog.appendChild(contentWrapper);

    var footer = document.createElement("div");
    footer.className= "EulaDialogFooter";

    var chkBox = document.createElement("div");
    chkBox.className = "EulaDialog_checkBox";

    var yesCheckBox = document.createElement("input");
    yesCheckBox.type = "checkBox";
    yesCheckBox.id = "eulaReadId";
    chkBox.appendChild(yesCheckBox);

    chkBox.appendChild(document.createTextNode(translateKey('acceptEula')));

    yesCheckBox.onchange = function() {
      if (jQuery(this).is(":checked")) {
        jQuery("#yesBtn").show();
      } else {
        jQuery("#yesBtn").hide();
      }
    };

    footer.appendChild(chkBox);

    var yesButton = document.createElement("div");
    yesButton.className = "EulaDialog_yesButton borderRadius5px colorGradient50px";
    yesButton.id = "yesBtn";
    yesButton.appendChild(document.createTextNode(translateKey('dialogEulaBtnInstall')));
    yesButton.onclick = function() { _this_.yes(); };
    footer.appendChild(yesButton);


    var noButton = document.createElement("div");
    noButton.className = "EulaDialog_noButton borderRadius5px colorGradient50px";
    noButton.appendChild(document.createTextNode(translateKey('dialogEulaBtnCancel')));
    noButton.onclick = function() { _this_.no(); };
    footer.appendChild(noButton);
    
    dialog.appendChild(footer);
    
    this.m_layer.appendChild(dialog);
    
    Layer.add(this.m_layer);

    if (jQuery(".EulaDialogContentWrapper").height() >= 400) {
      jQuery(".EulaDialogContentWrapper").css("height", 400);
      jQuery(".EulaDialogContentWrapper").css("overflow", "scroll");
    }

    //AG sorgt dafür, daß die Dialoghöhe sich dynamisch dem Content anpasst.
    jQuery(".EulaDialog").css("height", jQuery(".EulaDialogContentWrapper").height() + 108);
    jQuery(".EulaDialogFooter").css("top", jQuery(".EulaDialogContentWrapper").height() + 26);

    jQuery("#yesBtn").hide();
    this.centerDialog();



  },
    
  close: function(result)
  {
    Layer.remove(this.m_layer);
    if (this.m_callback) { this.m_callback(result); }
  },
  
  yes: function()
  {
    this.close(EulaDialog.RESULT_YES);
  },
  
  no: function()
  {
    this.close(EulaDialog.RESULT_NO);
  },

  centerDialog: function() {
    var dialog = jQuery(".EulaDialog"),
    top = ((jQuery(".EulaDialogLayer").height() / 2) - (jQuery(dialog).height() / 2));
    jQuery(dialog).css({"top":top, "margin-top": ""});
  }

});

EulaDialog.RESULT_NO = 0;
EulaDialog.RESULT_YES = 1;
/**
 * channelchosser.js
 **/
 
/**
 * Einfache Kanalauswahl.
 **/
ChannelChooser = Singleton.create({
  SHOW_READABLE: 0x1,    // zeigt lesbare Kanäle an
  SHOW_WRITABLE: 0x2,    // zeigt schreibbare Kanäle an
  SHOW_EVENTABLE: 0x4,    // zeigt Kanäle mit Ereignisbehandlung an
  SHOW_ALL: 0x7,    // zeigt alle Kanäle an
    
  SORT_FN:  {
    NAME       : function(channels, reverse) { return channels.ex_sortBy("name", reverse); },
    DESCRIPTION: function(channels, reverse) { return channels.ex_sortBy("typeDescription", reverse); },
    ADDRESS    : function(channels, reverse) { return channels.ex_sortBy("address", reverse); },
    ROOM_NAMES : function(channels, reverse) {
      channels.sort(function(a, b) { return Object.ex_compare(a.rooms.ex_joinItem("name"), b.rooms.ex_joinItem("name")); });
      return (reverse) ? channels.reverse() : channels;
    },
    FUNC_NAMES : function(channels, reverse) {
      channels.sort(function(a, b) { return Object.ex_compare(a.subsections.ex_joinItem("name"), b.subsections.ex_joinItem("name")); });
      return (reverse) ? channels.reverse() : channels;
    }
  },
    
  PREFIX: "ChannelChooser",                // Prefix für Ids der Tabellenzeilen
  WRAPPER_ID: "ChannelChooserWrapper",         // Id des Wrapper-Elements
  HIGHLIGHT_CLASS: "ChannelChooserCell_Highlight",  // Klasse für hervorgehobene Tabellenzellen
  
  /**
   * Konstruktor
   **/
  initialize: function()
  {
    this.template = TrimPath.parseTemplate(CHANNELCHOOSER_JST);
  },
    
  /**
   * Wendet alle Filter auf einen Kanal an.
   **/
  match: function(channel)
  {  
    return ((hasUPL(UPL_ADMIN) | channel.isVisible)           &&
        ((this.showReadable  & channel.isReadable)      ||
         (this.showWritable  & channel.isWritable)      ||
         (this.showEventable & channel.isEventable))          &&
      (this.showVirtual | !channel.isVirtual)                 &&
      (this.NameFilter.match(channel.name))                   &&
      (this.DescriptionFilter.match(channel.typeDescription)) &&
      (this.AddressFilter.match(channel.address))             &&
      (this.RoomFilter.matchArray(channel.rooms))             &&
      (this.FuncFilter.matchArray(channel.subsections)));     
  },
  
  /**
   * Filtert eine Kanalliste
   **/
  filter: function(channels)
  {
    var result = new Array();
    
    channels.each(function(channel) {
      if (this.match(channel)) { result.push(channel); }
    }, this);
    
    return result;    
  },
    
  /**
   * Sortiert eine Kanalliste
   **/
  sort: function(channels)
  {
    var sort_fn = this.SORT_FN[this.sortId];
    
    if (typeof(sort_fn) != "undefined") { return sort_fn(channels, this.sortDescend); }
    else                                { return channels; }
  },
    
  /**
   * Schließt das Dialogfenster
   **/
  close: function(result)
  {    
    picDivHide(jg_250);
    Layer.remove(this.layer);
    if (this.callback) { this.callback(result); }
  },
  
  /**
   * Startet die Aktualisierung der Anzeige
   **/
  beginUpdateView: function()
  {
    Element.setStyle(ChannelChooser.layer, {cursor: "wait"});
    window.setTimeout("ChannelChooser.updateView();", 1);  
  },
   
  /**
   * Zeigt den Dialog an
   **/
  show: function(callback, options)
  {
    this.showVirtual   = false;
    this.sortId        = "NAME";
    this.sortDescend   = false;
    this.callback      = callback;
    this.showReadable  = (0 !== (options & this.SHOW_READABLE));
    this.showWritable  = (0 !== (options & this.SHOW_WRITABLE));
    this.showEventable = (0 !== (options & this.SHOW_EVENTABLE));
    

    this.channels = DeviceList.listChannels();
    
    var rooms    = RoomList.list().ex_sortBy("name");
    var funcs    = SubsectionList.list().ex_sortBy("name");
    this.NameFilter        = new StringFilter("ChannelChooser.NameFilter", this.beginUpdateView);
    this.DescriptionFilter = new StringFilter("ChannelChooser.DescriptionFilter", this.beginUpdateView);
    this.AddressFilter     = new StringFilter("ChannelChooser.AddressFilter", this.beginUpdateView);
    this.RoomFilter        = new ListFilter("ChannelChooser.RoomFilter", rooms, this.beginUpdateView);
    this.FuncFilter        = new ListFilter("ChannelChooser.FuncFilter", funcs, this.beginUpdateView);
    
    this.layer    = document.createElement("div");
    this.layer.id = this.WRAPPER_ID;
    Layer.add(this.layer);
      
    this.beginUpdateView();


  },

  /**
   * Wählt einen Kanal aus
   **/
  select: function(str_id)
  {
    var id = str_id.substring(this.PREFIX.length);
    this.close(id);
  },
  
  /**
   * Bricht den Dialog ab
   **/
  abort: function()
  {
    this.close();
  },
  
  /**
   * Setzt die Sortierreihenfolge
   **/
  sortBy: function(sortId)
  {
    if (this.sortId == sortId) { this.sortDescend = !this.sortDescend; }
    else                       { this.sortDescend = false; }
    this.sortId = sortId;
    
    this.beginUpdateView();
  },
  
  /**
   * Blendet virtuelle Kanäle ein bzw. aus
   **/
  toggleVirtualChannels: function()
  {
    this.showVirtual = !this.showVirtual;
    
    this.beginUpdateView();
  },
  
  /**
   * Setzt alle Filter zurück
   **/
  resetFilters: function()
  {
    this.NameFilter.reset();
    this.DescriptionFilter.reset();
    this.AddressFilter.reset();
    this.RoomFilter.reset();
    this.FuncFilter.reset();
    
    this.beginUpdateView();
  },
        
  /**
   * Callback. Aktualisiert die Anzeige.
   **/
  updateView: function()
  {
    Element.setStyle(this.layer, {"cursor": "default"});
    this.layer.innerHTML = this.template.process({
      PREFIX           : this.PREFIX,
      sortId           : this.sortId,
      sortDescend      : this.sortDescend,
      showVirtual      : this.showVirtual,
      nameFilter       : this.NameFilter,
      descriptionFilter: this.DescriptionFilter,
      addressFilter    : this.AddressFilter,
      roomFilter       : this.RoomFilter,
      funcFilter       : this.FuncFilter,
      channels         : this.sort(this.filter(this.channels))
    });
    translateJSTemplate("#ChannelChooserDialog");
    translatePage(".j_rooms, .j_functions");

    // Add extended channel description
    jQuery(".j_extChnDescr").each(function(index){
      try {
        var elmDescr = jQuery(this).text().split("_"),
        type = elmDescr[0],
        ch = elmDescr[1].split(":")[1];
        jQuery(this).html(getExtendedDescription(type, ch));
      } catch(e) {
        conInfo(e);
      }
    });
  }
});
/**
 * multichannelchosser.js
 **/
 
/**
 * Kanal-Mehrfachauswahl.
 **/
MultiChannelChooser = Singleton.create({
  SHOW_READABLE: 0x1,    // zeigt lesbare Kanäle an
  SHOW_WRITABLE: 0x2,    // zeigt schreibbare Kanäle an
  SHOW_EVENTABLE: 0x4,    // zeigt Kanäle mit Ereignisbehandlung an
  SHOW_ALL: 0x7,    // zeigt alle Kanäle an
  
  SORT_FN: {
    NAME       : function(channels, reverse) { return channels.ex_sortBy("name", reverse); },
    DESCRIPTION: function(channels, reverse) { return channels.ex_sortBy("typeDescription", reverse); },
    ADDRESS    : function(channels, reverse) { return channels.ex_sortBy("address", reverse); },
    ROOM_NAMES : function(channels, reverse)
    {
      channels.sort(function(a, b) { return Object.ex_compare(a.rooms.ex_joinItem("name"), b.rooms.ex_joinItem("name")); });
      return (reverse) ? channels.reverse() : channels;
    },
    
    FUNC_NAMES : function(channels, reverse)
    {
      channels.sort(function(a, b) { return Object.ex_compare(a.subsections.ex_joinItem("name"), b.subsections.ex_joinItem("name")); });
      return (reverse) ? channels.reverse() : channels;
    }
  },
  
  PREFIX: "MultiChannelChooser",               
  WRAPPER_ID:      "MultiChannelChooserWrapper",       
  HIGHLIGHT_CLASS: "MultiChannelChooserCell_Highlight",
  
  initialize: function()
  {
    this.template = TrimPath.parseTemplate(MULTI_CHANNELCHOOSER_JST);
  },
  
  /**
   * Wendet alle Filter auf einen Kanal an.
   **/
  match: function(channel)
  {
    return ((!channel._hidden)                                && 
      (hasUPL(UPL_ADMIN) | channel.isVisible)                 &&
        ((this.showReadable  & channel.isReadable)      ||
         (this.showWritable  & channel.isWritable)      ||
         (this.showEventable & channel.isEventable))          &&
      (this.showVirtual | !channel.isVirtual)                 &&
      (this.NameFilter.match(channel.name))                   &&
      (this.DescriptionFilter.match(channel.typeDescription)) &&
      (this.AddressFilter.match(channel.address))             &&
      (this.RoomFilter.matchArray(channel.rooms))             &&
      (this.FuncFilter.matchArray(channel.subsections)));     
  },
  
  /**
   * Filtert eine Kanalliste
   **/
  filter: function(channels)
  {
    var result = new Array();
    
    channels.each(function(channel) {
      if (this.match(channel)) { result.push(channel); }
    }, this);
    
    return result;    
  },
    
  /**
   * Sortiert eine Kanalliste
   **/
  sort: function(channels)
  {
    var sort_fn = this.SORT_FN[this.sortId];
    
    if (typeof(sort_fn) != "undefined") { return sort_fn(channels, this.sortDescend); }
    else                                { return channels; }
  },
  
  /**
   * Startet die Aktualisierung der Anzeige
   **/
  beginUpdateView: function()
  {
    Element.setStyle(MultiChannelChooser.layer, {cursor: "wait"});
    window.setTimeout("MultiChannelChooser.updateView();", 1);
  },
    
  /**
   * Schließt das Dialogfenster
   **/
  close: function(result)
  {    
    picDivHide(jg_250);
    Layer.remove(this.layer);
    if (this.callback) { this.callback(result); }
  },
    
  /**
   * Konstruktor. Versteckter Kanal
   **/
  HiddenChannel: function(id)
  {
    /*####################*/
    /*# Private Elemente #*/
    /*####################*/
    
    var m_id = id;
    
    /*########################*/
    /*# Öffentliche Elemente #*/
    /*########################*/
    
    this._hidden   = true;  // markiert den Kanal als versteckt
    this._selected = true;  // markiert den Kanal als ausgewählt

    /**
     * Liefert die Id des Kanals
     **/
    this.Id = function()
    {
      return m_id;
    };
    
  },
    
  /**
   * Zeigt den Dialog an
   **/
  show: function(title, ids, callback, options)
  {
    this.showVirtual  = false;
    this.sortId       = "NAME";
    this.sortDescend  = false;
    this.callback     = callback;
    this.options      = options;
    this.title        = title;
    this.showReadable  = (0 !== (options & ChannelChooser.SHOW_READABLE));
    this.showWritable  = (0 !== (options & ChannelChooser.SHOW_WRITABLE));
    this.showEventable = (0 !== (options & ChannelChooser.SHOW_EVENTABLE));
      
    this.channels = DeviceList.listChannels();
    this.channels.each(function(channel) {
      channel._selected = ids.ex_contains(channel.id);
      channel._hidden   = false;
    }, this);
    
    // Die Kanäle, die im Posteingang schon einem Raum oder Gewerk zugeordnet
    // wurden, existieren noch nicht in der Geräteliste.
    // Diese Kanäle werden hier als "versteckte" Kanäle behandelt.
    ids.each(function(id) {    
      if (null === DeviceList.getChannel(id)) 
      { 
        this.channels.push(new HiddenChannel(id)); 
      }
    });
    
    var rooms    = RoomList.list().ex_sortBy("name");
    var funcs    = SubsectionList.list().ex_sortBy("name");
    
    this.NameFilter        = new StringFilter("MultiChannelChooser.NameFilter", this.beginUpdateView);
    this.DescriptionFilter = new StringFilter("MultiChannelChooser.DescriptionFilter", this.beginUpdateView);
    this.AddressFilter     = new StringFilter("MultiChannelChooser.AddressFilter", this.beginUpdateView);
    this.RoomFilter        = new ListFilter("MultiChannelChooser.RoomFilter", rooms, this.beginUpdateView);
    this.FuncFilter        = new ListFilter("MultiChannelChooser.FuncFilter", funcs, this.beginUpdateView);
    
    this.layer = document.createElement("div");
    this.layer.id = this.WRAPPER_ID;
    Layer.add(this.layer);
    
    this.beginUpdateView();
  },
  
  /**
   * Wählt einen Kanal aus
   **/
  ok: function()
  {
    var ids = new Array();
    
    this.channels.each(function(channel) {
      if (true === channel._selected) { ids.push(channel.id); }
    });
    
    this.close(ids);
  },
  
  /**
   * Bricht den Dialog ab
   **/
  abort: function()
  {
    this.close();
  },
  
  /**
   * Wählt einen Kanal aus bzw. ab
   **/
  select: function(id, checkBox)
  {
    this.channels.each(function(channel) {
      if (channel.id == id) 
      { 
        channel._selected = checkBox.checked; 
      }
    });
  },
  
  /**
   * Setzt die Sortierreihenfolge
   **/
  sortBy: function(sortId)
  {
    if (this.sortId == sortId) { this.sortDescend = !this.sortDescend; }
    else                       { this.sortDescend = false; }
    this.sortId = sortId;
    
    this.beginUpdateView();
  },
  
  /**
   * Blendet virtuelle Kanäle ein bzw. aus
   **/
  toggleVirtualChannels: function()
  {
    this.showVirtual = !this.showVirtual;
    
    this.beginUpdateView();
  },
  
  /**
   * Setzt alle Filter zurück
   **/
  resetFilters: function()
  {
    this.NameFilter.reset();
    this.DescriptionFilter.reset();
    this.AddressFilter.reset();
    this.RoomFilter.reset();
    this.FuncFilter.reset();
    
    this.beginUpdateView();
  },
  
  /**
   * Callback. Aktualisiert die Anzeige.
   **/
  updateView: function()
  {
    Element.setStyle(this.layer, {"cursor": "default"});
    this.layer.innerHTML = this.template.process({
      PREFIX           : this.PREFIX,
      title            : this.title,
      sortId           : this.sortId,
      sortDescend      : this.sortDescend,
      showVirtual      : this.showVirtual,
      nameFilter       : this.NameFilter,
      descriptionFilter: this.DescriptionFilter,
      addressFilter    : this.AddressFilter,
      roomFilter       : this.RoomFilter,
      funcFilter       : this.FuncFilter,
      channels         : this.sort(this.filter(this.channels))
    });
    translateJSTemplate("#MultiChannelChooserDialog");
    translatePage(".MultiChannelChooserRow");
  }
    
});
/**
 * channelconfig.js
 **/

/**
 * Dialog für Kanaleinstellungen (Name, Räume, Gewerke, Funktionstest)
 **/ 
ChannelConfigDialog = Singleton.create({
  PLUS_IMAGE_SRC: "/ise/img/plus.png",
  MINUS_IMAGE_SRC: "/ise/img/minus.png",
  LAYER_ID: "ChannelConfigDialogLayer",
  NAME_ID: "ChannelConfigDialog_ChannelName",
  USABLE_ID: "ChannelConfigDialog_isUsable",
  VISIBLE_ID: "ChannelConfigDialog_isVisible",
  LOGGED_ID: "ChannelConfigDialog_isLogged",
  MODE_ID: "ChannelConfigDialog_Mode",
  ROOMLIST_ID: "ChannelConfigDialogRooms",
  SUBSECTIONLIST_ID: "ChannelConfigDialogFuncs",
  TEST_RESULT_ID: "ChannelConfigDialogTestResult",
  RESULT_ABORT: 0,
  RESULT_OK: 1,  
  POLL_INTERVAL: 3,
  
  /**
   * Konstruktor
   **/
  initialize: function()
  {
    this.template = TrimPath.parseTemplate(CHANNEL_CONFIG_DIALOG_JST);
  },
  
  /**
   * Zeigt den Konfigurationsdialog an
   **/
  show: function(channel, callback)
  {
    this.m_testId = null;
    this.m_isTestRunning = false;
    
    this.isRoomListVisible = false;
    this.isSubsectionListVisible = false;
    this.channel  = channel;
    this.callback = callback;
    this.layer = document.createElement("div");
    this.layer.id = this.LAYER_ID;
    Layer.add(this.layer);
    this.layer.innerHTML = this.template.process({
      channel: this.channel,
      isRoomListVisible: this.isRoomListVisible,
      isSubsectionListVisible: this.isSubsectionListVisible,
      rooms: RoomList.list().ex_sortBy("name"),
      funcs: SubsectionList.list().ex_sortBy("name")
    });

    if (this.channel.typeName.indexOf("Team") != -1) {
       this.__hideFunctionTest();
    }

    translateJSTemplate("#ChannelConfigDialog");
    translatePage("#ChannelConfigDialogRooms, #ChannelConfigDialogFuncs");
    jQuery("#generalChannelConfigLblSender").val(translateKey("generalChannelConfigLblSender"));
    jQuery("#generalChannelConfigLblReceiver").val(translateKey("generalChannelConfigLblReceiver"));
    jQuery("#generalChannelConfigLblNone").val(translateKey("generalChannelConfigLblNone"));
  },

  __hideFunctionTest: function() {
    jQuery("#channelFunctionTestPanel").hide();
  },

  /**
   * Schließt den Konfigurationsdialog.
   **/
  close: function(result)
  {
    this.m_isTestRunning = false;
    Layer.remove(this.layer);
    if (this.callback) { this.callback(result); }
  },
  
  /**
   * Übernimmt die Änderungen und schließt den Dialog.
   **/
  ok: function()
  {
    if (isTextAllowed($(this.NAME_ID).value))
    {
      var channel = this.channel;
    
      channel.setName($(this.NAME_ID).value);
      channel.setVisibility($(this.VISIBLE_ID).checked);
      channel.setUsability($(this.USABLE_ID).checked);
      channel.setLogging($(this.LOGGED_ID).checked);
      channel.setMode($(this.MODE_ID).options[$(this.MODE_ID).options.selectedIndex].value);
    
      $A($(this.ROOMLIST_ID).values).each(function(item) {
        var room = RoomList.get(item.value);

        if (item.checked === true) { room.addChannel(channel.id, true); }
        else                       { room.removeChannel(channel.id, true); }
      }, this);
    
      $A($(this.SUBSECTIONLIST_ID).values).each(function(item) {
        var subsection = SubsectionList.get(item.value);
      
        if (item.checked === true) { subsection.addChannel(channel.id, true); }
        else                       { subsection.removeChannel(channel.id, true); }
      }, this);
    
      this.close(this.RESULT_OK);
    }
  },
  
  /**
   * Schließt den Dialog ohne die Änderungen zu übernehmen.
   **/
  abort: function()
  {
    this.close(this.RESULT_ABORT);
  },
  
  /**
   * Startet den Funktionstest.
   **/
  startTest: function()
  {
    var _this_ = this;
    
    this.m_isTestRunning = true;
    $(this.TEST_RESULT_ID).setStyle({backgroundColor: WebUI.getColor("testActive")});
    homematic("Channel.startComTest", {id: this.channel.id}, function(testId) {
      _this_.m_testId = testId;
      _this_.pollTest();
    });
  },
  
  /**
   * Callback. Fragt zyklisch das Ergebnis des Funktionstests ab.
   **/
  pollTest: function(timestamp)
  {
    var _this_ = ChannelConfigDialog;
    
    if (typeof(timestamp) == "string")
    {
      var time = timestamp.split(" ")[1];
      $(_this_.TEST_RESULT_ID).setStyle({backgroundColor: WebUI.getColor("testOk")});
      $(_this_.TEST_RESULT_ID).innerHTML = "";
      $(_this_.TEST_RESULT_ID).appendChild(document.createTextNode(time));
      _this_.m_isTestRunning = false;
    }    
    
    if (_this_.m_isTestRunning)
    {
      homematic.delay(_this_.POLL_INTERVAL, "Channel.pollComTest", {
        id    : _this_.channel.id,
        testId: _this_.m_testId
      }, _this_.pollTest);
    }
  },
  
  /**
   * Blendet die Raumliste ein bzw. aus.
   **/
  toggleRooms: function(image)
  {
    if (this.isRoomListVisible === true)
    {
      $(this.ROOMLIST_ID).hide();
      image.src = this.PLUS_IMAGE_SRC;
      this.isRoomListVisible = false;
    }
    else
    {
      $(this.ROOMLIST_ID).show();
      image.src = this.MINUS_IMAGE_SRC;
      this.isRoomListVisible = true;
    }
  },
  
  /**
   * Blendet die Gewerkeliste ein bzw. aus.
   **/
  toggleFuncs: function(image)
  {
    if (this.isSubsectionListVisible === true)
    {
      $(this.SUBSECTIONLIST_ID).hide();
      image.src = this.PLUS_IMAGE_SRC;
      this.isSubsectionListVisible = false;
    }
    else
    {
      $(this.SUBSECTIONLIST_ID).show();
      image.src = this.MINUS_IMAGE_SRC;
      this.isSubsectionListVisible = true;
    }
  }
});
/**
 * deviceconfigdialog.js
 **/

/**
 * Dialog für Kanaleinstellungen (Name, Räume, Gewerke, Funktionstest)
 **/ 
DeviceConfigDialog = Singleton.create({
  LAYER_ID: "DeviceConfigDialogLayer",
  NAME_ID: "DeviceConfigDialog_DeviceName",
  USABLE_ID: "DeviceConfigDialog_isUsable",
  VISIBLE_ID: "DeviceConfigDialog_isVisible",
  LOGGED_ID: "DeviceConfigDialog_isLogged",
  TEST_RESULT_ID: "DeviceConfigDialogTestResult",
  RESULT_OK: 1,
  RESULT_ABORT: 0,
  POLL_INTERVAL: 3,
  
  /**
   * Konstruktor
   **/
  initialize: function()
  {
    this.template = TrimPath.parseTemplate(DEVICE_CONFIG_DIALOG_JST);
  },
  
  /**
   * Zeigt den Konfigurationsdialog an
   **/
  show: function(device, callback)
  {
    this.m_testId = null;
    this.m_isTestRunning = false;
    
    this.device  = device;
    this.isVisibilityChanged = false;
    this.isUsabilityChanged = false;
    this.isLoggingChanged = false;   
    this.callback = callback;
    this.layer = document.createElement("div");
    this.layer.id = this.LAYER_ID;
    Layer.add(this.layer);
    this.layer.innerHTML = this.template.process({
      device: this.device
    });
    if (this.device.typeName.indexOf("Team") != -1) {
       this.__hideFunctionTest();
    }
    translateJSTemplate("#DeviceConfigDialog");
  },

  __hideFunctionTest: function() {
    jQuery("#deviceFunctionTestPanel").hide();
  },

  /**
   * Schließt den Konfigurationsdialog.
   **/
  close: function(result)
  {
    this.m_isTestRunning = false;
    Layer.remove(this.layer);
    if (this.callback) { this.callback(result); }
  },
  
  /**
   * Übernimmt die Änderungen und schließt den Dialog.
   **/
  ok: function()
  {
    if (isTextAllowed($(this.NAME_ID).value))
    {
      this.device.setName($(this.NAME_ID).value);

      var isVisible = $(this.VISIBLE_ID).checked;
      var isUsable  = $(this.USABLE_ID).checked;
      var isLogged  = $(this.LOGGED_ID).checked;   
      this.device.channels.each(function(channel) {
        if (this.isVisibilityChanged) { channel.setVisibility(isVisible); }
        if (this.isUsabilityChanged) { channel.setUsability(isUsable); }
        if (this.isLoggingChanged) { channel.setLogging(isLogged); }
      }, this);
    
      this.close(this.RESULT_OK);
    }
  },
  
  /**
   * Schließt den Dialog ohne die Änderungen zu übernehmen.
   **/
  abort: function()
  {
    this.close(this.RESULT_ABORT);
  },
  
  /**
   * Startet den Funktionstest.
   **/
  startTest: function() {
      var _this_ = this;
      this.m_isTestRunning = true;
      $(this.TEST_RESULT_ID).setStyle({backgroundColor: WebUI.getColor("testActive")});
      homematic("Device.startComTest", {id: this.device.id}, function (testId) {
        _this_.m_testId = testId;
        _this_.pollTest();
      });
  },
  
  /**
   * Callback. Fragt zyklisch das Ergebnis des Funktionstests ab.
   **/
  pollTest: function(timestamp)
  {
    var _this_ = DeviceConfigDialog;
    
    if (typeof(timestamp) == "string")
    {
      var time = timestamp.split(" ")[1];
      $(_this_.TEST_RESULT_ID).setStyle({backgroundColor: WebUI.getColor("testOk")});
      $(_this_.TEST_RESULT_ID).innerHTML = "";
      $(_this_.TEST_RESULT_ID).appendChild(document.createTextNode(time));
      _this_.m_isTestRunning = false;
    }
    
    if (_this_.m_isTestRunning)
    {
      homematic.delay(_this_.POLL_INTERVAL, "Device.pollComTest", {
        id    : _this_.device.id,
        testId: _this_.m_testId
      }, _this_.pollTest);
    }
  }
  
});
/**
 * deletedevicedialog.js
 **/

/**
 * Ablauf:
 *   1) Prüfe, ob direkte Verknüpfungen oder Programme bestehen
 *   2) Anwender muss bestätigen, ob er das Gerät wirklich löschen möchte
 *      --> dabei wird angezeigt, on direkte Verknüpfungen oder Programme bestehen
 *      --> der Anwender wählt eine Löschoption:
 *          - nur ablernen
 *          - in Werkzustand zurücksetzen
 *   3) Falls das Gerät gelöscht werden soll, wird nun der Löschvorgang durchgeführt
 *   4) Falls der Löschvorgang fehlgeschlagen ist, kann der Anwender wählen:
 *      - erneute löschen
 *      - später automatisch löschen
 *      - löschen, auch wenn nicht erreichbar
 *      - abbrechen (nicht löschen)
 */

/**
 * "Bitte warten...", "Prüfe Programme und direkte Verknüpfungen..."
 **/
CheckLinksAndProgramsWindow = Class.create({

  initialize: function(device, callback)
  {
    var onResultHandler = this.m_onResult.bind(this);
    var screenWidth  = WebUI.getWidth();
    var screenHeight = WebUI.getHeight();
    var frameWidth   = CheckLinksAndProgramsWindow.CONTENT_WIDTH;
    var frameHeight  = CheckLinksAndProgramsWindow.CONTENT_HEIGHT;
    var frameX = parseInt((screenWidth  - frameWidth ) / 2);
    var frameY = parseInt((screenHeight - frameHeight) / 2);

    CheckLinksAndProgramsWindow.TITLE = translateKey("CheckLinksAndProgramsWindowTitle");
    CheckLinksAndProgramsWindow.CONTENT = "<img src='/ise/img/ajaxload_white.gif' style='float:left;margin-right:10px' />" + translateKey("CheckLinksAndProgramsWindowContent");

    this.m_device = device;
    this.m_callback = callback;
    
    this.m_layer = document.createElement("div");
    this.m_layer.className = "DialogLayer";
    
    this.m_frame = new UI.Frame()
      .setTitle(CheckLinksAndProgramsWindow.TITLE)
      .setContentSize(frameWidth, frameHeight)
      .setPosition(frameX, frameY)
      .add(new UI.Text()
        .setPosition(10, 10)
        .setWidth(frameWidth - 10)
        .setHtml(CheckLinksAndProgramsWindow.CONTENT)
      );
      
    this.m_layer.appendChild(this.m_frame.getElement());
    Layer.add(this.m_layer);
    
    this.m_device.hasLinksOrPrograms(onResultHandler);
  },
  
  m_onResult: function(result)
  {
    this.m_frame.dispose();
    Layer.remove(this.m_layer);
    
    if (this.m_callback) { this.m_callback(result); }
  }
  
});

CheckLinksAndProgramsWindow.CONTENT_WIDTH = 320;
CheckLinksAndProgramsWindow.CONTENT_HEIGHT = 60;
//CheckLinksAndProgramsWindow.TITLE = translateKey("CheckLinksAndProgramsWindowTitle");
//CheckLinksAndProgramsWindow.CONTENT = "<img src='/ise/img/ajaxload_white.gif' style='float:left;margin-right:10px' />" + translateKey("CheckLinksAndProgramsWindowContent");

/**
 * "Möchten Sie das Gerät wirklich löschen?"
 **/
ConfirmDeleteDeviceWindow = Class.create({

  initialize: function(device, hasLinksOrPrograms, callback)
  {
    var onDeleteHandler = this.m_onDelete.bind(this);
    var onAbortHandler  = this.m_onAbort.bind(this);
    var onChangeHandler = this.m_onChange.bind(this);
    var screenWidth    = WebUI.getWidth();
    var screenHeight   = WebUI.getHeight();
    var frameWidth     = ConfirmDeleteDeviceWindow.CONTENT_WIDTH;
    var frameHeight    = ConfirmDeleteDeviceWindow.CONTENT_HEIGHT;
    var frameX = parseInt((screenWidth  - frameWidth ) / 2);
    var frameY = parseInt((screenHeight - frameHeight) / 2);

    ConfirmDeleteDeviceWindow.TITLE = translateKey("ConfirmDeleteDeviceWindowTitle");
    ConfirmDeleteDeviceWindow.QUESTION = translateKey("ConfirmDeleteDeviceWindowQuestion");
    ConfirmDeleteDeviceWindow.DELETE_OPTIONS = translateKey("ConfirmDeleteDeviceWindowDeleteOptions");
    ConfirmDeleteDeviceWindow.REMOVE = translateKey("ConfirmDeleteDeviceWindowRemove");
    ConfirmDeleteDeviceWindow.REMOVE_DESCRIPTION = translateKey("ConfirmDeleteDeviceWindowRemoveDescription");
    ConfirmDeleteDeviceWindow.RESET = translateKey("ConfirmDeleteDeviceWindowReset");
    ConfirmDeleteDeviceWindow.RESET_DESCRIPTION = translateKey("ConfirmDeleteDeviceWindowResetDescription");
    ConfirmDeleteDeviceWindow.DELETE_BUTTON = translateKey("ConfirmDeleteDeviceWindowDeleteButton");
    ConfirmDeleteDeviceWindow.ABORT_BUTTON = translateKey("ConfirmDeleteDeviceWindowAbortButton");
    ConfirmDeleteDeviceWindow.WARNING = translateKey("ConfirmDeleteDeviceWindowWarning");

    this.m_device = device;
    this.m_hasLinksOrPrograms = hasLinksOrPrograms;
    this.m_callback = callback;
    
    this.m_layer = document.createElement("div");
    this.m_layer.className = "DialogLayer";
    
    this.m_listbox = new UI.ListBox()
      .setPosition(30,90)
      .setWidth(frameWidth - 60)
      .add({name: ConfirmDeleteDeviceWindow.REMOVE, description: ConfirmDeleteDeviceWindow.REMOVE_DESCRIPTION, flags: 0})
      //.add({name: ConfirmDeleteDeviceWindow.RESET, description: ConfirmDeleteDeviceWindow.RESET_DESCRIPTION, flags: 1})
      .setOnChangeCallback(onChangeHandler)
      .selectIndex(0);

    // The deviceType doesn´t exist when in device inbox.
    // That means as long as a device is in the device inbox a factory reset isn´t possible when deleting the device.
    if(this.m_device.deviceType != null) {
      // The new group device has no factory reset
      if (this.m_device.deviceType.id != "HM-CC-VG-1") {
        this.m_listbox.add({name: ConfirmDeleteDeviceWindow.RESET, description: ConfirmDeleteDeviceWindow.RESET_DESCRIPTION, flags: 1});
      }
    }

    this.m_description = new UI.Text()
      .setPosition(30, 120)
      .setWidth(frameWidth - 60)
      .setText(ConfirmDeleteDeviceWindow.REMOVE_DESCRIPTION);
    
    this.m_frame = new UI.Frame()
      .setTitle(ConfirmDeleteDeviceWindow.TITLE)
      .setContentSize(frameWidth, frameHeight)
      .setPosition(frameX, frameY)
      .add(new UI.Text()
        .setPosition(10, 10)
        .setWidth(50)
        .setHeight(50)
        .setHtml(this.m_device.thumbnailHTML)
      )
      .add(new UI.Text()
        .setPosition(65, 10)
        .setWidth(frameWidth - 85)
        .setHtml(ConfirmDeleteDeviceWindow.QUESTION.process({device: this.m_device}))
      )
      .add(new UI.Label()
        .setPosition(10, 70)
        .setText(ConfirmDeleteDeviceWindow.DELETE_OPTIONS)
      )
      .add(this.m_listbox)
      .add(this.m_description)
      .add(new UI.Button()
        .setPosition(frameWidth - 160, 200)
        .setText(ConfirmDeleteDeviceWindow.DELETE_BUTTON)
        .setAction(onDeleteHandler)
      )
      .add(new UI.Button()
        .setPosition(10,200)
        .setText(ConfirmDeleteDeviceWindow.ABORT_BUTTON)
        .setAction(onAbortHandler)
      );
    
    if (this.m_hasLinksOrPrograms !== false)
    {
      this.m_frame.add(new UI.Text()
        .setPosition(10,160)
        .setWidth(frameWidth - 10)
        .setHtml(ConfirmDeleteDeviceWindow.WARNING)
      );
    }
    
    this.m_layer.appendChild(this.m_frame.getElement());
    Layer.add(this.m_layer);
  },
  
  m_close: function(result)
  {
    this.m_frame.dispose();
    Layer.remove(this.m_layer);
    if (this.m_callback) { this.m_callback(result); }
  },
  
  m_onDelete: function()
  {
    this.m_close(this.m_listbox.getSelectedItem().flags); 
  },
  
  m_onAbort: function()
  {
    this.m_close(null);
  },
  
  m_onChange: function(item)
  {
    this.m_description.setText(item.description);
  }
});


ConfirmDeleteDeviceWindow.CONTENT_WIDTH = 400;
ConfirmDeleteDeviceWindow.CONTENT_HEIGHT = 230;
/*
ConfirmDeleteDeviceWindow.TITLE = translateKey("ConfirmDeleteDeviceWindowTitle");
ConfirmDeleteDeviceWindow.QUESTION = translateKey("ConfirmDeleteDeviceWindowQuestion");
ConfirmDeleteDeviceWindow.DELETE_OPTIONS = translateKey("ConfirmDeleteDeviceWindowDeleteOptions");
ConfirmDeleteDeviceWindow.REMOVE = translateKey("ConfirmDeleteDeviceWindowRemove");
ConfirmDeleteDeviceWindow.REMOVE_DESCRIPTION = translateKey("ConfirmDeleteDeviceWindowRemoveDescription");
ConfirmDeleteDeviceWindow.RESET = translateKey("ConfirmDeleteDeviceWindowReset");
ConfirmDeleteDeviceWindow.RESET_DESCRIPTION = translateKey("ConfirmDeleteDeviceWindowResetDescription");
ConfirmDeleteDeviceWindow.DELETE_BUTTON = translateKey("ConfirmDeleteDeviceWindowDeleteButton");
ConfirmDeleteDeviceWindow.ABORT_BUTTON = translateKey("ConfirmDeleteDeviceWindowAbortButton");
ConfirmDeleteDeviceWindow.WARNING = translateKey("ConfirmDeleteDeviceWindowWarning");
*/

/**
 * "Bitte warten", "Gerät wird gelöscht..."
 **/
DeleteDeviceWindow = Class.create({
  
  initialize: function(device, flags, callback)
  {
    var onResultHandler = this.m_onResult.bind(this);
    var screenWidth  = WebUI.getWidth();
    var screenHeight = WebUI.getHeight();
    var frameWidth   = DeleteDeviceWindow.CONTENT_WIDTH;
    var frameHeight  = DeleteDeviceWindow.CONTENT_HEIGHT;
    var frameX = parseInt((screenWidth  - frameWidth ) / 2);
    var frameY = parseInt((screenHeight - frameHeight) / 2);

    DeleteDeviceWindow.TITLE = translateKey("DeleteDeviceWindowTitle");
    DeleteDeviceWindow.CONTENT = "<img src='/ise/img/ajaxload_white.gif' style='float:left;margin-right:10px;'>"+translateKey("DeleteDeviceWindowContent");

    this.m_device   = device;
    this.m_flags    = flags;
    this.m_callback = callback;
    
    this.m_layer = document.createElement("div");
    this.m_layer.className = "DialogLayer";

    this.m_frame = new UI.Frame()
      .setTitle(DeleteDeviceWindow.TITLE)
      .setContentSize(frameWidth, frameHeight)
      .setPosition(frameX, frameY)
      .add(new UI.Text()
        .setPosition(10, 10)
        .setWidth(frameWidth - 10)
        .setHtml(DeleteDeviceWindow.CONTENT)
      );
      
    this.m_layer.appendChild(this.m_frame.getElement());
    Layer.add(this.m_layer);

    device.remove(this.m_flags, onResultHandler);
  },
  
  m_onResult: function(result, error)
  {
    errorCode = DeleteDeviceDialog.ERROR_NO_ERROR;
    if (error !== null)
    {
      errorCode = error.code;
    }
    
    this.m_frame.dispose();
    Layer.remove(this.m_layer);
    
    if (this.m_callback) { this.m_callback(errorCode); }
  }
  
});

DeleteDeviceWindow.CONTENT_WIDTH = 320;
DeleteDeviceWindow.CONTENT_HEIGHT = 60;
/*
DeleteDeviceWindow.TITLE = translateKey("DeleteDeviceWindowTitle");
DeleteDeviceWindow.CONTENT = "<img src='/ise/img/ajaxload_white.gif' style='float:left;margin-right:10px;'>"+translateKey("DeleteDeviceWindowContent");
*/

/**
 * "Fehler", "Gerät konnte nicht gelöscht werden"
 **/
ErrorOnDeleteWindow = Class.create({

  initialize: function(device, flags, errorCode, callback)
  {
    var onDeleteHandler = this.m_onDelete.bind(this);
    var onAbortHandler  = this.m_onAbort.bind(this);
    var onChangeHandler = this.m_onChange.bind(this);
    var screenWidth  = WebUI.getWidth();
    var screenHeight = WebUI.getHeight();
    var frameWidth   = ErrorOnDeleteWindow.CONTENT_WIDTH;
    var frameHeight  = ErrorOnDeleteWindow.CONTENT_HEIGHT;
    var frameX = parseInt((screenWidth  - frameWidth ) / 2);
    var frameY = parseInt((screenHeight - frameHeight) / 2); 

    ErrorOnDeleteWindow.TITLE = translateKey("ErrorOnDeleteWindowTitle");
    ErrorOnDeleteWindow.DELETE_OPTIONS = translateKey("ErrorOnDeleteWindowDeleteOptions");
    ErrorOnDeleteWindow.RETRY = translateKey("ErrorOnDeleteWindowRetry");
    ErrorOnDeleteWindow.RETRY_DESCRIPTION = translateKey("ErrorOnDeleteWindowRetryDescription");
    ErrorOnDeleteWindow.DEFER = translateKey("ErrorOnDeleteWindowDefer");
    ErrorOnDeleteWindow.DEFER_DESCRIPTION = translateKey("ErrorOnDeleteWindowDeferDescription");
    ErrorOnDeleteWindow.FORCE = translateKey("ErrorOnDeleteWindowForce");
    ErrorOnDeleteWindow.FORCE_DESCRIPTION = translateKey("ErrorOnDeleteWindowForceDescription");
    ErrorOnDeleteWindow.DEVICE_NOT_REACHABLE = translateKey("ErrorOnDeleteWindowDeviceNotReachable");
    ErrorOnDeleteWindow.UNKNOWN_DEVICE = translateKey("ErrorOnDeleteWindowUnknownDevice");
    ErrorOnDeleteWindow.UKNOWN_ERROR = translateKey("ErrorOnDeleteWindowUnknownError");
    ErrorOnDeleteWindow.ABORT_BUTTON = translateKey("ErrorOnDeleteWindowAbortButton");
    ErrorOnDeleteWindow.DELETE_BUTTON = translateKey("ErrorOnDeleteWindowDeleteButton");

    this.m_device = device;
    this.m_flags  = (flags & DeleteDeviceDialog.FLAG_RESET);
    this.m_errorCode = errorCode;
    this.m_callback = callback;
    
    var errorMessage;
    switch(errorCode)
    {
      case DeleteDeviceDialog.ERROR_GENERAL:
        errorMessage = ErrorOnDeleteWindow.DEVICE_NOT_REACHABLE.process({device: this.m_device});
        break;
      case DeleteDeviceDialog.ERROR_UNKNOWN_DEVICE:
        errorMessage = ErrorOnDeleteWindow.UNKNOWN_DEVICE.process({device: this.m_device});
        break;
      default:
        errorMessage = ErrorOnDeleteWindow.UKNOWN_ERROR.process({device: this.m_device});
        break;
    }  
    
    this.m_layer = document.createElement("div");
    this.m_layer.className = "DialogLayer";
    
    this.m_listbox = new UI.ListBox()
      .setPosition(30,140)
      .setWidth(frameWidth - 60)
      .add({name: ErrorOnDeleteWindow.RETRY, description: ErrorOnDeleteWindow.RETRY_DESCRIPTION, flags: 0})
      .add({name: ErrorOnDeleteWindow.DEFER, description: ErrorOnDeleteWindow.DEFER_DESCRIPTION, flags: 4})
      .add({name: ErrorOnDeleteWindow.FORCE, description: ErrorOnDeleteWindow.FORCE_DESCRIPTION, flags: 2})
      .setOnChangeCallback(onChangeHandler)
      .selectIndex(0);
    
    this.m_description = new UI.Text()
      .setPosition(30,170)
      .setWidth(frameWidth - 60)
      .setText(ErrorOnDeleteWindow.RETRY_DESCRIPTION);
    
    this.m_frame = new UI.Frame()
      .setTitle(ErrorOnDeleteWindow.TITLE)
      .setContentSize(frameWidth, frameHeight)
      .setPosition(frameX, frameY)
      .add(new UI.Text()
        .setPosition(10, 10)
        .setWidth(50)
        .setHeight(50)
        .setHtml(this.m_device.thumbnailHTML)
      )
      .add(new UI.Text()
        .setPosition(65, 10)
        .setWidth(frameWidth - 85)
        .setHtml(errorMessage)
      )
      .add(new UI.Label()
        .setPosition(10, 120)
        .setText(ErrorOnDeleteWindow.DELETE_OPTIONS)
      )
      .add(this.m_listbox)
      .add(this.m_description)
      .add(new UI.Button()
        .setPosition(10, 210)
        .setText(ErrorOnDeleteWindow.ABORT_BUTTON)
        .setAction(onAbortHandler)
      )
      .add(new UI.Button()
        .setPosition(frameWidth - 210, 210)
        .setWidth(150)
        .setText(ErrorOnDeleteWindow.DELETE_BUTTON)
        .setAction(onDeleteHandler)
      );
    
    this.m_layer.appendChild(this.m_frame.getElement());
    Layer.add(this.m_layer);
  },
  
  m_close: function(result)
  {
    this.m_frame.dispose();
    Layer.remove(this.m_layer);
    
    if (this.m_callback) { this.m_callback(result); }
  },
  
  m_onDelete: function()
  {
    this.m_close(this.m_flags + this.m_listbox.getSelectedItem().flags);
  },
  
  m_onAbort: function()
  {
    this.m_close(null);
  },
  
  m_onChange: function(item)
  {
    this.m_description.setText(item.description);
  }
  
});

ErrorOnDeleteWindow.CONTENT_WIDTH = 400;
ErrorOnDeleteWindow.CONTENT_HEIGHT = 240;
/*
ErrorOnDeleteWindow.TITLE = translateKey("ErrorOnDeleteWindowTitle");
ErrorOnDeleteWindow.DELETE_OPTIONS = translateKey("ErrorOnDeleteWindowDeleteOptions");
ErrorOnDeleteWindow.RETRY = translateKey("ErrorOnDeleteWindowRetry");
ErrorOnDeleteWindow.RETRY_DESCRIPTION = translateKey("ErrorOnDeleteWindowRetryDescription");
ErrorOnDeleteWindow.DEFER = translateKey("ErrorOnDeleteWindowDefer");
ErrorOnDeleteWindow.DEFER_DESCRIPTION = translateKey("ErrorOnDeleteWindowDeferDescription");
ErrorOnDeleteWindow.FORCE = translateKey("ErrorOnDeleteWindowForce");
ErrorOnDeleteWindow.FORCE_DESCRIPTION = translateKey("ErrorOnDeleteWindowForceDescription");
ErrorOnDeleteWindow.DEVICE_NOT_REACHABLE = translateKey("ErrorOnDeleteWindowDeviceNotReachable");
ErrorOnDeleteWindow.UNKNOWN_DEVICE = translateKey("ErrorOnDeleteWindowUnknownDevice");
ErrorOnDeleteWindow.UKNOWN_ERROR = translateKey("ErrorOnDeleteWindowUnknownError");
ErrorOnDeleteWindow.ABORT_BUTTON = translateKey("ErrorOnDeleteWindowAbortButton");
ErrorOnDeleteWindow.DELETE_BUTTON = translateKey("ErrorOnDeleteWindowDeleteButton");
*/

/**
 * Dialogbox zum Löschen eines Geräts
 **/
DeleteDeviceDialog = Class.create({

  /**
   * Erstellt einen neuen DeleteDeviceDialog.
   **/
  initialize: function(device, callback)
  {
    this.m_device   = device;
    this.m_callback = callback;
    this.m_onLinksAndProgramsCheckedHandler = this.m_onLinksAndProgramsChecked.bind(this);
    this.m_onDeleteDeviceConfirmedHandler   = this.m_onDeleteDeviceConfirmed.bind(this);
    this.m_onDeviceDeletedHandler           = this.m_onDeviceDeleted.bind(this);
    
    new CheckLinksAndProgramsWindow(device, this.m_onLinksAndProgramsCheckedHandler);
    
  },
  
  m_onLinksAndProgramsChecked: function(result)
  {
    this.m_hasLinksOrPrograms = result;
    new ConfirmDeleteDeviceWindow(this.m_device, this.m_hasLinksOrPrograms, this.m_onDeleteDeviceConfirmedHandler);
  },
  
  m_onDeleteDeviceConfirmed: function(flags)
  {
    if (flags !== null)
    {
      this.m_flags = flags;
      new DeleteDeviceWindow(this.m_device, this.m_flags, this.m_onDeviceDeletedHandler);
    }
    else
    {
      // Abbruch
      if (this.m_callback) { this.m_callback(false); }
    }
  },

  m_hasDeviceEnergyCounter: function() {
    var result = {"id": 0, "address" : "", "type": "" };
    try {
      jQuery.each(this.m_device.channels, function(index, channel) {
        if ((channel.channelType == "POWERMETER") || (channel.channelType == "POWERMETER_IGL")) {
          result.id = channel.id;
          result.address = channel.address;
          result.type = channel.channelType;
          return; // leave each loop
        }
      });
    } catch(e) {}

    return result;
  },

  m_deleteProgSysvarPOWERMETER: function(chId, chAddress) {
    homematic("SysVar.deleteSysVarByName", {"name": "svEnergyCounter_" + chId + "_" + chAddress}, function () {
      homematic("SysVar.deleteSysVarByName", {"name": "svEnergyCounterOldVal_" + chId}, function () {
        homematic("SysVar.deleteSysVarByName", {"name": "svEnergyCounter_" + chId + "_" + chAddress + "_RESET"}, function () {
          homematic("SysVar.deleteSysVarByName", {"name": "svEnergyCounter_" + chId + "_" + chAddress + "_DEVICE_RESET"}, function () {
            homematic("SysVar.deleteSysVarByName", {"name": "svEnergyCounter_" + chId + "_" + chAddress + "_TMP_OLDVAL"}, function () {
              homematic("Program.deleteProgramByName", {"name": "prgEnergyCounter_" + chId + "_" + chAddress}, function () {
                homematic("system.saveObjectModel", {}, function () {
                  conInfo("ObjectModel saved");
                });
              });
            });
          });
        });
      });
    });
  },

  m_deleteProgSysvarPOWERMETER_IGL: function(chId, chAddress) {
    var self = this;
    homematic("SysVar.deleteSysVarByName", {"name": "svEnergyCounterGas_" + chId + "_" + chAddress}, function () {
      homematic("SysVar.deleteSysVarByName", {"name": "svEnergyCounterGasOldVal_" + chId}, function () {
        homematic("SysVar.deleteSysVarByName", {"name": "svEnergyCounterGas_" + chId + "_" + chAddress + "_RESET"}, function () {
          homematic("SysVar.deleteSysVarByName", {"name": "svEnergyCounterGas_" + chId + "_" + chAddress + "_DEVICE_RESET"}, function () {
            homematic("SysVar.deleteSysVarByName", {"name": "svEnergyCounterGas_" + chId + "_" + chAddress + "_TMP_OLDVAL"}, function () {
              homematic("Program.deleteProgramByName", {"name": "prgEnergyCounterGAS_" + chId + "_" + chAddress}, function () {
                self.m_deleteProgSysvarPOWERMETER(chId, chAddress);
              });
            });
          });
        });
      });
    });
  },
  m_onDeviceDeleted: function(errorCode)
  {
    if (errorCode === DeleteDeviceDialog.ERROR_NO_ERROR)
    {
      // Prüfen, ob ein Kanal des Gerätes als Energy-Counter dient.
      // Wenn ja, müssen beim Löschen die dazugehörigen Systemvariablen
      // sowie das enstprechende Systemprogramm zum aktualisieren der Systemvariablen entfernt werden.
      var oEnergyCounter = this.m_hasDeviceEnergyCounter(),
        chId = oEnergyCounter.id,
        chAddress= oEnergyCounter.address;
      if (chId != 0) {
        if (oEnergyCounter.type == "POWERMETER") {
          this.m_deleteProgSysvarPOWERMETER(chId, chAddress);
        } else if (oEnergyCounter.type == "POWERMETER_IGL")  {
          this.m_deleteProgSysvarPOWERMETER_IGL(chId, chAddress);
        }
      }
      if (this.m_callback) { this.m_callback(true); }
    }
    else
    {
      this.m_errorCode = errorCode;
      new ErrorOnDeleteWindow(this.m_device, this.m_flags, this.m_errorCode, this.m_onDeleteDeviceConfirmedHandler);
    }
  }
});

DeleteDeviceDialog.FLAG_RESET = 0x01;
DeleteDeviceDialog.FLAG_FORCE = 0x02;
DeleteDeviceDialog.FLAG_DEFER = 0x04;
DeleteDeviceDialog.ERROR_NO_ERROR = 0;
DeleteDeviceDialog.ERROR_GENERAL = 501;
DeleteDeviceDialog.ERROR_UNKNOWN_DEVICE = 502;
/**
 * crashdialog.js
 **/
 
CrashDialog = Class.create({

  initialize: function(name)
  {
    var screenWidth  = WebUI.getWidth();
    var screenHeight = WebUI.getHeight();
    var frameWidth   = CrashDialog.CONTENT_WIDTH;
    var frameHeight  = CrashDialog.CONTENT_HEIGHT;
    var frameX       = parseInt((screenWidth  - frameWidth)  / 2);
    var frameY       = parseInt((screenHeight - frameHeight) / 2);
    
    this.m_layer = document.createElement("div");
    this.m_layer.className = "DialogLayer";
    
    this.m_frame = new UI.Frame()
      .setTitle(name)
      .setContentSize(frameWidth, frameHeight)
      .setPosition(frameX, frameY)
      .add(new UI.Text()
        .setPosition(5, 5)
        .setWidth(frameWidth - 10)
        .setHtml(translateKey("crashDialogContent"))
      )
      .add(new UI.Button()
        .setPosition(125, 200)
        .setText(translateKey("crashDialogBtnClose"))
        .setAction(this.close.bind(this))
      );
  
    this.m_layer.appendChild(this.m_frame.getElement());
    Layer.add(this.m_layer);
  },

  close: function()
  {
    Layer.remove(this.m_layer);
  }
  
});

CrashDialog.CONTENT_WIDTH = 400;
CrashDialog.CONTENT_HEIGHT = 230;
/*
CrashDialog.TEXT  = "<div style='font-weight: bold;'>Eine Komponente der HomeMatic Zentrale reagiert nicht mehr.</div>"
                  + "<p>Hierfür kann es eine Reihe von Ursachen geben:</p>"
                  + "<ul>"
                  + "<li>es besteht keine Netzwerk-Verbindung</li>"
                  + "<li>die Stromversorung der HomeMatic Zentrale wurde unterbrochen</li>"
                  + "<li>mindestens eine Komponente der HomeMatic Zentrale ist abgestürzt</li>"
                  + "</ul>"
                  + "<p>Überprüfen Sie die Netzwerk-Verbindung und die Stromversorgung der HomeMatic Zentrale. Starten Sie ggf. die HomeMatic Zentrale neu.</p>";
*/

/**
 * hmscriptexecutor.js
 **/
 
/**
 * @fileOverview HM Script Executor
 * @author F. Werner (eQ-3)
 **/
 
/**
 * @class HMScriptExecturor
 * Dialog zum Testen von HomeMatic Script.
 **/
HMScriptExecutor = Class.create({

  initialize: function()
  {
    var screenWidth  = WebUI.getWidth();
    var screenHeight = WebUI.getHeight();
    var frameWidth   = HMScriptExecutor.CONTENT_WIDTH;
    var frameHeight  = HMScriptExecutor.CONTENT_HEIGHT;
    var frameX       = parseInt((screenWidth  - frameWidth)  / 2);
    var frameY       = parseInt((screenHeight - frameHeight) / 2);

    HMScriptExecutor.TITLE = translateKey("dialogScriptExecuterTitle");
    HMScriptExecutor.TEXT_RUN = translateKey("dialogScriptExecuterBtnExecute");
    HMScriptExecutor.TEXT_CLOSE = translateKey("dialogScriptExecuterBtnClose");
    
    this.m_layer = document.createElement("div");
    this.m_layer.className = "DialogLayer";
    
    this.m_input = new UI.Textarea()
        .setPosition(5,25)
        .setWidth(590)
        .setHeight(200)
        .setText('WriteLine("'+ translateKey("dialogScriptExecuterHelloWorld") +'");');
    
    this.m_output = new UI.Textarea()
        .setPosition(5,250)
        .setWidth(590)
        .setHeight(200); 
    
    this.m_frame = new UI.Frame()
      .setTitle(HMScriptExecutor.TITLE)
      .setContentSize(frameWidth, frameHeight)
      .setPosition(frameX, frameY)
      .add(new UI.Text()
        .setPosition(5,5)
        .setText(translateKey("dialogScriptExecuterLblInput"))
      )
      .add(this.m_input)
      .add(new UI.Text()
        .setPosition(5,230)
        .setText(translateKey("dialogScriptExecuterLblOutput"))
      )
      .add(this.m_output)
      .add(new UI.Button()
        .setPosition(5,455)
        .setText(HMScriptExecutor.TEXT_RUN)
        .setAction(this.run, this)
      )
      .add(new UI.Button()
        .setPosition(445, 455)
        .setText(HMScriptExecutor.TEXT_CLOSE)
        .setAction(this.close, this)
      );
      
      this.m_layer.appendChild(this.m_frame.getElement());
      Layer.add(this.m_layer);
  },

  run: function()
  {
    var _this_ = this;
    this.m_output.setText("");
       
    homematic("ReGa.runScript", {script: this.m_input.getText()}, function(response, error)
    {
      if (error === null)
      {
        _this_.m_output.setText(response);
      }
      else
      {
        _this_.m_output.setText("Fehler: " + Object.toJSON(error));
      }
    });
  },
  
  close: function()
  {
    Layer.remove(this.m_layer);
  }
  
});

HMScriptExecutor.CONTENT_WIDTH = 600;
HMScriptExecutor.CONTENT_HEIGHT = 485;

/**
 * firewallconfigdialog.js
 **/
 
FirewallConfigDialog = Class.create({

  /**
   * @constructor
   * Erzeugt einen neuen FirewallConfigDialog
   **/
  initialize: function()
  {
    var screenWidth  = WebUI.getWidth();
    var screenHeight = WebUI.getHeight();
    var frameWidth   = FirewallConfigDialog.CONTENT_WIDTH;
    var frameHeight  = FirewallConfigDialog.CONTENT_HEIGHT;
    var frameX       = parseInt((screenWidth  - frameWidth)  / 2);
    var frameY       = parseInt((screenHeight - frameHeight) / 2);
    
    this.m_layer = document.createElement("div");
    this.m_layer.className = "DialogLayer";
    
		this.m_xmlrpcListBox = new UI.ListBox()
			.setPosition(FirewallConfigDialog.CONTENT_WIDTH - 160, 10)
			.setWidth(150)
			//.add({id: "full"      , name: "Vollzugriff"})
			//.add({id: "restricted", name: "eingeschränkt"})
			//.add({id: "none"      , name: "kein Zugriff"});
      .add({id: "full"      , name: translateKey("dialogSettingsFirewallLblFullAccess")})
      .add({id: "restricted", name: translateKey("dialogSettingsFirewallLblRestrictedAccess")})
      .add({id: "none"      , name: translateKey("dialogSettingsFirewallLblNoAccess")});
      
		
		this.m_hmscriptListBox = new UI.ListBox()
			.setPosition(FirewallConfigDialog.CONTENT_WIDTH - 160, 80)
			.setWidth(150)
			//.add({id: "full"      , name: "Vollzugriff"})
			//.add({id: "restricted", name: "eingeschränkt"})
			//.add({id: "none"      , name: "kein Zugriff"});
      .add({id: "full"      , name: translateKey("dialogSettingsFirewallLblFullAccess")})
      .add({id: "restricted", name: translateKey("dialogSettingsFirewallLblRestrictedAccess")})
      .add({id: "none"      , name: translateKey("dialogSettingsFirewallLblNoAccess")});
		
		this.m_ipTextArea = new UI.Textarea()
			.setPosition(10, 180)
			.setWidth(FirewallConfigDialog.CONTENT_WIDTH - 20)
			.setHeight(100)
			.setWrap(true);
		
    this.m_frame = new UI.Frame()
      //.setTitle("Firewall Konfiguration")
      .setTitle(translateKey("dialogSettingsFirewallTitle"))
      .setContentSize(frameWidth, frameHeight)
      .setPosition(frameX, frameY)
			.add(new UI.Text()
				.setPosition(10, 10)
				//.setHtml("<b>HomeMatic XML-RPC API:</b>")
				.setHtml(translateKey("dialogSettingsFirewallLblXMLRPCAPI"))
			)
			.add(new UI.Text()
				.setPosition(10, 40)
				.setWidth(FirewallConfigDialog.CONTENT_WIDTH - 20)
				//.setText("Ermöglicht den direkten Zugriff auf angelernte HomeMatic Geräte")
        .setText(translateKey("dialogSettingsFirewallLblHintXMLRPCAPI"))
        
			)
			.add(this.m_xmlrpcListBox)
			.add(new UI.Text()
				.setPosition(10, 80)
				//.setHtml("<b>Remote HomeMatic-Script API:</b>")
        .setHtml(translateKey("dialogSettingsFirewallLblScriptAPI"))
			)
			.add(new UI.Text()
				.setPosition(10, 110)
				.setWidth(FirewallConfigDialog.CONTENT_WIDTH - 20)
				//.setText("Ermöglicht den Zugriff auf die Logikschicht der HomeMatic Zentrale")
        .setText(translateKey("dialogSettingsFirewallLblHintScriptAPI"))
        
			)
			.add(this.m_hmscriptListBox)
			.add(new UI.Text()
				.setPosition(10, 150)
				//.setHtml("<b>IP-Adressen für den eingeschränkten Zugriff:</b>")
        .setHtml(translateKey("dialogSettingsFirewallLblIPAddresses"))
			)
			.add(this.m_ipTextArea)
			.add(new UI.Text()
				.setPosition(10, 290)
				.setWidth(FirewallConfigDialog.CONTENT_WIDTH - 20)
				//.setText("Sie können den Zugriff wahlweise für einzelne IP-Adressen (z.B. 192.168.0.1) oder ganze Adressbereiche (z.B. 192.168.0.0/16) freigeben.")
        .setText(translateKey("dialogSettingsFirewallLblHintIPAddresses"))
      )
      .add(new UI.Button()
        .setPosition(10, FirewallConfigDialog.CONTENT_HEIGHT - 30)
        //.setText("Abbrechen")
        .setText(translateKey("btnCancel"))
        
        .setAction(this.close, this)
      )
      .add(new UI.Button()
        .setPosition(FirewallConfigDialog.CONTENT_WIDTH - 160, FirewallConfigDialog.CONTENT_HEIGHT - 30)
        //.setText("OK")
        .setText(translateKey("btnOk"))
        .setAction(this.ok, this)
      );

		this.loadConfiguration();

    this.m_layer.appendChild(this.m_frame.getElement());
    Layer.add(this.m_layer);
  },
  
	loadConfiguration: function()
	{
		
		var response = homematic("Firewall.getConfiguration");
		if (null != response)
		{
			var services     = response.services;
			var ips          = response.ips.join(";\n");
			var xmlrpcAccess = "full";
			var hmscriptAccess   = "full";
			
			for (var i = 0, len = services.length; i < len; i++)
			{
				var service = services[i];
				if (service.id == "XMLRPC") { xmlrpcAccess   = service.access; }
				if (service.id == "REGA"  ) { hmscriptAccess = service.access; }
			}
			
			this.m_xmlrpcListBox.selectItemById(xmlrpcAccess);
			this.m_hmscriptListBox.selectItemById(hmscriptAccess);
			this.m_ipTextArea.setText(ips);
		}
	},
	
  /**
   * Schließt den FirewallConfigDialog ohne Änderungen zu übernehmen.
   **/
  close: function()
  {
    Layer.remove(this.m_layer);
  },
  
  /**
   * Übernimmt die Änderungen und schließt den FirewallConfigDialog anschließend.
   **/
  ok: function()
  {
		var xmlrpcAccess   = this.m_xmlrpcListBox.getSelectedItem().id;
		var hmscriptAccess = this.m_hmscriptListBox.getSelectedItem().id;
		var ips  = this.m_ipTextArea.getText().replace(/\s+/g,'').split(";");
		var isOk = true;
		for (var i = 0, len = ips.length; i < len; i++)
		{
			var ip = ips[i];
			if (!ip.match(/^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(\/[0-9]+)?$/)) { isOk = false; }
		}
		
		if (isOk)
		{
			homematic("Firewall.setConfiguration", {
				services: 
				[
					{name: "XMLRPC", access: xmlrpcAccess},
					{name: "REGA", access: hmscriptAccess}
				],
				ips: ips
			});
			this.close();
		}
		else
		{
			//MessageBox.show("Eingabefehler", "Verwenden Sie bitte nur IP-Adressen im Format \"1.2.3.4\" und Adressgruppen im Format \"1.2.3.0/8\". Separieren Sie die einzelnen Adressen durch Semikola.");
			MessageBox.show(translateKey("dialogSettingsFirewallErrorMsgTitle"), translateKey("dialogSettingsFirewallErrorMsgContent"));

    }
  }

});

FirewallConfigDialog.CONTENT_WIDTH = 500;
FirewallConfigDialog.CONTENT_HEIGHT = 400;


/**
 * partymodedialog.js
 **/

StartDateEqualsStopDate = function() {
  var startDate = jQuery("#partyStartDate").datepicker('getDate'),
  stopDate = jQuery("#partyEndDate").datepicker('getDate');
  return (startDate.getDate() == stopDate.getDate()) ? true : false;
};

refreshPartyDatePicker = function() {
  conInfo("refresh DatePickerEnd");
  var jDatePickerStart = jQuery("#partyStartDate"),
    jDatePickerEnd = jQuery("#partyEndDate"),
    newDate = jDatePickerStart.datepicker("getDate");

  jDatePickerEnd.datepicker("option", "minDate", new Date(newDate));
  jDatePickerEnd.datepicker("refresh");
  refreshPartyTimePicker();
};

refreshPartyTimePicker= function() {
  conInfo("refresh TimePicker");
  if(StartDateEqualsStopDate()) {
    var jTimePickerStart = jQuery("#partyStartTime"),
      jTimePickerEnd = jQuery("#partyEndTime"),
      startHour = jTimePickerStart.timepicker("getHour"),
      startMinute = jTimePickerStart.timepicker("getMinute"),
      endHour = jTimePickerEnd.timepicker("getHour"),
      newEndTime = startHour + 1 + ":" + startMinute;

    if(endHour < startHour) {
      jTimePickerEnd.timepicker("setTime", newEndTime);
      return;
    }
    if(endHour == startHour) {
      if (parseInt(startMinute) > 0) {
        jTimePickerEnd.timepicker("setTime", newEndTime);
      } else {
        jTimePickerEnd.timepicker("setTime", startHour + ":30");
      }
    }
  }
};

/**
 * Dialogbox mit den Schaltflächen "Ja" und "Nein"
 * Normalerweise wird als content Text übergeben,
 * wenn contentType 'html' gesetzt ist, kann auch HTML übergeben werden.
 * Die Höhe des Dialoges sollte sich dynamisch der Contentgröße anpassen.
 **/
PartyModeDialog = Class.create({
 
  initialize: function(title, content, deviceData ,callback, contentType)
  {
    var _this_ = this;

    this.m_contentType = contentType;
    this.m_callback = callback;
    this.m_layer = document.createElement("div");
    this.m_layer.className = "YesNoDialogLayer";

    this.partyModeObject ={};
    this.SetPartyMode = false;
    this.deviceData = deviceData;
    this.defaultPartyTemp = 21;

    var dialog = document.createElement("div");
    dialog.className = "YesNoDialog";
    
    var titleElement = document.createElement("div");
    titleElement.className = "YesNoDialogTitle";

    var orientation = document.createAttribute("align");
    orientation.nodeValue = "center";
    titleElement.setAttributeNode(orientation);

    titleElement.appendChild(document.createTextNode(title));
    titleElement.onmousedown = function(event) { new Drag(this.parentNode, event); };
    dialog.appendChild(titleElement);
    
    var contentWrapper = document.createElement("div");
    contentWrapper.className = "YesNoDialogContentWrapper";
    
    var contentElement = document.createElement("div");
    contentElement.className = "YesNoDialogContent";

    if (this.m_contentType == "html") {
      contentElement.innerHTML = content;
    } else {
      contentElement.appendChild(document.createTextNode(content));
    }

    contentWrapper.appendChild(contentElement);
    
    dialog.appendChild(contentWrapper);

    var footer = document.createElement("div");
    footer.className= "YesNoDialogFooter";


    var noButton = document.createElement("div");
    noButton.className = "YesNoDialog_noButton borderRadius5px colorGradient50px";
    noButton.appendChild(document.createTextNode(translateKey('footerBtnCancel')));
    noButton.onclick = function() { _this_.no(); };
    footer.appendChild(noButton);

    var yesButton = document.createElement("div");
    yesButton.className = "YesNoDialog_yesButton borderRadius5px colorGradient50px";
    yesButton.appendChild(document.createTextNode(translateKey('footerBtnOk')));
    yesButton.onclick = function() { _this_.yes(); };
    footer.appendChild(yesButton);

    dialog.appendChild(footer);
    
    this.m_layer.appendChild(dialog);
    
    Layer.add(this.m_layer);

    //AG sorgt dafür, daß die Dialoghöhe sich dynamisch dem Content anpasst.
    jQuery(".YesNoDialog").css("height", jQuery(".YesNoDialogContentWrapper").height() + 78);
    jQuery(".YesNoDialogFooter").css("top", jQuery(".YesNoDialogContentWrapper").height() + 26);

    translatePage(".YesNoDialog");
    this.initInputFields();
    refreshPartyDatePicker();
  },

  _isUserInputOk: function(sDate, sTime, eDate, eTime) {
    if (sDate && sTime && eDate && eTime) {
      return true;
    }
    return false;
  },

  _createPartyModeObject: function() {
    var startDate = jQuery("#partyStartDate").datepicker('getDate'),
     startTime = jQuery("#partyStartTime").timepicker('getTime'),
     stopDate = jQuery("#partyEndDate").datepicker('getDate'),
     stopTime = jQuery("#partyEndTime").timepicker('getTime');

    if(this._isUserInputOk(startDate, startTime, stopDate, stopTime)) {
      startDate.setHours(startTime.split(":")[0]);
      startDate.setMinutes(startTime.split(":")[1]);
      stopDate.setHours(stopTime.split(":")[0]);
      stopDate.setMinutes(stopTime.split(":")[1]);

      this.partyModeObject.startDay = startDate.getDate();
      this.partyModeObject.startMonth = startDate.getMonth() + 1;

      var startFullYear = startDate.getFullYear().toString();
      this.partyModeObject.startYear = parseInt(startFullYear[2] + startFullYear[3]);
      this.partyModeObject.startHour = startDate.getHours();
      this.partyModeObject.startMin = startDate.getMinutes();
      this.partyModeObject.startMinutesSinceMidnight = parseInt((startDate.getHours() * 60) + startDate.getMinutes());

      this.partyModeObject.stopDay = stopDate.getDate();
      this.partyModeObject.stopMonth = stopDate.getMonth() + 1;

      var stopFullYear = stopDate.getFullYear().toString();
      this.partyModeObject.stopYear = parseInt(stopFullYear[2] + stopFullYear[3]);
      this.partyModeObject.stopHour = stopDate.getHours();
      this.partyModeObject.stopMin = stopDate.getMinutes();
      this.partyModeObject.stopMinutesSinceMidnight = parseInt((stopDate.getHours() * 60) + stopDate.getMinutes());

      this.partyModeObject.temp = jQuery("#partyTempOption option:selected").val();
    } else {
      conInfo("Error PartyModeDialog._createPartyModeObject()");
    }
  },

  close: function(result)
  {
    var partyModeObject = false;
    if (this.SetPartyMode) {
      this._createPartyModeObject();
    }
    if (Object.keys(this.partyModeObject).length > 0 || ! this.SetPartyMode) {
      Layer.remove(this.m_layer);
      if (this.m_callback) { this.m_callback(result); }
    }
  },
  
  yes: function()
  {
    this.SetPartyMode = true;
    this.close(PartyModeDialog.RESULT_YES);
  },
  
  no: function()
  {
    this.SetPartyMode = false;
    this.close(PartyModeDialog.RESULT_NO);
  },

  // Activates the date- and timepicker and initializes the option fields of the tempererature selectbox
  initInputFields: function() {
    var jDatePickerStart = jQuery("#partyStartDate"),
      jDatePickerEnd = jQuery("#partyEndDate"),
      jTimePickerStart = jQuery("#partyStartTime"),
      jTimePickerEnd = jQuery("#partyEndTime"),
      startDate = new Date(),
      stopDate = new Date();

    if ((this.deviceData.stPartyStartYear == 0) || (this.deviceData.stPartyStartYear == undefined) ) {
      // Device Fw. < 1.3
      startDate.setHours(parseInt(startDate.getHours() +1));
      stopDate.setHours(parseInt(startDate.getHours() + 3));
      jTimePickerStart.val(startDate.getHours() + ":00");
      jTimePickerEnd.val(stopDate.getHours() + ":00");
    } else {
      // Device Fw. >= 1.3
      startDate.setDate(this.deviceData.stPartyStartDay);
      startDate.setMonth(parseInt(this.deviceData.stPartyStartMonth) - 1);
      startDate.setYear(2000 + parseInt(this.deviceData.stPartyStartYear));
      startDate.setHours(this.deviceData.stPartyStartTime / 60);
      startDate.setMinutes(this.deviceData.stPartyStartTime % 60);
      startDate.setSeconds(0);

      stopDate.setDate(this.deviceData.stPartyStopDay);
      stopDate.setMonth(parseInt(this.deviceData.stPartyStopMonth) - 1);
      stopDate.setYear(2000 + parseInt(this.deviceData.stPartyStopYear));
      stopDate.setHours(this.deviceData.stPartyStopTime / 60);
      stopDate.setMinutes(this.deviceData.stPartyStopTime % 60);
      stopDate.setSeconds(0);

      var startMinutes = (parseInt(startDate.getMinutes()) < 10) ? "0" + startDate.getMinutes() : startDate.getMinutes();
      var stopMinutes = (parseInt(stopDate.getMinutes()) < 10) ? "0" + stopDate.getMinutes() : stopDate.getMinutes();

      jTimePickerStart.val(startDate.getHours() + ":" + startMinutes);
      jTimePickerEnd.val(stopDate.getHours() + ":" + stopMinutes);
    }

    jDatePickerStart.datepicker({
      showOn: "focus",
      dateFormat: "dd.mm.yy",
      autoSize: true,
      firstDay: 1,
      minDate: 0,
      showButtonPanel:true,
      closeText: translateKey("btnOk"),
      onClose: refreshPartyDatePicker
    });

    jDatePickerEnd.datepicker({
      showOn: "focus",
      dateFormat: "dd.mm.yy",
      autoSize: true,
      firstDay: 1,
      minDate: 0,
      showButtonPanel: true,
      closeText: translateKey("btnOk"),
      onClose: refreshPartyTimePicker
    });

    if (this.deviceData.stPartyStartYear == 0) {
      jDatePickerStart.datepicker("setDate", "+0d");
      jDatePickerEnd.datepicker("setDate", "+0d");
      this.deviceData.stPartyTemp = this.defaultPartyTemp;
    } else {
      jDatePickerStart.datepicker("setDate", startDate);
      jDatePickerEnd.datepicker("setDate", stopDate);
    }

    jTimePickerStart.timepicker({
      //showNowButton: true,
      showOn: "focus",
      minutes: {
        starts: 0,
        ends: 30,
        interval: 30
      },
      showCloseButton: true,
      closeButtonText: translateKey("btnOk"),
      onSelect: this.OnStartTimeSelect
    });

    jTimePickerEnd.timepicker({
      //showNowButton: true,
      showOn: "focus",
      minutes: {
        starts: 0,
        ends: 30,
        interval: 30
      },
      showCloseButton: true,
      closeButtonText: translateKey("btnOk"),
      onHourShow : this.OnEndHourShowCallBack,
      onMinuteShow: this.OnEndMinuteShowCallBack

    });

    // Adds a selectbox for the temperature to the party mode dialog
    var selBox = "<select>";
    for (var loop = 5; loop <= 30; loop++) {
      selBox += "<option value='"+loop+"'>"+loop+"°C</option>";
    }
    selBox += "</select>";

    jQuery("#partyTempOption").html(selBox);
    jQuery("#partyTempOption option[value='"+this.deviceData.stPartyTemp+"']").prop("selected", true);
  },

  OnStartHourShowCallBack: function(hour) {
    return true;
  },

  OnStartTimeSelect: function(time) {
    var jTimePickerEnd = jQuery("#partyEndTime"),
      endHour = jTimePickerEnd.timepicker("getHour"),
      endMinute = jTimePickerEnd.timepicker("getMinute"),
      arTime = time.split(":"),
      startHour = arTime[0],
      startMinute = arTime[1],
      newEndTime =  parseInt(startHour) + 1 + ":" + startMinute; //startHour + 1 + ":" + startMinute;

    if (StartDateEqualsStopDate) {
      if ((startHour >= endHour) && (startMinute >= endMinute)) {
        jTimePickerEnd.timepicker("setTime", newEndTime);
      }
    }
    return true;
  },

  // Makes only valid time selectors selectable - e. g. its´s not possible to set an end time earlier than the start time
  OnEndHourShowCallBack: function(hour) {
    var startHour = jQuery("#partyStartTime").timepicker('getHour');

    if (StartDateEqualsStopDate()) {
      if (hour < startHour) {
        return false;
      }
    }
    return true;
  },

  // Makes only valid time selectors selectable
  OnEndMinuteShowCallBack: function(endHour, endMin) {
    var startHour = jQuery("#partyStartTime").timepicker('getHour'),
    startMin = jQuery("#partyStartTime").timepicker('getMinute');

    if (StartDateEqualsStopDate()) {
      if ((startHour == endHour) && (endMin <= startMin)) {
        return false;
      }
    }
    return true;
  },

  getPartyModeObject: function() {
    return this.partyModeObject;
  }

});

PartyModeDialog.RESULT_NO = 0;
PartyModeDialog.RESULT_YES = 1;
/**
 * statusdisplaydialog.js
 **/

/**
 * When no text is active the header of the table has to be stripped (remove color and icon)
 */
function setStatusDisplayTableHeader() {
  var optionHeaderElems = jQuery("[name='optionHeader']"),
  hideOptionHeader = true;

  for(var loop = 0; loop <= 5; loop++) {
    if (jQuery("#textSelect_"+loop).val() != "-1" ) {
     hideOptionHeader = false;
    }
  }
  if (hideOptionHeader) {
    optionHeaderElems.hide();
  } else {
    optionHeaderElems.show();
  }
}

function setIconPreview(oValue) {
  // oValue.index and oValue.value
  oValue.index = oValue.index.toString();
  var previewElm = jQuery("#iconPreview_"+oValue.index);
  previewElm.html("<img src='/ise/img/icons_hm_dis_wm55/24/"+oValue.value+".png' alt='' style='height:20px; background-color:#f0f0f0;'>");
}

function displayStatusDisplayOptionContainer(lineIndex, mode) {
  var optionContainer = jQuery("[name='optionContainer_"+lineIndex+"']");
  if(mode) {
    optionContainer.show();
  } else {
    optionContainer.hide();
  }
}
/**
 * When a text for a line is chosen the selectboxes color and icon are visible, otherwise they are hidden.
 * @param elm - Text selectbox for the chosen line
 */
function textOnChange(elm) {
  var selBoxIndex = elm.id.split("_")[1],
  selIndex = jQuery(elm).val();
  if (selIndex != -1) {
    var iconSelElm = jQuery("#iconSelect_" + selBoxIndex);
    displayStatusDisplayOptionContainer(selBoxIndex, true);
    setIconPreview({index: selBoxIndex, value: iconSelElm.val()});
  } else {
    displayStatusDisplayOptionContainer(selBoxIndex, false);
  }
  setStatusDisplayTableHeader();
  setFreeTextContainer();
}

function iconOnChange(elm) {
  var selBoxIndex = elm.id.split("_")[1],
  preViewIndex = jQuery(elm).val();
  setIconPreview({index: selBoxIndex, value: preViewIndex});
}

function setFreeTextContainer() {
  var jHeadFreeText = jQuery("#headFreeText"),
  freeTextActive = false;

  // Check each line if the free text mode is active.
  // If yes switch on the appropriate text input field
  // and set the variable freeTextActive to true
  for (var line = 0; line < 6; line++) {
    var jLine = jQuery("#textSelect_" + line),
    jCellFreeText = jQuery("#cellFreeText_"+line);

    if (jLine.val() == "99") {
      jCellFreeText.show();
      jHeadFreeText.show();
      freeTextActive = true;
    } else {
      jCellFreeText.hide();
    }
  }

  // If at least one line has an active free text mode
  // we have to activate the placeholder for the other lines and the header (color and icon are moving up)
  if (freeTextActive) {
    for (var line = 0; line < 6; line++) {
      var jLine = jQuery("#textSelect_" + line),
      jPlaceHolder = jQuery("#placeHolder_"+line);

      if (jLine.val() != "99") {
        jPlaceHolder.show();
      } else {
        jPlaceHolder.hide().css("display","none");
      }
    }
  } else {
    jHeadFreeText.hide().css("display", "none");
    for (var line = 0; line < 6; line++) {
      jQuery("#placeHolder_"+line).hide().css("display", "none");
    }
  }
}

StatusDisplayDialog = Class.create({
 
  initialize: function(title, content, value, callback, contentType) {
    var _this_ = this;

    this.m_contentType = contentType;
    this.m_callback = callback;
    this.m_layer = document.createElement("div");
    this.m_layer.className = "YesNoDialogLayer"; 

    this.arDisplayData = [];
    this.channelValue = value;

    this.startKey = "0x02";
    this.endKey = "0x03";
    this.lf = "0x0A";
    this.textKey = "0x12";
    this.colorKey = "0x11";
    this.iconKey = "0x13";
    this.configString = "not initialized";

    var dialog = document.createElement("div");
    dialog.className = "YesNoDialog";
    
    var titleElement = document.createElement("div");
    titleElement.className = "YesNoDialogTitle";
    titleElement.appendChild(document.createTextNode(title));
    titleElement.onmousedown = function(event) { new Drag(this.parentNode, event); };
    dialog.appendChild(titleElement);
    
    var contentWrapper = document.createElement("div");
    contentWrapper.className = "YesNoDialogContentWrapper";
    
    var contentElement = document.createElement("div");
    contentElement.className = "YesNoDialogContent";

    if (this.m_contentType == "html") {
      contentElement.innerHTML = content;
    } else {
      contentElement.appendChild(document.createTextNode(content));
    }

    contentWrapper.appendChild(contentElement);
    
    dialog.appendChild(contentWrapper);

    var footer = document.createElement("div");
    footer.className= "YesNoDialogFooter";
    
    var yesButton = document.createElement("div");
    yesButton.className = "YesNoDialog_yesButton borderRadius5px colorGradient50px";
    yesButton.appendChild(document.createTextNode(translateKey('btnOk')));
    yesButton.onclick = function() { _this_.yes(); };
    footer.appendChild(yesButton);
    
    var noButton = document.createElement("div");
    noButton.className = "YesNoDialog_noButton borderRadius5px colorGradient50px";
    noButton.appendChild(document.createTextNode(translateKey('btnCancel')));
    noButton.onclick = function() { _this_.no(); };
    footer.appendChild(noButton);
    
    dialog.appendChild(footer);
    
    this.m_layer.appendChild(dialog);
    
    Layer.add(this.m_layer);

    //this._getAllTextPresets();
    //this._initDisplayConfigObject(); // not necessary
    this._addElements();
    this._initAllValues();
    //this._initIconPreview(); // not necessary

    setStatusDisplayTableHeader();

    // Remark 1: This doesn´t work satisfying -- see Remark 2
    // This should display an icon within the options of the icon selector
    //jQuery("[name='statusDialogIconOptions']").msDropDown({childWidth:"200px"});

    // This adapts the height of the dialog to the content
    jQuery(".YesNoDialog").css("height", jQuery(".YesNoDialogContentWrapper").height() + 78);
    jQuery(".YesNoDialogFooter").css("top", jQuery(".YesNoDialogContentWrapper").height() + 26);
  },

  // This is for testing only
  _getAllTextPresets: function() {
    var tmp = homematic("Interface.getMasterValue", {"interface": "BidCos-RF", "address": "MYS0000666:1", "valueKey": "TEXTLINE_1"});
    conInfo(tmp);
  },

  // This creates the content of the dialog.
  _addElements: function() {
    var dialogContentElem = jQuery("#statusDisplayDialog");
    var textOptions = this._getTextOptions();
    var colorOptions = this._getColorOptions();
    var iconOptions = this._getIconOptions();
    var freeTextValue = translateKey("statusDisplayOptionFreeText");

    dialogContentElem.append(function(index,html){
      var content =  "<tr><th>&nbsp;</th><th>Text</th> <th id='headFreeText' class='hidden'></th><th name='optionHeader'>Color</th><th name='optionHeader'>Icon</th></tr>";
      for (var loop = 0; loop <= 5; loop++) {
        content +=
          "<tr>" +
            "<td>"+translateKey("statusDisplayLine")+ " "+(loop + 1)+": </td>"+
            "<td><select id='textSelect_"+loop+"' onchange='textOnChange(this)'>"+textOptions+"</select></td>" +
            //"<td id='cellFreeText_"+loop+"' class='hidden'><input id='freeText_"+loop+"' type='text' onchange='encodeStringStatusDisplay(this);' value='"+freeTextValue+"' maxlength='12' size='15' style='text-align:center'></td>" +
            "<td id='cellFreeText_"+loop+"' class='hidden'><input id='freeText_"+loop+"' type='text' value='"+freeTextValue+"' maxlength='12' size='15' style='text-align:center'></td>" +
            "<td id='placeHolder_"+loop+"' class='hidden'></td>" +
            "<td name='optionContainer_"+loop+"' class='hidden'><select id='colorSelect_"+loop+"'>"+colorOptions+"</select></td>" +
            "<td name='optionContainer_"+loop+"' class='hidden'><select id='iconSelect_"+loop+"' onchange='iconOnChange(this)'>"+iconOptions+"</select></td>" +
            "<td name='optionContainer_"+loop+"' class='hidden' id='iconPreview_"+loop+"'></td>"+
          "</tr>";
      }
      return content;
    });
  },

  // Creates the options for the text selector
  _getTextOptions: function() {
    var options = "";
    options += "<option value='-1'>"+translateKey("stringTableNotUsed")+"</option>";
    for (var loop = 0; loop <= 19; loop++) {
      options += "<option value='"+loop+"'>"+ translateKey("statusDisplayOptionText")+ " " +loop+"</option>";
    }
    options += "<option value='99'>"+translateKey("statusDisplayOptionFreeText")+"</option>";
    return options;
  },

  // Creates the options for the color selector
  _getColorOptions: function() {
    var arColors =[
      translateKey("statusDisplayOptionWhite"),
      translateKey("statusDisplayOptionRed"),
      translateKey("statusDisplayOptionOrange"),
      translateKey("statusDisplayOptionYellow"),
      translateKey("statusDisplayOptionGreen"),
      translateKey("statusDisplayOptionBlue")
    ];

    var options = "";
    for (var loop = 0; loop < arColors.length; loop++) {
      options += "<option value='"+loop+"'>" + arColors[loop] + "</option>";
    }
    return options;
  },

  // Creates the options for the icon selector
  _getIconOptions: function() {
    var options = "",
    arOptionText = [
      translateKey("iconOff"),
      translateKey("iconOn"),
      translateKey("iconOpen"),
      translateKey("iconClosed"),
      translateKey("iconError"),
      translateKey("iconOK"),
      translateKey("iconInfo"),
      translateKey("iconNewMessage"),
      translateKey("iconServiceMessage"),
      translateKey("iconSignalGreen"),
      translateKey("iconSignalYellow"),
      translateKey("iconSignalRed")
    ];
    options += "<option name='option_NotUsed' value='-1'>" + translateKey("stringTableNotUsed") + "</option>";
    for (var loop = 0; loop < 12; loop++) {
      // Remark 2: This doesn´t work satisfying -- see Remark 1
      //options += "<option name='option'"+loop+" value='"+loop+"' data-image='/ise/img/tr50.gif'>Icon "+loop+"</option>";
      options += "<option name='option_"+loop+"' value='"+loop+"'>" + arOptionText[loop] + "</option>";
    }
    return options;
  },

  // Returns an array of objects with the values of all lines.
  // [Object {text="0x80, color="0x81", icon="0x82},.....]}
  _getAllValues: function() {
    var val = this.channelValue;
    var arValues = val.split(","), //replace(/ /g, "").split(","),
    arLines = []; // contains the lines 0 - 5

    // Is a start key and end key available? Otherwise the string isn´t valid.
    if (arValues[0] == this.startKey && arValues[arValues.length - 1] == this.endKey) {
      var lineIndex = 0,
      textEndIndex,
      txtLengthCounter = 0,
      lineLengthOffset = 0;

      arValues.shift(); // remove the start key 0x02
      arValues.pop(); // remove the end key 0x03

      for (var loopx = 0; loopx < arValues.length; loopx++) {
        var valueSet = {};
        // Is LF?
        if (arValues[loopx] == this.lf) {
          valueSet.text="notUsed";
           arLines[lineIndex] = valueSet;
          lineIndex++;
        }
        if (arValues[loopx] == this.textKey) {
          textEndIndex = jQuery.inArray(this.colorKey, arValues, loopx);
          // Fetch text
          valueSet.text = "";
          for (var loopy = loopx + 1; loopy < textEndIndex; loopy++) {
            valueSet.text += arValues[loopy];
            txtLengthCounter++;
            if (loopy < textEndIndex - 1) {
              valueSet.text += ",";
            }
          }
          // Fetch color
          valueSet.color = arValues[textEndIndex + 1];
          // Fetch icon
          if (arValues[textEndIndex + 2] == this.iconKey) {
            valueSet.icon = arValues[textEndIndex + 3];
            lineLengthOffset = 5;
          } else {
            valueSet.icon = -1;
            lineLengthOffset = 3;
          }
          arLines[lineIndex] = valueSet;
          lineIndex++;

          // Set loopx counter to the end of the text line
          loopx+=txtLengthCounter+lineLengthOffset;
          txtLengthCounter = 0;
        }
      }
    } else {
      conInfo("Value string invalid");
    }
    return arLines;
  },

  // Determines the real value of the HexVal
  // For example: 0x80 = 0, 0x81 = 1 and so on
  _convertHexVal2Val: function(hexVal) {
    if (parseInt(hexVal.split(",")[0],16) < 128 ) {
      // User defined text
      return 99;
    }
    return parseInt(hexVal, 16) - 128;
  },

  // Converts a value to the necessary hex format
  // For example: 0 = 0x80, 1 = 0x81 and so on
  _convertVal2HexVal: function(intVal) {
    return "0x" + (parseInt("0x80",16) + parseInt(intVal)).toString(16);
  },

  // Converts a ASCII string to a string with comma separated hex values
  _convertPlainText2Hex: function(sPlainText) {
    var hex = '';
   	for(var i=0;i<sPlainText.length;i++) {
   		hex += '0x'+sPlainText.charCodeAt(i).toString(16);
      hex += ",";
   	}
   	return hex;
  },

  // Converts a comma separated string of hex values to a ASCII string
   _convertHexString2PlainText: function(sHexString) {
    var arHexValues = sHexString.split(","),
    tmpStr,str = "";
    for(var loop = 0; loop < (arHexValues.length); loop++) {
      tmpStr = arHexValues[loop].slice(2,4);
      str += String.fromCharCode(parseInt(tmpStr, 16));
    }
    return str;
  },

  /**
   * Initializes the dialog
   * @private
   */
  _initAllValues: function() {
    var self = this,
    arAllValues = this._getAllValues();

    conInfo("All values of the channel: ");
    conInfo(arAllValues);

    jQuery.each(arAllValues, function(index, line) {
      var textElm = jQuery("#textSelect_" + index),
      colorElm = jQuery("#colorSelect_" + index),
      iconElm = jQuery("#iconSelect_" + index),
      freeTextElm = jQuery("#freeText_" + index);

      if (line.text != "notUsed") {
        textElm.val(self._convertHexVal2Val(line.text));
        // User defined text
        if (parseInt(line.text.split(",")[0],16) < 128) {
          freeTextElm.val(decodeStringStatusDisplay(self._convertHexString2PlainText(line.text)));
        }
        colorElm.val(self._convertHexVal2Val(line.color));
        if (line.icon != -1) {
          iconElm.val(self._convertHexVal2Val(line.icon));
          setIconPreview({index: index, value: iconElm.val()});
        } else {
          // Icon not in use
          iconElm.val("-1");
        }
        displayStatusDisplayOptionContainer(index, true);
      } else {
        textElm.val("-1");
      }
    });
    setFreeTextContainer();
  },

  // Not in use
  _initIconPreview: function() {
    var previewElm;
    for(var loop = 0; loop < 9; loop++) {
      previewElm = jQuery("#iconPreview_"+loop);
      previewElm.html("<img src='/ise/img/icons_hm_dis_wm55/24/"+"0.png' alt='' style='height:16px;'>");
    }
  },

  // Not in use
  _initDisplayConfigObject: function() {
    var template = {
      "keyText" : this.keyText,
      "valText" : this.valText,
      "keyColor" : this.keyColor,
      "valColor" : this.valColor,
      "keyIcon" : this.keyIcon,
      "valIcon" : this.valIcon
    };
    for (var loop = 0; loop <= 5; loop++) {
      this.arDisplayData[loop] = template;
    }
  },

  // Creates the string, necessary for the text field within the program
  _createConfigString: function() {
    var textElm, freeTextElm, colorElm, iconElm;
    var result = this.startKey + ","; // Start key

    // Read 6 lines and create string
    for (var loop = 0; loop < 6; loop++) {
      textElm = jQuery("#textSelect_" + loop);
      colorElm = jQuery("#colorSelect_" + loop);
      iconElm = jQuery("#iconSelect_" + loop);
      freeTextElm = jQuery("#freeText_" + loop);

      if (textElm.val() == -1) {
        result+= this.lf + ",";
      } else {
        result += this.textKey + ",";
        if (textElm.val() != "99") {
          // Predefined text bloc
          result += this._convertVal2HexVal(textElm.val()) + ",";
        } else {
          // Free user customized text
          //result += freeTextElm.val() + ",";
          result += this._convertPlainText2Hex(freeTextElm.val());
        }
        result += this.colorKey + ",";
        result += this._convertVal2HexVal(colorElm.val()) + ",";
        if (iconElm.val() != -1) {
          result += this.iconKey + ",";
          result += this._convertVal2HexVal(iconElm.val()) + ",";
        }
        result += this.lf + ",";
      }
    }
    result+= this.endKey; // End key
    this.configString = result;
  },


  // PUBLIC
  getConfigString: function() {
    return this.configString;
  },

  close: function(result)
  {
    Layer.remove(this.m_layer);
    if (this.m_callback) { this.m_callback(result); }
  },
  
  yes: function()
  {
    this._createConfigString();
    this.close(YesNoDialog.RESULT_YES);
  },
  
  no: function()
  {
    this.close(YesNoDialog.RESULT_NO);
  }
  
});

YesNoDialog.RESULT_NO = 0;
YesNoDialog.RESULT_YES = 1;
/**
 * rgbwcontrollerdialog.js
 **/

/**
 * Dialogbox mit den Schaltflächen "Ja" und "Neine"
 * Normalerweise wird als content Text übergeben,
 * wenn contentType 'html' gesetzt ist, kann auch HTML übergeben werden.
 * Die Höhe des Dialoges sollte sich dynamisch der Contentgröße anpassen.
 **/
RGBWControllerDialog = Class.create({

  initialize: function (title, content, param, curValue, callback, contentType) {
    var _this_ = this;
    var sCurValue = curValue.replace(/'/g, "\"");

    this.DEFAULTBRIGHTNESS = 200;

    this.m_contentType = contentType;
    this.m_callback = callback;
    this.m_layer = document.createElement("div");
    this.m_layer.className = "YesNoDialogLayer";
    this.param = param;
    this.curValues = JSON.parse(sCurValue);
    this.configString = "not initialized";
    var dialog = document.createElement("div");
    dialog.className = "YesNoDialog";

    var titleElement = document.createElement("div");
    titleElement.className = "YesNoDialogTitle";
    titleElement.appendChild(document.createTextNode(title));
    titleElement.onmousedown = function (event) {
      new Drag(this.parentNode, event);
    };
    dialog.appendChild(titleElement);

    var contentWrapper = document.createElement("div");
    contentWrapper.className = "YesNoDialogContentWrapper";

    var contentElement = document.createElement("div");
    contentElement.className = "YesNoDialogContent";

    if (this.m_contentType == "html") {
      contentElement.innerHTML = content;
    } else {
      contentElement.appendChild(document.createTextNode(content));
    }

    contentWrapper.appendChild(contentElement);

    dialog.appendChild(contentWrapper);

    var footer = document.createElement("div");
    footer.className = "YesNoDialogFooter";

    var yesButton = document.createElement("div");
    yesButton.className = "YesNoDialog_yesButton borderRadius5px colorGradient50px";
    yesButton.appendChild(document.createTextNode(translateKey('btnOk')));
    yesButton.onclick = function () {
      _this_.yes();
    };
    footer.appendChild(yesButton);

    var noButton = document.createElement("div");
    noButton.className = "YesNoDialog_noButton borderRadius5px colorGradient50px";
    noButton.appendChild(document.createTextNode(translateKey('dialogBack')));
    noButton.onclick = function () {
      _this_.no();
    };
    footer.appendChild(noButton);

    dialog.appendChild(footer);

    this.m_layer.appendChild(dialog);

    Layer.add(this.m_layer);

    this.__activateSubDialog();

    //AG sorgt dafür, daß die Dialoghöhe sich dynamisch dem Content anpasst.
    jQuery(".YesNoDialog").css("height", jQuery(".YesNoDialogContentWrapper").height() + 78);
    jQuery(".YesNoDialogFooter").css("top", jQuery(".YesNoDialogContentWrapper").height() + 26);

    translatePage('#RGBWControllerColor, #RGBWControllerProgram');

  },

  // This creates the content of the dialog.
  __activateSubDialog: function () {
    switch (this.param) {
      /*
       case "BRIGHTNESS" :
       jQuery("#RGBWControllerBrightness").show();
       break;
       */
      case "RGBW_COLOR" :
        /*
         Array curValues
         0 Color val
         1 Brightness
         2 Ramptime
         3 OnTime
         */
        var elmBrightness = jQuery("#colorRGBControllerBrightness"),
          elmRampTime = jQuery("#colorRGBControllerRampTime"),
          elmOnTime = jQuery("#colorRGBControllerOnTime"),
          elmFreeRampTimeContainer = jQuery("#colorRGBEnterFreeRampTimeContainer"),
          elmFreeOnTimeContainer = jQuery("#colorRGBEnterFreeOnTimeContainer");

        elmBrightness.val(this.curValues["ACT_BRIGHTNESS_STORE"] || this.DEFAULTBRIGHTNESS);

        // RampTime
        if (this.curValues["RAMP_TIME_STORE"]) {
          elmRampTime.val(this.__setTimeValue("colorRGBControllerRampTime", this.curValues["RAMP_TIME_STORE"]));
        } else {
          elmRampTime.val(0.5);
        }

        // OnTime
        if (this.curValues["ON_TIME_STORE"]) {
          elmOnTime.val(this.__setTimeValue("colorRGBControllerOnTime", this.curValues["ON_TIME_STORE"]));
        } else {
          elmOnTime.val(118000);
        }
        elmRampTime.change(function (e) {
          if (jQuery(this).val() == "99999999") {
            elmFreeRampTimeContainer.show();
          } else {
            elmFreeRampTimeContainer.hide();
          }
        });

        elmOnTime.change(function (e) {
          if (jQuery(this).val() == "99999999") {
            elmFreeOnTimeContainer.show();
          } else {
            elmFreeOnTimeContainer.hide();
          }
        });

        jQuery("#RGBWControllerColor").show();
        this.__activateColorPicker();
        break;
      case "RGBW_AUTOMATIC":
        /*
         Array curValues
         0 Program
         1 Brightness
         2 Ramptime
         3 OnTime
         4 Color Min
         5 Color Max
         */
        var
          self = this,
          elmProgram = jQuery("#prgRGBControllerProgram"),
          elmBrightness = jQuery("#prgRGBControllerBrightness"),
          elmRampTime = jQuery("#prgRGBControllerRampTime"),
          elmOnTime = jQuery("#prgRGBControllerOnTime"),
          elmFreeRampTimeContainer = jQuery("#prgRGBEnterFreeRampTimeContainer"),
          elmFreeOnTimeContainer = jQuery("#prgRGBEnterFreeOnTimeContainer"),
          elmMinColorActive = jQuery("#prgRGBControllerMinColorActive"),
          elmMaxColorActive = jQuery("#prgRGBControllerMaxColorActive");

        elmProgram.val(this.curValues["ACT_COLOR_PROGRAM_STORE"] || 0);
        elmBrightness.val(this.curValues["ACT_BRIGHTNESS_STORE"] || this.DEFAULTBRIGHTNESS);

        // RampTime
        if (this.curValues["RAMP_TIME_STORE"]) {
          elmRampTime.val(this.__setTimeValue("prgRGBControllerRampTime", this.curValues["RAMP_TIME_STORE"]));
        } else {
          elmRampTime.val(0.5);
        }

        // OnTime
        if (this.curValues["ON_TIME_STORE"]) {
          elmOnTime.val(this.__setTimeValue("prgRGBControllerOnTime", this.curValues["ON_TIME_STORE"]));
        } else {
          elmOnTime.val(118000);
        }

        elmRampTime.change(function (e) {
          if (jQuery(this).val() == "99999999") {
            elmFreeRampTimeContainer.show();
          } else {
            elmFreeRampTimeContainer.hide();
          }
        });

        elmOnTime.change(function (e) {
          if (jQuery(this).val() == "99999999") {
            elmFreeOnTimeContainer.show();
          } else {
            elmFreeOnTimeContainer.hide();
          }
        });

        elmMinColorActive.change(function (e) {
          if (jQuery(this).prop("checked")) {
            if (self.curValues[4] == 255) {
              jQuery("#prgRGBControllerMinColor").spectrum("set", "hsv(0,100%,100%)");
            }
            jQuery("#prgRGBControllerMinColor").spectrum("enable");
          } else {
            jQuery("#prgRGBControllerMinColor").spectrum("disable");
          }
        });

        elmMaxColorActive.change(function (e) {
          if (jQuery(this).prop("checked")) {
            if (self.curValues[5] == 255) {
              jQuery("#prgRGBControllerMaxColor").spectrum("set", "hsv(359,100%,100%)");
            }
            jQuery("#prgRGBControllerMaxColor").spectrum("enable");
          } else {
            jQuery("#prgRGBControllerMaxColor").spectrum("disable");
          }
        });

        jQuery("#RGBWControllerProgram").show();
        this.__activateColorPickerMinMax("min");
        this.__activateColorPickerMinMax("max");
        break;
    }
  },

  // PUBLIC
  getConfigString: function () {
    return this.configString;
  },


  __setTimeValue: function (strTimeElem, value) {
    var maxValue = 85825945;
    var optionAvailable = false;
    var fullSeconds = (value <= maxValue) ? value : maxValue;

    jQuery("#" + strTimeElem + " > option").each(function () {
      if (this.value == fullSeconds) {
        optionAvailable = true;
      }
    });

    if (!optionAvailable) {
      var days = Math.floor(fullSeconds / 86400);
      var hours = Math.floor(fullSeconds / 3600) % 24;
      var minutes = Math.floor((fullSeconds - (hours * 3600)) / 60) % 60;
      var seconds = fullSeconds - ((days * 86400) + (hours * 3600) + (minutes * 60));
      var sHour = (hours < 10) ? "0" + hours : hours,
        sMinutes = (minutes < 10) ? "0" + minutes : minutes,
        sSeconds = (seconds < 10) ? "0" + seconds : seconds;

      if (days > 0) {
        jQuery("#" + strTimeElem).append("<option value='" + fullSeconds + "'>" + days + " days - " + sHour + ":" + sMinutes + ":" + sSeconds + "</value>");
      } else {
        jQuery("#" + strTimeElem).append("<option value='" + fullSeconds + "'>" + sHour + ":" + sMinutes + ":" + sSeconds + "</value>");
      }
    }
    return fullSeconds;
  },


  __getBrightness: function () {
  },

  __getColor: function () {
    var color = jQuery("#colorRGBControllerColor").val(),
      brightness = jQuery("#colorRGBControllerBrightness").val(),
      rampTime = jQuery("#colorRGBControllerRampTime").val(),
      onTime = jQuery("#colorRGBControllerOnTime").val();

    var result = "{'ACT_HSV_COLOR_VALUE_STORE':"+color+
      ",'ACT_BRIGHTNESS_STORE':" + brightness +
      ",'RAMP_TIME_STORE':" + rampTime +
      ",'ON_TIME_STORE':" + onTime +
      "}";

    //return color + "," + brightness + "," + rampTime + "," + onTime;
    return result;
  },

  __getProgram: function () {
    var program = jQuery("#prgRGBControllerProgram").val(),
      brightness = jQuery("#prgRGBControllerBrightness").val(),
      rampTime = jQuery("#prgRGBControllerRampTime").val(),
      onTime = jQuery("#prgRGBControllerOnTime").val(),
      minColor = jQuery("#prgRGBControllerMinColor").val(),
      maxColor = jQuery("#prgRGBControllerMaxColor").val(),
      elmMinColorActive = jQuery("#prgRGBControllerMinColorActive"),
      elmMaxColorActive = jQuery("#prgRGBControllerMaxColorActive");

    if (!elmMinColorActive.prop("checked")) {
      minColor = 255;
    }
    if (!elmMaxColorActive.prop("checked")) {
      maxColor = 255;
    }

    var result = "{'ACT_COLOR_PROGRAM_STORE':" + program +
      ",'ACT_BRIGHTNESS_STORE':" + brightness +
      ",'RAMP_TIME_STORE':" + rampTime +
      ",'ON_TIME_STORE':" + onTime +
      ",'ACT_MIN_BORDER_STORE':" + minColor +
      ",'ACT_MAX_BORDER_STORE':" + maxColor +
      "}";

    //return program + "," + brightness + "," + rampTime + "," + onTime + "," + minColor + "," + maxColor;
    return result;
  },

  __setConfigString: function () {
    switch (this.param) {
      case "BRIGHTNESS" :
        this.configString = this.__getBrightness();
        break;
      case "RGBW_COLOR" :
        var freeRampTimeHour = jQuery("#colorRGBEnterFreeRampTimeHour").val(),
          freeRampTimeMin = jQuery("#colorRGBEnterFreeRampTimeMin").val(),
          freeRampTimeSec = jQuery("#colorRGBEnterFreeRampTimeSec").val();

        var freeOnTimeHour = jQuery("#colorRGBEnterFreeOnTimeHour").val(),
          freeOnTimeMin = jQuery("#colorRGBEnterFreeOnTimeMin").val(),
          freeOnTimeSec = jQuery("#colorRGBEnterFreeOnTimeSec").val();

        if (jQuery("#colorRGBEnterFreeRampTimeContainer").css("display") != "none") {
          var userValRampTime = parseInt(freeRampTimeHour * 3600) + parseInt(freeRampTimeMin * 60) + parseInt(freeRampTimeSec);
          jQuery("#colorRGBControllerRampTime").append("<option value='" + userValRampTime + "'>" + userValRampTime + "</value>");
          jQuery("#colorRGBControllerRampTime").val(userValRampTime);
        }

        if (jQuery("#colorRGBEnterFreeOnTimeContainer").css("display") != "none") {
          var userValOnTime = parseInt(freeOnTimeHour * 3600) + parseInt(freeOnTimeMin * 60) + parseInt(freeOnTimeSec);
          jQuery("#colorRGBControllerOnTime").append("<option value='" + userValOnTime + "'>" + userValOnTime + "</value>");
          jQuery("#colorRGBControllerOnTime").val(userValOnTime);
        }

        this.configString = this.__getColor();
        break;
      case "RGBW_AUTOMATIC":

        var freeRampTimeHour = jQuery("#prgRGBEnterFreeRampTimeHour").val(),
          freeRampTimeMin = jQuery("#prgRGBEnterFreeRampTimeMin").val(),
          freeRampTimeSec = jQuery("#prgRGBEnterFreeRampTimeSec").val();

        var freeOnTimeHour = jQuery("#prgRGBEnterFreeOnTimeHour").val(),
          freeOnTimeMin = jQuery("#prgRGBEnterFreeOnTimeMin").val(),
          freeOnTimeSec = jQuery("#prgRGBEnterFreeOnTimeSec").val();

        if (jQuery("#prgRGBEnterFreeRampTimeContainer").css("display") != "none") {
          var userValRampTime = parseInt(freeRampTimeHour * 3600) + parseInt(freeRampTimeMin * 60) + parseInt(freeRampTimeSec);
          jQuery("#prgRGBControllerRampTime").append("<option value='" + userValRampTime + "'>" + userValRampTime + "</value>");
          jQuery("#prgRGBControllerRampTime").val(userValRampTime);
        }

        if (jQuery("#prgRGBEnterFreeOnTimeContainer").css("display") != "none") {
          var userValOnTime = parseInt(freeOnTimeHour * 3600) + parseInt(freeOnTimeMin * 60) + parseInt(freeOnTimeSec);
          jQuery("#prgRGBControllerOnTime").append("<option value='" + userValOnTime + "'>" + userValOnTime + "</value>");
          jQuery("#prgRGBControllerOnTime").val(userValOnTime);
        }

        this.configString = this.__getProgram();
        break;
    }
  },

  __activateColorPicker: function () {
    var saturation = "100%";
    if (this.curValues["ACT_HSV_COLOR_VALUE_STORE"] > 199) {
      this.curValues["ACT_HSV_COLOR_VALUE_STORE"] = 200;
      saturation = "0%";
    }
    var hsvVal = parseInt(this.curValues["ACT_HSV_COLOR_VALUE_STORE"] / 199 * 360);
    jQuery("#colorRGBControllerColor").val(this.curValues["ACT_HSV_COLOR_VALUE_STORE"]);

    jQuery("#colorRGBControllerColor").spectrum({
      preferredFormat: "convert360To200",
      showInput: false,
      color: "hsv(" + hsvVal + "," + saturation + ",100%)",
      showPalette: true,
      palette: ["white"],
      cancelText: translateKey("btnCancel"),
      chooseText: translateKey("btnOk")
    });
  },

  __activateColorPickerMinMax: function (mode) {
    var strColorElm,
      strColorActiveElm,
      curValue,
      pickerState;

    if (mode == "min") {
      strColorElm = "#prgRGBControllerMinColor";
      strColorActiveElm = "#prgRGBControllerMinColorActive";
      curValue = (this.curValues["ACT_MIN_BORDER_STORE"]) ? this.curValues["ACT_MIN_BORDER_STORE"] : 0;
    } else {
      strColorElm = "#prgRGBControllerMaxColor";
      strColorActiveElm = "#prgRGBControllerMaxColorActive";
      curValue = (this.curValues["ACT_MAX_BORDER_STORE"]) ? this.curValues["ACT_MAX_BORDER_STORE"] : 199;
    }

    if (curValue == 255) {
      jQuery(strColorActiveElm).prop("checked", false);
    } else {
      jQuery(strColorActiveElm).prop("checked", true);
    }

    pickerState = (curValue == 255) ? true : false;

    var saturation = "100%";
    var hsvVal = parseInt(curValue / 199 * 360);
    jQuery(strColorElm).val(curValue);

    jQuery(strColorElm).spectrum({
      preferredFormat: "convert360To200",
      showInput: false,
      color: "hsv(" + hsvVal + "," + saturation + ",100%)",
      showPalette: true,
      disabled: pickerState,
      palette: [],
      cancelText: translateKey("btnCancel"),
      chooseText: translateKey("btnOk")
    });
  },

  close: function (result) {
    Layer.remove(this.m_layer);
    if (this.m_callback) {
      this.m_callback(result);
    }
  },

  yes: function () {
    this.__setConfigString();
    this.close(YesNoDialog.RESULT_YES);
  },

  no: function () {
    this.close(YesNoDialog.RESULT_NO);
  }

});

YesNoDialog.RESULT_NO = 0;
YesNoDialog.RESULT_YES = 1;
/**
 * Kopfleiste
 **/
HeaderBar = new function()
{

  // This causes problems with Mac & Safari
  this.load_ = function()
  {
    new Ajax.Updater("header", "/ise/htm/header.htm", {
      evalScripts: true,
      asynchronous: false
    });
  };

  this.load = function() {
    jQuery.ajax({
    url: "/ise/htm/header.htm",
    dataType: "html",
    async: false,
    context: document.body
    }).done(function(response) {
      jQuery("#header").html(response);
    });
  };

}();/**
 * mainmenu.js
 **/

/**
 * Hauptmenü
 **/
MainMenu = Singleton.create({  
  MAINMENU_ADMIN_FILE:   "/webui/js/mainmenu/admin.js",
  MAINMENU_USER_FILE:    "/webui/js/mainmenu/user.js",
  ID:                    "menubar",
  MAINMENU_ITEM_LEFT:    "MainMenuItem_Left",
  MAINMENU_ITEM_RIGHT:   "MainMenuItem_Right",
  MAINMENU_ITEM_CAPTION: "MainMenuItem_Caption",
  SUBMENU:               "MainMenuSubMenu",
  CAPTION_SUFFIX:        "_TITLE",
  SUBMENU_SUFFIX:        "_SUBMENU",
  ITEM_SELECTED:         "MainMenuItem_Selected",
  ITEM_HIGHLIGH:         "MainMenuItem_Highlight",
  SUBITEM_HIGHLIGHT:     "MainMenuSubItem_Highlight",
  
  /**
   * Initialisiert das Hauptmenü
   **/
  initialize: function()
  {
    this.m_selectedId = null;
    this.m_id         = null;
    
    switch (getUPL())
    {
      case UPL_ADMIN: this.m_menu = eval("(" + HttpLoader.getText(this.MAINMENU_ADMIN_FILE) + ")"); break;
      case UPL_USER:  this.m_menu = eval("(" + HttpLoader.getText(this.MAINMENU_USER_FILE) + ")"); break;
      default:        this.m_menu = null; break;
    }
  },
  
  /**
   * Erzeugt ein Untermenü-Element.
   **/
  m_createSubmenuItem: function(menuItem, submenuItem)
  {
    var _submenuItem_ = submenuItem;
    var _menuItem_ = menuItem;
    
    var row = document.createElement("tr");

    var cell = document.createElement("td");
    cell.className = "MainMenuSubItem";
    cell.id = submenuItem.id;
    //cell.appendChild(document.createTextNode("${"+submenuItem.id+"}"));  
    cell.appendChild(document.createTextNode(translateKey(submenuItem.id)));
    Event.observe(cell, "mouseover", function() { MainMenu.highlightOn(this); });
    Event.observe(cell, "mouseout", function()  { MainMenu.highlightOff(this); });
    Event.observe(cell, "click", function() { MainMenu.beginHideSubmenu(_menuItem_); _submenuItem_.action.defer(); });
    row.appendChild(cell);
    
    return row;
  },
  
  /**
   * Erzeugt ein Menüelement
   **/
  m_createMenuItem: function(menuItem)
  {
    var _menuItem_ = menuItem;
    
    var menuElement = document.createElement("div");
    menuElement.id = menuItem.id;
    if (menuItem.align == "left") { menuElement.className = "MainMenuItem_Left"; }
    else                          { menuElement.className = "MainMenuItem_Right"; }

    if (menuItem.id == "menuHelpPage") {menuElement.className = "MainMenuItem_Right MainMenuItem_Help";}

    Event.observe(menuElement, "mouseover", function() { MainMenu.showSubmenu(_menuItem_); });
    Event.observe(menuElement, "mouseout", function() { MainMenu.beginHideSubmenu(_menuItem_); });
    
    var caption = document.createElement("div");
    caption.id = menuItem.id + "_TITLE";
    caption.className = "MainMenuItemCaption";
    //caption.appendChild(document.createTextNode("${"+menuItem.id+"}"));
    caption.appendChild(document.createTextNode(translateKey(menuItem.id)));
    Event.observe(caption, "click", function() { MainMenu.beginHideSubmenu(_menuItem_); _menuItem_.action.defer(); });
    menuElement.appendChild(caption);
    
    var submenu = menuItem.submenu;
    if (submenu.length > 0)
    {
      var submenuElement = document.createElement("div");
      submenuElement.id = menuItem.id + "_SUBMENU";
      submenuElement.className = "MainMenuSubMenu";
      Element.setStyle(submenuElement, {display: "none"});
      
      var table = document.createElement("table");
      table.border = "0";
      submenuElement.appendChild(table);
      
      var tbody =  document.createElement("tbody");
      table.appendChild(tbody);
      
      for (var i = 0, len = submenu.length; i < len; i++)
      {
        tbody.appendChild(this.m_createSubmenuItem(menuItem, submenu[i]));
      }
      menuElement.appendChild(submenuElement);
    }
    
    return menuElement;
  },
    
  /**
   * Erzeugt ein neues Hauptmenü
   **/
  create: function(menubar)
  {
    if (this.m_menu !== null)
    {
      for (var i = 0, len = this.m_menu.length; i < len; i++)
      {
        menubar.appendChild(this.m_createMenuItem(this.m_menu[i]));
      }
    }
    else
    {
      menubar.hide();
    }
  },
    
  /**
   * Zeigt ein Untermenü an
   **/
  showSubmenu: function(menuItem)
  {
    this.hideSubmenu();
    
    var id = menuItem.id;
    
    if (this.m_id == id) { this.m_id = null; }
    
    Element.addClassName(id, this.ITEM_HIGHLIGH);
    var submenu = $(id + this.SUBMENU_SUFFIX);
    if (submenu) { submenu.show(); }
  },
  
  /**
   * Beginnt damit, ein Untermenü verzögert zu schließen
   **/
  beginHideSubmenu: function(menuItem)
  {
    this.m_id = menuItem.id;
    window.setTimeout("MainMenu.hideSubmenu();", 1);
  },
  
  /**
   * Schließt ein Untermenü
   **/
  hideSubmenu: function()
  {
    if ($(this.m_id))
    {
      var menu    = $(this.m_id);
      var submenu = $(this.m_id + this.SUBMENU_SUFFIX);

      if (menu)    { menu.removeClassName(this.ITEM_HIGHLIGH); }
      if (submenu) { submenu.hide(); }
      this.m_id = null;
    }
  },
  
  /**
   * Hebt ein Untermenüelement farblich hervor.
   **/
  highlightOn: function(element, event)
  {
    Element.addClassName(element, this.SUBITEM_HIGHLIGHT);
  },
  
  /**
   * Deaktiviert die Hervorhebung eines Untermenüelements
   **/
  highlightOff: function(element, event)
  {    
    Element.removeClassName(element, this.SUBITEM_HIGHLIGHT);
  },
  
  /**
   * Wählt ein Menüelement aus.
   * Dieses wird dann entsprechend farblich hinterlegt.
   **/
  select: function(id)
  {
    if (this.m_selectedId !== null) { Element.removeClassName(this.m_selectedId, this.ITEM_SELECTED); }
    this.m_selectedId = id;
    if (this.m_selectedId !== null) { Element.addClassName(this.m_selectedId, this.ITEM_SELECTED); }
  }
  
});
/**
 * ipage.js
 **/

/**
 * Schnittstelle für Seiten
 **/
IPage = Interface.create({

  /**
   * Callback für das Betreten der Seite
   **/
  enter: function(options) {},
  
  /**
   * Callback für das Verlassen der Seite
   **/
  leave: function() {},
  
  /**
   * Callback beim Verändern der Bildschirmgröße
   **/
  resize: function() {}
  
});
/**
 * page.js
 **/

/**
 * Basisklasse für alle Seiten
 **/ 
Page = Class.create({
  __interfaces__: [IPage],
  MAINMENU_ID: null,
  
  /**
   * Callback. Wird beim Betreten der Seite aufgerufen.
   **/
  enter: function(options)
  {
    MainMenu.select(MAINMENU_ID);
  },
  
  /**
   * Callback. Wird beim Verlassen der Seite aufgerufen.
   **/
  leave: function()
  {
  },
  
  /**
   * Callback. Wird beim Verändern des Bildschirms aufgerufen.
   **/
  resize: function()
  {
  }
  
});
/**
 * StartPage.js
 **/
 
StartPage = Singleton.create(Page, {
  MAINMENU_ID: "MAINMENU_STARTPAGE",

  downloadURL: "http://update.homematic.com/firmware/download?cmd=download",
  devList: [],
  devIndex: 0,
  newFwCounter: 0,
  messageBoxHTML: "",
  fetchDeviceList: false,

  /**
   * Konstrutor
   **/
  initialize: function ()
  {

    this.deviceList = [];

    switch (getUPL())
    {
      case UPL_ADMIN:
      case UPL_USER:
        this.resize = this.resizeUser;
        break;
      case UPL_GUEST:
        this.rezise = this.resizeGuest;
        break;
      default:
        break;
    }
  },
  
  /**
   * Callback. Wird beim betreten der Seite aufgerufen.
   **/
  enter: function(options)
  {
    iseInitUpdateArrays();
    setPath("");
    setFooter("");
    WebUI.resize();
  
    switch (getUPL())
    {
      case UPL_ADMIN:
      case UPL_USER:
        MainMenu.select(this.MAINMENU_ID);
        loadStartPage(options);
        break;
      case UPL_GUEST:
        loadStartPageGuest(options);
        break;
      default:
        break;
    }
  },
  
  /**
   * Berechnet die Größe der normalen Startseite (Admin und Benutzer)
   **/
  resizeUser: function()
  {
    var contentHeight     = $("content").getHeight();
    var contentWidth      = $("content").getWidth();
    var width = parseInt(contentWidth / 2);
    
    if ($("contentLeft"))
    {
      //Element.setStyle("contentLeft", {"height": contentHeight + "px", "width": width + "px"});
      Element.setStyle("contentLeft", {"height": contentHeight + "px", "width": "55%"});
    }
    if ($("contentLeft"))
    {
      //Element.setStyle("contentRight", {"height": contentHeight + "px", "width": (width - 10) + "px"});
      Element.setStyle("contentRight", {"height": contentHeight + "px", "width": "44%"});
    }
    
    if ($("favSelector"))
    {   
      var FavSelectorHeight = $("favSelector").getHeight();
      var FAV_MARGIN_HEIGHT = 8;          
      var favViewHeight = (contentHeight - FavSelectorHeight - FAV_MARGIN_HEIGHT) * 0.95;
      $("favView").setStyle({"height": favViewHeight});
    }
  },

  getPageMeasurement: function() {
    var pageElements = ["body","#header", "#menubar", "#favSelector", "#favView", "#footer"],
      elementDim = [];
    jQuery.each(pageElements, function(index, val) {
      var elm = jQuery(val);
      elementDim[val.replace(/^#/,"")] = {
        "height"  : elm.height(),
        "width"   : elm.width()
      };
    });
    return elementDim;
  },

   // WebUI-Version
  showCurrentFirmware: function() {
    jQuery("#currentFirmware").text(WEBUI_VERSION);
  },

  showAllDeviceFirmware: function() {
    var self = this;
    if (!this.fetchDeviceList) {
      this.fetchDeviceList = true; // prevents this to be called multiple times (when clicking the start page)
      this.messageBoxHTML = "";
      this.newFwCounter = 0;
      this.devList = [];
      this.devIndex = 0;
      homematic("Interface.listDevices", {"interface": "BidCos-RF"}, function (deviceList) {
        conInfo("Fetch RF device list");
        if (deviceList) {
          for (var i = 0; i < deviceList.length; i++) {
            var device = deviceList[i];
            if (device.children && device.type != "HM-RCV-50") {
              self.devList.push({"type": device.type, "firmware": device.firmware, "availableFirmware": device.availableFirmware, "updatable": (device.updatable == "1") ? true: false, "address": device.address});
            }
          }
        }
        homematic("Interface.listDevices", {"interface": "BidCos-Wired"}, function (deviceList) {
          conInfo("Fetch Wired device list");
          if (deviceList) {
            for (var i = 0; i < deviceList.length; i++) {
              var device = deviceList[i];
              if (device.children && device.type != "HMW-RCV-50") {
                self.devList.push({"type": device.type, "firmware": device.firmware, "availableFirmware": device.availableFirmware, "updatable": (device.updatable == "1") ? true: false, "address": device.address});
              }
            }
          }
          conInfo("Check firmware version of all devices - number of devices: " + self.devList.length);
          if (self.devList.length > 0) {
            self.fetchAndSetDeviceVersion();
          }
        });
      });
    }
  },

  fetchAndSetDeviceVersion: function() {
    var self = this;
    homematic.com.getAvailableDeviceFirmware(this.devList[this.devIndex].type, this.devIndex, function (result, product) {
      conInfo("fetchAndSetDeviceVersion");
      var devAddress = self.devList[self.devIndex].address,
      curFw = self.devList[self.devIndex].firmware,
      arCurFw = curFw.split("."),
      availableFW = self.devList[self.devIndex].availableFirmware,// auf der CCU gespeicherte Geräte-Fw.
      devIsUpdatable = self.devList[self.devIndex].updatable,
      arResultMajorMinorPatch,
      resultMajorMinor,
      newFW = result;

      // The current device fw has no patch version
      if (arCurFw.length == 2) {
        arResultMajorMinorPatch = result.split(".");
        resultMajorMinor = arResultMajorMinorPatch[0] + "." + arResultMajorMinorPatch[1];
        newFW = resultMajorMinor;
      }

      if (devIsUpdatable && result && (result != "n/a") && (newFW != curFw)) {
        // FW not yet available on the CCU
        if (availableFW != newFW) {
          self.messageBoxHTML += "<tr><td align='left' height='15px'>" + product + "</td><td>" + devAddress + "</td></td><td align='center'>" + curFw + "</td><td align='center' class='UILink' onClick=\"window.location.href='" + self.downloadURL + "&serial=0&product=" + product + "'\">" + result + "</td></tr>";
        } else {
          self.messageBoxHTML += "<tr><td align='left' height='15px'>" + product + "</td><td>" + devAddress + "</td></td><td align='center'>" + curFw + "</td><td align='center' class='UILink' onClick=alert(translateKey('hintDevFwAlreadyUploaded'));>" + result + "</td></tr>";
        }
        self.newFwCounter++;
      }

      self.devIndex++;
      if (self.devIndex < self.devList.length) {
        self.fetchAndSetDeviceVersion();
      } else {
        self.fetchDeviceList = false;
        if (self.newFwCounter > 0) {
          var rowShowDevFirmware = jQuery("#devFwAvailable"),
          btnShowDevFirmware = jQuery("#devFwAvailable .firmwareAvailable");
          btnShowDevFirmware.click(function () {
            self.showAvailableDeviceFirmware();
          });
          jQuery("#devFwAvailableCounter").text("("+self.newFwCounter+")");
          rowShowDevFirmware.show();
          self.deleteScriptElements();
        }
        conInfo("All devices checked. " + self.newFwCounter + " actualized firmware versions found!");
      }
    });
  },

  deleteScriptElements: function() {
    jQuery("#homematic_com_script").remove();
    for (var i = 0; i < this.devIndex; i++) {
      jQuery("#homematic_com_script_"+i).remove();
    }
  },

  showAvailableDeviceFirmware: function() {
    var contentHeight = jQuery("#content").innerHeight(),
    maxMessageBoxHeight = (this.newFwCounter * 20) + 50,
    msgBoxHeight = (maxMessageBoxHeight < contentHeight) ? maxMessageBoxHeight : contentHeight;

    MessageBox.show(translateKey("dialogShowDeviceFirmwareTitle"),
    "<table>"+
      "<colgroup>" +
      "<col width='200px'>" +
      "<col width='100px'>" +
      "<col width='100px'>" +
      "</colgroup>" +
      "<th align='left'>"+translateKey('dialogShowDeviceFirmwareTHDevice')+"</th>"+
      "<th align='left'>"+translateKey('thSerialNumber')+"</th>"+
      "<th align='center'>"+translateKey('dialogShowDeviceFirmwareTHCurFw')+"</th>"+
      "<th align='center'>"+translateKey('dialogShowDeviceFirmwareTHNewFw')+"</th>"+
      this.messageBoxHTML +
      //"<tr><td colspan='3' align='center'><a href='http://www.eq-3.de/downloads.html' target='_blank'>"+translateKey('dialogShowDeviceFirmwareLinkDownload')+"</a></td></tr>" +
    "</table>",
    "",
    400,
    msgBoxHeight
    );
  },

  showUpdate: function() {
    var fn = function() {
      var result = homematic.com.isUpdateAvailable();
      if ((result) && ($("updateCol")) && ($("updateRow"))) {
        var updateText = translateKey('firmware') + " " + homematic.com.getLatestVersion() + " " + translateKey('isAvailable');
        jQuery("#updateCol").text(updateText)
          .addClass("firmwareAvailable")
          .unbind("click").bind("click", function() {
            showNewFirmwareDownload();
          });
        jQuery("#updateRow").show();
      }
      return result;
    };

    if (!fn()) {
      window.setTimeout(fn, 5000);
    }
  },
  
  /**
   * Berechnet die Größe der Startseite für den Gast
   **/
  resizeGuest: function() { }   
  
  
});
ControlPage = new function()
{
  var MAINMENU_ID = "MAINMENU_CONTROL";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);
    loadStatus(options);
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
ControlRoomsPage = new function()
{
  var MAINMENU_ID = "MAINMENU_CONTROL";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);
    loadHandlingRooms(options);
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
ControlFunctionsPage = new function()
{
  var MAINMENU_ID = "MAINMENU_CONTROL";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);
    loadHandlingFunctions(options);
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
ControlFavoritesPage = new function()
{

  var MAINMENU_ID = "MAINMENU_FAVORITES";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);
    loadFavorites(options);
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
ControlFavoritePage = new function()
{
  var MAINMENU_ID = "MAINMENU_FAVORITES";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);
    loadFavViewer(options);
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
ControlDevicesPage = new function()
{
  var MAINMENU_ID = "MAINMENU_CONTROL";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);
    loadHandlingDevices(options);
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
ControlProgramsPage = new function()
{
  var MAINMENU_ID = "MAINMENU_CONTROL";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);
    loadHandlingPrograms();
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
ControlVariablesPage = new function()
{
  var MAINMENU_ID = "MAINMENU_STATUS";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);
    loadStatusviewSysVars(options);
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
ControlProtocolPage = new function()
{
  var MAINMENU_ID = "MAINMENU_STATUS";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);
    loadStatusviewSysProtocol(options);
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
LinksAndProgramsPage = new function()
{
  var m_menuId = "MAINMENU_LINKSANDPROGRAMS";
  
  this.enter = function(options)
  {
    MainMenu.select(m_menuId);
    loadLinkProg(options);
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
LinkListPage = new function()
{
  var m_menuId = "MAINMENU_LINKSANDPROGRAMS";
  
  this.enter = function(options)
  {
    var args = "";
    
    MainMenu.select(m_menuId);
    if (typeof(options) != "undefined") 
    {    
      for(key in options)
      {
        args += "&" + key + "=" + options[key];
      }
    }
    updateContent("/config/ic_linkpeerlist.cgi", args);
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
ProgramListPage = new function()
{
  var m_menuId = "MAINMENU_LINKSANDPROGRAMS";
  
  this.enter = function(options)
  {
    MainMenu.select(m_menuId);
    loadProgramList(options);
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
LinkEditProfilePage = new function()
{
  var m_menuId = "MAINMENU_LINKSANDPROGRAMS";
  
  this.enter = function(options)
  {
    var iface    = options.iface;
    var sender   = options.sender;
    var receiver = options.receiver;
    
    MainMenu.select(m_menuId);
    OpenSetProfiles(iface, sender, receiver);
  
  };
  
  this.leave = function()
  {
  };
  
  this.resize = function()
  {
  };
  
};AlarmMessagesPage = new function()
{
  
  this.enter = function(options)
  {
    MainMenu.select(null);
    if ($("msgAlarms")) { $("msgAlarms").addClassName("Messages_Selected"); }
    loadAlarmMessages(options);
  };
  
  this.leave = function()
  {
    if ($("msgAlarms")) { $("msgAlarms").removeClassName("Messages_Selected"); }
  };

  this.resize = function()
  {
  };
  
}();
ServiceMessagesPage = new function()
{
  
  this.enter = function(options)
  {
    MainMenu.select(null);
    if ($("msgServices")) { $("msgServices").addClassName("Messages_Selected"); }
    loadServiceMessages(options);
  };
  
  this.leave = function()
  {
    if ($("msgServices")) { $("msgServices").removeClassName("Messages_Selected"); }
  };

  this.resize = function()
  {
  };
  
}();
HelpPage = new function()
{

  var m_menuId = "MAINMENU_HELP";
  
  this.enter = function(options)
  {
    MainMenu.select(m_menuId);
    loadHelp(options);
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
/**
 * devielistpage.js
 **/

/**
 * Geräteliste.
 **/

if (PLATFORM == "Central") {

 DeviceListPage = Singleton.create(Page, {
  MAINMENU_ID: "MAINMENU_OPTIONS",
  TREE_COLLAPSED_FOOTER_HTML: "" +
    "<table style='backgroud-color:white' boder='0' cellspacing='8'>" +
      "<tr>" + 
        "<td align='center' valign='middle'><div class='FooterButton'  onclick='WebUI.goBack();'>${footerBtnPageBack}</div></td>" + 
        "<td align='center' valign='middle'><div class='FooterButton CLASS04312' onclick='DeviceListPage.resetFilters();'>${footerBtnResetFilter}</div></td>" + 
        "<td align='center' valign='middle'><div class='FooterButton CLASS04312' onclick='DeviceListPage.expandTree();'>${footerBtnOpenTree}</div></td>" + 
      "</tr>" +
    "</table>",
  TREE_EXPANDED_FOOTER_HTML: "" +
    "<table style='backgroud-color:white' boder='0' cellspacing='8'>" +
      "<tr>" + 
        "<td align='center' valign='middle'><div class='FooterButton' style='width:auto;padding-left:5px;padding-right:5px;' onclick='WebUI.goBack();'>${footerBtnPageBack}</div></td>" + 
        "<td align='center' valign='middle'><div class='FooterButton CLASS04312' onclick='DeviceListPage.resetFilters();'>${footerBtnResetFilter}</div></td>" + 
        "<td align='center' valign='middle'><div class='FooterButton CLASS04312' onclick='DeviceListPage.collapseTree();'>${footerBtnCloseTree}</div></td>" + 
      "</tr>" +
    "</table>",
  FLAT_FOOTER_HTML: "" +
    "<table style='backgroud-color:white' boder='0' cellspacing='8'>" +
      "<tr>" + 
        "<td align='center' valign='middle'><div class='FooterButton' style='width:auto;padding-left:5px;padding-right:5px;' onclick='WebUI.goBack();'>${footerBtnPageBack}</div></td>" + 
        "<td align='center' valign='middle'><div class='FooterButton CLASS04312' onclick='DeviceListPage.resetFilters();'>${footerBtnResetFilter}</div></td>" + 
        "<td align='center' valign='middle'><div class='FooterButton CLASS04312' onclick='DeviceListPage.recoverTree();'>${footerBtnRestoreTree}</div></td>" +
      "</tr>" +
    "</table>",
  MODE:
  {
    TREE: 1,    // Anzeige als Baumstruktur
    FLAT: 2     // Anzeige als (flache) Kanalliste
  },
  UPDATE_DATA: true,
  SORT_FN:
  {
    NAME       : function(channels, reverse) { return channels.ex_sortBy("name", reverse); },
    TYPE_NAME  : function(channels, reverse) { return channels.ex_sortBy("typeName", reverse); },
    DESCRIPTION: function(channels, reverse) { return channels.ex_sortBy("typeDescription", reverse); },
    ADDRESS    : function(channels, reverse) { return channels.ex_sortBy("address", reverse); },
    CATEGORY   : function(channels, reverse) { return channels.ex_sortBy("category", reverse); },
    MODE       : function(channels, reverse) { return channels.ex_sortBy("mode", reverse); },
    ROOM_NAMES : function(channels, reverse) {
      channels.sort(function(a, b) { return Object.ex_compare(a.rooms.ex_joinItem("name"), b.rooms.ex_joinItem("name")); });
      return (reverse) ? channels.reverse() : channels;
    },
    FUNC_NAMES       : function(channels, reverse) {
      channels.sort(function(a, b) { return Object.ex_compare(a.subsections.ex_joinItem("name"), b.subsections.ex_joinItem("name")); });
      return (reverse) ? channels.reverse() : channels;
    }
  },
  PREFIX: "DeviceListPage",  
  HIGHLIGHT_CLASS: "DeviceListCell_Highlight",
  CATEGORIES:
  [
    {id: "CATEGORY_SENDER", name: translateKey("generalChannelConfigLblSender")}, // Sender
    {id: "CATEGORY_RECEIVER", name: translateKey("generalChannelConfigLblReceiver")}, // Empfänger
    {id: "CATEGORY_NOT_LINKABLE", name: translateKey("generalChannelConfigLblNone")} // nicht verknüpfbar
  ],
  MODES:
  [
    {id: "MODE_DEFAULT", name: translateKey("lblStandard") }, // Standard
    {id: "MODE_AES", name: translateKey("lblSecured") } // Gesichert
  ],
  INTERFACES:
  [
    {id: "INTERFACE_BIDCOS_RF", name: translateKey("BidCosRF")}, // BidCos-RF
    {id: "INTERFACE_BIDCOS_WIRED", name: translateKey("BidCosWired")}, // BidCos-Wired
    {id: "INTERFACE_VIRTUAL_DEVICES", name: translateKey("VirtualDevices")},
    {id: "INTERFACE_SYSTEM", name: "System"} //
  ],
  
  /**
   * Konstruktor
   **/
  initialize: function()
  {
    this.m_onRemoveDevice = this.onRemoveDevice.bind(this);
    
    this.treeTemplate = TrimPath.parseTemplate(DEVICELIST_TREE_JST);
    this.flatTemplate = TrimPath.parseTemplate(DEVICELIST_FLAT_JST);
    
    this.channels = new Array(); 
    this.devices  = new Array();
    this.groups   = {};
  
    this.mode        = this.MODE.TREE;
    this.sortId      = "NAME";
    this.sortDescend = false;
    this.isExpanded  = false;
    
    DeviceList.removeEvent.add(this.m_onRemoveDevice);
  },
    
  /**
   * Aktualisiert die zwischengespeicherten Daten eines Geräts
   **/
  updateDeviceData: function(device)
  {
    device.groups.each(function(group) {
      if (typeof(group._expanded) == "undefined") { group._expanded = false; }
    });
    
    // if (typeof(device._expanded) == "undefined") { device._expanded = false; }
    device._expanded = false;
    
    device.channels.each(function(channel) {
      channel._isVisible = true;        
    });
  },

  /**
   * Aktualisiert alle zwischengespreicherten Daten
   **/
  updateData: function()
  {
    this.devices  = DeviceList.listDevices().ex_sortBy("name");
    this.channels = DeviceList.listChannels();
    this.devices.each(this.updateDeviceData, this);
  },
  
  /**
   *
   **/
  sort: function(channels)
  {
    var sort_fn = this.SORT_FN[this.sortId];
    
    if (typeof(sort_fn) != "undefined") { return sort_fn(channels, this.sortDescend); }
    else                                { return channels; }
  },
  
  /**
   *
   **/
  matchChannel: function(channel)
  {
    return ((this.NameFilter.match(channel.name))                        &&
            (this.TypeNameFilter.match(channel.typeName))                &&
            (this.DescriptionFilter.match(translateKey(channel.typeDescription)))      &&
            (this.AddressFilter.match(channel.address))                  &&
            (this.CategoryFilter.matchString(channel.category))          &&
            (this.ModeFilter.matchStringArray(channel.mode)) &&
            (this.RoomFilter.matchArray(channel.rooms))                  &&
            (this.FuncFilter.matchArray(channel.subsections)));
  },
  
  /**
   *
   **/
  filterChannels: function(channels)
  {
    var result = new Array();
    
    channels.each(function(channel) {
      if (this.matchChannel(channel)) { result.push(channel); }
    }, this);
    
    return result;
  },
    
  matchDevice: function(device)
  {
    return ((this.NameFilter.match(device.name))                         &&
            (this.TypeNameFilter.match(device.typeName))                 &&
            (this.DescriptionFilter.match(translateKey(device.typeDescription)))       &&
            (this.AddressFilter.match(device.address))                   &&
            (this.InterfaceFilter.matchString(device.interfaceName))     &&
            (this.ModeFilter.matchStringArray(device.modes)) &&
            (this.RoomFilter.matchArray(device.rooms))                   &&
            (this.FuncFilter.matchArray(device.subsections)));
  },
  
  filterDevices: function(devices)
  {
    var result = new Array();

    devices.each(function(device) {
      if (this.matchDevice(device)) { result.push(device); }
    }, this);
    
    return result;
  },
    
  /**
   * Startet die Aktualisierung der Anzeige
   **/
  beginUpdateView: function(updateData)
  {
    var _updateData_ = updateData;
    if (typeof(_updateData_) == "undefined") { _updateData_ = false; }
  
    $("content").setStyle({cursor: "wait"});
    window.setTimeout("DeviceListPage.updateView(" + _updateData_ + ");", 1);
  },

  /**
   * Betreten der Geräteliste
   **/
  enter: function(options)
  {
    this.m_visible = true;
    
    MainMenu.select(this.MAINMENU_ID);
    setPath("<span onclick='WebUI.enter(SystemConfigPage);'>"+translateKey('menuSettingsPage')+"</span> &gt; "+translateKey('submenuDevices'));
    setFooter("");
    $("content").innerHTML = "";

    this.userIsNoExpert = homematic("User.isNoExpert", {"id": userId});
    
    this.mode        = this.MODE.TREE;
    this.sortId      = "NAME";
    this.sortDescend = false;
       
    var rooms = RoomList.list().ex_sortBy("name");
    var funcs = SubsectionList.list().ex_sortBy("name");

    /*jQuery.each(this.MODES, function(index, val){
      val.name = translateString(val.name);
    });*/

    this.NameFilter        = new StringFilter("DeviceListPage.NameFilter", this.beginUpdateView);
    this.TypeNameFilter    = new StringFilter("DeviceListPage.TypeNameFilter", this.beginUpdateView);
    this.DescriptionFilter = new StringFilter("DeviceListPage.DescriptionFilter", this.beginUpdateView);
    this.AddressFilter     = new StringFilter("DeviceListPage.AddressFilter", this.beginUpdateView);
    this.InterfaceFilter   = new ListFilter("DeviceListPage.InterfaceFilter", this.INTERFACES, this.beginUpdateView);
    this.CategoryFilter    = new ListFilter("DeviceListPage.CategoryFilter", this.CATEGORIES, this.beginUpdateView);
    this.ModeFilter        = new ListFilter("DeviceListPage.ModeFilter", this.MODES, this.beginUpdateView);
    this.RoomFilter        = new ListFilter("DeviceListPage.RoomFilter", rooms, this.beginUpdateView);
    this.FuncFilter        = new ListFilter("DeviceListPage.FuncFilter", funcs, this.beginUpdateView);

    this.beginUpdateView(this.UPDATE_DATA);
  },

  leave: function()
  {
    this.m_visible = false;
  },
  
  /**
   *  Prüft, ob es sich bei dem Kanal um einen der neuen virtellen Kanäle handelt (z. B. VIRTUAL_DIMMER, VIRTUAL_SWITCH, VIRTUAL_BLIND)
   *  Diese Kanäle sollen nur dann angezeigt werden, wenn der User den Expertenmodus aktiviert hat.  
   *  Die virtuellen Fernbedienungen der CCU 'VIRTUAL_KEY' sind nicht betroffen
   **/ 
  showVirtualChannel: function(channel) 
  {  
    return ((! this.userIsNoExpert) || (channel.channelType == "VIRTUAL_KEY") ||  (channel.channelType.split("_")[0] != "VIRTUAL")) ? true : false; 
  },

  /**
   * Zeigt den Konfigurationsdialog für einen Kanal an.
   **/
  selectChannel: function(id)
  {
    var _this_  = this;
    var channel = DeviceList.getChannel(id);

    ChannelConfigDialog.show(channel, function(result) {
      if (result == ChannelConfigDialog.RESULT_OK)
      {
        _this_.beginUpdateView();
      }
    });
  },
  
  /**
   * Zeigt den Konfigurationsdialog für ein Gerät an.
   **/
  selectDevice: function(id)
  {
    var _this_ = this;
    var device = DeviceList.getDevice(id);
    
    DeviceConfigDialog.show(device, function(result) {
      if (result == DeviceConfigDialog.RESULT_OK)
      {
        _this_.beginUpdateView();
      }
    });
  },
  
  /**
   * 
   **/
  sortBy: function(sortId)
  {
    if (this.mode == this.MODE.FLAT)
    {
      if (this.sortId == sortId) { this.sortDescend = !this.sortDescend; }
      else                       { this.sortDescend = false; }
    }
    else
    {
      this.sortDescend = false;
      this.mode   = this.MODE.FLAT;
      this.resetFilters(false);
    }
    
    this.sortId = sortId;
    this.beginUpdateView();
  },
  
  
  /**
   * Filter zurücksetzen
   **/
  resetFilters: function(update)
  {
    var _update_ = update;
    if (typeof(_update_) == "undefined") { _update_ = true; }
    
    this.NameFilter.reset();
    this.TypeNameFilter.reset();
    this.DescriptionFilter.reset();
    this.AddressFilter.reset();
    this.InterfaceFilter.reset();
    this.CategoryFilter.reset();
    this.ModeFilter.reset();
    this.RoomFilter.reset();
    this.FuncFilter.reset();
    
    if (_update_ == true) { this.beginUpdateView(); }
  },

  expandTree: function()
  {
    this.mode = this.MODE.TREE;
    
    this.devices.each(function(device) {
      device._expanded = true;
   
      device.channels.each(function(channel) {
        channel._isVisible = false;
        if(this.showVirtualChannel(channel)) {
          channel._isVisible = true;
         }
      }, this);
      
      device.groups.each(function(group) {
        group._expanded = true;
      });
    }, this);
    
    this.isExpanded = true;
    this.beginUpdateView();
  },


  collapseTree: function()
  {
    this.mode = this.MODE.TREE;
    this.devices.each(function(device) {
      device._expanded = false;
      device.groups.each(function(group) {
        group._expanded = false;
      });
    });
    
    this.isExpanded = false;
    this.beginUpdateView();
  },

  expandDevice: function(event, id)
  {
    var evt = (event) ? event : window.event;
    Event.stop(evt);
    
    var device = DeviceList.getDevice(id);
    //var userIsNoExpert = homematic("User.isNoExpert", {"id": userId});

    device._expanded = true;
    
    $(this.PREFIX + id + "PLUS").hide();
    $(this.PREFIX + id + "MINUS").show();
    
    device.groups.each(function(group) {
      $(this.PREFIX + group.id).show();
      $(this.PREFIX + group.id + "Thumbnail").show();
      this.collapseGroup(evt, group.id);
    }, this);
    device.singles.each(function(channel) {
     
      channel._isVisible = false;
      if(this.showVirtualChannel(channel)) {
        channel._isVisible = true;
        $(this.PREFIX + channel.id).show();
        $(this.PREFIX + channel.id + "Thumbnail").show();
      }
    }, this);
  },


  collapseDevice: function(event, id)
  {
    var evt = (event) ? event : window.event;
    Event.stop(evt);

    var device = DeviceList.getDevice(id);
    device._expanded = false;
    
    $(this.PREFIX + id + "MINUS").hide();
    $(this.PREFIX + id + "PLUS").show();
    
    device.groups.each(function(group) {
      $(this.PREFIX + group.id).hide();
      $(this.PREFIX + group.id + "Thumbnail").hide();
      this.collapseGroup(evt, group.id);
    }, this);
    device.singles.each(function(channel) {
      $(this.PREFIX + channel.id).hide();
      $(this.PREFIX + channel.id + "Thumbnail").hide();
    }, this);
  },
  
  expandGroup: function(event, id)
  {
    var evt = (event) ? event : window.event;
    Event.stop(evt);
    
    var group = DeviceList.getChannelGroup(id);
    group._expanded = true;
    
    $(this.PREFIX + id + "PLUS").hide();
    $(this.PREFIX + id + "MINUS").show();
    
    group.channels.each(function(channel) {
      $(this.PREFIX + channel.id).show();
      $(this.PREFIX + channel.id + "Thumbnail").show();
    }, this);
  },
  
  collapseGroup: function(event, id)
  {
    var evt = (event) ? event : window.event;
    Event.stop(evt);

    var group = DeviceList.getChannelGroup(id);
    group._expanded = false;
    
    $(this.PREFIX + id + "MINUS").hide();
    $(this.PREFIX + id + "PLUS").show();
    
    group.channels.each(function(channel) {
      $(this.PREFIX + channel.id).hide();
      $(this.PREFIX + channel.id + "Thumbnail").hide();
    }, this);
  },
  
  /**
   * Baumstruktur wiederherstellen
   **/
  recoverTree: function()
  {
    this.mode = this.MODE.TREE;
    this.resetFilters();
  }, 
  
  /**
   * Gerät löschen
   **/
  deleteDevice: function(event, id)
  {
    var evt = (event) ? event : window.event;
    Event.stop(evt);
  
    var device = DeviceList.getDevice(id);
    new DeleteDeviceDialog(device, function(isDeleted) {
      // if (isDeleted) { WebUI.reload(); }
    });
  },
  
  /**
   * Gerät, Kanal oder Kanalgruppe konfigurieren
   **/
  showConfiguration: function(event, typeId, id)
  {
    var evt = (event) ? event : window.event;
    Event.stop(evt);
    
    switch (typeId)
    {
      case "DEVICE": 
        var device  = DeviceList.getDevice(id);
        var iface   = device.interfaceName;
        var address = device.address;
        WebUI.enter(DeviceConfigPage, {'iface': iface, 'address': address, 'redirect_url': 'GO_BACK'});
        break;
      case "GROUP":
        var group   = DeviceList.getChannelGroup(id);
        var iface   = group.device.interfaceName;
        var address = group.channels[0].address;
        WebUI.enter(DeviceConfigPage, {'iface': iface, 'address': address, 'redirect_url': 'GO_BACK', 'with_group': 1});
        break;
      case "CHANNEL":
        var channel = DeviceList.getChannel(id);
        var iface   = channel.device.interfaceName;
        var address = channel.address;
        WebUI.enter(DeviceConfigPage, {'iface': iface, 'address': address, 'redirect_url': 'GO_BACK'});
        break;
      default:
        Debug.assert(false, "DeviceListPage.showConfiguration: invalid type id");
        break;
    }
    
  },
  
  /**
   * Direkte Verknüpfungen anzeigen
   **/
  showDirectLinks: function(event, typeId, id)
  {
    var evt = (event) ? event : window.event;
    Event.stop(evt);
    
    switch (typeId)
    {
      case "DEVICE":
        var device = DeviceList.getDevice(id);
        WebUI.enter(LinkListPage, {
          iface  : device.interfaceName,
          channel: device.address
        });
        break;
      case "GROUP":
        var group = DeviceList.getChannelGroup(id);
        WebUI.enter(LinkListPage, {
          iface  : group.device.interfaceName,
          channel: group.channels[0].address,
          keypair: 1
        });
        break;
      case "CHANNEL":
        var channel = DeviceList.getChannel(id);
        WebUI.enter(LinkListPage, {
          iface  : channel.device.interfaceName,
          channel: channel.address
        });
        break;
      default:
        Debug.assert(false, "DeviceListPage.showDirectLinks: invalid type id");
        break;
    }
  },
  
  /**
   * Programme anzeigen
   **/
  showPrograms: function(event, typeId, id)
  {
    var evt = (event) ? event : window.event;
    Event.stop(evt);
    
    switch (typeId)
    {
      case "DEVICE":
        var device = DeviceList.getDevice(id);
        var ids    = device.listProgramIds();
        WebUI.enter(ProgramListPage, ids.join("\t"));
        break;
      case "GROUP":
        var group = DeviceList.getChannelGroup(id);
        var ids   = group.listProgramIds();        
        WebUI.enter(ProgramListPage, ids.join("\t"));
        break;
      case "CHANNEL":
        var channel = DeviceList.getChannel(id);
        var ids     = channel.listProgramIds();
        WebUI.enter(ProgramListPage, ids.join("\t"));
        break;
      default:
        Debug.assert(false, "DeviceListPage.showPrograms: invalid type id");
        break;
    }    
  },
  
  /**
   * Aktualisert die Anzeige
   **/
  updateView: function(updateData)
  {
    $("content").setStyle({"cursor": "default"});
    if (updateData === true) { this.updateData(); }

    if (this.mode == this.MODE.TREE)
    {
      $("content").innerHTML = this.treeTemplate.process({
        PREFIX           : this.PREFIX,
        nameFilter       : this.NameFilter,
        typeNameFilter   : this.TypeNameFilter,
        descriptionFilter: this.DescriptionFilter,
        addressFilter    : this.AddressFilter,
        interfaceFilter  : this.InterfaceFilter,
        modeFilter       : this.ModeFilter,
        funcFilter       : this.FuncFilter,
        roomFilter       : this.RoomFilter,
        devices          : this.filterDevices(this.devices)
      });
      if (this.isExpanded) { setFooter(this.TREE_EXPANDED_FOOTER_HTML); }
      else                 { setFooter(this.TREE_COLLAPSED_FOOTER_HTML); }
    }
    else
    {
      $("content").innerHTML = this.flatTemplate.process({
        PREFIX           : this.PREFIX,
        sortId           : this.sortId,
        sortDescend      : this.sortDescend,
        nameFilter       : this.NameFilter,
        typeNameFilter   : this.TypeNameFilter,
        descriptionFilter: this.DescriptionFilter,
        addressFilter    : this.AddressFilter,
        categoryFilter   : this.CategoryFilter,
        modeFilter       : this.ModeFilter,
        funcFilter       : this.FuncFilter,
        roomFilter       : this.RoomFilter,
        channels         : this.sort(this.filterChannels(this.channels))
      });
      setFooter(this.FLAT_FOOTER_HTML);
    }

    jQuery(".j_chMode").each(function(){
      var elm = jQuery(this);

        switch (elm.text()) {
          case "Gesichert":
            elm.html(translateKey("lblSecured"));
            break;
          case "Standard":
            elm.html(translateKey("lblStandard"));
        }
    });

    translateJSTemplate("#DeviceListTable");
    translatePage(".j_rooms, .j_functions"); // this translates the room name as well the function name within the main devicelist (Settings > Devices)
    translateFilter(); // this translates the filter in the header of the page
  },
  
  onRemoveDevice: function(whatEver)
  {
    if (this.m_visible)
    {
      WebUI.reload();
    }
  }
  
});

} else {

 DeviceListPage = new function()
 {
  //Geräteliste Konfigtool
  var m_menuId = "MAINMENU_OPTIONS_DEVICES";
  this.enter = function(options)
  {
     //MainMenu.select(m_menuId);
     updateContent('/configapp/devices.cgi');
  };

  this.leave = function()
  {
  };

  this.resize = function()
  {
  };

 }();

};
FavoriteListPage = new function()
{
  var MAINMENU_ID = "MAINMENU_OPTIONS";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);    
    loadFavOverview(options);
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
FunctionListPage = new function()
{
  var MAINMENU_ID = "MAINMENU_OPTIONS";
  
  this.enter = function(options)
  {
    loadFunctionList(options);
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
NewDeviceListPage = new function()
{
  var MAINMENU_ID = "MAINMENU_OPTIONS";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);    
    
    // Aktualisiert alle Gewerke
    // ==> neue Geräte werden beim Anlernen automatisch einem Gewerk zugeordnet
    var subsections = SubsectionList.list();
    subsections.each(function(subsection) {
      SubsectionList.beginUpdate(subsection.id);
    });
    
    loadNewDevices(options);
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
RoomListPage = new function()
{
  var MAINMENU_ID = "MAINMENU_OPTIONS";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);    
    loadRoomList(options);
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
SystemConfigPageUser = new function()
{
  var MAINMENU_ID = "MAINMENU_OPTIONS";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);    
    loadSystemConfigUser(options);
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
SystemConfigPage = new function()
{
  var MAINMENU_ID = "MAINMENU_OPTIONS";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);    
    loadSystemConfig(options);
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
UserAdminPageUser = new function()
{
  var MAINMENU_ID = "MAINMENU_OPTIONS";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);    
    updateContent('/pages/tabs/user/userAdministrationUser.htm');
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
UserAdminPageAdmin = new function()
{
  var MAINMENU_ID = "MAINMENU_OPTIONS";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);    
    loadSysconfigUserAdmin(options);
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
SystemControlPage = new function()
{
  var MAINMENU_ID = "MAINMENU_OPTIONS";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);    
    loadSystemControl(options);
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
CreateDiagramPage = new function()
{
  var MAINMENU_ID = "MAINMENU_OPTIONS";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);
    /*
    // response should be:
    // ID : string
    // KEYS : array of strings
    // NAME : string
    var response = homematic("Diagram.getDataSourceGroups");
    if (response) {
      jQuery.each(response, function(index, val) {
        console.dir(val);
      });
    }
    */

    conInfo("create diagram page");

    doClearTempView = true;
    if( typeof filter == "string" )
    {
      updateContent("jpages/diagram/settings", "", 'system.SetSessionVar("sessionPrgIsFiltered", true);system.SetSessionVar("sessionPrgFilter","'+filter+'");' );
    }
    else
    {
      updateContent("jpages/diagram/settings");
    }
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
DiagramListPage = new function()
{
  var MAINMENU_ID = "MAINMENU_OPTIONS";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);
    conInfo("create diagram list page");

    doClearTempView = true;
    if( typeof filter == "string" )
    {
      updateContent("jpages/diagram/control", "", 'system.SetSessionVar("sessionPrgIsFiltered", true);system.SetSessionVar("sessionPrgFilter","'+filter+'");' );
    }
    else
    {
      updateContent("jpages/diagram/control");
    }

  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
CreateGroupPage = new function()
{
  var MAINMENU_ID = "MAINMENU_OPTIONS";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);
    //alert("create group page");

    conInfo("create group list page");

    doClearTempView = true;
    if( typeof filter == "string" )
    {
      updateContent("jpages/group/list", "", 'system.SetSessionVar("sessionPrgIsFiltered", true);system.SetSessionVar("sessionPrgFilter","'+filter+'");' );
    }
    else
    {
      updateContent("jpages/group/list");
    }

  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
CreateTestPage = new function()
{
  var MAINMENU_ID = "MAINMENU_OPTIONS";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);

    conInfo("create testpage");

    doClearTempView = true;
    if( typeof filter == "string" )
    {
      updateContent("jpages/testjavapage", "", 'system.SetSessionVar("sessionPrgIsFiltered", true);system.SetSessionVar("sessionPrgFilter","'+filter+'");' );
    }
    else
    {
      updateContent("jpages/testjavapage");
    }
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
DeviceFirmware = new function()
{
  var MAINMENU_ID = "MAINMENU_OPTIONS";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);

    conInfo("Show page device firmware");

    doClearTempView = true;
    if( typeof filter == "string" )
    {
      updateContent("jpages/devicefirmware", "", 'system.SetSessionVar("sessionPrgIsFiltered", true);system.SetSessionVar("sessionPrgFilter","'+filter+'");' );
    }
    else
    {
      updateContent("jpages/devicefirmware");
    }
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
VariableListPage = new function()
{
  var MAINMENU_ID = "MAINMENU_OPTIONS";
  
  this.enter = function(options)
  {
    MainMenu.select(MAINMENU_ID);    
    loadSysconfigSysVars(options);
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
DeviceConfigPage = new function()
{
  var MAINMENU_ID = "MAINMENU_OPTIONS";
  
  /**
   * @param options
   *        iface
   *        address
   *        redirect_url
   *        with_group
   **/
  this.enter = function(options)
  {
  	ResetPostString();
    
    MainMenu.select(MAINMENU_ID);    
    var poststr = "";
    if (typeof(options) != "undefined")
    {
      for(key in options)
      {
        poststr += "&" + key + "=" + options[key];
      }
    }

    updateContent(UI_PATH + 'ic_deviceparameters.cgi', poststr);
  };
  
  this.leave = function()
  {
  };

  this.resize = function()
  {
  };
  
}();
getGatewayStatus = function()
{
  return [
    {address: "ABC1234567", description: "", isConnected: true, isDefault: true},
    {address: "ABC0234567", description: "", isConnected: false, isDefault: false}
  ];
};

var globalLGWTypeMap = {};
var globalLGWTypes = {LANIF : "Lan Interface", HMWLGW : "HMWLGW", HMLGW2 : "HMLGW2"};
var globalGWClasses = {RF : "RF", Wired : "Wired"};

BidcosRfPage =
{
  UPDATE_INTERVALL: 5,
  
  m_page: null,
  m_optionsContainer: null,
  m_optionsHeadline: null,
  m_optionsForm: null,
  m_gatewayContainer: null,
  m_gatewayTableHead: null,
  m_gatewayTableHeadRow: null,
  m_gatewayTableAddressHeader: null,
  m_gatewayTableKeyHeader: null,
  m_gatewayTableIPHeader: null,
  m_gatewayTableStateHeader: null,
  m_gatewayTableActionHeader: null,
  m_gatewayTableBody: null,
  m_optionsButtonBar: null,
  m_addGatewayButton: null,
  m_applyButton: null,
  m_optionButtonClear: null,
  m_optionsFooter: null,
  m_allocationContainer: null,
  m_allocationHeadline: null,
  m_allocationTable: null,
  m_allocationTableHead: null,
  m_allocationTableHeadRow: null,
  m_allocationTableNameHeader: null,
  m_allocationTableImageHeader: null,
  m_allocationTableAddressHeader: null,
  m_allocationTableGatewayHeader: null,
  m_allocationTableActionHeader: null,
  m_allocationTableBody: null,
  m_onSourceChangedHandler: null,
  m_onAddGatewayHandlerRF: null,
  m_onApplyHandler: null,
  m_onUpdateHandler: null,
  m_periodicalUpdater: null,
  m_defaultGateway: null,

  m_devices: [],


  create: function()
  {
    this.m_page = document.createElement("div");
    this.m_page.className = "bidcosrf_page";

    globalLGWTypeMap[globalLGWTypes.HMWLGW] = "HomeMatic RS485 Gateway";
    globalLGWTypeMap[globalLGWTypes.HMLGW2] = "HomeMatic RF-LAN Gateway";
    globalLGWTypeMap[globalLGWTypes.LANIF] = "HM Configuration Tool LAN";
        
    /* Event-Handler */
    this.m_onUpdateHandler = function() { BidcosRfPage.onUpdate(); };
    this.m_onSourceChangedHandler = function() { BidcosRfPage.onSourceChanged(); };
    this.m_onAddGatewayHandlerRF = function() { BidcosRfPage.onAddGateway(); };
    this.m_onApplyHandler = function() { BidcosRfPage.onApply(); };
    
    /* Periodisches Update */
    this.m_periodicalUpdater = new PeriodicalExecuter(this.m_onUpdateHandler, this.UPDATE_INTERVALL);
    
    /* Allgmeine Einstellungen */
    this.m_optionsContainer = document.createElement("div");
    this.m_page.appendChild(this.m_optionsContainer);
    
    /* Überschrift */
    this.m_optionsHeadline = document.createElement("h1");
    //this.m_optionsHeadline.appendChild(document.createTextNode("Allgmeine Einstellungen"));
    this.m_optionsHeadline.appendChild(document.createTextNode(translateKey("dialogSettingsBidCosRFConfLblSettings")));    
    this.m_optionsContainer.appendChild(this.m_optionsHeadline);
    
    /* Formular zur Auswahl der Quelle */
    this.m_optionsForm = document.createElement("form");
    this.m_optionsContainer.appendChild(this.m_optionsForm);
    
    /* Container für BidCoS-RF Gateways */
    this.m_gatewayContainer = document.createElement("div");
    $(this.m_gatewayContainer).hide();
    this.m_optionsContainer.appendChild(this.m_gatewayContainer);
    
    /* Tabelle für BidCoS-RF Gateways */
    this.m_gatewayTable = document.createElement("table");
    this.m_gatewayTable.className = "bidcosrf_table";
    $(this.m_gatewayTable).writeAttribute("cellspacing", "0");
    this.m_gatewayContainer.appendChild(this.m_gatewayTable);
    
    /* Tabellenkopf (Tabelle für BidCoS-RF Gateways) */
    this.m_gatewayTableHead = document.createElement("thead");
    this.m_gatewayTable.appendChild(this.m_gatewayTableHead);
    
    /* Kopfzeile (Tabelle für BidCoS-RF Gateways) */
    this.m_gatewayTableHeadRow = document.createElement("tr");
    this.m_gatewayTableHead.appendChild(this.m_gatewayTableHeadRow);

    /* Spaltenüberschrift Name (Tabelle für BidCoS-RF Gateways */
    this.m_gatewayTableAddressHeader = document.createElement("th");
    this.m_gatewayTableAddressHeader.className = "bidcosrf_tableheader";
    this.m_gatewayTableAddressHeader.appendChild(document.createTextNode(translateKey("thName")));
    this.m_gatewayTableHeadRow.appendChild(this.m_gatewayTableAddressHeader);

    /* Spaltenüberschrift Seriennummer (Tabelle für BidCoS-RF Gateways */
    this.m_gatewayTableAddressHeader = document.createElement("th");
    this.m_gatewayTableAddressHeader.className = "bidcosrf_tableheader";
    //this.m_gatewayTableAddressHeader.appendChild(document.createTextNode("Seriennummer"));
    this.m_gatewayTableAddressHeader.appendChild(document.createTextNode("Gateway"));
    this.m_gatewayTableHeadRow.appendChild(this.m_gatewayTableAddressHeader);
    
    /* Spaltenüberschrift AES-Schlüssel (Tabelle für BidCoS-RF Gateways */
    this.m_gatewayTableKeyHeader = document.createElement("th");
    this.m_gatewayTableKeyHeader.className = "bidcosrf_tableheader";
    //this.m_gatewayTableKeyHeader.appendChild(document.createTextNode("Zugriffscode"));
    this.m_gatewayTableKeyHeader.appendChild(document.createTextNode(translateKey("dialogSettingsBidcosRFSecurityKey")));
    this.m_gatewayTableHeadRow.appendChild(this.m_gatewayTableKeyHeader);

    /* Spaltenüberschrift IP (Tabelle für BidCoS-RF Gateways */
    this.m_gatewayTableIPHeader = document.createElement("th");
    this.m_gatewayTableIPHeader.className = "bidcosrf_tableheader";
    //this.m_gatewayTableIPHeader.appendChild(document.createTextNode("IP-Adresse"));
    this.m_gatewayTableIPHeader.appendChild(document.createTextNode(translateKey("thIPAddress")));
    this.m_gatewayTableHeadRow.appendChild(this.m_gatewayTableIPHeader);

    /* Spaltenüberschrift Status (Tabelle für BidCoS-RF Gateways */
    this.m_gatewayTableStateHeader = document.createElement("th");
    this.m_gatewayTableStateHeader.className = "bidcosrf_tableheader";
    //this.m_gatewayTableStateHeader.appendChild(document.createTextNode("Status"));
    this.m_gatewayTableStateHeader.appendChild(document.createTextNode(translateKey("thState")));
    this.m_gatewayTableHeadRow.appendChild(this.m_gatewayTableStateHeader);
    
    /* Spaltenüberschrift Verbunden (Tabelle für BidCoS-RF Gateways */
    this.m_gatewayTableActionHeader = document.createElement("th");
    this.m_gatewayTableActionHeader.className = "bidcosrf_tableheader";
    //this.m_gatewayTableActionHeader.appendChild(document.createTextNode("Aktion"));
    this.m_gatewayTableActionHeader.appendChild(document.createTextNode(translateKey("thAction")));
    this.m_gatewayTableHeadRow.appendChild(this.m_gatewayTableActionHeader);
    
    /* Tabellenkörper (Tabelle für BidCoS-RF Gateways) */
    this.m_gatewayTableBody = document.createElement("tbody");
    this.m_gatewayTable.appendChild(this.m_gatewayTableBody);
    
    /* Optionsmenü */
    this.m_optionsButtonBar = document.createElement("div");
    this.m_optionsContainer.appendChild(this.m_optionsButtonBar);
    
    /* Button zum Übernehmen der Einstellungen */
    this.m_applyButton = document.createElement("div");
    //this.m_applyButton.appendChild(document.createTextNode("Übernehmen"));
    this.m_applyButton.appendChild(document.createTextNode(translateKey("dialogSettingsBidCosRFConfBtnSave")));
    Event.observe($(this.m_applyButton), "click", this.m_onApplyHandler);
    this.m_applyButton.className = "StdButton bidcosrf_optionbutton";
    this.m_optionsButtonBar.appendChild(this.m_applyButton);
    
    /* Button zum Hinzufügen von RF Gateways */
    this.m_addGatewayButton = document.createElement("div");
    $(this.m_addGatewayButton).hide();
    //this.m_addGatewayButton.appendChild(document.createTextNode("Hinzufügen"));
    this.m_addGatewayButton.appendChild(document.createTextNode(translateKey("dialogSettingsBidCosRFConfBtnAdd")));
    Event.observe($(this.m_addGatewayButton), "click", this.m_onAddGatewayHandlerRF);
    this.m_addGatewayButton.className = "StdButton bidcosrf_optionbutton";
    this.m_optionsButtonBar.appendChild(this.m_addGatewayButton);  

    /* float-Bereich löschen */
    this.m_optionButtonClear = document.createElement("div");
    this.m_optionButtonClear.className = "bidcosrf_clear";
    this.m_optionsButtonBar.appendChild(this.m_optionButtonClear);
    
    /* Footer für allgemeine Einstellungen*/
    this.m_optionsFooter = document.createElement("div");
    this.m_optionsFooter.className = "bidcosrf_footer";
    this.m_optionsContainer.appendChild(this.m_optionsFooter);
    
    /* Gateway-Zuordnung */  
    this.m_allocationContainer = document.createElement("div");
    this.m_page.appendChild(this.m_allocationContainer);
    
    /* Überschrift für Gateway-Zuordnung */
    this.m_allocationHeadline = document.createElement("h1");
    //this.m_allocationHeadline.appendChild(document.createTextNode("Interface-Zuordnung"));
    this.m_allocationHeadline.appendChild(document.createTextNode(translateKey("dialogSettingsBidCosRFConfIfaceAssignment")));
    this.m_allocationContainer.appendChild(this.m_allocationHeadline);
    
    /* Tabelle für Gateway-Zuordnung */
    this.m_allocationTable = document.createElement("table");
    this.m_allocationTable.className = "bidcosrf_table";    
    $(this.m_allocationTable).writeAttribute("cellspacing", "0");
    this.m_allocationContainer.appendChild(this.m_allocationTable);
    
    /* Tabellenkopf (Tabelle für Gateway-Zuordnung) */
    this.m_allocationTableHead = document.createElement("thead");
    this.m_allocationTable.appendChild(this.m_allocationTableHead);
    
    /* Zeile im Tabellenkopf (Tabelle für Gateway-Zuordnung) */
    this.m_allocationTableHeadRow = document.createElement("tr");
    this.m_allocationTableHead.appendChild(this.m_allocationTableHeadRow);
    
    /* Spaltenüberschrift "Name" (Tabelle für Gateway-Zuordnung) */
    this.m_allocationTableNameHeader = document.createElement("th");
    this.m_allocationTableNameHeader.className = "bidcosrf_tableheader";
    //this.m_allocationTableNameHeader.appendChild(document.createTextNode("Name"));
    this.m_allocationTableNameHeader.appendChild(document.createTextNode(translateKey("thName")));
    this.m_allocationTableHeadRow.appendChild(this.m_allocationTableNameHeader);

    /* Spaltenüberschrift "Bild" (Tabelle für Gateway-Zuordnung) */
    this.m_allocationTableImageHeader = document.createElement("th");
    this.m_allocationTableImageHeader.className = "bidcosrf_tableheader";
    //this.m_allocationTableImageHeader.appendChild(document.createTextNode("Bild"));
    this.m_allocationTableImageHeader.appendChild(document.createTextNode(translateKey("thPicture")));
    this.m_allocationTableHeadRow.appendChild(this.m_allocationTableImageHeader);

    /* Spaltenüberschrift "Seriennummer" (Tabelle für Gateway-Zuordnung) */
    this.m_allocationTableAddressHeader = document.createElement("th");
    this.m_allocationTableAddressHeader.className = "bidcosrf_tableheader";
    //this.m_allocationTableAddressHeader.appendChild(document.createTextNode("Seriennummer"));
    this.m_allocationTableAddressHeader.appendChild(document.createTextNode(translateKey("thSerialNumber")));
    this.m_allocationTableHeadRow.appendChild(this.m_allocationTableAddressHeader);

    /* Spaltenüberschrift "Gatway" (Tabelle für Gateway-Zuordnung) */
    this.m_allocationTableGatewayHeader = document.createElement("th");
    this.m_allocationTableGatewayHeader.className = "bidcosrf_tableheader";
    this.m_allocationTableGatewayHeader.appendChild(document.createTextNode("Gateway"));
    this.m_allocationTableHeadRow.appendChild(this.m_allocationTableGatewayHeader);

    /* Spaltenüberschrift "Aktion" (Tabelle für Gateway-Zuordnung) */
    this.m_allocationTableActionHeader = document.createElement("th");
    this.m_allocationTableActionHeader.className = "bidcosrf_tableheader";
    //this.m_allocationTableActionHeader.appendChild(document.createTextNode("Aktion"));
    this.m_allocationTableActionHeader.appendChild(document.createTextNode(translateKey("thAction")));
    this.m_allocationTableHeadRow.appendChild(this.m_allocationTableActionHeader);
    
    /* Tabellenkörper (Tabelle für Gateway-Zuordnung) */
    this.m_allocationTableBody = document.createElement("tbody");
    this.m_allocationTable.appendChild(this.m_allocationTableBody);
    
    this.m_gatewayContainer.show();
    this.m_addGatewayButton.show();
    
  },

  destroy: function()
  {
    var i, len;
    
    /* Periodisches Update deaktivieren */
    this.m_periodicalUpdater.stop();
    
    /* Ereignis-Handler  abmelden */
    //Event.stopObserving($(this.m_antennaRadioButton), "click", this.m_sourceChangedHandler);
    //Event.stopObserving($(this.m_hmcfgRadioButton), "click", this.m_sourceChangedHandler);
    Event.stopObserving($(this.m_applyButton), "click", this.m_onApplyHandler);
    Event.stopObserving($(this.m_addGatewayButton), "click", this.m_onAddGatewayHandlerRF);
    
    /* Gateways entfernen */
    for (i = 0, len = this.m_gateways.length; i < len; i++)
    {
      var gateway = this.m_gateways[i];
      gateway.destroy();
    }
    this.m_gateways = [];
    
    /* Geräte entfernen */
    for (i = 0, len = this.m_devices.length; i < len; i++)
    {
      var device = this.m_devices[i];
      device.destroy();
    }
    this.m_devices = [];
  },

  enter: function()
  {


    MainMenu.select("MAINMENU_OPTIONS");

    var PATH_HTML= "" +
      "<span onclick='WebUI.enter(SystemConfigPage);'>"+translateKey("menuSettingsPage")+"</span>" +
      " &gt; " +
      "<span onclick='WebUI.enter(SystemControlPage);'>"+translateKey("submenuSysControl")+"</span>" +
      " &gt; " +
      translateKey("dialogSettingsBidCosRFConfPath"),

    FOOTER_HTML= "" +
      "<table border='0' cellspacing='8'>" +
        "<tr>" +
          "<td align='center' valign='middle'><div class='FooterButton' style='width:auto;padding-left:5px;padding-right:5px;' onclick='WebUI.goBack();'>"+translateKey("footerBtnPageBack")+"</div></td>" +
        "</tr>" +
      "</table>";

    setPath(PATH_HTML);
    setFooter(FOOTER_HTML);
    InterfaceMonitor.stop();
    
    this.create();
    this.loadGateways();
    this.loadDevices();
        
    WebUI.setContent(this.m_page);
  },
  
  leave: function()
  {
    this.destroy();
    InterfaceMonitor.start();
  },
  
  resize: function()
  {
  },
  
  onSourceChanged: function()
  {
 /*   if (this.m_hmcfgRadioButton.checked)
    {
      $(this.m_gatewayContainer).show();
      $(this.m_addGatewayButton).show();
    }
    else
    {
      $(this.m_gatewayContainer).hide();
      $(this.m_addGatewayButton).hide();
    }*/
  },
  
  onAddGateway: function()
  {
  
  	 var wiredGWExists = false;    
     for (var i = 0, len = this.m_gateways.length; i < len; i++)
     {
      var gateway = this.m_gateways[i];
      if( globalGWClasses.Wired == gateway.getGatewayClass()) {
      	wiredGWExists = true;
      	break;
	  }
    }
    new BidcosRfPage.AddGatewayDialog(wiredGWExists)
      .setAction(this.onGatewayAdded, this);
  },
  
  onGatewayAdded: function(dialog)
  {
    var gateway = new BidcosRfPage.Gateway()
      .setGatewayClass(dialog.getGatewayClass())
      .setType(dialog.getType())
      .setUserName(dialog.getUserName())
      .setAddress(dialog.getSerial())
      .setKey(dialog.getKey())
      .setIP(dialog.getIp())
      .setState(translateKey("lanGatewayLblNotActive"));
      
    this.m_gatewayTableBody.appendChild(gateway.getElement());
    this.m_gateways.push(gateway);
  },
  
  
  onApply: function()
  {
    var gatewaysRF = [];
    var gatewaysWired = [];

/*    var useInternalAntenna = this.m_antennaRadioButton.checked;
    if (this.ss.length == 0) 
    {
      useInternalAntenna = true;
    }
  */  
    
    /* RF-Gateways */
    for (var i = 0, len = this.m_gateways.length; i < len; i++)
    {
      var gateway = this.m_gateways[i];
      if( globalGWClasses.RF == gateway.getGatewayClass()) {
		  gatewaysRF.push({
		    type         : gateway.getType(),
        userName     : gateway.getUserName(),
		    serialNumber : gateway.getAddress(),
		    encryptionKey: gateway.getKey(),
		    ipAddress    : gateway.getIP()
		  });
	  }
	  else { //gatewayClass is: Wired
		  gatewaysWired.push({
		    type         : gateway.getType(),
        userName     : gateway.getUserName(),
		    serialNumber : gateway.getAddress(),
		    encryptionKey: gateway.getKey(),
		    ipAddress    : gateway.getIP()
		  });	  	
	  }
    }
    
    homematic("BidCoS_RF.setConfigurationRF", {
     // "useInternalAntenna": useInternalAntenna,
      "interfaces": gatewaysRF
    });
    
    homematic("BidCoS_Wired.setConfigurationWired", {
      "interfaces": gatewaysWired
    });
  
    
 //   if (/*(useInternalAntenna == false) &&*/ (homematic("BidCoS_RF.isKeySet", null))) //TODO Check if this is okay
 //   {
 //     new BidcosRfPage.OptionsDialog();
 //   }
 //   else
 //   {
      //MessageBox.show("Info", "Die Konfiguration wurde an die HomeMatic Zentrale übertragen.\nDie Änderungen werden mit dem nächsten Start der HomeMatic Zentrale wirksam.");
      MessageBox.show(translateKey("dialogInfo"), translateKey("dialogSettingsBidcosRFSaveConfigSucceed"));
      WebUI.enter(BidcosRfPage);
 //   }
  },
  
  onUpdate: function()
  { 
    var that = this;
    //Sort gateways into own arrays to avoid interferences when doing more than one homematic() calls.
    var rfGateways = new Array();
    var wiredGateways = new Array();
    
    for(var i = 0, len = that.m_gateways.length; i < len; i++) 
    {
    	if(that.m_gateways[i].getGatewayClass() == globalGWClasses.Wired) {
    		wiredGateways.push(that.m_gateways[i]);
    	}
    	else {
    		rfGateways.push(that.m_gateways[i]);
    	}
    }
    /* RF-Gateways */
    homematic("Interface.listBidcosInterfaces", {"interface": "BidCos-RF"}, function(gatewayStatus) {
      if (gatewayStatus)
      {
        for (var i = 0, len = rfGateways.length; i < len; i++)
        {
   	      if(globalLGWTypes.HMLGW2 == rfGateways[i].getType()) {//NEW RF Gateway
   	        //var hmlgw2GW = rfGateways[i];
   	        var lgwStatus = null;
		    homematic("Interface.getLGWConnectionStatus", {"interface" : "BidCos-RF", "serial" : rfGateways[i].getAddress()}, function(lgwStatus) {
		        var textB = "";
		        var lgw = null;
		        if(lgwStatus) 
		        {
				    for(var j = 0; j < rfGateways.length; j++) {
				    	if(rfGateways[j].getAddress() == lgwStatus.serial) {
				    	 lgw = rfGateways[j];
				    	}
				    }
		        	if(lgw) 
		        	{
					  if(lgwStatus.connstat == "NO_ERROR") {
					    textB = translateKey("lanGatewayLblConnected");
					  }
					  else if(lgwStatus.connstat == "CONNECT_FAILED") {
					    textB = translateKey("lanGatewayLblNotConnected");
					  }
					  else if(lgwStatus.connstat == "WRONG_KEY") {
					    textB = translateKey("errorWrongPassword");
					  }
					  else if(lgwStatus.connstat == "") {
					  	textB = translateKey("lanGatewayLblNotConnected");
					  }
					  else {
					    textB = translateKey("lanGatewayLblNotConnected");
					  }
					}
					else 
					{
				      textB = translateKey("lanGatewayLblNotActive");
					}
					lgw.setState(textB);
			  }//if lgwstatus
			  else {
			  	lgw.setState(translateKey("lanGatewayLblNotActive"));
			  }
		    });
   	      }
		  else //all other rf gateways
		  {
			  var text = "";
	   	      var status = rfGateways[i].determineState(gatewayStatus);
		      if (status)
		      {
		        text = (status.isConnected) ? translateKey("lanGatewayLblConnected") : translateKey("lanGatewayLblNotConnected");
		        if (status.isDefault) { text += " " + translateKey("lanGatewayLblStandard"); }
		      }
		      else
		      {
		        //text = "inaktiv";
		        text = translateKey("lanGatewayLblNotActive");
		      }
		      rfGateways[i].setState(text);
		  }
        }
        
        //Set address of default gateway
        if (!that.m_defaultGateway)
        {
          for (var i = 0, len = gatewayStatus.length; i < len; i++)
          {
            if (gatewayStatus[i].isDefault)
            {
            //alert("isDEfault"+gatewayStatus[i].address);
              that.m_defaultGateway = new BidcosRfPage.Gateway()
                .setAddress(gatewayStatus[i].address);
            }
          }
        }
        jQuery("." + that.m_defaultGateway.getAddress()).text(translateKey("lanGatewayLblStandard"));
      }
    });
    /* Wired Gateways */
    for(var k = 0, length = wiredGateways.length; k < length ; k++)
    {
      	var wiredLGW = wiredGateways[k];
		    homematic("Interface.getLGWConnectionStatus", {"interface" : "BidCos-Wired", "serial" : wiredLGW.getAddress()}, function(lgwStatus) {
		    var textB = "";
		    var lgw = null;
		    if(lgwStatus) 
		    {
				for(var j = 0; j < wiredGateways.length; j++) {
					if(wiredGateways[j].getAddress() == lgwStatus.serial) {
					 lgw = wiredGateways[j];
					}
				}
		    	if(lgw) 
		    	{
				  if(lgwStatus.connstat == "NO_ERROR") {
					textB = translateKey("lanGatewayLblConnected");
				  }
				  else if(lgwStatus.connstat == "CONNECT_FAILED") {
					textB = translateKey("lanGatewayLblNotConnected");
				  }
				  else if(lgwStatus.connstat == "WRONG_KEY") {
					textB = translateKey("errorWrongPassword");
				  }
				  else if(lgwStatus.connstat == "") {
				  	textB = translateKey("lanGatewayLblNotConnected");
				  }
				  else {
					textB = translateKey("lanGatewayLblNotConnected");
				  }
				}
				else {
				  textB = translateKey("lanGatewayLblNotActive");
				}
				lgw.setState(textB);
		  }//if lgwstatus
		  else {
		  	lgw.setState(translateKey("lanGatewayLblNotActive"));
		  }
		});
    }
  },
  
  loadGateways: function()
  {
    var i, len;
    this.m_gateways = [];
    
    //HomeMatic RF Gateways
    var response = homematic("BidCoS_RF.getConfigurationRF");
    if (response)
    {
 //     this.m_antennaRadioButton.checked = response.useInternalAntenna;
 //     this.m_hmcfgRadioButton.checked = !response.useInternalAntenna;
      this.onSourceChanged();
      
      for (i = 0, len = response.interfaces.length; i < len; i++)
      {
        var gateway = response.interfaces[i];
        this.m_gateways.push(new BidcosRfPage.Gateway()
          .setGatewayClass("RF")
          .setType(gateway.type)
          .setUserName(gateway.userName)
          .setAddress(gateway.serialNumber)
          .setKey(gateway.encryptionKey)
          .setIP(gateway.ipAddress));
      }
    
    }
    
   //HomeMatic Wired Gateways
	response = homematic("BidCoS_Wired.getConfigurationWired");
	if(response)
	{
      for (i = 0, len = response.interfaces.length; i < len; i++)
      {
        var gateway = response.interfaces[i];
        this.m_gateways.push(new BidcosRfPage.Gateway()
          .setGatewayClass(globalGWClasses.Wired)
          .setType(gateway.type)
          .setUserName(gateway.userName)
          .setAddress(gateway.serialNumber)
          .setKey(gateway.encryptionKey)
          .setIP(gateway.ipAddress));
      }
	}

	//Add all gateways to table
    for (i = 0, len = this.m_gateways.length; i < len; i++)
    {
      var gateway = this.m_gateways[i];
      this.m_gatewayTableBody.appendChild(gateway.getElement());
    }
      
  },
  
  removeGateway: function(gateway)
  {
    gateway.destroy();
    this.m_gateways = this.m_gateways.without(gateway);
  },
  
  loadDevices: function()
  {
    var i, len, device;
    this.m_devices = [];
    
    var devices = DeviceList.listDevices();
    
    for (i = 0, len = devices.length; i < len; i++)
    {
      device = devices[i];
      if (device.interfaceName == "BidCos-RF")
      {
        this.m_devices.push(new BidcosRfPage.Device()
          .setName(device.name)
          .setImageHtml(device.getThumbnailHTML())
          .setAddress(device.address)
          );
      }
    }
    
    for (i = 0, len = this.m_devices.length; i < len; i++)
    {
      device = this.m_devices[i];
      this.m_allocationTableBody.appendChild(device.getElement());
    }
    
    var that = this;
    homematic("Interface.listDevices", {"interface": "BidCos-RF"}, function(deviceList) {
      if (deviceList)
      {
        for (var i = 0, len = that.m_devices.length; i < len; i++)
        {
          var device = that.m_devices[i];
          device.setGatewayFromDeviceList(deviceList);
        }
      }    
    });
  },
  
  getGateways: function()
  {
    return this.m_gateways;
  },
  
  getDefaultGateway: function()
  {
    return this.m_defaultGateway;
  }
};

BidcosRfPage.Gateway = function()
{
  this.create();
};

BidcosRfPage.Gateway.prototype =
{
  m_element: null,
  m_type: null,
  m_address: null,
  m_key: null,
  m_ip: null,
  m_userNameLabel: null,
  m_addressLabel: null,
  m_keyLabel: null,
  m_ipLabel: null,
  m_stateLabel: null,
  m_actionCell: null,
  m_deleteButton: null,
  m_onDeleteHandler: null,
  m_editButton: null,
  m_onEditHandler: null,
  m_changeKeyButton : null,
  m_onChangeKeyHandler : null,
  
  create: function()
  {
    /* Event-Handler */
    var that = this;
    this.m_onDeleteHandler = function() { that.onDelete(); };
    this.m_onEditHandler = function() { that.onEdit(); };
    this.m_onChangeKeyHandler = function() { that.onChangeKey(); };
    
    /* Tabellenzeile */
    this.m_element = document.createElement("tr");
    
    /** Gateway-Klasse (RF oder Wired)*/
    this.m_gatewayClass = "";
    
    /** Gateway-Typ (Lan Interface / HMWLGW) */
    this.m_type = "";

    /* userName */
    this.m_userName = "";
    this.m_userNameLabel = document.createElement("td");
    this.m_userNameLabel.className = "bidcosrf_tablecell";
    this.m_element.appendChild(this.m_userNameLabel);

    /* Seriennummer */
    this.m_address = "";
    this.m_addressLabel = document.createElement("td");
    this.m_addressLabel.className = "bidcosrf_tablecell";
    this.m_element.appendChild(this.m_addressLabel);
    
    /* Zugriffscode */
    this.m_keyLabel = document.createElement("td");
    this.m_keyLabel.className = "bidcosrf_tablecell";
    this.m_element.appendChild(this.m_keyLabel);
    
    /* IP-Addresse */
    this.m_ipLabel = document.createElement("td");
    this.m_ipLabel.className = "bidcosrf_tablecell";
    this.m_element.appendChild(this.m_ipLabel);
    
    /* Status */
    this.m_stateLabel = document.createElement("td");
    this.m_stateLabel.className = "bidcosrf_tablecell";
    this.m_element.appendChild(this.m_stateLabel);
    
    /* Aktion */
    this.m_actionCell = document.createElement("td");
    this.m_actionCell.className = "bidcosrf_actioncell";
    this.m_element.appendChild(this.m_actionCell);
    
    /* Löschen-Button */
    this.m_deleteButton = document.createElement("div");
    this.m_deleteButton.className = "StdButton";//"bidcosrf_button";
    //this.m_deleteButton.appendChild(document.createTextNode("Löschen"));
    this.m_deleteButton.appendChild(document.createTextNode(translateKey("btnRemove")));
    Event.observe($(this.m_deleteButton), "click", this.m_onDeleteHandler);
      Element.setStyle(this.m_deleteButton, {
      margin : "1px"
    });
    this.m_actionCell.appendChild(this.m_deleteButton);
    
    /* Edit-Button */
    this.m_editButton = document.createElement("div");
    this.m_editButton.className = "StdButton";//"bidcosrf_button";
    Element.setStyle(this.m_editButton, {
      margin : "1px"
    });
    this.m_editButton.appendChild(document.createTextNode(translateKey("dialogSettingsBidCosRFConfBtnSet")));
	Event.observe($(this.m_editButton), "click", this.m_onEditHandler);
    this.m_actionCell.appendChild(this.m_editButton);
    
    
    /* change key button */
    this.m_changeKeyButton = document.createElement("div");
    this.m_changeKeyButton.className = "StdButton";
    this.m_changeKeyButton.id = "changeKeyButtonId";
    Element.setStyle(this.m_changeKeyButton, {
      margin : "1px"
    });
    this.m_changeKeyButton.appendChild(document.createTextNode(translateKey("dialogSettingsBidcosRFChangeAccessCodeTitle")));
    Event.observe($(this.m_changeKeyButton), "click", this.m_onChangeKeyHandler);
    this.m_actionCell.appendChild(this.m_changeKeyButton);
  },
  
  destroy: function()
  {
    Event.stopObserving($(this.m_deleteButton), "click", this.m_onDeleteHandler);
    Event.stopObserving($(this.m_editButton), "click", this.m_onEditHandler);
    Event.stopObserving($(this.m_changeKeyButton), "click", this.m_onChangeKeyHandler);
    $(this.m_element).remove();
  },
  
  getGatewayClass : function()
  {
  	return this.m_gatewayClass;
  },
  
  setGatewayClass: function(gwClass)
  {
    this.m_gatewayClass = gwClass;
    return this;
  },

  setType: function(type)
  {
    this.m_type = type;
    if( (this.m_type !== globalLGWTypes.HMLGW2) && (this.m_type !==  globalLGWTypes.HMWLGW) )
    {
      this.m_changeKeyButton.hide();
    }
    return this;
  },
  
  getType: function()
  {
    return this.m_type;
  },

  setUserName: function(name)
  {
    if(name != undefined) {
      this.m_userName = name;
      this.m_userNameLabel.innerHTML = "";
      this.m_userNameLabel.appendChild(document.createTextNode(name));
    }
    return this;
  },

  getUserName: function()
  {
    return this.m_userName;
  },

  setAddress: function(address)
  {
    this.m_address = address;
    this.m_addressLabel.innerHTML = this.m_address+"<br/>"+globalLGWTypeMap[this.m_type];
    return this;
  },
  
  getAddress: function()
  {
    return this.m_address;
  },
  
  setKey: function(key)
  {
    this.m_key = key;
    
    this.m_keyLabel.innerHTML = "";
    this.m_keyLabel.appendChild(document.createTextNode(key));
    
    return this;
  },
  
  getKey: function()
  {
    return this.m_key;
  },
  
  setIP: function(ip)
  {
    this.m_ip = ip;
    
    this.m_ipLabel.innerHTML = "";
    this.m_ipLabel.appendChild(document.createTextNode(ip));
    
    return this;
  },
  
  getIP: function()
  {
    return this.m_ip;
  },
  
  setState: function(state)
  {

    this.m_stateLabel.innerHTML = "";
    this.m_stateLabel.appendChild(document.createTextNode(state));

    return this;
  },
  
  getElement: function()
  {
    return this.m_element;
  },
  
  determineState: function(status)
  {
    for (i = 0, len = status.length; i < len; i++)
    {
      if (this.m_address == status[i].address)
      {
        return status[i];
      }
    }
    
    return null;
  },
  
  onDelete: function()
  {
    var that = this;
    //new YesNoDialog("Sicherheitsabfrage", "Möchten Sie den HomeMatic Konfigurations-Adapter wirklich löschen?", function(result) {
    new YesNoDialog(translateKey("dialogSafetyCheck"), translateKey("dialogQuestionRemoveCFG"), function(result) {
      
      if (result == YesNoDialog.RESULT_YES)
      {
        BidcosRfPage.removeGateway(that);
      }
    });
  },
  
  onEdit : function()
  {
  	var that = this;
  	new BidcosRfPage.EditGatewayDialog(that).setAction(this.onGatewayEdited, this);
  },

  onGatewayEdited : function(dialog) {
    this.setUserName(dialog.getUserName());
    this.setAddress(dialog.getSerial());
    this.setKey(dialog.getKey());
    this.setIP(dialog.getIPAddress());
  },
  
  onChangeKey : function()
  {
  	var that = this;
  	new BidcosRfPage.ChangeKeyDialog(that).setAction(this.onKeyChanged, this);
  },
  
  keyContainsNoForbiddenCharacter : function(key) {
    if(key.indexOf("<") != -1) { return false; }
    else if(key.indexOf(">") != -1) { return false; }
    else if(key.indexOf("\'") != -1) { return false; }    
    else if(key.indexOf("\"") != -1) { return false; }
    else if(key.indexOf("&") != -1) { return false; }
    else if(key.indexOf("$") != -1) { return false; }
    else if(key.indexOf("?") != -1) { return false; }    
    else if(key.indexOf("[") != -1) { return false; }
    else if(key.indexOf("]") != -1) { return false; }
    else if(key.indexOf("{") != -1) { return false; }
    else if(key.indexOf("}") != -1) { return false; }
    else if(key.indexOf("#") != -1) { return false; }
    else if(key.indexOf("\\") != -1) { return false; }
    else { return true; }
    return false;
  },
  
  onKeyChanged : function(dialog)
  {
    var key = dialog.getKey();
    var key2 = dialog.getKeyRepetition();
    if(key === "") { 
    	MessageBox.show(translateKey("dialogSettingsBidcosRFChangeAccessCodeDialogErrorTitle"), translateKey("dialogSettingsBidcosRFChangeAccessCodeDialogErrorTooShort"));
    }
  	else if(key === key2) { 
  	  if(this.keyContainsNoForbiddenCharacter(key)) {//check if key contains a forbidden character
		  if( homematic("BidCoS.changeLanGatewayKey", {
		    "lgwclass" : this.getGatewayClass(), //RF or Wired
		    "lgwserial": this.getAddress(),
		    "lgwip" : this.getIP(),
		    "newkey" : key,
		    "curkey" : this.getKey()
		  }) ) {
		  	MessageBox.show(translateKey("dialogInfo"), translateKey("dialogSettingsBidcosRFSaveConfigSucceed"));
		  }
		  else {
		  	MessageBox.show(translateKey("dialogSettingsBidcosRFChangeAccessCodeDialogErrorTitle"), translateKey("dialogSettingsBidcosRFChangeAccessCodeDialogErrorGeneral"));
		  }
		}
		else { //!keyContainsNoForbiddenCharacter
			MessageBox.show(translateKey("dialogSettingsBidcosRFChangeAccessCodeDialogErrorTitle"), translateKey("msgForbiddenCharacter"));
		}
	}
  	else {
  	  MessageBox.show(translateKey("dialogSettingsBidcosRFChangeAccessCodeDialogErrorTitle"), translateKey("dialogSettingsBidcosRFChangeAccessCodeDialogErrorDontMatch"));
  	}
  }
  
 
};


BidcosRfPage.Device = function()
{
  this.create();
};
  
BidcosRfPage.Device.prototype =
{
  m_element: null,
  m_name: null,
  m_nameLabel: null,
  m_image: null,
  m_address: null,
  m_addressLabel: null,
  m_gateway: null,
  m_gatewayLabel: null,
  m_roaming: null,
  m_action: null,
  m_configButton: null,
  m_onConfigHandler: null,

  gatewayList : [],

  create: function()
  {

    this.gatewayList = BidcosRfPage.getGateways();

    /* Event-Handler */
    var that = this;
    this.m_onConfigHandler = function() { that.onConfig(); };
    
    /* Tabellenzeile */
    this.m_element = document.createElement("tr");
      
    /* Name */
    this.m_nameLabel = document.createElement("td");
    this.m_nameLabel.className = "bidcosrf_tablecell";
    this.m_element.appendChild(this.m_nameLabel);
      
    /* Bild */
    this.m_image = document.createElement("td");
    this.m_image.className = "bidcosrf_imagecell bidcosrf_imagesize";
    this.m_image.innerHTML = "&nbsp;";
    this.m_element.appendChild(this.m_image);

    /* Seriennummer */
    this.m_addressLabel = document.createElement("td");
    this.m_addressLabel.className = "bidcosrf_tablecell";
    this.m_element.appendChild(this.m_addressLabel);

    /* Gateway */
    this.m_gatewayLabel = document.createElement("td");
    this.m_gatewayLabel.className = "bidcosrf_tablecell";
    this.m_element.appendChild(this.m_gatewayLabel);
      
    /* Aktion */
    this.m_action = document.createElement("td");
    this.m_action.className = "bidcosrf_actioncell";
    this.m_element.appendChild(this.m_action);
    
    /* Button zur Konfiguration */
    this.m_configButton = document.createElement("div");
    this.m_configButton.className = "StdButton";//"bidcosrf_button";
    //this.m_configButton.appendChild(document.createTextNode("Einstellen"));
    this.m_configButton.appendChild(document.createTextNode(translateKey("dialogSettingsBidCosRFConfBtnSet")));
    Event.observe($(this.m_configButton), "click", this.m_onConfigHandler);
    this.m_action.appendChild(this.m_configButton);
  },


  destroy: function()
  {
    Event.stopObserving($(this.m_configButton), "click", this.m_onConfigHandler);
    $(this.m_element).remove();
  },
    
  setName: function(name)
  {
    this.m_name = name;
    
    this.m_nameLabel.innerHtml = "";
    this.m_nameLabel.appendChild(document.createTextNode(name));
    
    return this;
  },
  
  getName: function()
  {
    return this.m_name;
  },
    
  setImageHtml: function(imageHtml)
  {
    var div = document.createElement("div");
    div.innerHTML = imageHtml;
    div.className = "thumbnail";
    
    this.m_image.innerHTML = "";
    this.m_image.appendChild(div);
    
    return this;
  },
    
  setAddress: function(address)
  {
    this.m_address = address;
    
    this.m_addressLabel.innerHtml = "";
    this.m_addressLabel.appendChild(document.createTextNode(address));
    
    return this;
  },
  
  getAddress: function()
  {
    return this.m_address;
  },
   
  setGateway: function(gateway)
  {
    var label = gateway;
    var name = "";

    BidcosRfPage.m_defaultGateway;

    // Has the gateway an user defined name?
    for (var i = 0; i < this.gatewayList.length; i++) {
      if (gateway == this.gatewayList[i].m_address) {
          name = this.gatewayList[i].m_userName;
          label = (name.length > 0) ? name : label;
          break;
      }
    }

    this.m_gateway = label;
    this.m_gatewayLabel.innerHTML = "";
    this.m_gatewayLabel.appendChild(document.createTextNode(label));
    //this.m_gatewayLabel.className += " " + label.replace(/\s+/g,"");
    this.m_gatewayLabel.setAttribute("class", "bidcosrf_tablecell " + label.replace(/\s+/g,""));
    return this;
  },
  
  getGateway: function()
  {
    return this.m_gateway;
  },
  
  setRoaming: function(roaming)
  {
    this.m_roaming = roaming;
    
    return this;
  },
  
  getRoaming: function()
  {
    return this.m_roaming;
  },
  
  getElement: function()
  {
    return this.m_element;
  },
  
  setGatewayFromDeviceList: function(deviceList)
  {
    for (var i = 0, len = deviceList.length; i < len; i++)
    {
      var device = deviceList[i];
      if (device.address == this.m_address)
      {
        this.setGateway(device["interface"]);
        this.setRoaming(device["roaming"]);
      }
    }
    return this;
  },
  
  onConfig: function()
  {
    new BidcosRfPage.EditAssignmentDialog()
      .setDevice(this)
      .setAction(this.saveConfig, this);
  },
  
  saveConfig: function(dialog)
  {
    var gateway = dialog.getGateway();
    var roaming = dialog.getRoaming();
    
    if (gateway)
    {
      homematic("Interface.setBidcosInterface", {
        "interface": "BidCos-RF",
        "deviceId": this.m_address,
        "interfaceId": gateway.getAddress(),
        "roaming": roaming
      });
      //jQuery("."+gateway.getAddress()).attr("class","bidcosrf_tablecell " + gateway.getAddress().replace(/\s+/g,""));
      this.setGateway(gateway.getAddress());
      this.setRoaming(roaming);
    }
  }
};

/*-------------------------------------------------------------------------------------------------------------------*/

/**
* @class BidcosRfPage.EditGatewayDialog
* @brief Dialog zum Bearbeiten von Lan Gateway Einstellungen
**/
BidcosRfPage.EditGatewayDialog = Class.create({


  /** Constructor
  * Fuehrt die Grundinitialisierung durch und zeigt das Dialogfenster an.
  **/	
  initialize: function(gateway)
  {
    var screenWidth  = WebUI.getWidth();
    var screenHeight = WebUI.getHeight();
    var frameWidth   = 500;
    var frameHeight  = 200;
    var frameX       = parseInt((screenWidth  - frameWidth)  / 2);
    var frameY       = parseInt((screenHeight - frameHeight) / 2);
	var m_gateway = gateway;
  
  	this.m_action = null;//Callback function
  
    this.m_layer = document.createElement("div");
    this.m_layer.className = "DialogLayer"; 


    //Create content ui-elements
    //Type
    this.m_typeText = new UI.Text()
      .setPosition(180, 10)
      .setWidth(frameWidth - 190)
      .setText(globalLGWTypeMap[m_gateway.getType()]);

    //Name
    this.m_nameTextEdit = new UI.TextEdit()
      .setPosition(180,40)
      .setWidth(frameWidth - 190)
      .setText(m_gateway.getUserName());

    //Serial  
    this.m_serialTextEdit = new UI.TextEdit()
      .setPosition(180, 70)
      .setWidth(frameWidth - 190)
      .setText(m_gateway.getAddress());
	
	//Key    
    this.m_keyTextEdit = new UI.TextEdit()
      .setPosition(180, 100)
      .setWidth(frameWidth - 190)
      .setText(m_gateway.getKey());
    
    //IP Address
    this.m_ipTextEdit = new UI.TextEdit()
      .setPosition(180, 130)
      .setWidth(frameWidth - 190)
      .setText(m_gateway.getIP());

	this.m_keyLabel = new UI.Text();

	//Create and assemble frame
    this.m_frame = new UI.Frame()
      .setTitle(translateKey("dialogSettingsBidcosRFEditGatewayTitle"))
      .setContentSize(frameWidth, frameHeight)
      .setPosition(frameX, frameY)
      /* Add Cancel Button */
      .add(new UI.Button()
        .setPosition(10, frameHeight - 30)
        //.setText("Abbrechen")
        .setText(translateKey("btnCancel"))
        .setAction(this.cancel, this)
      )
      /* Add OK Button */
      .add(new UI.Button()
        .setPosition(frameWidth - 160, frameHeight - 30)
        //.setText("OK")
        .setText(translateKey("btnOk"))
        .setAction(this.ok, this)
      )
      
      //Content:
      //Type label
      .add(new UI.Text().setPosition(10,10).setText(translateKey("dialogSettingsBidCosRFLblType")))
      .add(this.m_typeText) 

      //Name
      .add(new UI.Text()
        .setPosition(10,40)
        .setText(translateKey("dialogSettingsBidCosRFLblName"))
      )
      .add(this.m_nameTextEdit)

      //Serial
      .add(new UI.Text()
        .setPosition(10, 70)
        //.setText("Seriennummer:")
        .setText(translateKey("dialogSettingsBidCosRFLblSN"))
      )
      .add(this.m_serialTextEdit)
      //Accesscode / passphrase
      .add(this.m_keyLabel
        .setPosition(10,100)
        .setText( 
          (m_gateway.getType() == "Lan Interface" ?  translateKey("dialogSettingsBidCosRFLblAccessCode") : translateKey("dialogSettingsBidCosRFLblPassphrase"))
        ) 
      )
      .add(this.m_keyTextEdit)
      //IP label
      .add(this.m_ipTextEdit)
      .add(new UI.Text()
        .setPosition(10,130)
        //.setText("IP-Adresse (optional):")
        .setText(translateKey("dialogSettingsBidCosRFLblIPAddress"))
      );

  
    /* Add frame to layer and layer to Layer */
    this.m_layer.appendChild(this.m_frame.getElement()); 
    Layer.add(this.m_layer);
  },
  
  /**
   * @fn close
   * @brief Schließt das Dialogfenster
   **/
  close: function()
  {
    Layer.remove(this.m_layer);
  },
  
  /** @fn ok
   *  @brief Führt die Callbackfuntion aus nachdem auf "OK" geklickt wurde
   *        und schließt anschließend das Dialogfenster
   **/
  ok: function()
  {
    if (this.m_action) { this.m_action(this); }
    this.close();
  },
  
  /** @fn cancel
   * @brief Schließt das Dialogfenster, nachdem auf "Abbrechen" geklickt wurde 
   **/
  cancel: function()
  {
    this.close();
  },
  
   /**
   * @fn setAction
   * @brief Setzt die Callbackfuntion, die aufgerufen wird, wenn OK-gedrückt wurde
   * @param action  Callbackfuntion "onOK"
   * @param context Optional. Kontext, an die action gebunden wird
   **/
  setAction: function(action, context)
  {
    if (context) { this.m_action = action.bind(context); }
    else         { this.m_action = action; }
    
    return this;
  },

  getUserName: function()
  {
    return this.m_nameTextEdit.getText();
  },

  getSerial: function()
  {
    return this.m_serialTextEdit.getText();
  },
  
  getKey: function()
  {
    return this.m_keyTextEdit.getText();
  },
  
  getIPAddress : function()
  {
    return this.m_ipTextEdit.getText();
  }
  
});

/*-------------------------------------------------------------------------------------------------------------------*/

BidcosRfPage.ChangeKeyDialog = Class.create({
	
  initialize : function(gateway) {
    
    var screenWidth  = WebUI.getWidth();
    var screenHeight = WebUI.getHeight();
    var frameWidth   = 500;
    var frameHeight  = 175;
    var frameX       = parseInt((screenWidth  - frameWidth)  / 2);
    var frameY       = parseInt((screenHeight - frameHeight) / 2);
	var m_gateway = gateway;
  
  	this.m_action = null;//Callback function
  
    this.m_layer = document.createElement("div");
    this.m_layer.className = "DialogLayer"; 
    
    this.m_newKeyTextEdit = new UI.TextEdit() 
      .setPosition(180, 40)
      .setWidth(frameWidth - 190);	

    this.m_newKeyTextRepetition = new UI.TextEdit() 
      .setPosition(180, 70)
      .setWidth(frameWidth - 190);
      
    this.m_newKeyRepetitionLabel = new UI.Text();
    this.m_newKeyRepetitionLabel.setPosition(10, 70);
    this.m_newKeyRepetitionLabel.setHtml(translateKey("dialogSettingsBidcosRFChangeAccessCodeNewKeyRepetition"));
	
    
    //Create new frame and add stuff
    this.m_frame = new UI.Frame()
      .setTitle(translateKey("dialogSettingsBidcosRFChangeAccessCodeTitle")) 
      .setContentSize(frameWidth, frameHeight)
      .setPosition(frameX, frameY)
      /* Add Cancel Button */
      .add(new UI.Button()
        .setPosition(10, frameHeight - 30)
        //.setText("Abbrechen")
        .setText(translateKey("btnCancel"))
        .setAction(this.cancel, this)
      )
      /* Add OK Button */
      .add(new UI.Button()
        .setPosition(frameWidth - 160, frameHeight - 30)
        //.setText("OK")
        .setText(translateKey("btnOk"))
        .setAction(this.ok, this)
        
      )
      //New key
      .add(new UI.Text()
        .setPosition(10, 40)
        .setText(translateKey("dialogSettingsBidcosRFChangeAccessCodeNewKey"))
      )
      .add(this.m_newKeyTextEdit)
      //Repetition of new key
	  .add(this.m_newKeyRepetitionLabel)
	  .add(this.m_newKeyTextRepetition);
    
    /* Add frame to layer and layer to Layer */
    this.m_layer.appendChild(this.m_frame.getElement()); 
    Layer.add(this.m_layer);
  },
  
  getKey : function() 
  {
    return this.m_newKeyTextEdit.getText();
  },
  
  getKeyRepetition : function()
  {
    return this.m_newKeyTextRepetition.getText();
  },
	
  /**
  * @fn setAction
  * @brief Setzt die Callbackfuntion, die aufgerufen wird, wenn OK-gedrückt wurde
  * @param action  Callbackfuntion "onOK"
  * @param context Optional. Kontext, an die action gebunden wird
  **/
  setAction : function(action, context)
  {
    if (context) { this.m_action = action.bind(context); }
    else         { this.m_action = action; }
    
    return this;
  },
  
    /**
   * @fn close
   * @brief Schließt das Dialogfenster
   **/
  close: function()
  {
    Layer.remove(this.m_layer);
  },
  
  /** @fn ok
   *  @brief Führt die Callbackfuntion aus nachdem auf "OK" geklickt wurde
   *        und schließt anschließend das Dialogfenster
   **/
  ok: function()
  {
    if (this.m_action) { this.m_action(this); }
    this.close();
  },
  
  /** @fn cancel
   * @brief Schließt das Dialogfenster, nachdem auf "Abbrechen" geklickt wurde 
   **/
  cancel: function()
  {
    this.close();
  }

});

/*-------------------------------------------------------------------------------------------------------------------*/


/**
 * @class BidcosRfPage.AddGatewayDialog
 * @brief Dialog zum Hinzufuegen von HM-CFG-LAN-Einstellungen.
 **/
BidcosRfPage.AddGatewayDialog = Class.create({

  /**
   * @constructor
   * Führt eine Grundinitialisierung durch und zeigt das Dialogfenster an.
   **/
  initialize: function(wiredGWExists, gateway)
  {
    var that = this;
    var imageHeight = 48;
    BidcosRfPage.AddGatewayDialog.CONTENT_HEIGHT += imageHeight;

    var screenWidth  = WebUI.getWidth();
    var screenHeight = WebUI.getHeight();
    var frameWidth   = BidcosRfPage.AddGatewayDialog.CONTENT_WIDTH;
    var frameHeight  = BidcosRfPage.AddGatewayDialog.CONTENT_HEIGHT;
    var frameX       = parseInt((screenWidth  - frameWidth)  / 2);
    var frameY       = parseInt((screenHeight - frameHeight) / 2);

    var previewHMLGW2 = "/ise/img/icons_lan_gateways/48/HMLGW2.png",
      previewLANIF = "/ise/img/icons_lan_gateways/48/CFG_LAN.png",
      previewHMWLGW = "/ise/img/icons_lan_gateways/48/HMWLGW.png";

    this.m_layer = document.createElement("div");
    this.m_layer.className = "DialogLayer";
    
    this.m_action = null;
    this.m_id     = null;


    this.m_gatewayImg = new UI.Image()
      .setPosition(180 + (BidcosRfPage.AddGatewayDialog.CONTENT_WIDTH / 2) ,10)
      .setPath(previewHMLGW2); // As default preselected

    this.m_typeListBox = new UI.ListBox()
      .setPosition(180,10 + imageHeight)
      .setWidth(BidcosRfPage.AddGatewayDialog.CONTENT_WIDTH - 190)
      .add({id:globalLGWTypes.HMLGW2, name: "RF: "+globalLGWTypeMap[globalLGWTypes.HMLGW2]})
      .add({id:globalLGWTypes.LANIF, name: "RF: "+globalLGWTypeMap[globalLGWTypes.LANIF]})
      .setOnChangeCallback(function() {
        var gateWay = this.getSelectedItem(),
          gateWayID = gateWay.id,
          jElem = "#bidcosAccessCode";
        var offsetPreviewPic = 180;

        switch (gateWayID) {
          case globalLGWTypes.HMLGW2:
            jQuery(jElem).text(translateKey("dialogSettingsBidCosRFLblPassphrase"));
            that.m_gatewayImg.setPath(previewHMLGW2);
            break;
          case globalLGWTypes.LANIF:
            jQuery(jElem).text(translateKey("dialogSettingsBidCosRFLblAccessCode"));
             that.m_gatewayImg.setPath(previewLANIF);
            break;
          case globalLGWTypes.HMWLGW:
            jQuery(jElem).text(translateKey("dialogSettingsBidCosRFLblPassphrase"));
            that.m_gatewayImg.setPath(previewHMWLGW);
            break;
        }
        that.m_gatewayImg.setPosition(offsetPreviewPic + (BidcosRfPage.AddGatewayDialog.CONTENT_WIDTH / 2),10);
      });
    
    /*Add Wired LGW only if there is no one*/
    if(!wiredGWExists) {
    	this.m_typeListBox.add({id:globalLGWTypes.HMWLGW, name: "Wired: "+globalLGWTypeMap[globalLGWTypes.HMWLGW]});
    }

    this.m_nameTextEdit = new UI.TextEdit()
      .setPosition(180, 40 + imageHeight)
      .setWidth(BidcosRfPage.AddGatewayDialog.CONTENT_WIDTH - 190);
    
    this.m_serialTextEdit = new UI.TextEdit()
      .setPosition(180, 70 + imageHeight)
      .setWidth(BidcosRfPage.AddGatewayDialog.CONTENT_WIDTH - 190);
    
    this.m_keyTextEdit = new UI.TextEdit()
      .setPosition(180, 70 + imageHeight)
      .setWidth(BidcosRfPage.AddGatewayDialog.CONTENT_WIDTH - 190);
    
    this.m_keyTextEdit = new UI.TextEdit()
      .setPosition(180, 100 + imageHeight)
      .setWidth(BidcosRfPage.AddGatewayDialog.CONTENT_WIDTH - 190);
      
    this.m_ipTextEdit = new UI.TextEdit()
      .setPosition(180, 130 + imageHeight)
      .setWidth(BidcosRfPage.AddGatewayDialog.CONTENT_WIDTH - 190);
    
    this.m_frame = new UI.Frame()
      //.setTitle("HomeMatic Konfigurations-Adapter hinzufügen")
      .setTitle(translateKey("dialogSettingsBidCosRFAddCFGTitle"))
      .setContentSize(frameWidth, frameHeight)
      .setPosition(frameX, frameY)

      .add(this.m_gatewayImg)

      .add(new UI.Text().setPosition(10,10 + imageHeight).setText(translateKey("dialogSettingsBidCosRFLblType")))

      .add(this.m_typeListBox)

      .add(new UI.Text()
        .setPosition(10,40 + imageHeight)
        .setText(translateKey("dialogSettingsBidCosRFLblName"))
      )
      .add(this.m_nameTextEdit)
      .add(new UI.Text()
        .setPosition(10, 70 + imageHeight)
        //.setText("Seriennummer:")
        .setText(translateKey("dialogSettingsBidCosRFLblSN"))
      )
      .add(this.m_serialTextEdit)
      .add(new UI.Text()
        .setPosition(10, 100 + imageHeight)
        //.setText("Zugriffscode:")
        .setText(translateKey("dialogSettingsBidCosRFLblAccessCode"))
        .setID("bidcosAccessCode")
      )
      .add(this.m_keyTextEdit)
      .add(new UI.Text()
        .setPosition(10,130 + imageHeight)
        //.setText("IP-Adresse (optional):")
        .setText(translateKey("dialogSettingsBidCosRFLblIPAddress"))
      )
      .add(this.m_ipTextEdit)
      .add(new UI.Button()
        .setPosition(10, BidcosRfPage.AddGatewayDialog.CONTENT_HEIGHT - 30)
        //.setText("Abbrechen")
        .setText(translateKey("btnCancel"))
        .setAction(this.cancel, this)
      )
      .add(new UI.Button()
        .setPosition(340, BidcosRfPage.AddGatewayDialog.CONTENT_HEIGHT - 30)
        //.setText("OK")
        .setText(translateKey("btnOk"))
        .setAction(this.ok, this)
      );

    this.m_layer.appendChild(this.m_frame.getElement());
    Layer.add(this.m_layer);
    BidcosRfPage.AddGatewayDialog.CONTENT_HEIGHT -= imageHeight;
  },

  /**
   * @fn setGateway
   * @brief Setzt die Felder Seriennummer, Zugriffscode und IP-Adresse
   **/
  setGateway: function(gateway)
  {
    this.m_nameTextEdit.setText(gateway.userName);
    this.m_serialTextEdit.setText(gateway.serial);
    this.m_keyTextEdit.setText(gateway.key);
    this.m_ipTextEdit.setText(gateway.ip);
    this.m_id = gateway.id;
    
    return this;
  },
  
  /**
   * @fn setAction
   * @brief Setzt die Callbackfuntion, die aufgerufen wird, wenn OK-gedrückt 
   *        wurde
   *
   * @param action  Callbackfuntion "onOK"
   * @param context Optional. Kontext, an die action gebunden wird
   **/
  setAction: function(action, context)
  {
    if (context) { this.m_action = action.bind(context); }
    else         { this.m_action = action; }
    
    return this;
  },

  getUserName: function()
  {
    return this.m_nameTextEdit.getText();
  },

  /**
   * @fn getSerial
   * @brief Liefert den Inhalt des Feldes Seriennummer
   **/
  getSerial: function()
  {
    return this.m_serialTextEdit.getText().toUpperCase();
  },
  
  /**
   * @fn getKey
   * @brief Liefert den Inhalt des Feldes Zugriffcode
   **/
  getKey: function()
  {
	if((this.getType() == globalLGWTypes.HMWLGW) || (this.getType() == globalLGWTypes.HMLGW2)) {
	    return this.m_keyTextEdit.getText();//Passphrases should not be upper case
	}
	else {
		return this.m_keyTextEdit.getText().toUpperCase();
	}
  },
  
  /**
   * @fn getType
   * @brief Liefert den Inhalt des Feldes Zugriffcode
   **/
  getType: function()
  {
    return this.m_typeListBox.getSelectedItem().id;
  },  
  
  /**
   * @fn getType
   * @brief Liefert den Inhalt des Feldes Zugriffcode
   **/
  getGatewayClass: function()
  {
    var gwClass = globalGWClasses.RF;
    if (this.m_typeListBox.getSelectedItem().id == globalLGWTypes.HMWLGW) {
   		gwClass = globalGWClasses.Wired;
    }
    return gwClass;
  }, 
  
  /**
   * @fn getIp
   * @brief Liefert den Inhalt des Feldes IP-Addresse
   **/
  getIp: function()
  {
    return this.m_ipTextEdit.getText();
  },
  
  /**
   * @fn getId
   * @brief Liefert die Id des momentan bearbeiten Gateways.
   **/
  getId: function()
  {
    return this.m_id;
  },
  
  /**
   * @fn close
   * @brief Schließt das Dialogfenster
   **/
  close: function()
  {
    Layer.remove(this.m_layer);
  },
  
  /**
   * @fn ok
   * @brief Führt die Callbackfuntion aus nachdem auf "OK" geklickt wurde
   *        und schließt anschließend das Dialogfenster
   **/
  ok: function()
  {
    if (this.m_action) { this.m_action(this); }
    this.close();
  },
  
  /**
   * @fn cancel
   * @brief Schließt das Dialogfenster, nachdem auf "Abbrechen" geklickt wurde 
   **/
  cancel: function()
  {
    this.close();
  }

});

BidcosRfPage.AddGatewayDialog.CONTENT_WIDTH  = 500;    //< Breite des Dialogfensters
BidcosRfPage.AddGatewayDialog.CONTENT_HEIGHT = 200; //< Höhe des Dialogfensters


BidcosRfPage.EditAssignmentDialog = Class.create({

  m_gateways: null,
  m_device: null,
  m_action: null,
  m_frame: null,
  m_defaultGateway : null,

  initialize: function()
  {
    var screenWidth  = WebUI.getWidth();
    var screenHeight = WebUI.getHeight();
    var frameWidth   = BidcosRfPage.EditAssignmentDialog.CONTENT_WIDTH;
    var frameHeight  = BidcosRfPage.EditAssignmentDialog.CONTENT_HEIGHT;
    var frameX       = parseInt((screenWidth  - frameWidth)  / 2);
    var frameY       = parseInt((screenHeight - frameHeight) / 2);
    var gateways     = BidcosRfPage.getGateways();
  
    this.m_layer = document.createElement("div");
    this.m_layer.className = "DialogLayer";

    this.m_gatewaysListbox = new UI.ListBox()
      .setPosition(100,10)
      .setWidth(BidcosRfPage.EditAssignmentDialog.CONTENT_WIDTH - 110);
      
    this.m_gateways = [];
    
    this.m_gatewaysListbox.add({name: translateKey("dialogSettingsBidcosRFIFaceAssignmentLblStandard"), value: BidcosRfPage.getDefaultGateway()});
    
    for (var i = 0, len = gateways.length; i < len; i++)
    {
      var gateway = gateways[i];
      if(gateway.getGatewayClass() == "RF") {
        //this.m_gateways.push({name: gateway.getAddress(), value: gateway});
        var name = (gateway.getUserName().length > 0) ? gateway.getUserName(): gateway.getAddress();

        this.m_gateways.push({name: name, value: gateway});
        if (this.m_gateways[i]) {
          this.m_gatewaysListbox.add(this.m_gateways[i]);
        }
      }
    }
      
    this.m_roamingCheckbox = new UI.Checkbox()
      //.setText("feste Zuordnung aufheben")
      .setText(translateKey("dialogSettingsBidcosRFIFaceAssignmentLblNullify"))
      .setPosition(100,40)
      .setWidth(BidcosRfPage.EditAssignmentDialog.CONTENT_WIDTH - 110)
      .setIsChecked(true);
      
    
    this.m_frame = new UI.Frame()
      //.setTitle("Interface-Zuordnung: ")
      .setTitle(translateKey("dialogSettingsBidcosRFIFaceAssignmentTitle"))
      .setContentSize(frameWidth, frameHeight)
      .setPosition(frameX, frameY)
      .add(new UI.Text()
        .setPosition(10, 10)
        //.setText("Gateway:")
        .setText(translateKey("dialogSettingsBidcosRFIFaceAssignmentLblGateway"))
        
      )
      .add(this.m_gatewaysListbox)
      .add(this.m_roamingCheckbox)
      .add(new UI.Button()
        .setPosition(10, BidcosRfPage.EditAssignmentDialog.CONTENT_HEIGHT - 30)
        //.setText("Abbrechen")
        .setText(translateKey("btnCancel"))
        .setAction(this.cancel, this)
      )
      .add(new UI.Button()
        .setPosition(240, BidcosRfPage.EditAssignmentDialog.CONTENT_HEIGHT - 30)
        //.setText("OK")
        .setText(translateKey("btnOk"))
        .setAction(this.ok, this)
      );
    
    this.m_layer.appendChild(this.m_frame.getElement());
    Layer.add(this.m_layer);
  },
  
  setDevice: function(device)
  {
    this.m_device = device;
    
    this.m_frame.setTitle(translateKey("dialogSettingsBidcosRFIFaceAssignmentTitle") + device.getName());
    this.m_roamingCheckbox.setIsChecked(device.getRoaming());
    for (var i = 0, len = this.m_gateways.length; i < len; i++)
    {
      var gateway = this.m_gateways[i];
      if (device.getGateway() == gateway.value.getAddress())
      {
        this.m_gatewaysListbox.selectItem(gateway);
        break;
      }
    }
 
    return this;
  },
  
  setAction: function(action, context)
  {
    if (context) { this.m_action = action.bind(context); }
    else         { this.m_action = action; }
    
    return this;
  },

  getGateway: function()
  {
    return this.m_gatewaysListbox.getSelectedItem().value;
  },
  
  getRoaming: function()
  {
    return this.m_roamingCheckbox.isChecked();
  },
  
  /**
   * @fn close
   * @brief Schließt das Dialogfenster
   **/
  close: function()
  {
    Layer.remove(this.m_layer);
  },
  
  /**
   * @fn ok
   * @brief Führt die Callbackfuntion aus nachdem auf "OK" geklickt wurde
   *        und schließt anschließend das Dialogfenster
   **/
  ok: function()
  {
    if (this.m_action) { this.m_action(this); }
    this.close();
  },
  
  /**
   * @fn cancel
   * @brief Schließt das Dialogfenster, nachdem auf "Abbrechen" geklickt wurde 
   **/
  cancel: function()
  {
    this.close();
  }
  
});

BidcosRfPage.EditAssignmentDialog.CONTENT_WIDTH  = 400; 
BidcosRfPage.EditAssignmentDialog.CONTENT_HEIGHT = 150;

BidcosRfPage.OptionsDialog = Class.create({
  m_passwordEdit: null,
  m_frame: null,

  initialize: function()
  {
    var screenWidth  = WebUI.getWidth();
    var screenHeight = WebUI.getHeight();
    var frameWidth   = BidcosRfPage.OptionsDialog.CONTENT_WIDTH;
    var frameHeight  = BidcosRfPage.OptionsDialog.CONTENT_HEIGHT;
    var frameX       = parseInt((screenWidth  - frameWidth)  / 2);
    var frameY       = parseInt((screenHeight - frameHeight) / 2);
  
    this.m_layer = document.createElement("div");
    this.m_layer.className = "DialogLayer";
    
    this.m_passwordEdit = new UI.PasswordEdit()
      .setPosition(90, 50)
      .setWidth(BidcosRfPage.OptionsDialog.CONTENT_WIDTH - 100);
    
    this.m_frame = new UI.Frame()
      //.setTitle("Sicherheitsschlüssel: ")
      .setTitle(translateKey("dialogSettingsBidcosRFEnterSecKeyTitle"))
      .setContentSize(frameWidth, frameHeight)
      .setPosition(frameX, frameY)
      .add(new UI.Text()
        .setPosition(10, 10)
        //.setText("Bitte geben Sie den System-Sicherheitsschlüssel ein:")
        .setText(translateKey("dialogSettingsBidcosRFEnterSecKeyContent"))
      )
      .add(this.m_passwordEdit)
      .add(new UI.Button()
        .setPosition(90, BidcosRfPage.OptionsDialog.CONTENT_HEIGHT - 30)
        .setText("OK")
        .setAction(this.ok, this)
      );
    
    this.m_layer.appendChild(this.m_frame.getElement());
    Layer.add(this.m_layer);
  },
    
  /**
   * @fn close
   * @brief Schließt das Dialogfenster
   **/
  close: function()
  {
    Layer.remove(this.m_layer);
  },
  
  /**
   * @fn ok
   * @brief Führt die Callbackfuntion aus nachdem auf "OK" geklickt wurde
   *        und schließt anschließend das Dialogfenster
   **/
  ok: function()
  {
    var key = this.m_passwordEdit.getText();
    
    homematic("BidCoS_RF.createKeyFile", { "key": key });
    
    if (homematic("BidCoS_RF.validateKey", {"key": key}))
    {
      //MessageBox.show("Info", "Die Konfiguration wurde an die HomeMatic Zentrale übertragen.\nDie Änderungen werden mit dem nächsten Start der HomeMatic Zentrale wirksam.");
      MessageBox.show(translateKey("dialogInfo"), translateKey("dialogSettingsBidcosRFSaveConfigSucceed"));
    }
    else
    {
      //MessageBox.show("Hinweis", "Der eingegebene Schlüssel entspricht nicht dem aktuellen System-Sicherheitsschlüssel.\nDie Konfiguration wurde an die HomeMatic Zentrale übertragen.\nDie Änderungen werden mit dem nächsten Start der HomeMatic Zentrale wirksam.\nFalls Probleme auftreten, wiederholen Sie ggf. die Eingabe.", null, 320, 120);
      MessageBox.show(translateKey("dialogHint"), translateKey("dialogSettingsBidcosRFSaveConfigFailure"), null, 320, 120);
    }
    
    this.close();
  }
  
  
});

BidcosRfPage.OptionsDialog.CONTENT_WIDTH  = 250; 
BidcosRfPage.OptionsDialog.CONTENT_HEIGHT = 130;
/**
 * homematic.js
 **/
  
/**
 * Stellt eine Anfrage an die HomeMatic Zentrale
 * Der Parameter callback ist optional. Wird er weggelassen, so ist die Anfrage synchron.
 **/
homematic = function(method, params, callback)
{
  var _params_ = params;
  if (!_params_) { _params_ = { }; }
  _params_["_session_id_"] = getSessionId();
  
  if (typeof(callback) != "undefined") 
  {
    var _callback_ = callback;
    return jsonrpc(homematic.URL, method, _params_, function(response) {
      _callback_(homematic._checkResponse(response), response.error);
    });
  }
  else
  {
    return homematic._checkResponse(jsonrpc(homematic.URL, method, _params_));
  }
};

/**
 * URL zur HomeMatic JSON API
 **/
homematic.URL = "/api/homematic.cgi";

/**
 * Prüft die JSON-Antwort ud liefert deren Resultat
 **/
homematic._checkResponse = function(response)
{
  if (null === response.error)
  {
    return response.result;
  }
  else
  {
    // handle errors
    return null;
  }
};
/**
 * regamonitor.js
 **/
 
/**
 * Überwacht die Logikschicht "ReGa" und gibt eine Meldung, falls diese sich nicht meldet.
 **/
ReGaMonitor = Class.create({
  
  initialize: function()
  {
    this.m_pollHandler     = this.poll.bind(this);
    this.m_responseHandler = this.response.bind(this);
    this.m_isRunning = true;
    this.m_failureCount = 0;
    this.poll();
  },
  
  poll: function()
  {
    if (this.m_isRunning)
    {
      homematic("ReGa.isPresent", null, this.m_responseHandler);
    }
  },
  
  response: function(result)
  {
    if (this.m_isRunning)
    {
      if (result === true)
      {
        this.m_pollHandler.delay(ReGaMonitor.INTERVAL);
        this.m_failureCount = 0;
      }
      else
      {
        this.m_failureCount++;
        if (this.m_failureCount < ReGaMonitor.FAILURE_RETRY)
        {
          this.m_pollHandler.delay(ReGaMonitor.INTERVAL);
        }
        else
        {
          new CrashDialog("ReGa");
        }
      }
    }
  },
  
  stop: function()
  {
    this.m_isRunning = false;
  }
  
});

ReGaMonitor.INTERVAL = 30;
ReGaMonitor.FAILURE_RETRY = 3;
/**
 * interfacemonitor.js
 **/
 
/**
 * Überwacht einen Schnittstellenprozess
 **/
InterfaceMonitor = Class.create({
  
  initialize: function(interfaceName)
  {
    this.m_interface = interfaceName;
    this.m_pollHandler = this.poll.bind(this);
    this.m_responseHandler = this.response.bind(this);
    this.m_isRunning = true;
    this.m_failureCount = 0;
    this.poll();
  },
  
  poll: function()
  {
    if (this.m_isRunning)
    {
      homematic("Interface.isPresent", {"interface": this.m_interface}, this.m_responseHandler);
    }
  },
  
  response: function(result)
  {
    if (this.m_isRunning)
    {
      if (result === true)
      {
        this.m_pollHandler.delay(InterfaceMonitor.INTERVAL);
        this.m_failureCount = 0;
      }
      else
      {
        this.m_failureCount++;
        if (this.m_failureCount < InterfaceMonitor.FAILURE_RETRY)
        {
          this.m_pollHandler.delay(InterfaceMonitor.INTERVAL);
        }
        else
        {
          new CrashDialog(this.m_interface);
        }
      }
    }
  },
  
  stop: function()
  {
    this.m_isRunning = false;
  }
  
});

InterfaceMonitor.INTERVAL = 30;
InterfaceMonitor.FAILURE_RETRY = 3;
InterfaceMonitor.start = function()
{
  InterfaceMonitor.m_monitors = [];
  
  var result = homematic("Interface.listInterfaces", null);
  if (result)
  {
    result.each(function (iface) {
      InterfaceMonitor.m_monitors.push(new InterfaceMonitor(iface["name"]));
    });
  }
};

InterfaceMonitor.stop = function()
{
  var monitors = InterfaceMonitor.m_monitors.clone();
  monitors.each(function(monitor) { monitor.stop(); });
};
/**
 * eQ3.HomeMatic.Event.js
 **/
 
/**
 * @fileOverview Ereignisse von der HomeMatic Zentrale
 * @author F. Werner (eQ-3)
 **/
 
if (!eQ3) { eQ3 = {}; }
if (!eQ3.HomeMatic) { eQ3.HomeMatic = {}; }

eQ3.HomeMatic.Event = Singleton.create({
  
  INTERVALL: 5,
  
  initialize: function()
  {
    this.m_listeners = { };
    this.m_poll = this.poll.bind(this);
    this.m_dispatch = this.dispatch.bind(this);
    
    homematic("Event.subscribe", null);
    this.m_pe = new PeriodicalExecuter( this.m_poll, this.INTERVALL);
  },
  
  poll: function(pe)
  {
    homematic("Event.poll", null, this.m_dispatch);
  },
  
  dispatch: function(events, error)
  {
    if (!error)
    {
      for (var i = 0, len = events.length; i < len; i++)
      {
        this.fire(events[i]);
      }
    }
  },
  
  stop: function()
  {
    this.m_pe.stop();
    homematic("Event.unsubscribe", null);
  },
  
  subscribe: function(eventType, listener)
  {
    var listeners = this.m_listeners[eventType];
    if (!listeners)
    {
      listeners = [];
      this.m_listeners[eventType] = listeners;
    }
    
    listeners.push(listener); 
  },

  unsubscribe: function(eventType, listener)
  {
    var listeners = this.m_listeners[eventType];
    
    if (listeners)
    {
      this.m_listeners[eventType] = listeners.without(listener);
    }
  },
  
  fire: function(event)
  {
    var type = event.type;
    var data = event.data; 
    var listeners = this.m_listeners[type];
    
    if (listeners)
    {
      listeners.each(function(listener) { listener(type, data); });
    }
  }
  
});/**
 * homematic.com.js
 * Schnittstelle zu HomeMatic.com
 **/
 
homematic.com = 
{
  m_latestVersion: translateKey("lblAvailableFirmwareVersionNotKnown"),
  m_isUpdateAvailable: false,

  m_latestDeviceFw : "",

  m_callback: null,

  init: function()
  {
    var serial = homematic("CCU.getSerial");
    // The server should return a string like "homematic.com.setLatestVersion('2.4.212');"
    var script = document.createElement("script");
    script.id = "homematic_com_script";
    script.type = "text/javascript";
    script.src = "http://update.homematic.com/firmware/download?cmd=js_check_version&version="+WEBUI_VERSION+"&product=HM-CCU2&serial=" + serial;
    $("body").appendChild(script);
  },

  // For testing only
  _init: function()
  {
    availableVersion = "unknown";
    peLoop = 0;
    // window.setTimout is only for testing the real server delay. In production this has of course to be removed.
    window.setTimeout(function(){
      // The server should return a string like "availableVersion=2.6.0.1;"
      var script = document.createElement("script");
      script.id = "homematic_com_script";
      script.type = "text/javascript";
      script.src = "version.js"; // rega/pages/version.js - has to be in one of these days the correct server url
      $('body').appendChild(script);
    }, 5000);

    new PeriodicalExecuter(function(pe) {
      conInfo.log("check available Version!");
      conInfo.log("correct version: " +availableVersion.match(/^[0-9]+.[0-9]+.[0-9]+/));
      if (availableVersion != "unknown") {
        homematic.com.setLatestVersion(availableVersion);
        StartPage.showUpdate();
        pe.stop();
      }
      // Try 30 seconds (10 * 3) to get the available version.
      // After that stop the polling.
      if (peLoop > 9) {
        pe.stop();
      }
      peLoop++;
    }, 3);
  },

  isUpdateAvailable: function()
  {
    return homematic.com.m_isUpdateAvailable;
  },
  
  getLatestVersion: function()
  {
    return homematic.com.m_latestVersion;
  }, 
  

  getAvailableDeviceFirmware: function(product, index, callback) {
      // The server should return a string like "homematic.com.setLatestVersion('1.2.2', 'product');"
      var script = document.createElement("script");
      script.id = "homematic_com_script_" + index;
      script.type = "text/javascript";
      script.src = "http://update.homematic.com/firmware/download?cmd=js_check_version&product=" + product + "&serial=0";
      $("body").appendChild(script);
      homematic.com.callback = callback;
  },

  /**
   * @fn setLatestVersion
   **/
  setLatestVersion: function(latestVersion, product)
  {
    if (product == "HM-CCU2") {
      homematic.com.m_latestVersion = latestVersion;
      homematic.com.m_isUpdateAvailable = (WEBUI_VERSION != latestVersion);
    } else {
      if (homematic.com.callback != null) {
        homematic.com.callback(latestVersion, product);
      }
    }
  }
};
/**
 * rega.js
 * Zugriff auf den ise ReGa Webserver.
 **/
 
/**
 * @fileOverview ?
 * @author Falk Werner (eQ-3)
 **/

/**
 * @class
 **/ 
ReGa = {

  /**
   * 1) ReGa arbeitet mit Latin-1 Zeichencodierung (ISO-8859-1)
   * 2) Anfragen über das XMLHttpRequest-Objekt sind i.d.R. UTF-8-codiert
   *
   * ==> Codierung der Anfrage:
   *     - escape() wandelt UTF-8 nach ASCII um 
   *       (Latin-1 Sonderzeichen werden durch Escape-Sequenzen ersetzt)
   *     - Anfrage wird in <prototypejs><![CDATA[ ... ]]><prototypejs>
   *       verpackt
   *
   * ==> Decodierung erfolgt durch den ReGa Webserver
   **/
  encode: function(data) 
  {
    return "<prototypejs><![CDATA[" + escape(data) + "]]></prototypejs>";
  }
};
/**
 * ise/iseFunctions.js
 **/

/**
 * @fileOverview ?
 * @author ise
 **/

/**
 * @namespace
 **/
ise = {};

// ######################
// ### ISE: FAVORITES ###
// ######################

/**
 * @class
 **/
ise.Favorites = Class.create();

ise.Favorites.prototype = 
{
  initialize: function()
  {
  },
  AddToStatus: function(id,cid)
  {
    var url = "/esp/favorites.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "AddToStatus";';
    pb += 'string id = "'+id+'";';
    pb += 'string cid = "'+cid+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete: function(t)
      {
        if(dbg){alert(t.responseText);}
        reloadPage();
      }
    };
    new Ajax.Request(url, opts);
  },
  RemoveFromStatus: function(id,cid)
  {
    var url = "/esp/favorites.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "RemoveFromStatus";';
    pb += 'string id = "'+id+'";';
    pb += 'string cid = "'+cid+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete: function(t)
      {
        if(dbg){alert(t.responseText);}
        reloadPage();
      }
    };
    new Ajax.Request(url, opts);
  },
  AddToList: function(flid,id)
  {
    var url = "/esp/favorites.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "AddToList";';
    pb += 'string flid = "'+flid+'";';
    pb += 'string id = "'+id+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete: function(t)
      {
        if(dbg){alert(t.responseText);}
        reloadPage();
      }
    };
    new Ajax.Request(url, opts);
  },
  AddSeparator: function(flid)
  {
    var url = "/esp/favorites.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "AddSeparator";';
    pb += 'string flid = "'+flid+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete: function(t)
      {
        if(dbg){alert(t.responseText);}
        reloadPage();
      }
    };
    new Ajax.Request(url, opts);
  },  
  RemoveFromList: function(flid,id)
  {
    var url = "/esp/favorites.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "RemoveFromList";';
    pb += 'string flid = "'+flid+'";';
    pb += 'string id = "'+id+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete: function(t)
      {
        if(dbg){alert(t.responseText);}
        reloadPage();
      }
    };
    new Ajax.Request(url, opts);
  },
  AddList: function(fname)
  {
    var url = "/esp/favorites.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "AddList";';
    pb += 'string fname = "'+fname+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete: function(t)
      {
        if(dbg){alert(t.responseText);}
        reloadPage();
      }
    };
    new Ajax.Request(url, opts);
  },
  RemoveList: function(flid)
  {
    var url = "/esp/favorites.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "RemoveList";';
    pb += 'string flid = "'+flid+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete: function(t)
      {
        if(dbg){alert(t.responseText);}
        WebUI.enter(FavoriteListPage);
      }
    };
    new Ajax.Request(url, opts);
  },
  CopyToNew: function(flid,bIsPC,bIsPDA,bIsCENTRAL,sargs)
  {
    var url = "/esp/favorites.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "CopyToNew";';
    pb += 'string flid = "'+flid+'";';
    pb += 'string sargs = "'+sargs+'";';
    pb += 'string bIsPC = "'+bIsPC+'";';
    pb += 'string bIsPDA = "'+bIsPDA+'";';
    pb += 'string bIsCENTRAL = "'+bIsCENTRAL+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete: function(t)
      {
        if(dbg){alert("CopyToNew:"+t.responseText);}
        WebUI.enter(FavoriteListPage);
      }
    };
    new Ajax.Request(url, opts);
  },
  MovePosition: function(flid,id,dir)
  {
    var url = "/esp/favorites.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "MovePosition";';
    pb += 'string flid = "'+flid+'";';
    pb += 'string id = "'+id+'";';
    pb += 'string dir = "'+dir+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete: function(t)
      {
        if(dbg){alert(t.responseText);}
        reloadPage();
      }
    };
    new Ajax.Request(url, opts);
  },
  FavColumnCount: function(id,count)
  {
    var url = "/esp/favorites.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "FavColumnCount";';
    pb += 'string id = "'+id+'";';
    pb += 'string count = "'+count+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete: function(t)
      {
        if(dbg){alert(t.responseText);}
        reloadPage();
      }
    };
    new Ajax.Request(url, opts);
  },
  FavColumnAlign: function(id,align)
  {
    var url = "/esp/favorites.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "FavColumnAlign";';
    pb += 'string id = "'+id+'";';
    pb += 'string align = "'+align+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete: function(t)
      {
        if(dbg){alert(t.responseText);}
        reloadPage();
      }
    };
    new Ajax.Request(url, opts);
  },
  FavNamePosition: function(id,pos)
  {
    var url = "/esp/favorites.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "FavNamePosition";';
    pb += 'string id = "'+id+'";';
    pb += 'string pos = "'+pos+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete: function(t)
      {
        if(dbg){alert(t.responseText);}
        reloadPage();
      }
    };
    new Ajax.Request(url, opts);
  },
  SaveFavoriteList: function(flid,bIsPC,bIsPDA,bIsCENTRAL,sArgs)
  {
    var url = "/esp/favorites.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SaveFavoriteList";';
    pb += 'string flid = "'+flid+'";';
    pb += 'string sargs = "'+sArgs+'";';
    if( bIsPC )
    {
      pb += 'string bIsPC = "true";';
    }
    else
    {
      pb += 'string bIsPC = "false";';
    }
    if(dbg)alert(pb);
    if( bIsPDA ) { pb += 'string bIsPDA = "true";'; } else { pb += 'string bIsPDA = "false";'; }
    if( bIsCENTRAL ) { pb += 'string bIsCENTRAL = "true";'; } else { pb += 'string bIsCENTRAL = "false";'; }
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete: function(t)
      {
        if(dbg){alert(t.responseText);}
        WebUI.enter(FavoriteListPage);
      }
    };
    new Ajax.Request(url, opts);
  }

};

iseFavorites = new ise.Favorites();

// ##################
// ### ISE: ROOMS ###
// ##################

/**
 * @class
 **/
ise.Rooms = Class.create();

ise.Rooms.prototype =  {
  initialize: function() {
  },
  
  // ### CREATE ROOM ###
  // [name]: room object name
  CreateRoomRetId: function(name, baseId) {
    name = name.replace(/[\r\n\t]/g, "");
    // alert("iseRooms.CreateRoomRetId: " + name + "(" + name.length + ")");
    var url = '/esp/rooms.htm?sid='+SessionId;
    var pb = "";
    pb += 'string action = "createRoomRetId";';
    pb += 'string name = "'+name+'";';
    var opt = 
    {
      postBody: ReGa.encode(pb),
      onComplete: function(transport) {
        buildPropTable(baseId);

        var id = transport.responseText;
        RoomList.beginUpdate(id);
      }
    };
    new Ajax.Request(url,opt);
  },
  
  // ### DELETE ROOM ###
  // [id]: room object id
  DeleteRoom: function(id) {
    var url = "/esp/rooms.htm?sid="+SessionId;
    var pb = "";
    pb += 'string action = "deleteRoom";';
    pb += 'integer id = '+id+';';
    var opt = {
      postBody: ReGa.encode(pb),
      
      onSuccess: function(t) {
      }
    };
    new Ajax.Request(url,opt);
  },
  
  // ### CHANGE ROOM NAME ###
  // [id]: room object id
  // [newName]: new name of room object
  ChangeRoomName: function(id, newName) {
    var url = "/esp/rooms.htm?sid="+SessionId;
    var pb = "";
    pb += 'string action = "changeRoomName";';
    pb += 'integer id = '+id+';';
    pb += 'string newname = "'+newName+'";';
    var opt = {
      postBody: ReGa.encode(pb)
    };
    new Ajax.Request(url,opt);
  },
  
  // ### CHANGE ROOM COLOR###
  // [id]: room object id
  // [newColor]: new color of room object
  ChangeRoomColor: function(id, newColor) {
    var url = "/esp/rooms.htm?sid="+SessionId;
    var pb = "";
    pb += 'string action = "changeRoomColor";';
    pb += 'integer id = '+id+';';
    pb += 'string newcolor = "'+newColor+'";';
    var opt = {
      postBody: ReGa.encode(pb)
    };
    new Ajax.Request(url,opt);
  },
  
  // ### CHANGE ROOM COMMENT###
  // [id]: room object id
  // [newColor]: new color of room object
  ChangeRoomComment: function(id, newComment) {
    var url = "/esp/rooms.htm?sid="+SessionId;
    var pb = "";
    pb += 'string action = "changeRoomComment";';
    pb += 'integer id = '+id+';';
    pb += 'string newcomment = "'+newComment+'";';
    var opt = {
      postBody: ReGa.encode(pb)
    };
    new Ajax.Request(url,opt);
  },
  
  // ### CHANGE ROOM SYMBOL###
  // [id]: room object id
  // [newSymbol]: new symbol of room object
  ChangeFunctionSymbol: function(id, newSymbol) {
    var url = "/esp/rooms.htm?sid="+SessionId;
    var pb = "";
    pb += 'string action = "changeRoomSymbol";';
    pb += 'integer id = '+id+';';
    pb += 'string newsymbol = "'+newSymbol+'";';
    var opt = {
      postBody: ReGa.encode(pb)
    };
    new Ajax.Request(url,opt);
  },
  
  buildRoomOverlay: function() {
    var url = "/esp/rooms.htm?sid="+SessionId;
    var pb = "string action = 'buildRoomOverlay';";
    var opts = {
      postBody: ReGa.encode(pb),
      onComplete: function() {
        translatePage('#roomOverlay');
      }
    };
    //new Ajax.Updater("roomOverlay", url, opts);
    new Ajax.Updater("roomOverlay", url, opts);
  }
};

iseRooms = new ise.Rooms();

// ######################
// ### ISE: FUNCTIONS ###
// ######################

/**
 * @class
 **/
ise.Functions = Class.create();

ise.Functions.prototype = {
  initialize: function() {
  },
  
  // ### CREATE FUNCTION ###
  // [name]: function object name
  CreateFunctionRetId: function(name, baseId) {
    var url = '/esp/functions.htm?sid='+SessionId;
    var pb = "";
    pb += 'string action = "createFunctionRetId";';
    pb += 'string name = "'+name+'";';
    var opt =  {
      postBody: ReGa.encode(pb),
      onComplete: function(transport) {
        buildPropTable(baseId);
        
        var id = transport.responseText;
        SubsectionList.beginUpdate(id);
      }
    };
    new Ajax.Request(url,opt);
  },
  
  // ### CHANGE FUNCTION NAME ###
  // [id]: function object id
  // [newName]: new name of function object
  ChangeFunctionName: function(id, newName) {
    var url = "/esp/functions.htm?sid="+SessionId;
    var pb = "";
    pb += 'string action = "changeFunctionName";';
    pb += 'integer id = '+id+';';
    pb += 'string newname = "'+newName+'";';
    var opt = {
      postBody: ReGa.encode(pb)
    };
    new Ajax.Request(url,opt);
  },
  
  // ### DELETE FUNCTION ###
  // [id]: function object id
  DeleteFunction: function(id) {
    var url = "/esp/functions.htm?sid="+SessionId;
    var pb = "";
    pb += 'string action = "deleteFunction";';
    pb += 'integer id = '+id+';';
    var opt = {
      postBody: ReGa.encode(pb),
      
      onSuccess: function(t) {
      }
    };
    new Ajax.Request(url,opt);
  },
  
  // ### CHANGE FUNCTION COLOR###
  // [id]: function object id
  // [newColor]: new color of function object
  ChangeFunctionColor: function(id, newColor) {
    var url = "/esp/functions.htm?sid="+SessionId;
    var pb = "";
    pb += 'string action = "changeFunctionColor";';
    pb += 'integer id = '+id+';';
    pb += 'string newcolor = "'+newColor+'";';
    var opt = {
      postBody: ReGa.encode(pb)
    };
    new Ajax.Request(url,opt);
  },
  
  // ### CHANGE FUNCTION COMMENT###
  // [id]: function object id
  // [newComment]: new comment of function object
  ChangeFunctionComment: function(id, newComment) {
    var url = "/esp/functions.htm?sid="+SessionId;
    var pb = "";
    pb += 'string action = "changeFunctionComment";';
    pb += 'integer id = '+id+';';
    pb += 'string newcomment = "'+newComment+'";';
    var opt = {
      postBody: ReGa.encode(pb)
    };
    new Ajax.Request(url,opt);
  },
  
  // ### CHANGE FUNCTION SYMBOL###
  // [id]: function object id
  // [newSymbol]: new symbol of function object
  ChangeFunctionSymbol: function(id, newSymbol) {
    var url = "/esp/functions.htm?sid="+SessionId;
    var pb = "";
    pb += 'string action = "changeFunctionSymbol";';
    pb += 'integer id = '+id+';';
    pb += 'string newsymbol = "'+newSymbol+'";';
    var opt = {
      postBody: ReGa.encode(pb)
    };
    new Ajax.Request(url,opt);
  },
  
  buildFuncOverlay: function() {
    var url = "/esp/functions.htm?sid="+SessionId;
    var pb = "string action = 'buildFuncOverlay';";
    var opts = {
      postBody: ReGa.encode(pb),
      onComplete: function() {
        translatePage('#funcOverlay');
      }
    };
    new Ajax.Updater("funcOverlay", url, opts);
  }
};

iseFunctions = new ise.Functions();

// #####################
// ### ISE: CHANNELS ###
// #####################

/**
 * @class
 **/
ise.Channels = Class.create();

ise.Channels.prototype = {
  initialize: function() {
  },
  
  // ### SetReadyConfig
  // [ctrlId]: id of checkbox
  // [id]: id of channel 
  setReadyConfig: function(ctrlId, id) {
    var url   = "/esp/channels.htm?sid="+SessionId;
    var state = ($(ctrlId)._isReady) ? 0 : 1;
    
    var pb = "string chnId = " + id + ";";
    pb    += "string action= 'setReadyConfig';";
    pb    += "string state = " + state + ";";
    
    if(dbg){alert($(ctrlId).checked);}
    new Ajax.Updater("dummy", url, {postBody: ReGa.encode(pb),evalScripts:true,onComplete:function(t){if(dbg){alert(t.responseText);}}});
  },
  
  setHandling: function(id, ctrlId) {
    var url = "/esp/channels.htm?sid="+SessionId;
    var pb = "integer chnId = " + id + ";";
    pb += "string action= 'setHandling';";
    pb += "integer iHandling = "+($(ctrlId).checked? 1: 0)+";";
    new Ajax.Updater("dummy", url, {postBody: ReGa.encode(pb), evalScripts:true});
  },
  
  setVisible: function(id, ctrlId)
  {
    var url = "/esp/channels.htm?sid="+SessionId;
    var pb = "integer chnId = " + id + ";";
    pb += "string action= 'setVisible';";
    pb += "integer iVis = "+($(ctrlId).checked? 1: 0)+";";
    new Ajax.Updater("dummy", url, {postBody: ReGa.encode(pb), evalScripts:true});
  },
  
  setProto: function(id, ctrlId) {
    var url = "/esp/channels.htm?sid="+SessionId;
    var pb = "integer chnId = " + id + ";";
    pb += "string action= 'setProto';";
    pb += "integer iProto = "+($(ctrlId).checked? 1: 0)+";";
    new Ajax.Updater("dummy", url, {postBody: ReGa.encode(pb), evalScripts:true});
  },
  
  setTransMode: function(id, bAES) {
    var url = "/esp/channels.htm?sid="+SessionId;
    var pb = "integer chnId = " + id + ";";
    pb += "string action= 'setTransMode';";
    pb += "integer iAES = "+(bAES? 1: 0)+";";
    new Ajax.Updater("dummy", url, {postBody: ReGa.encode(pb), evalScripts: true});
  },
  
  chnToRoom: function(idChn, idRoom, bAdd) {
    var url = "/esp/channels.htm?sid="+SessionId;
    var pb = "integer chnId = "+  idChn + ";";
    pb += "integer roomId = "+  idRoom + ";";
    pb += "string action= 'chnToRoom';";
    pb += "integer iAdd = "+  (bAdd ? 1 : 0) + ";";
    new Ajax.Updater('dummy', url, {postBody: ReGa.encode(pb), evalScripts: true});
    
    var room = RoomList.get(idRoom);
    if (room)
    {
      if (bAdd) { room.addChannel(idChn); }
      else      { room.removeChannel(idChn); }
    }
  },
  
  delChnFromAllRooms: function(chnId,bCTV) {
    var url = "/esp/channels.htm?sid="+SessionId;
    var pb = "";
    pb += "string chnId = '"+  chnId + "';";
    pb += "string action= 'delChnFromAllRooms';";
    if( bCTV )
    {
      pb += 'system.SetSessionVar("sessionCTV", "true");';
    }
    else
    {
      pb += 'system.SetSessionVar("sessionCTV", "false");';
    }
    var opts =
    {
      postBody: ReGa.encode(pb),
      evalScripts: true,
      onComplete: function(t)
      {
        reloadSortedPage();
      }
    };
    new Ajax.Request(url, opts);
  },

  delChnFromAllFunctions: function(chnId,bCTV) {
    var url = "/esp/channels.htm?sid="+SessionId;
    var pb = "";
    pb += "string chnId = '"+  chnId + "';";
    pb += "string action= 'delChnFromAllFunctions';";
    if( bCTV )
    {
      pb += 'system.SetSessionVar("sessionCTV", "true");';
    }
    else
    {
      pb += 'system.SetSessionVar("sessionCTV", "false");';
    }
    var opts =
    {
      postBody: ReGa.encode(pb),
      evalScripts: true,
      onComplete: function(t)
      {
        reloadSortedPage();
      }
    };
    new Ajax.Request(url, opts);
  },
  
  chnToFunc: function(idChn, idFunc, bAdd) {
    var url = "/esp/channels.htm?sid="+SessionId;
    var pb = "integer chnId = "+  idChn + ";";
    pb += "integer funcId = "+  idFunc + ";";
    pb += "string action= 'chnToFunc';";
    pb += "integer iAdd = "+  (bAdd ? 1 : 0) + ";";
    new Ajax.Updater('dummy', url, {postBody: ReGa.encode(pb), evalScripts: true});

    var subsection = SubsectionList.get(idFunc);
    if (subsection)
    {
      if (bAdd) { subsection.addChannel(idChn); }
      else      { subsection.removeChannel(idChn); }
    }    
  },
  
  showOverlay: function(idChn, baseId) {
    var url = "/esp/channels.htm?sid="+SessionId;
    var pb = "integer chnId = "+  idChn + ";";
    pb += "integer baseId = "+  baseId + ";";
    pb += "string action= 'showOverlay';";
    new Ajax.Updater('dummy', url, {postBody: ReGa.encode(pb), evalScripts: true});
  },
  
  // sChns: tab-separiert wg. ESP foreach
  addChnsToID: function(sChns, destId, clearAll, onComplete) {
    var _onComplete_ = onComplete;
    var url = "/esp/channels.htm?sid="+SessionId;
    var pb = "integer destId = "+  destId + ";";
    pb += "string arChn = '"+  sChns + "';";
    pb += "string action= 'addChnsToID';";
    pb += 'system.SetSessionVar("sessionLS","");';
    if(clearAll)
    {
      pb += "boolean clearAll = "+clearAll+";";
    }
    else
    {
      pb += "boolean clearAll = false;";
    }
    var opts =
    {
      postBody: ReGa.encode(pb),
      evalScripts: true,
      onComplete: function(t)
      {
        reloadSortedPage();
        if (_onComplete_) { _onComplete_(); }
      }
    };
    new Ajax.Updater("dummy", url, opts );
  },
  
  Test: function(ids)
  {
    var url = '/esp/channels.htm?sid='+SessionId;
    var pb = '';
    pb += 'string action = "Test";';
    pb += 'string ids = "'+ids+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      evalScripts:true,
      onComplete:function(t)
      {
        if(dbg)alert(t.responseText);
      }
    };
    new Ajax.Request( url, opts );
  },
  
  delChnFromID: function(chnId, destId,bCTV) {
    var url = "/esp/channels.htm?sid="+SessionId;
    var pb = "integer destId = "+  destId + ";";
    pb += "string chnId = '"+  chnId + "';";
    pb += "string action= 'delChnFromID';";
    if( bCTV )
    {
      pb += 'system.SetSessionVar("sessionCTV", "true");';
    }
    else
    {
      pb += 'system.SetSessionVar("sessionCTV", "false");';
    }
    var opts =
    {
      postBody: ReGa.encode(pb),
      evalScripts: true,
      onComplete: function(t)
      {
        reloadSortedPage();
      }
    };
    new Ajax.Request(url, opts);
  },
  
  saveDisplayValues: function(chnId)
  {
    var id = chnId;
    conInfo( "iseChannels.saveDisplayValues("+id+");" );
    var url = "/esp/channels.htm?sid="+SessionId;
    var sEnum = "TEXT\tBEEP\tUNIT\tBACKLIGHT";
    var pb = "";
    pb += 'string action = "saveDisplayValues";';
    pb += 'string chnId = "'+id+'";';
    pb += 'string varTEXT = "'+$("txt"+id).value+'";';
    pb += 'string varUNIT = "'+$("selUnit"+id).selectedIndex+'";';
    pb += 'string varBACKLIGHT = "'+$("selLight"+id).selectedIndex+'";';
    pb += 'string varBEEP = "'+$("selBeep"+id).selectedIndex+'";';
    if( $("cBulb"+id).checked ) { sEnum += "\tBULB"; }
    if( $("cSwitch"+id).checked ) { sEnum += "\tSWITCH"; }
    if( $("cWnd"+id).checked ) { sEnum += "\tWINDOW"; }
    if( $("cDoor"+id).checked ) { sEnum += "\tDOOR"; }
    if( $("cBlind"+id).checked ) { sEnum += "\tBLIND"; }
    if( $("cScene"+id).checked ) { sEnum += "\tSCENE"; }
    if( $("cPhone"+id).checked ) { sEnum += "\tPHONE"; }
    if( $("cBell"+id).checked ) { sEnum += "\tBELL"; }
    if( $("cArrUp"+id).checked ) { sEnum += "\tARROW_UP"; }
    if( $("cArrDown"+id).checked ) { sEnum += "\tARROW_DOWN"; }
    if( $("cClock"+id).checked ) { sEnum += "\tCLOCK"; }
    sEnum += "\tSUBMIT";
    pb += 'string StateEnum = "'+sEnum+'";';
    conInfo( "StateEnum=["+sEnum+"]" );
    new Ajax.Request(url, {postBody: ReGa.encode(pb),onSuccess:function(t){conInfo(t.responseText);}});
  }
};

iseChannels = new ise.Channels();

// #####################
// ### ISE: DEVICES  ###
// #####################

/**
 * @class
 **/
ise.Devices = Class.create();

ise.Devices.prototype = {

  //deviceOperateGroupOnly: false,

  initialize: function() {
    //this.deviceOperateGroupOnly = false;
  },
  setOperateGroupOnly: function(mode) {
    //this.deviceOperateGroupOnly = mode;
  },

  // ### SetReadyConfig
  // [id]: id of device 
  setReadyConfig: function(id) {
    // dazugehörige Tabellenreihe ausblenden
    //$("tr" + id).hide();
    var url = "/esp/devices.htm?sid="+SessionId;
    var pb = "integer devId = " + id + ";";
    pb += "string action= 'setReadyConfig';";
    new Ajax.Updater("dummy", url, {postBody: ReGa.encode(pb), evalScripts: true, onComplete: function(t){if(dbg){alert(t.responseText);}}});
    
    // Gerät in Geräteliste übernehmen
    //DeviceList.beginUpdateDevice(id);

     // Gerät in Geräteliste übernehmen
    DeviceList.beginUpdateDevice(id, function() {
     //DeviceList.devices[id].isOperateGroupOnly = this.deviceOperateGroupOnly;
      if (DeviceList.devices[id]) {
        DeviceList.devices[id].isOperateGroupOnly = false;
      }
      //this.deviceOperateGroupOnly = false;
    });

  },
  
  setHandling: function(id, ctrlId) {
    var url = "/esp/devices.htm?sid="+SessionId;
    var pb = "integer devId = " + id + ";";
    pb += "string action= 'setHandling';";
    pb += "integer iHandling = "+($(ctrlId).checked? 1: 0)+";";
    new Ajax.Updater("dummy", url, {postBody: ReGa.encode(pb), evalScripts:true});
  },
  
  setVisible: function(id, ctrlId) {
    var url = "/esp/devices.htm?sid="+SessionId;
    var pb = "integer devId = " + id + ";";
    pb += "string action= 'setVisible';";
    pb += "integer iVis = " + ($(ctrlId).checked? 1: 0) + ";";
    new Ajax.Updater("dummy", url, {postBody: ReGa.encode(pb), evalScripts:true});
  },
  
  setProto: function(id, ctrlId)
  {
    var url = "/esp/devices.htm?sid="+SessionId;
    var pb = "integer devId = " + id + ";";
    pb += "string action= 'setProto';";
    pb += "integer iProto = "+($(ctrlId).checked? 1: 0)+";";
    new Ajax.Updater("dummy", url, {postBody: ReGa.encode(pb), evalScripts:true});
  }
};

iseDevices = new ise.Devices();




// #####################
// ### ISE: SYSTEM   ###
// #####################

/**
 * @class
 **/
ise.System = Class.create();

ise.System.prototype = {
  initialize: function() {
  },
  
  checkName: function(name,divid)
  {
    var url = "/esp/exec.htm?sid="+SessionId;
    var pb = '';
    pb += 'string sUniqueName;';
    pb += 'dom.CheckName("'+name+'", &sUniqueName, ID_SYSTEM_VARIABLES );';
    pb += 'Write( sUniqueName );';
    var opts = { postBody: ReGa.encode(pb) };
    new Ajax.Updater(divid,url,opts);
  },
  
  saveName: function(id, name, ctrlId, callStrFunc) {
    var url = "/esp/system.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "saveName";';
    pb += 'string id = "'+id+'";';
    pb += 'string name = "'+name+'";';
    if(dbg){alert(pb);}
    var opts = {
      postBody: ReGa.encode(pb), 
      onComplete: function(resp) {
        if ($(ctrlId)) {
           // alert("iseSystem.saveName: " + resp.responseText + "(" + resp.responseText.length + ")");
          if (callStrFunc) {
            if (callStrFunc == CALL_STRCUT) 
              $(ctrlId).innerHTML = strCut(resp.responseText, true, true);
            if (callStrFunc == CALL_SPACECUT) 
              $(ctrlId).innerHTML = spaceCutHtmlIf(resp.responseText, 1);
          }
          else
            $(ctrlId).innerHTML = resp.responseText;
        }
      } 
    };
    new Ajax.Request(url, opts);  
  },
  
  saveDesc: function(id, desc) {
    var url = "/esp/system.htm?sid="+SessionId;
    var pb = "integer objId = " + id + ";";
    pb += "string desc   = '"+desc+"';";
    pb += "string action = 'saveDesc';";    
    if(dbg){alert(pb);}
    new Ajax.Request(url, {postBody: ReGa.encode(pb),onComplete:function(t){if(dbg){alert(t.responseText);}}});  
  },
  
  saveDpProto: function(id, ctrlId) {
    var url = "/esp/system.htm?sid="+SessionId;
    var pb = "string action = 'saveDpProto';";
    pb += "integer dpId = " + id + ";";
    pb += "integer iProto   = '"+($(ctrlId).checked ? 1 : 0)+"';";
    new Ajax.Request(url, {postBody: ReGa.encode(pb)});  
  },
  
  saveDpVisibility: function(id, ctrlId) {
    var url = "/esp/system.htm?sid="+SessionId;
    var pb = "string action = 'saveDpVisibility';";
    pb += "integer dpId = " + id + ";";
    pb += "integer iVisible   = '"+($(ctrlId).checked ? 1 : 0)+"';";
    new Ajax.Request(url, {postBody: ReGa.encode(pb)});  
  },
  
  ClearHistoryData: function()
  {
    var url = "/esp/system.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "ClearHistoryData";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        reloadPage();
      }
    };
    new Ajax.Request(url,opts);    
  }
};

iseSystem = new ise.System();

// #######################
// ### ISE: PROGRAMS   ###
// #######################

/**
 * @class
 **/
ise.Programs = Class.create();

ise.Programs.prototype = {
  initialize: function() {
  },

  SetBreakOnRestart: function( rid, id, value )
  {
    
    var url = "/esp/programs.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetBreakOnRestart";';
    pb += 'string id = "'+id+'";';
    pb += 'string value = "'+value+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        ReloadRule(rid);
      }
    };
    new Ajax.Request(url,opts);    
    if(dbg)alert(pb);
  },

  SetActive: function( id, value )
  {
    var url = "/esp/programs.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetActive";';
    pb += 'string id = "'+id+'";';
    pb += 'string value = "'+value+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        //reloadPage();
      }
    };
    new Ajax.Request(url,opts);    
  },

  SetVisible: function( id, value )
  {
    var url = "/esp/programs.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetVisible";';
    pb += 'string id = "'+id+'";';
    pb += 'string value = "'+value+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        //reloadPage();
      }
    };
    new Ajax.Request(url,opts);    
  },

  SetOperate: function( id, value )
  {
    var url = "/esp/programs.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetOperate";';
    pb += 'string id = "'+id+'";';
    pb += 'string value = "'+value+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        //reloadPage();
      }
    };
    new Ajax.Request(url,opts);    
  },
  
  ProgramUpdate: function( id )
  {
    var url = "/esp/programs.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "ProgramUpdate";';
    pb += 'string id = "'+id+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        reloadPage();
      }
    };
    new Ajax.Request(url,opts);    
  },

  SetVisibility: function( id, value )
  {
    var url = "/esp/programs.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetVisibility";';
    pb += 'string id = "'+id+'";';
    pb += 'string value = "'+value+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        //reloadPage();
      }
    };
    new Ajax.Request(url,opts);    
  },

  // ### CONDITIONS ###
  AddCondition: function(rid) {
    var url = "/esp/programs.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "AddCondition";';
    pb += 'string rid = "'+rid+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        ReloadRule(rid);
      }
    };
    new Ajax.Request(url,opts);
  },
  DeleteCondition: function(rid,cid) {
    var url = "/esp/programs.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "DeleteCondition";';
    pb += 'string rid = "'+rid+'";';
    pb += 'string cid = "'+cid+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        ReloadRule(rid);
      }
    };
    new Ajax.Request(url,opts);
  },
  // ### SINGLE CONDITIONS ###
  AddSingleCondition: function(rid, cid) {
    var url = "/esp/programs.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "AddSingleCondition";';
    pb += 'string cid = "'+cid+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        ReloadRule( rid );
      }
    };
    new Ajax.Request(url,opts);
  },
  DeleteSingleCondition: function(rid,cid,sid) {
    var url = "/esp/programs.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "DeleteSingleCondition";';
    pb += 'string cid = "'+cid+'";';
    pb += 'string sid = "'+sid+'";';
    pb += 'string rid = "'+rid+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        ReloadRule(rid);
      }
    };
    new Ajax.Request(url,opts);
  },
  // ### SINGLE DESTINATIONS ###
  AddSingleDestination: function(rid,did) {
    var url = "/esp/programs.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "AddSingleDestination";';
    pb += 'string did = "'+did+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        ReloadRule(rid);
      }
    };
    new Ajax.Request(url,opts);
  },
  DeleteSingleDestination: function(rid,did,sid) {
    var url = "/esp/programs.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "DeleteSingleDestination";';
    pb += 'string did = "'+did+'";';
    pb += 'string sid = "'+sid+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        ReloadRule(rid);
      }
    };
    new Ajax.Request(url,opts);
  },
  // #### SUB RULES ####
  AddSubRule: function(rid)
  {
    if(dbg){alert("Call AddSubRule");}
    var url = "/esp/programs.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "AddSubRule";';
    pb += 'string rid = "'+rid+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        reloadPage();
      }
    };
    new Ajax.Request(url,opts);
  },
  AddSubRuleDest: function(rid)
  {
    if(dbg){alert("Call AddSubRuleDest");}
    var url = "/esp/programs.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "AddSubRuleDest";';
    pb += 'string rid = "'+rid+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        reloadPage();
        //ReloadRule( rid );
      }
    };
    new Ajax.Request(url,opts);
  },
  AddSubRuleBreakOnRestart: function(rid)
  {
    if(dbg){alert("Call AddSubRuleBreakOnRestart");}
    var url = "/esp/programs.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "AddSubRuleBOR";';
    pb += 'string rid = "'+rid+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        reloadPage();
      }
    };
    new Ajax.Request(url,opts);
  },
  AddNewElseRule: function(rid)
  {
    if(dbg){alert("Call AddNewElseRule");}
    var url = "/esp/programs.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "AddNewElseRule";';
    pb += 'string rid = "'+rid+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        //ReloadRule(rid);
        reloadPage();
      }
    };
    new Ajax.Request(url,opts);
  },
  DeleteSubRule: function(rid)
  {
    var url = "/esp/programs.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "DeleteSubRule";';
    pb += 'string rid = "'+rid+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        //ReloadRule(rid);
        //ReloadProgram(pid);
        reloadPage();
      }
    };
    new Ajax.Request(url,opts);
  },
  OperatorType: function(rid,id,value)
  {
    var url = "/esp/programs.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetOperatorType";';
    pb += 'string id = "'+id+'";';
    pb += 'string value = "'+value+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        ReloadRule(rid);
      }
    };
    new Ajax.Request(url,opts);
  },
  Delete: function(id)
  {
    var url = "/esp/programs.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "DeleteProgram";';
    pb += 'string id = "'+id+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        WebUI.enter(ProgramListPage);
      }
    };
    new Ajax.Request(url,opts);
  },
  Restore: function(orig,copy)
  {
    var url = "/esp/programs.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "RestoreProgram";';
    pb += 'string orig = "'+orig+'";';
    pb += 'string copy = "'+copy+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        WebUI.enter(ProgramListPage);
      }
    };
    new Ajax.Request(url,opts);
  },
  CopyToNewProgram: function(id)
  {
    var url = "/esp/programs.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "CopyToNewProgram";';
    pb += 'string id = "'+id+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        WebUI.enter(ProgramListPage);        
      }
    };
    new Ajax.Request(url,opts);
  }
};

isePrograms = new ise.Programs();

// ##############################
// ### ISE: SINGLE CONDITIONS ###
// ##############################

/**
 * @class
 **/
ise.SingleCondition = Class.create();

ise.SingleCondition.prototype =
{
  initialize: function()
  {
  }, 
  
  OperatorType: function(cid,id,value)
  {
    var url = "/esp/sico.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetOperatorType";';
    pb += 'string cid = "'+cid+'";';
    pb += 'string id = "'+id+'";';
    pb += 'string value = "'+value+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        conInfo( t.responseText );
        ReloadRule(rid);
      }
    };
    new Ajax.Request(url,opts);
  },
  
  SetValueRange: function(id,rv1,rv2,ct)
  {
    var url = "/esp/sico.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetValueRange";';
    pb += 'string id = "'+id+'";';
    pb += 'string rv1 = "'+rv1+'";';
    pb += 'string rv2 = "'+rv2+'";';
    pb += 'string ct = "'+ct+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        ReloadSingleCondition(id);
      }
    };
    new Ajax.Request(url,opts);        
  },

  SetLeftValue: function(scid,lv)
  {
    var url = "/esp/sico.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetLeftValue";';
    pb += 'string scid = "'+scid+'";';
    pb += 'string lv = "'+lv+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        ReloadSingleCondition(scid);
      }
    };
    new Ajax.Request(url,opts);    
  },
  
  SetRightValue: function(scid,rv)
  {
    var url = "/esp/sico.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetRightValue";';
    pb += 'string scid = "'+scid+'";';
    pb += 'string rv = "'+rv+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
      }
    };
    new Ajax.Request(url,opts);    
  },
  
  SetLeftAndRightValue: function(scid,lv,rv)
  {
    var url = "/esp/sico.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetLeftAndRightValue";';
    pb += 'string scid = "'+scid+'";';
    pb += 'string rv = "'+rv+'";';
    pb += 'string lv = "'+lv+'";';    
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        conInfo( t.responseText );
        ReloadSingleCondition(scid);
      }
    };
    new Ajax.Request(url,opts);    
  },
  
  SetLeftValType: function(scid,lvt)
  {
    var url = "/esp/sico.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetLeftValType";';
    pb += 'string scid = "'+scid+'";';
    pb += 'string lvt = "'+lvt+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        ReloadSingleCondition(scid);
      }
    };
    new Ajax.Request(url,opts);    
  },
  SetConditionType2: function(scid,ct)
  {
    var url = "/esp/sico.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetConditionType2";';
    pb += 'string scid = "'+scid+'";';
    pb += 'string ct = "'+ct+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        conInfo(t.responseText);
        ReloadSingleCondition(scid);
      }
    };
    new Ajax.Request(url,opts);    
  },
  SetChannel: function(scid,chid)
  {
    var url = "/esp/sico.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetChannel";';
    pb += 'string scid = "'+scid+'";';
    pb += 'string chid = "'+chid+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        ReloadSingleCondition(scid);
      }
    };
    new Ajax.Request(url,opts);    
  },
  SetTimeModule: function(scid,tmid)
  {
    var url = "/esp/sico.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetTimeModule";';
    pb += 'string scid = "'+scid+'";';
    pb += 'string tmid = "'+tmid+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        ReloadSingleCondition(scid);
      }
    };
    new Ajax.Request(url,opts);    
  }
};

iseSingleCondition = new ise.SingleCondition();

// ################################
// ### ISE: SINGLE DESTINATION ###
// ################################

/**
 * @class
 **/
ise.SingleDestination = Class.create();

ise.SingleDestination.prototype =
{
  initialize: function()
  {
    this.reload = true;
  },  

  SetDP: function(id,value)
  {
    var url = "/esp/side.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetDP";';
    pb += 'string id = "'+id+'";';
    pb += 'string value = "'+value+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        reloadPage();
      }
    };
    new Ajax.Request(url,opts);    
  },
  SetChannel: function(id,value)
  {
    var url = "/esp/side.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetChannel";';
    pb += 'string id = "'+id+'";';
    pb += 'string value = "'+value+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        ReloadSingleDestination(id);
      }
    };
    new Ajax.Request(url,opts);    
  },
  SetParam: function(id,value)
  {
    var url = "/esp/side.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetParam";';
    pb += 'string id = "'+id+'";';
    pb += 'string value = "'+value+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        ReloadSingleDestination(id);
      }
    };
    new Ajax.Request(url,opts);    
  },
  SetValue: function(id,value,unit)
  {
		var url = "/esp/side.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetValue";';
    pb += 'string id = "'+id+'";';
    pb += 'string value = "'+value+'";';
    if( typeof( unit ) != "undefined" )
    {
      pb += 'string unit = "'+unit+'";';
    }
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        conInfo( t.responseText );
        if(iseSingleDestination.reload) { ReloadSingleDestination(id); }
        iseSingleDestination.reload = true;
      }
    };
    new Ajax.Request(url,opts);    
  },

  SetValueMinMax: function(id,value,unit,min,max)
  {
    var valElm = jQuery("#valSD_"+id);

    value = value.toString().replace(/,/g, ".");

    value = parseFloat(value);
    if (isNaN(value))
    {
      value = min;
    }

    if ((unit == "°C") && (value != min) && (value != max)) {
      value = roundValue05(value);
    }

		if (unit == "%") {min = min * 100; max = max * 100;}
		
		if (value < min) {value = min;}
		if (value > max) {value = max;}

    valElm.val(addTrailingZero(value));

		var url = "/esp/side.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetValue";';
    pb += 'string id = "'+id+'";';
    pb += 'string value = "'+value+'";';
    if( typeof( unit ) != "undefined" )
    {
      pb += 'string unit = "'+unit+'";';
    }
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        conInfo( t.responseText );
        if(iseSingleDestination.reload) { ReloadSingleDestination(id); }
        iseSingleDestination.reload = true;
      }
    };
    new Ajax.Request(url,opts);    
  },
  SetValueType: function(id,value)
  {
		var url = "/esp/side.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetValueType";';
    pb += 'string id = "'+id+'";';
    pb += 'string value = "'+value+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        if(iseSingleDestination.reload) reloadPage();
      }
    };
    new Ajax.Request(url,opts);    
  },
  SetValueAndType: function(id,value,type)
  {
    var url = "/esp/side.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetValueAndType";';
    pb += 'string id = "'+id+'";';
    pb += 'string value = "'+value+'";';
    pb += 'string type = "'+type+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        PopupClose();
        //if(iseSingleDestination.reload) reloadPage();
      }
    };
    new Ajax.Request(url,opts);    
  },
  SetValueAndTypeMinMax: function(id,value,type, min, max)
  {
   	 
		if ((value < min) || (isNaN(value))) {value = min;}
		if (value > max) {value = max;}
    
		var url = "/esp/side.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetValueAndType";';
    pb += 'string id = "'+id+'";';
    pb += 'string value = "'+value+'";';
    pb += 'string type = "'+type+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        PopupClose();
        //if(iseSingleDestination.reload) reloadPage();
      }
    };
    new Ajax.Request(url,opts);    
  },
  SetDP: function(id,value)
  {
    var url = "/esp/side.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetDP";';
    pb += 'string id = "'+id+'";';
    pb += 'string value = "'+value+'";';
    var opts = 
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        ReloadSingleDestination(id);
      }
    };
    new Ajax.Request(url,opts);
  },
  SetValueAndDP: function(id,value,dp, elem)
  {
    var url = "/esp/side.htm?sid="+SessionId;
    var pb = '';
    var arValue = elem.value.split("|");

    if (arValue[1]) {
      var arParamName = arValue[1].split("."),
        paramName = arParamName[arParamName.length - 1];
      if (paramName == "PARTY_MODE_SUBMIT") {
        value = getDefaultPartyModeString();
      }
    }
    pb += 'string action = "SetValueAndDP";';
    pb += 'string id = "'+id+'";';
    pb += 'string value = "'+value+'";';
    pb += 'string dp = "'+dp+'";';
    var opts = 
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        ReloadSingleDestination(id);
      }
    };
    new Ajax.Request(url,opts);
  },
  SetValueParam: function(id,value)
  {
    var url = "/esp/side.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetValueParam";';
    pb += 'string id = "'+id+'";';
    pb += 'string value = "'+value+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        ReloadSingleDestination(id);
      }
    };
    new Ajax.Request(url,opts);    
  },
  SetValueParamType: function(id,value)
  {
    var url = "/esp/side.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetValueParamType";';
    pb += 'string id = "'+id+'";';
    pb += 'string value = "'+value+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        ReloadSingleDestination(id);
      }
    };
    new Ajax.Request(url,opts);    
  },
  SetScript: function(id,script)
  {
    var url = "/esp/side.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "SetScript";';
    pb += 'string id = "'+id+'";';
    pb += 'string value = ^'+script+'^;';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete:function(t)
      {
        if(dbg){alert( t.responseText );}
        ReloadSingleDestination(id);
      }
    };
    new Ajax.Request(url,opts);    
  }
};

iseSingleDestination = new ise.SingleDestination();

// ###################
// ### ISE: USER   ###
// ###################

/**
 * @class
 **/
ise.User = Class.create();

ise.User.prototype =
{
  initialize: function()
  {    
  },
  
  buildSysVarTable: function(uid) {
    var url = "/esp/system.htm?sid="+SessionId;
    var pb = "string action = 'BuildUserSvTable';";
    pb += "integer userId = "+ uid +";";
    var opts = {
      postBody: ReGa.encode(pb),
      onComplete: function(response) {
        if (200 == response.status) {
          translatePage("#userSysVarTbl");
        }
      }
    };
    new Ajax.Updater("userSysVarTbl", url, opts);
  },
  
  addSysVarBuildTable: function(uid, newVarId) {
    //var url = "/esp/system.htm?sid="+SessionId+"&curDateTime="+new Date().getTime();
    var url = "/esp/system.htm?sid="+SessionId;
    var pb = "string action = 'AddSysVarAndBuildTable';";
    pb += "integer userId = "+ uid +";";
    pb += "integer newSvId = " + newVarId + ";";
    var opts = {
      postBody: ReGa.encode(pb),
      onSuccess: function(t) {
        // funktioniert seltsamerweise nur durch den "Updater"-Aufruf nicht
        $("userSysVarTbl").innerHTML = t.responseText;
      },
      onComplete: function(response) {
        if (200 == response.status) {
          translatePage("#userSysVarTbl");
        }
      }
    };
    new Ajax.Updater("userSysVarTbl", url, opts);
  },
  
  DeleteSysVar: function(uid, svId) {
    var url = "/esp/system.htm?sid=" + SessionId;
    var pb = "string action = 'UserDeleteSysVarBuildTable';";
    pb += "integer userId = "+ uid +";";
    pb += "integer svId = " + svId + ";";
    var opts = {
      postBody: ReGa.encode(pb),
      onSuccess: function(t) {
        // funktioniert seltsamerweise nur durch den "Updater"-Aufruf nicht
        $("userSysVarTbl").innerHTML = t.responseText;
      },
      onComplete: function(response) {
        if (200 == response.status) {
          translatePage("#userSysVarTbl");
        }
      }
    };
    new Ajax.Updater("userSysVarTbl", url, opts);
  },
  
  buildTmpSysVarTable: function(arSysVars) {
    var url = "/esp/system.htm?sid="+SessionId;
    var pb = "string action = 'BuildUserSvTable';";
    pb += "integer userId = 0;";
    
    var s = "";
    for(var i = 0; i < arSysVars.length; i++) {
      s += arSysVars[i] + "\t";
    }
    s = s.substr(0, s.length - 1);
    pb += "string sTmpVars = '"+s+"';";
    var opts = {
      postBody: ReGa.encode(pb),
      onSuccess: function(t) {
        // funktioniert seltsamerweise nur durch den "Updater"-Aufruf nicht
        $("userSysVarTbl").innerHTML = t.responseText;
      },
      onComplete: function(response) {
        if (200 == response.status) {
          translatePage("#userSysVarTbl");
        }
      }
    };
    new Ajax.Updater("userSysVarTbl", url, opts);
  },
  
  setAutoLogin: function(alPC, alPDA) {
    var url = "/esp/system.htm?sid="+SessionId;
    var pb = "string action = 'setAutoLogin';";
    pb += "integer alPC = " + alPC + ";";
    pb += "integer alPDA = " + alPDA + ";";
    
    var opts = {
      postBody: ReGa.encode(pb), 
      onComplete:function()
      {
        PopupClose();
        reloadPage();
      }
    };
    new Ajax.Request(url, opts);
  }
};

iseUser = new ise.User();
/**
 * ise/iseRefresher.js
 **/

/**
 * @fileOverview ?
 * @author ise
 **/

/**
 * @class
 **/ 
iseRefresher = Class.create();

iseRefresher.prototype =
{
  initialize: function(iPollingInterval)
  {
    this.updating = false;
    this.ajax = null;
    this.pe = new PeriodicalExecuter(this.refresh, iPollingInterval); 
  },
  refresh: function()
  {
    if( rfr )
    {
      if( !this.updating )
      {
        this.updating = true;
        var t = this;
        SwitchOnFlashLight();
        var url = "/esp/system.htm?sid="+SessionId+"&action=UpdateUI";
        var pb = '';
        pb += 'string channels = "'+iseUpdateIDArray.join("\t")+'";';
        pb += 'string timestamps = "'+iseUpdateTMArray.join("\t")+'";';
        var opts =
        {
          method: 'post',
          postBody: ReGa.encode(pb),
          evalScripts:true,
          onComplete: function()
          {
            delete t.ajax;
            t.ajax = null;
            iseRefrTimer = 0;
            t.updating = false;
          }
        };
        if(dbg)alert(pb);
        this.ajax = new Ajax.Updater("dummy", url, opts);
      }
    }
  }
};/**
 * ise/iseMessageBox.js
 **/

/**
 * @fileOverview ?
 * @author ise
 **/

/**
 * @class
 **/
iseMessageBox = Class.create();

iseMessageBox.prototype =
{
  /* id:        Steuert welches Popup dargestellt wird
   * type:      "Extra-parameter" für einige Popups
   * secondary: Popup wird über einem anderen Popup eingeblendet
   * showAll:   All Kanäle auch virtuelle sollen angezeigt werden
   * popUpTitle:Titel der auf dem popUp angezeigt werden soll
   */
  initialize: function(id, type, secondary)
  {
    iseRefr(false);
    this.id = id;
    this.setTopMargin(6);
    this.setLeftMargin(6);
    this.type = type;
    this.operations = iufVisible|iufReadyState|iufOperated|iufReadable|iufWriteable|iufEventable;
    this.bMultiChooser = true;
    this.title = "";
    this.pb = "";
    this.file = "";

    if(secondary)
    {
      this.secondary = true;
      this.oldMsgHtml = $("messagebox").innerHTML;
      this.oldMsgWidth = $("messagebox").getWidth();
      //$("messagebox").style.width = this.width + "px"; 
    }
    else
    {
      this.secondary = false;
      if (PLATFORM == 'Central') {
        this.createMessagebox();
      }
    }
    
    this.initPopup(id);
    
    this.load();
  },
  initPopup: function(id)
  {
    switch(this.id)
    {
      case ID_ROOMS:
        this.setTitle( translateKey("dialogEditRoom") /*"Raum bearbeiten"*/ );
        this.setWidth75Perc();
        this.setHeight(700);
        this.setFile( "/pages/msg/popupPropEditor.htm" );
        break;
      case ID_FUNCTIONS: 
        this.setTitle( translateKey("dialogEditFunction") /*"Gewerk bearbeiten"*/ );
        this.setWidth75Perc();
        this.setHeight(700);
        this.setFile( "/pages/msg/popupPropEditor.htm" );
        break;
      case ID_TRANSFER_PARAMETERS:
        
        if (PLATFORM == 'Central') {
          this.setTitle( translateKey("dialogChooseTransmitMode") /*"Auswahl &Uuml;bertragungsmodus"*/ );
          this.addToPostBody( 'integer chnId = '+this.type+';' );
          this.setWidth(1000);
          this.setFile( "/pages/msg/popupTransEditor.htm" );
        } else {
          
        //ConfigTool
          ResetPostString();
          poststr += "&title=" + translateKey("dialogChooseTransmitMode") /*"Auswahl &Uuml;bertragungsmodus"*/;
          poststr += "&channel=" + this.type;
          //SendRequest('/popupTransEditor.cgi');
        }
        
        break;
      case ID_CHANNEL_LIST:
        this.setTitle( translateKey("dialogChannelOverView") /*"Kanal&uuml;bersicht"*/ );
        //this.stretchToMax();
        this.setHeight(700);
        this.setFile( "/pages/msg/channelList.htm" );
        break;
      case ID_NEW_SYSVAR:
        this.setTitle( translateKey("dialogCreateNewSysVar") /*"Systemvariable neu anlegen"*/ );
        this.addToPostBody( 'integer varid = 0;' );
        this.addToPostBody( 'integer createNew = 1;' );
        this.setWidth(900);
        this.setFile( "/pages/tabs/admin/msg/newSysVar.htm" );
        break;
      case ID_EDIT_SYSVAR:
        this.setTitle( translateKey("dialogEditSysVar") /*"Systemvariable bearbeiten"*/ );
        this.addToPostBody( 'integer varid = '+this.type+';' );
        this.addToPostBody( 'integer createNew = 0;' );
        this.setWidth(900);
        this.setFile( "/pages/tabs/admin/msg/newSysVar.htm" );
        break;
      case ID_CREATE_SCRIPT:
        this.setTitle( translateKey("dialogCreateScript") /*"Skript erstellen"*/ );
        this.addToPostBody( 'string iSDID = "'+this.type+'";' );
        this.setWidth(800);
        this.setFile( "/pages/msg/createScript.htm" );
        break;
      case ID_EDIT_SCRIPT:
        this.setTitle( translateKey("dialogEditScript") /*"Skript bearbeiten"*/ );
        this.addToPostBody( 'string sdid = "'+this.type+'";' );
        this.setWidth(800);
        this.setFile( "/pages/msg/editScript.htm" );
        break;
      case ID_CONTROL_TEST:
        this.setWidth(800);
        this.setFile( "/pages/msg/controls.htm" );
        break;
      case ID_INSERT_VALUE:
        this.setTitle( translateKey("dialogEnterValue") /*"Wert eingeben"*/ );
        this.addToPostBody( 'string type = "'+this.type+'";' );
        this.setWidth(800);
        this.setFile( "/pages/msg/insertValue.htm" );
        break;
      case ID_INSERT_STRING:
        this.setTitle( translateKey("dialogEnterText") /*"Text eingeben" */);
        this.addToPostBody( 'integer type = '+this.type+';' );
        this.setWidth(800);
        this.setFile( "/pages/msg/insertValue.htm" );
        break;
      case ID_SET_VALUE_RANGE:
        this.setTitle( translateKey("dialogRangeOfValues") /*"Einstellung des Wertebereiches"*/ );
        this.addToPostBody( 'integer type = '+this.type+';' );
        this.setWidth(500);
        this.setFile( "/pages/msg/setValueRange.htm" );
        break;
      case ID_DEL_SYS_VARIABLE:
        this.setTitle( translateKey("dialogDeleteSysVar") /*"Systemvariable l&ouml;schen" */);
        this.setWidth(800);
        this.setFile( "/pages/msg/delSysVariable.htm" );
        break;
      case ID_SYS_VARS_SELECTION:
        this.setTitle( translateKey("dialogProgChoseSysVar") );
        this.addToPostBody( 'integer iShowAll = ' + this.type + ';' );
        this.addToPostBody( 'integer iSecondary = '+(this.secondary?"1":"0")+';' );
        this.setWidth(1000);
        this.setFile( "/pages/msg/sysVarsSelection.htm" );
        break;
      case ID_PROGRAM_CHOOSER:
        this.setTitle( translateKey("dialogCreateFavChooseProg") /*"Favoritenerstellung - Programmauswahl" */);
        this.addToPostBody( 'integer iSecondary = '+(this.secondary?"1":"0")+';' );
        this.setWidth(1000);
        this.setFile( "/pages/msg/programChooser.htm" );
        break;
      case ID_TIMEMODULE:
        this.setTitle( translateKey("dialogSetTimeModul") /*"Einstellung des Zeitmoduls"*/ );
        this.addToPostBody( 'integer tmId = '+this.type+';' );
        this.setWidth(700);
        this.setFile( "/pages/tabs/admin/msg/timemodule.htm" );
        break;
      case ID_STATUSINFO:
        this.setTitle( translateKey("dialogStateInfoDataTransferToDeviceSuccess") /*"Statusinfo: Daten&uuml;bertragung zum Ger&auml;t erfolgreich abgeschlossen!" */);
        this.setWidth(800);
        this.setFile( "/pages/msg/statusinfo.htm" );
        break;
      case ID_STATUSINFO_WARNING:
        this.setTitle( translateKey("dialogWarningDataTransferToDeviceNotPossible") /*"Warnung: &Uuml;bertragung der Daten zum Ger&auml;t nicht m&ouml;glich!" */);
        this.setWidth(800);
        this.setFile( "/pages/msg/statusinfoWarning.htm" );
        break;
      case ID_USER_ACCOUNT_CONFIG_ADMIN:
        this.setTitle(translateKey("dialogUserAccountTitle")/*"Benutzerkonto - Konfiguration"*/);
        this.addToPostBody( 'integer userid = '+this.type+';' );
        this.setWidth(800);
        this.setFile( "/pages/msg/userAccountConfigAdmin.htm" );
        break;   
      case ID_USER_ACCOUNT_CONFIG_USER:
        this.setTitle(translateKey("dialogUserAccountTitle")/*"Benutzerkonto - Konfiguration" */);
        this.setWidth(1000);
        this.setFile( "/pages/msg/userAccountConfigUser.htm" );
        break;
      case ID_AUTO_LOGIN_CONFIG:
        this.setTitle( translateKey("dialogConfigAutomaticLogin") /*"Automatische Anmeldung - Konfiguration" */);
        this.setWidth(800);
        this.setFile( "/pages/msg/autoLoginConfig.htm" );
        break;
       case ID_CHOOSE_LED:
        this.setTitle( translateKey("dialogEnterValue") /*"Wert eingeben" */);
        this.addToPostBody( 'string type = "'+this.type+'";' );
        this.setWidth(800);
        this.setFile( "/pages/msg/chooseOULED16.htm" );
        break;       
        case ID_SET_OUCFM_MODE:
        this.setTitle( translateKey("dialogEnterValue") /*"Wert eingeben" */);
        this.addToPostBody( 'string type = "'+this.type+'";' );
        this.setWidth(400);
        this.setFile( "/pages/msg/setOUCFMMode.htm" );
        break;
        case ID_SET_STATUS_DISPLAY:
        this.setTitle( translateKey("dialogEnterValue") /*"Wert eingeben" */);
        this.addToPostBody( 'string type = "'+this.type+'";' );
        this.setWidth(400);
        this.setFile( "/pages/msg/setStatusDisplay.htm" );
        break;
      //ConfigTool
      case ID_BIDCOS_INTERFACE:
        ResetPostString();
        poststr += "&title=" + translateKey("dialogChooseBidCosInterface") /*"Auswahl BidCoS-Interface"*/;
        poststr += "&channel=" + this.type;
        //SendRequest('/popupInterfaceEditor.cgi');
        break;
      
      default:
        throw new Error("unknown id (" + this.id + ")");
        break;
    }
  },
  buildPostBody: function()
  {
    this.pb += 'integer id='+this.id+';';
    this.pb += 'string title="'+this.title+'";';
    this.pb += 'string sOperations = "'+this.operations+'";';
    if( this.bMultiChooser )
    {
      this.pb += 'string MultiChooser = "'+this.type+'";';
    }
  },
  load: function()
  {
    this.buildPostBody();
    //alert("PB:"+this.pb);
    //alert("FN:"+this.file);
    this.LoadFromFile(this.file, this.pb);
  },
  setWidth: function(width)
  {
    this.width = width;
  },
  stretchToMax: function() {
    var maxHeight = 0;
    if (window.innerHeight) {
      maxHeight = window.innerHeight;
    }
    else {
      if (window.document.documentElement && window.document.documentElement.clientHeight) 
        maxHeight = window.document.documentElement.clientHeight;
      else
        maxHeight = window.document.body.offsetHeight;
      
      this.setHeight(maxHeight - 50);  
    }
    var maxWidth = screen.availWidth;
    this.setWidth(maxWidth - 50);
  },
  setWidth75Perc: function(perc)
  {
    var maxHeight = 0;
    if (window.innerHeight)
    {
      maxHeight = window.innerHeight;
    }
    else
    {
      if (window.document.documentElement && window.document.documentElement.clientHeight) 
        maxHeight = window.document.documentElement.clientHeight;
      else
        maxHeight = window.document.body.offsetHeight;
      
      // this.setHeight(maxHeight * 0.5);  
    }

    var maxWidth = document.body.offsetWidth;
    if(typeof(perc) == 'undefined')
    {
      this.setWidth(maxWidth * 0.75);
    }
    else
    {
      this.setWidth(maxWidth * perc);
    }
  },
  setHeight: function(height)
  {
    this.height = height;
  },
  setLeftMargin: function(left)
  {
    this.LeftMargin = left;
  },
  setTopMargin: function(top)
  {
    this.TopMargin = top;
  },  
  createMessagebox: function()
  {
    if ( !$('messagebox') )
    {      
      var newDiv = document.createElement("div");
      var newDivId = document.createAttribute("id");
      newDivId.nodeValue = "messagebox";
      newDiv.setAttributeNode(newDivId);
      var newDivStyle = document.createAttribute("style");
      
      if ((this.baseId != ID_CHANNEL_LIST))
      {
        newDivStyle.nodeValue = "width:"+this.width+"px;height:"+this.height+"px;padding: 0px;position:absolute;left: 50%;margin-left: -"+(this.width/2)+"px;margin-top: -"+(this.height/2)+"px;";
      }
      else
      {
        newDivStyle.nodeValue = "width:"+this.width+"px;height:"+this.height+"px;padding: 0px;position:absolute;";
      }
      
      if( typeof( newDiv.style.cssText ) == "string" )
        newDiv.style.cssText = newDivStyle.nodeValue;
      else
        newDiv.setAttributeNode(newDivStyle);
      
      $('centerbox').appendChild(newDiv);
    }  
  },
  removeMessagebox: function()
  {
    if ( $('messagebox') )
    {
      $('messagebox').remove();
    }
  },
  readaptSize: function()
  {
    if ( $('messagebox') )
    {
      if ((this.baseId != ID_CHANNEL_LIST))
      {
        var h = $("messagebox").getHeight();
        $('messagebox').style.marginLeft = ($('messagebox').style.width.replace(/px$/,"")/2)*(-1)+"px";
        $('messagebox').style.marginTop = (h/2)*(-1)+"px";
      }
    }
  },
  show: function()
  {
    this.readaptSize();
    $('trlayer').show();
    $('centerbox').show();
  },
  hide: function(o)
  {
    $('centerbox').hide();
    this.remove();
    $('trlayer').hide();
    //this.peKeepAlive.stop();
    iseRefr(true);
  },
  remove: function()
  {
    this.removeMessagebox();
  },
  LoadFromFile: function(fn,pb) {
    var url = fn+'?sid='+SessionId;
    var t = this;
    var opt = 
    {
      method: 'post',
      evalScripts: true,
      postBody: ReGa.encode(pb), 
      onComplete: function(trans)
      {
        //$("messagebox").style.width = t.width + "px";
        jQuery("#messagebox").width(t.width + "px");
        jQuery("#tableContainer").css("max-height",(parseInt(jQuery(window).height() * 0.75)) + "px");
        centerMessageBox();
        iseRefr(true);
        translatePage("#messagebox");
      }
    };
    new Ajax.Updater('messagebox',url,opt);
  },  
  ShowPopup: function() {
    this.show();
  },
  
  restorePrevious: function() {
    $("messagebox").innerHTML = this.oldMsgHtml;
    $("messagebox").setStyle({width: this.oldMsgWidth + "px"});
  },
  
  keepAlive: function() {
    var url = "/esp/system.htm?sid="+SessionId+"&action=keepAlive";
    new Ajax.Updater("divTitle", url, {});
  },
  
  addToPostBody: function(pb)
  {
    this.pb += pb;
  },

  setOperations: function(iOperations)
  {
    this.operations = iOperations;
  },

  setTitle: function(sTitle)
  {
    this.title = sTitle;
  },
  
  setFile: function(sFile)
  {
    this.file = sFile;
  }
};
/**
 * ise/iseSubMenuControl.js
 **/

/**
 * @fileOverview ?
 * @author Michael Niehaus (ise)
 **/


// file: iseSubMenuControl
// author: Michael Niehaus
// date created: 18.04.2007

/**
 * @class
 **/
iseSubMenuControl = Class.create();

iseSubMenuControl.prototype = {
  // topMenuId: Id des TopMenüs bei dessen MouseOver das Submenü eingeblendet werden soll
  // subMenuId: Id des SubMenüs das eingeblendet werden soll
  // offsetDivId [optional]: wird benötigt um Verhalten des IE7 bei Positionierung auszugleichen
  //
  //      Wird eine Seite per Ajax nachgeladen ergibt im IE7 der Aufruf von Position.page() und
  //      Position.cumulativeOffset() (für ein Element bei dem Position auf 'aboslute' oder 'relative'
  //      gesetzt ist) immer die Position vom Ursprung der nachgeladenen Seite wieder,
  //      nicht die Position vom Ursprung des Browser-Fensters.
  //      Wenn ein Div direkt am Anfang der nachgeladenen Seite eingefügt wird (mit Position:'static'), kann mit
  //      Position.cumulativeOffset() etc. dessen Position zum Ursprung des Browser-Fenstern ermittelt
  //      werden, und somit kann man die Position des SubMenüs berechnen. 
  // shiftLeft: zur Darstellungs-Korrektur
  // mouseOpts: Um Custom-MouseOvers etc. hinzuzufügen
  // popup: submenüs sind in einem Popup (Darstellungskorrektur MOZ)
  // bOnClick: Submenüs öffnen bei OnClick, nicht bei MouseOver
  initialize: function(topMenuId, subMenuId, offsetDivId, shiftOpts, mouseOpts, popup, bOnClick,iFuncCount,iScreenHight)
  {
    this.bIE = NAV_IE;
    this.bMoz = NAV_MOZ;
    
    this.top = $(topMenuId);
    this.sub = $(subMenuId);
    this.offsetDiv = null;
    if (offsetDivId !== null) {
      this.offsetDiv = $(offsetDivId);
    }   
    //this.offsetDiv = $("indexOffset");
    this.shiftOpts = shiftOpts;
    this.mouseOpts = mouseOpts;
    this.popup = false;
    if (popup)
      this.popup = popup;
    if (iFuncCount)
      this.iFuncCount = iFuncCount;
    if (iScreenHight) // Get iScreenHight from calling application, if possible , cause both browsers are doing wrong with screen hight.
    {
      this.iScreenHight = iScreenHight;
    }
    else
    {
      this.iScreenHight = document.body.clientHeight;
    }
      
    this.positionSubMenu();
    
    // Top menu Click (DEBUG)
    this.topMenuClick = this.topMenuMouseClick.bindAsEventListener(this);
    Event.observe($(topMenuId), 'click', this.topMenuClick);

    if (bOnClick)
    {
      // Top menu Mouseover
      this.topMenuOver = this.topMenuMouseOver.bindAsEventListener(this);
      Event.observe($(topMenuId), 'click', this.topMenuOver);
    }
    else
    {
      // Top menu Mouseover
      this.topMenuOver = this.topMenuMouseOver.bindAsEventListener(this);
      Event.observe($(topMenuId), 'mouseover', this.topMenuOver);

      // Top menu Mouseout
      this.topMenuOut = this.topMenuMouseOut.bindAsEventListener(this);
      Event.observe($(topMenuId), 'mouseout', this.topMenuOut);
      
      // Sub menu Mouseout
      this.subMenuOut = this.subMenuMouseOut.bindAsEventListener(this);
      Event.observe($(subMenuId), 'mouseout', this.subMenuOut);
    }
    
    // Sub menu Mouseover
    this.subMenuOver = this.subMenuMouseOver.bindAsEventListener(this);
    Event.observe($(subMenuId), 'mouseover', this.subMenuOver);
  },
  
  positionSubMenu: function()
  {
    /*
    if (this.top.id == "TestTd") {
      this.sub.style.top = "20px";
      this.sub.style.left = "20px";
      return;
    }
    */
    
    var newX = 0;
    var newY = 0;
    
    //var topCoords = Position.cumulativeOffset(this.top);
    var topCoords = Position.page(this.top);
    
    var dimTop = this.top.getDimensions();
    var offsetCoords = new Array(2);
   
    if (this.popup) 
    {
      var tp = Position.page(this.top);
      var rp = Position.page($("rowhead"));
      var t = $("rowhead").getHeight() + $("rowflt").getHeight();
      if (this.bMoz)
        t += $("divTitle").getHeight();
      var l = tp[0] - rp[0];
      newX = l;
      newY = t;
      newY -= 4;
      
    }
    else 
    { 
      if ( this.offsetDiv && this.bIE ) 
      {
        offsetCoords = Position.page(this.offsetDiv);
        newY = topCoords[1] - offsetCoords[1] + dimTop.height;
        newX = topCoords[0] - offsetCoords[0];
/*
        // Function is disabled, because another solution is avaiable, but is possibly needed once.
        if (this.iFuncCount)  
        { 
          //alert(newY+170+(this.iFuncCount*16)+' > '+(this.iScreenHight)); // Have a lock for debugging.
          if ( (newY+170+(this.iFuncCount*16)>this.iScreenHight) )
            newY -= (this.iFuncCount*16)+3; // Pull-down-menu pulls up, if screen is to short.
          
        }
*/
        if (this.shiftOpts.l) 
          newX -= this.shiftOpts.l;
        if (this.shiftOpts.r) 
          newX += this.shiftOpts.r;
        if (this.shiftOpts.d) 
          newY += this.shiftOpts.d;
        if (this.shiftOpts.u) 
          newY -= this.shiftOpts.u;
/*          
        if (this.offsetDiv.getHeight() > 0) {
          newY -= this.offsetDiv.getHeight();
        }
*/
      }
      else 
      {
        newY = parseInt(topCoords[1] + dimTop.height);
/*
        // Function is disabled, because another solution is avaiable, but is possibly needed once.
        if (this.iFuncCount) 
        {
          if ( (newY+(this.iFuncCount*16)>this.iScreenHight) )
          {
            newY -= ((this.iFuncCount*16)+1); // Pull-down-menu pulls up, if screen is to short.
          }
        }
*/
        newX = topCoords[0];
        if (this.bMoz) {
          newY -= 1;
        }
      }
    }
    
    this.sub.style.top = newY + "px";
    this.sub.style.left = newX + "px";
  },
  
  topMenuMouseClick: function(mEvent)
  {
    // this.sub.style.left = "0px";
    // this.sub.style.top = "0px";
  },
  
  topMenuMouseOver: function(mEvent)
  {
    this.sub.show();
    this.positionSubMenu();
    if (this.mouseOpts) {
      if (typeof(this.mouseOpts.onTopOver) == 'function')
        this.mouseOpts.onTopOver(this.sub.id);
    }
    
  },
  
  topMenuMouseOut: function(mEvent)
  {
    var xPos = Event.pointerX(mEvent);
    var yPos = Event.pointerY(mEvent);
    if (!Position.within(this.sub, xPos, yPos))
    {
      this.sub.hide();
    }
  },
  
  subMenuMouseOver: function(mEvent)
  {
    var xPos = Event.pointerX(mEvent);
    var yPos = Event.pointerY(mEvent);
  },
  
  subMenuMouseOut: function(mEvent)
  {
    var xPos = Event.pointerX(mEvent);
    var yPos = Event.pointerY(mEvent);
    
    if (this.bIE) { // IE-Probleme für linken Rand beheben
      var subCoords = Position.cumulativeOffset(this.sub);
      if (xPos < (subCoords[0] + 5)) // wenn Maus am linken Rand...
        xPos = xPos - 3;
    }
    if ( (!Position.within(this.top, xPos, yPos)) && (!Position.within(this.sub, xPos, yPos)) ) {
      this.sub.hide();
    }
  },
  
  dbgLog: function(s)
  {
    if ($("dbgLog"))
      $("dbgLog").update(s);
  }
};/**
 * ise/isePropEditorRow.js
 **/

/**
 * @fileOverview ?
 * @author ise
 **/

// isePropEditorRow
// Repräsentiert eine Zeile in den Popup-Fenstern "Eigenschaft bearbeiten"

/**
 * @class
 **/
isePropEditorRow = Class.create();

isePropEditorRow.prototype = {

  // id: Id des Objekts dessen Inhalt in der Zeile dargestellt wird
  //     Bei neu angelegten Zeilen = -1
  // baseId: ID_ROOMS, ID_FUNCTIONS etc
  // objInfo 
  //    .name, .comment
  initialize: function(id, baseId, objInfo) {
    this.id = id;
    this.baseId = parseInt(baseId);
    this.objInfo = {
      comment: "< "+translateKey("lblEmpty")+" >"
    };
    Object.extend(this.objInfo, objInfo || {});
    
    if (id == -1) {
      switch(this.baseId) {
        case ID_ROOMS:
          this.objInfo.name = "< "+translateKey("lblNewRoom")+" >";
          break;
        case ID_FUNCTIONS: 
          this.objInfo.name = "< "+translateKey("lblNewFunction")+" >";
          break;
        default:
          break;
      }
    }
    bNecc = true;
    this.oldVal = "";
    
    // IDs der einzelnen Tabellenzellen
    this.nameCellId    = (id == -1 ? 'newName'    : 'name' + id);
    this.commentCellId = (id == -1 ? 'newComment' : 'comment' + id);
    
    var tr = Builder.node("tr", {className: "popupWhiteCells"});
    
    // Namen erzeugen
    var td1 = Builder.node("td", {id: this.nameCellId}, this.objInfo.name);
    tr.appendChild(td1);
    this.nameListener = this.editName.bindAsEventListener(this);
    Event.observe(td1, 'click', this.nameListener);

    // Kommentar erzeugen
    var td4 = Builder.node("td", {id: this.commentCellId}, this.objInfo.comment);
    tr.appendChild(td4);
    this.commentListener = this.editComment.bindAsEventListener(this);
    Event.observe(td4, 'click', this.commentListener);
    
    $("propTable").appendChild(tr);
    jQuery("#tableContainer").animate({scrollTop: jQuery("#propTable").height()},1000);
  },
    
  /*---------------------------------*/
  /*-----   Name Functions      -----*/
  /*---------------------------------*/  
  editName: function() {
    var inputId = 'nEdit' + this.id;
    var nameElem = $(this.nameCellId);
    this.oldVal = nameElem.innerHTML;
    if (this.oldVal.toLowerCase().indexOf('input') == -1) {
      var s = "<input id='"+inputId+"' type='text' value='"+this.oldVal+"' />";
      nameElem.innerHTML = s;
      
      // Namen im DOM ändern beim Verlassen des Textfeldes
      var changeListener = this.saveNameToDom.bindAsEventListener(this);
      Event.observe($(inputId), 'blur', changeListener);
      var keypressEvent = this.onKeyPress.bindAsEventListener(this);
      Event.observe($(inputId), "keyup", keypressEvent);
      
      $(inputId).focus();
    }
  },
  
  onKeyPress: function(ev) {
    if (ev.keyCode == Event.KEY_RETURN)
      this.saveNameToDom();
  },

  saveNameToDom: function () {
    var newName = $("nEdit" + this.id).value;
    if (newName === "") {
      if (this.oldVal !== "") {
        $(this.nameCellId).innerHTML = this.oldVal;
      }
      else {
        if (this.baseId == ID_ROOMS) {
          $(this.nameCellId).innerHTML = "< neuer Raum >";
        }
        if (this.baseId == ID_FUNCTIONS) {
          $(this.nameCellId).innerHTML = "< neues Gewerk >";
        }
      }
      return;
    } 
    if( !isTextAllowed( newName , 1 ) ) return;
    $(this.nameCellId).innerHTML = newName;
    if(newName != this.objInfo.name) { 
      var opts;
      var t = this;
      var url = "/esp/system.htm?sid="+SessionId;
      var pb = '';
      pb += 'string action = "checkName";';
      pb += 'string checkName = "'+newName+'";';   
      pb += 'integer checkTypeId = '+ this.baseId +';';
       
      if (this.baseId == ID_ROOMS) {
        if (this.id == -1) {
          opts = {
            postBody: ReGa.encode(pb), 
            asynchronous: false,
            onComplete: function(resp) {
              newName = resp.responseText.replace(/[\r\n\t]/g, "");
              iseRooms.CreateRoomRetId(newName, t.baseId);
            }
          };
          new Ajax.Request(url, opts);  
        } 
        else {
          iseSystem.saveName(this.id, newName, this.nameCellId);
        }
      }
      
      
      if (this.baseId == ID_FUNCTIONS) {
        if (this.id == -1) {
          opts = {
            postBody: ReGa.encode(pb), 
            asynchronous: false,
            onComplete: function(resp) {
              newName = resp.responseText.replace(/[\r\n\t]/g, "");
              iseFunctions.CreateFunctionRetId(newName, t.baseId);
            }
          };
          new Ajax.Request(url, opts);  
        } 
        else {
          iseSystem.saveName(this.id, newName, this.nameCellId);
        }
      }
    }
  },
  
  /*---------------------------------*/
  /*-----   Comment Functions   -----*/
  /*---------------------------------*/   
  editComment: function() {
    var inputId = 'cEdit' + this.id;
    var commentElem = $(this.commentCellId);
    var oldVal = commentElem.innerHTML;
    
    if (oldVal.toLowerCase().indexOf('input') == -1) {
      var s = "<input id='"+inputId+"' type='text' value='"+oldVal+"' />";
      commentElem.innerHTML = s;
      
      // Namen im DOM ändern beim Verlassen des Textfeldes
      var changeListener = this.saveCommentToDom.bindAsEventListener(this);
      Event.observe($(inputId), 'blur', changeListener);
      
      $(inputId).focus();
    }
  },
  
  saveCommentToDom: function() {
    var newComment = $("cEdit" + this.id).value;
    $(this.commentCellId).innerHTML = newComment;
    
    if (this.baseId == ID_ROOMS) {
      iseRooms.ChangeRoomComment(this.id, newComment);
    }
    
    if (this.baseId == ID_FUNCTIONS) {
      iseFunctions.ChangeFunctionComment(this.id, newComment);
    }
  }
};


/*
iseCellEditor = Class.create();

iseCellEditor.prototype = {
  initialize: function(ctrlObj, id) {
    this.cell = ctrlObj;
    this.id = id;
    this.oldVal = "";
    var clickListener = this.editName.bindAsEventListener(this);
    Event.observe(this.cell, 'click', clickListener);
  },
  
  editName: function() {
    var inputId = 'nEdit' + this.cell.id;
    this.oldVal = this.cell.innerHTML;
    
    if (this.oldVal.toLowerCase().indexOf('input') == -1) {
      var s = "<input id='"+inputId+"' type='text' value='"+this.oldVal+"' />";
      this.cell.innerHTML = s;
      
      // Namen im DOM ändern beim Verlassen des Textfeldes
      var changeListener = this.saveNameToDom.bindAsEventListener(this);
      Event.observe($(inputId), 'blur', changeListener);
      
      $(inputId).focus();
    }
  },
  
  saveNameToDom: function () {
    var newName = $("nEdit" + this.cell.id).value;
    $(this.cell).innerHTML = newName;
    iseSystem.saveName(this.id, newName);
  },
};
*//**
 * ise/iseEventLog.js
 **/

/**
 * @fileOverview ?
 * @author Michael Niehaus (ise)
 **/

// Author: Michael Niehaus
// Created: 16.04.2007
// 2007-08-03 ASC: added deleteAll method.
// 2007-08-04 ASC: tblId not defined error fixed.

/**
 * @class
 **/
iseEventLog = Class.create();

iseEventLog.prototype = {
  initialize: function(parentElemId, bIsAlarms) {
    this.parentElemId = parentElemId;
    this.tblId = "tbl" + parentElemId;
    this.bIsAlarms = bIsAlarms;
    this.tBodyElem = null;
    this.buildTable();
  },
  
  // Add a message to the table structure
  add: function(s1, s2, s3) {
    var tr = Builder.node("tr");
    var td1 = Builder.node("td", {}, s1);
    var td2 = Builder.node("td", {}, s2);
    var td3= Builder.node("td", {}, s3);
    tr.appendChild(td1);
    if (!this.bIsAlarms) // Kanalname bei Alarmen ausblenden
      tr.appendChild(td2);
    tr.appendChild(td3);
    if (this.bIsAlarms) {
      var tdTmp = Builder.node("td", {}, "");
      tr.appendChild(tdTmp);
    }
    this.tBodyElem.appendChild(tr);
  },
  
  // Delete all rows in the table
  deleteAll: function()
  {
    if( $(this.tblId) )
    {
      while( $(this.tblId).rows.length )
      {
        $(this.tblId).deleteRow(0);
      }
    }
  },
  
  // Build table node
  buildTable: function() {
    var table = Builder.node("table", {id: this.tblId, style: "width:100%;white-space: nowrap;color:Black;"});
    var colgroup = Builder.node("colgroup");
    var col1 = Builder.node("col", {width: "25%"});
    var col2 = Builder.node("col", {width: "50%"});
    var col3= Builder.node("col", {width: "25%"});
    colgroup.appendChild(col1);
    colgroup.appendChild(col2);
    colgroup.appendChild(col3);
    table.appendChild(colgroup);
    var tbody = Builder.node("tbody");
    table.appendChild(tbody);
    
    this.tBodyElem = tbody;
    $(this.parentElemId).appendChild(table);
  }
};/**
 * ise/functions.js
 **/

/**
 * @fileOverview Allgemeine Funktionen
 * @author ise, Änderungen durch Falk Werner (eQ-3)
 **/

/* * * * * * * * * * * * * * * * * * * * * * * * *
 * * * * *      Global Constants         * * * * *
 * * * * * * * * * * * * * * * * * * * * * * * * */

iseDOM_BuildLabel = "R1.00.0381.0100";
dbg = false;
rfr = true;

ID_ROOMS     = 101;  // Rooms collection ID.
ID_FUNCTIONS = 151;  // Functions collection ID.
ID_FAVORITES = 201;  // Favorites collection ID.
ID_LINKS     = 301;  // Links collection ID.
ID_TRANSFER_PARAMETERS = 1001;
ID_CHANNEL_LIST        = 1002;
ID_NEW_SYSVAR          = 1003;
ID_CREATE_SCRIPT       = 1005; 
ID_EDIT_SCRIPT         = 1006;
ID_CONTROL_TEST        = 1007;
ID_INSERT_VALUE        = 1008;
ID_INSERT_STRING       = 1009;
ID_SET_VALUE_RANGE     = 1010;
ID_DEL_SYS_VARIABLE    = 1011;
ID_SYS_VARS_SELECTION  = 1012;
ID_TIMEMODULE          = 1013;
ID_STATUSINFO          = 1014;
ID_STATUSINFO_WARNING  = 1015;
ID_USER_ACCOUNT_CONFIG_ADMIN = 1016;
ID_USER_ACCOUNT_CONFIG_USER  = 1017;
ID_AUTO_LOGIN_CONFIG     = 1018;
ID_PROGRAM_CHOOSER       = 1019;
ID_EDIT_SYSVAR           = 1021;
ID_CHOOSE_LED            = 1022;
ID_SET_OUCFM_MODE        = 1023;
ID_SET_STATUS_DISPLAY    = 1024;
ID_BIDCOS_INTERFACE = 1025;

nUA = navigator.userAgent;
NAV_IE = false;
NAV_MOZ = false;

if (nUA.toLowerCase().indexOf("msie") > -1) {
  NAV_IE = true;
}
if (nUA.toLowerCase().indexOf("gecko") > -1) {
  NAV_MOZ = true;
}
SCREEN_HEIGHT = 0; // wird in index.htm gesetzt
SCREEN_WIDTH  = 0; // wird in index.htm gesetzt

// Sortier-IDs
SORT_NAME = 1;
SORT_TYPE = 2;
SORT_DESC = 3;
SORT_SN = 4;
SORT_IFACE = 5;
SORT_IMODE = 6;
SORT_FUNC = 7;
SORT_ROOM = 8;

// Sysvar Types
SYSVAR_ALARM = 6;
SYSVAR_BOOL = 2;
SYSVAR_ENUM = 29;
SYSVAR_GENERIC = 0;
SYSVAR_STRING = 11;

// Filter-IDs
FIL_NAME     = 1;
FIL_TYPE     = 2;
FIL_DESC     = 3;
FIL_SN       = 4;
FIL_IFACE    = 5;
FIL_IFACE_S  = 6;
FIL_IFACE_R  = 7;
FIL_MODE     = 8;
FIL_MODE_AES = 9;
FIL_MODE_STD = 10;
FIL_FUNCS    = 11;
FIL_ROOMS    = 12;
FIL_UNIT     = 13;
FIL_CHN      = 14;
FIL_TIME     = 15;
FIL_DATE     = 16;
FIL_USERS    = 17;

TM_ONCE = 8; // ttCalOnce
TM_PERIODIC = 4; // ttCalPeriodic
TM_DAILY = 9; // ttCalDaily
TM_WEEKLY = 5; // ttCalWeekly
TM_MONTHLY = 6; // ttCalMonthly
TM_YEARLY = 7; // ttCalYearly
TM_MON = 1;
TM_TUE = 2;
TM_WED = 4;
TM_THU = 8;
TM_FRI = 16;
TM_SAT = 32;
TM_SUN = 64;
TM_WEEKEND = 96;
TM_WORKDAYS = (TM_FRI * 2) - 1;

CALL_STRCUT = 1;
CALL_SPACECUT = 2;

GROUPASSIGNMENT = null;

dlgResult = "";
sPreviousPage = "";
sPreviousPage2 = "";
sPreviousPageArgs = "";
sPreviousPageArgs2 = "";
sActPage = "";
sActPageArgs = "";
sPrevVal = "";
ul = 0;
var wndHelp;
bTxtEditMode = 0;



/*#########################*/
/*# Erweiterte Funktionen #*/
/*#########################*/

setTime = function(time)
{
  if ($("maintime")) { $("maintime").innerHTML = time; }
};

setDate = function(date)
{
  if ($("maindate")) { $("maindate").innerHTML = date; }
};

setAlarmMessageCount = function (count) {

  if ($("msgAlarms")) {
    //$("msgAlarms").innerHTML = "${Alarmmeldungen} (" + count + ")";
    $("msgAlarms").innerHTML = translateKey('alarmMsg') + " (" + count + ")";

  }
  if (count === 0) {
    if ($("imgAlarms")) {
      $("imgAlarms").src = "/ise/img/dot/green.png";
    }
  }
  else {
    if ($("imgAlarms")) {
      $("imgAlarms").src = "/ise/img/dot/red.png";
    }
  }
};

setServiceMessageCount = function (count) {
  if ($("msgServices")) {
    $("msgServices").innerHTML = translateKey('serviceMsg') + " (" + count + ")";

  }
  if (count === 0) {
    if ($("imgServices")) {
      $("imgServices").src = "/ise/img/dot/green.png";
    }
  }
  else {
    if ($("imgServices")) {
      $("imgServices").src = "/ise/img/dot/yellow.png";
    }
  }
};



/**
 * Aktualisiert Systemvariablen
 **/
updateSysVar = function(id, value)
{
  var PREFIX = "SYSVAR_";
  var element = $(PREFIX + id);
  
  if (element) 
  {
    element.innerHTML = "";
    element.appendChild(document.createTextNode(translateString(value)));
  }
};


/*setOldEnergyCounterVal = function(chn, value) {
  arrOldEnergyCounterVal[chn] = value;
};

getOldEnergyCounterVal = function(chn) {

  if (typeof arrOldEnergyCounterVal === "undefined") {
    arrOldEnergyCounterVal = [];
    arrOldEnergyCounterVal[chn] = 0;
  }

  return arrOldEnergyCounterVal[chn];
};*/

setValueOfEnergyCounters = function() {
  jQuery.each(arrEnergyCounter, function(index, counter){
    var id = counter.name.split("_")[1],
    chnVal = homematic("Channel.getValue", {"id": id});

    // Setze EnergyCounter-Variable
    homematic("SysVar.setFloat", {"name" : counter.name, "value" : chnVal});
  });
};

/**
 * Ermittelt die Systemvariablen f. d. Energiemessung
 */
updateSysVarEnergyCounter = function() {
 // conInfo("update SysVar EnergyCounter");

  if (typeof readEnergyCounter === "undefined" || readEnergyCounter == true) {
    var allSysVars = homematic("SysVar.getAll", {});

    arrEnergyCounter = [];

    jQuery.each(allSysVars, function(index, sysvar){
      if (sysvar.name.match(/EnergyCounter/) != null) {
        arrEnergyCounter.push(sysvar);
      }
    });
    readEnergyCounter = false; // wird beim Anlernen eines neuen Gerätes wieder auf true gesetzt
  }
  setValueOfEnergyCounters();
 };

/**
 * Markiert ein Gerät im Posteingang als fertig bzw. nicht fertig
 **/
setDeviceReadyConfig = function(id, isReady)
{
  var readyButton = $("readyBtn" + id);
  
  if (readyButton)
  {
    readyButton._isReady = isReady; 
  }
};

/**
 * Markiert einen Kanal im Posteingang als ferig bzw. nicht fertig
 **/
setChannelReadyConfig = function(id, isReady)
{
  var readyBox = $("inp" + id);

  if (readyBox)
  {
    readyBox.checked  = isReady;
    readyBox._isReady = isReady;
  }
};

/* * * * * * * * * * * * * * * * * * * * * * * * *
 * * * * *   Navigation Functions        * * * * *
 * * * * * * * * * * * * * * * * * * * * * * * * */
 
LoadingHTML = function()
{
  var sRet = '<img style="margin: 30px;" src="/ise/img/loading.gif" />';
  return sRet;
};

doClearTempView = true;
bUpdateContentRunning = false;

updateContent = function(file, argsForUrl, codeToExec, bDontSaveUrl)
{
  if( !bUpdateContentRunning )
  {
    bUpdateContentRunning=true;
    iseRefr(false);
    /* <!-- ELV */
    if( !bDontSaveUrl )
    {
      if( sActPage != file )
      {
        conInfo("updateContent: Saving previous page ["+file+"].");
        sPreviousPage2 = sPreviousPage;
        sPreviousPageArgs2 = sPreviousPageArgs;
        sPreviousPage = sActPage;
        sPreviousPageArgs = sActPageArgs;
      }
    }
    sActPage = file;
    sActPageArgs = argsForUrl;
    /* ELV --> */
    if (dbg) { alert(file); }
    $("content").innerHTML = LoadingHTML();
    //sPreviousPage = sActPage;
    //sActPage = file;
    var pb = '';
    if( doClearTempView )
    {
      pb += 'system.SetSessionVar("sessionCTV", "true");';
    }
    else
    {
      pb += 'system.SetSessionVar("sessionCTV", "false");';
    }
    if(codeToExec)
    {
      pb += codeToExec;
    }
    
    iseInitUpdateArrays();
    
    /* <!-- ELV */
    var opts;
    if (file.substring(0, UI_PATH.length) == UI_PATH)
    {
      //method: 'get' ist für die ELV-CGIs notwendig.
      opts = {evalScripts: true, method: 'get', onComplete:function(){iseRefr(true);bUpdateContentRunning=false;}};
    }
    else
    {
      opts = {postBody: ReGa.encode(pb),evalScripts: true, onComplete:function(){iseRefr(true);bUpdateContentRunning=false;}};
    }
    /* ELV --> */
    
    var url = file + "?sid=" + SessionId;
    if (argsForUrl){ url += argsForUrl; }
    
    //console.info( "updateContent with "+pb );
    
    new Ajax.Updater("content", url, opts);
  }
};

clearUserTempViewIDs2Room = function()
{
  clearUserTempViewIDs2('/pages/tabs/admin/views/rooms.htm');
};

clearUserTempViewIDs2Function = function()
{
  clearUserTempViewIDs2('/pages/tabs/admin/views/functions.htm');
};

clearUserTempViewIDs2 = function(file, args)
{
  // $("content").innerHTML = LoadingHTML();
  sPreviousPage = sActPage;
  sActPage = file;
  var pb = '';
  pb += 'system.SetSessionVar("sessionCTV2", "true");';
  var opts = 
  {
    postBody: ReGa.encode(pb),
    evalScripts: true
  };  
  var url = file + "?sid=" + SessionId;
  if (args){ url += args; }
  // new Ajax.Updater("content", url, opts);
};

reloadSortedPage = function() {
  doClearTempView = false;
  updateContent(sActPage, sActPageArgs, "", true);
};

reloadPage = function() {
  doClearTempView = true;
  updateContent(sActPage, sActPageArgs);
};

loadStartPage = function(fid)
{
  var startPage = "/pages/tabs/startpage.htm";

  //wenn Konfigtool, dann eine andere Startseite anzeigen
  if (PLATFORM != "Central") {startPage = "/configapp/devices.cgi";}

  doClearTempView = true;
  if( typeof(fid) == "undefined" )
  {
    updateContent(startPage);
  }
  else
  {
    updateContent(startPage,"&fid="+fid);
  }
};

loadStartPageGuest = function() {
  doClearTempView = true;
  if( typeof fid == "undefined" )
  {
    updateContent("/pages/tabs/guest/startpageguest.htm");
  }
  else
  {
    updateContent("/pages/tabs/guest/startpageguest.htm","&fid="+fid);
  }
  
};

_loadHandling = function(fid) {
  doClearTempView = true;
  if (typeof fid == "undefined")
    updateContent("/pages/tabs/handling.htm");
  else 
    updateContent("/pages/tabs/handling.htm", "&fid="+fid);
};
  
loadDeviceConfig = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/admin/deviceconfig.htm");
};

loadHelp = function()
{
  wndHelp = null;
  doClearTempView = true;
  updateContent("/config/help.cgi", "&from=internal");
};

loadStatus = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/control.htm");
};

loadAlarmMessages = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/statusviews/alarmMessages.htm");
};

loadServiceMessages = function() {
  var file = "serviceMessages.htm";
  if (PLATFORM != "Central") {file = "serviceMessages.cgi";}
  doClearTempView = true;
  updateContent("/pages/tabs/statusviews/" + file);
};

loadFavorites = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/favorites.htm");
};

loadFavViewer = function(id) {
  doClearTempView = true;
  updateContent("/pages/tabs/favViewer.htm","&id="+id);
};

loadFavOverview = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/user/favOverview.htm");
};

loadNewFav = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/user/newFav.htm");
};

loadLinkProg = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/admin/linkprog.htm");
};

loadSystemConfig = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/admin/systemconfig.htm");
};

loadSystemConfigUser = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/user/systemConfigUser.htm");
};

loadSystemVars = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/admin/systemvars.htm");
};

loadPrograms = function()
{
  doClearTempView = true;
  updateContent("/pages/tabs/admin/views/programs.htm");
};

loadProgramList = function(filter)
{
  doClearTempView = true;
  if( typeof filter == "string" )
  {
    conInfo("loadProgramList: Filter = ["+filter+"]");
    updateContent("/pages/tabs/admin/views/programlist.htm", "", 'system.SetSessionVar("sessionPrgIsFiltered", true);system.SetSessionVar("sessionPrgFilter","'+filter+'");' );
  }
  else
  {
    updateContent("/pages/tabs/admin/views/programlist.htm");
  }
};

loadHandlingRooms = function(roomId)
{
  doClearTempView = true; 
  if (typeof(roomId) == "undefined") { updateContent('/pages/tabs/control/rooms.htm'); }
  else                               { updateContent('/pages/tabs/control/rooms.htm', roomId); }
};

loadHandlingFunctions = function(funcId)
{
  doClearTempView = true; 
  if (typeof(funcId) == "undefined") { updateContent('/pages/tabs/control/functions.htm'); }
  else                               { updateContent('/pages/tabs/control/functions.htm', funcId); }
};

loadHandlingDevices = function()
{
  doClearTempView = true; 
  updateContent('/pages/tabs/control/devices.htm');
};

loadHandlingPrograms = function()
{
  doClearTempView = true; 
  updateContent('/pages/tabs/control/programs.htm');
};


loadSysconfigUserAdmin = function()
{
  doClearTempView = true; 
  updateContent('/pages/tabs/admin/userAdministration.htm');
};

loadSysconfigSysVars = function()
{
  doClearTempView = true; 
  updateContent('/pages/tabs/admin/systemvars.htm');
};

loadStatusviewSysProtocol = function()
{
  doClearTempView = true; 
  updateContent('/pages/tabs/control/systemProtocol.htm');
};


loadStatusviewSysVars = function()
{
  doClearTempView = true; 
  updateContent('/pages/tabs/control/sysvars.htm');
};


loadNewDevices = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/admin/views/newdevices.htm");
};

loadDevicesToChange = function(SNNewDev, TypeNewDev, IDNewDev)
{
  doClearTempView = true;
  updateContent("/config/ic_seldevice.cgi", "&SNNewDev="+SNNewDev+"&TypeNewDev="+TypeNewDev+"&IDNewDev="+IDNewDev);
};

loadRoomList = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/admin/views/rooms.htm");
};

loadFunctionList = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/admin/views/functions.htm");
};

loadSystemControl = function() {
  doClearTempView = true;
  updateContent("/config/control_panel.cgi");
};
  
loadNewLinkPage = function()
{
  updateContent("/config/ic_selchannel.cgi");
};

setPath = function (path) {
  var s = "<span onclick='WebUI.enter(StartPage);'>" +translateKey('startPage')+"</span>";
  if ((path.length > 0) && $("PagePath")) {
    if ($("PagePath"))$("PagePath").innerHTML = s + " &gt; " + path;
  }
  else {
    if ($("PagePath"))$("PagePath").innerHTML = "<span>"+translateKey('startPage')+"</span>";
  }
  translatePage("#PagePath");
};



logout = function() {
  regaMonitor.stop();
  InterfaceMonitor.stop();
  // The second url-param has to be appended by a '?' instead of a '&'
  location.href = "/logout.htm?sid=" + SessionId+"?lang="+getLang();
};


/* * * * * * * * * * * * * * * * * * * * * * * * *
 * * * * *     Misc Functions        * * * * * * *
 * * * * * * * * * * * * * * * * * * * * * * * * */

/* Funktion für Popup */
CreatePopup = function(id, type)
{
  dlgPopup = new iseMessageBox(id, type, false);
  PopupClose = function()
  {
    dlgPopup.hide();
  };
  dlgPopup.ShowPopup();
};

buildPropTable= function(id) {
  var opts = {
    evalScripts: true,
    onComplete: function(trans) {
      window.setTimeout(centerMessageBox, 200);
    }
  };
  var url = "/esp/system.htm?sid=" + SessionId + "&action=buildPropTable&id="+id;
  new Ajax.Updater("propTable", url, opts);
};

TestMe = function(id) {
  iseChannel.Test(id);
};

initCenterBox = function() {
  var centerBoxSel = jQuery("#centerbox");
  centerBoxSel.css({"overflow":"", "top":"50%"});
};

centerMessageBox = function() {
  var  dimCenterBox = $("centerbox").getDimensions();

  initCenterBox();

  if ($("messagebox")) {
    var msgbox = $("messagebox"),
    dimMsgBox = msgbox.getDimensions();
    msgbox.style.marginLeft = -(dimMsgBox.width / 2) + 'px';
    msgbox.style.left = '50%';
    msgbox.style.marginTop = -(dimMsgBox.height / 2) + 'px';

    /*if(dimCenterBox.height == 0) {
      msgbox.style.marginTop = -(dimMsgBox.height / 2) + 'px';
    } else {
      msgbox.style.marginTop = (dimMsgBox.height / 2) + 'px';
    }*/
  }
};

saveDlgResult = function(id) {
  dlgResult = id; 
};

checkTimeVal = function(val) {
  var sSplit = new Array(2);

  if (val.length != 5) { return false; }
  sSplit = val.split(':');
  if (sSplit.length != 2) { return false; }
  if (isNaN(sSplit[0]))   { return false; }
  if (isNaN(sSplit[1]))   { return false; }

  var iTmp = parseInt(sSplit[0],10);
  if ((iTmp < 0) || (iTmp > 23)) { return false; }
  iTmp = parseInt(sSplit[1],10);
  if ( (iTmp < 0) || (iTmp > 59) ) { return false; }
  
  return true;
};

setFooter = function(s)
{
   $("footer").innerHTML = s;
   translatePage("#footer");
};

SetFilter = function(id)
{
  return;
/*  
  if ($(id)) {
    var inplist = $(id).getElementsByTagName('input');
    for (var i = 0; i < inplist.length; i++) {
      var tmpId = inplist[i].id.substr(6);
      if (inplist[i].checked === true) 
        filterOptions.addFilter(tmpId);
      else 
        filterOptions.removeFilter(tmpId);
      // TODO: Channel-Liste neu laden (mit Filtern)
    }
  }
*/
};

 // Prüft anhand der filterOptions ob Checkboxen in Submenüs gesetzt werden sollen
selectFilters = function(divToShow) {
 if ($(divToShow)) {
    var inplist = $(divToShow).getElementsByTagName('input');
    for (var i = 0; i < inplist.length; i++) {
      var tmpId = inplist[i].id.substr(6);
      if (filterOptions.isFilterId(tmpId)) 
        inplist[i].checked = true;
      else 
        inplist[i].checked = false;
    }
  }
};

writeDevProg = function(tdParent, chnObj, bClosePopup) {
  var tblSub = Builder.node('table', {width: '100%'});
  var tbodySub = Builder.node('tbody');
  var trSub = Builder.node('tr');
  var tdSub = Builder.node('td');
  var divSub = Builder.node('div', {className: 'StdButton'}, translateKey('btnDirectLinks'));

  divSub = $(divSub);
  var iTmp = 0;
  if( chnObj['gm'] )
    iTmp = 1;
  divSub.onclick = function() 
  { 
    WebUI.enter(LinkListPage, {
      "iface"  : chnObj['deviface'],
      "channel": chnObj['sn'],
      "keypair": iTmp
    });
    if (bClosePopup) { PopupClose(); }
  };
  tdSub.appendChild(divSub);
  trSub.appendChild(tdSub);
  tbodySub.appendChild(trSub);
  trSub = Builder.node('tr');
  tdSub = Builder.node('td');
  divSub = Builder.node('div', {className: 'StdButton'}, translateKey('btnPrograms'));

  divSub.onclick = function() { loadProgramList(chnObj['enumprgfilter']); if(bClosePopup)PopupClose();  };
  tdSub.appendChild(divSub);
  trSub.appendChild(tdSub);
  tbodySub.appendChild(trSub);
  tblSub.appendChild(tbodySub);
  tdParent.appendChild(tblSub);
};

writeTestField = function(td, ids, tm, exist, running)
{
  var cn = "TestButtonDisabled";
  var sDate = '--:--:--';
  var sStyle = "OkButton";
  if( running )
  {
    sStyle = "OkButtonRunning";
  }
  else
  {
    sDate = tm;
    if( exist ) { cn = "TestButton colorGradient borderRadius2px"; }
  }

  var chid = ids.toString().split("\t").join("T");
  var div = Builder.node('div', {id:'TestButtonCH'+chid,className: cn}, translateKey('btnTest') /*'Test'*/);
  td.appendChild(div);

  if( exist && !running )
  {
    div.onclick = function()
    {
      iseChannels.Test(ids);
      $('TestButtonCH'+chid).className = 'TestButtonDisabled';
      $('OkButtonCH'+chid).className = 'OkButtonRunning';
      $('TestDateCH'+chid).innerHTML = '--:--:--';
    };
  }
  div = Builder.node('div', {id:'OkButtonCH'+chid,className: sStyle}, translateKey('btnOk') /*'OK'*/);
  td.appendChild(div);
  div = Builder.node('div', {id:'TestDateCH'+chid,className: 'TestDate'}, sDate);
  td.appendChild(div);
};

startUpdateTest = function(chid)
{
  setTimeout( "callbackStartUpdateTest("+chid+")", 5000 );
};

callbackStartUpdateTest = function(chid)
{
  var url = "/esp/system.htm?sid=" + SessionId;
  var pb = "string action = 'TestRunning';";
  pb += 'string id = "' + chid + '";';
  var opts = 
  {
    postBody: ReGa.encode(pb),
    onComplete: function(t) 
    {
      $("TestDateCH"+chid).innerHTML = t.responseText;
      if( t.responseText == "--:--:--" )
      {
        $("OkButtonCH"+chid).className = "OkButton";
      }
      else
      {
        $("OkButtonCH"+chid).className = "OkButtonRunning";
      }
    }
  };  
  new Ajax.Request(url, opts);
};

writeReadyField = function(tdParent, obj) {
  var sn = obj['sn'];
  var objId = obj['id'];
  var tbl = Builder.node('table', {width: '100%', cellpadding: '0', id:obj['sn'] });
  var tr = Builder.node('tr');
  var td = Builder.node('td');
  var div = Builder.node('div', {className: 'StdButton CLASS04308 border1px', id: 'readyBtn' +  objId, onclick: "SetReadyConfigAndHideImgs("+ objId+")"}, translateKey('btnReady') /*"Fertig"*/);
  if( ! obj['readyconfig'] )
  {
    div._isReady = false;
  }
  else
  {
    div._isReady = true;
  }
  td.appendChild(div);
  tr.appendChild(td);
  tbl.appendChild(tr);
  tdParent.appendChild(tbl);
};

writeDeviceAction = function(tdParent, includeChecks, bIsDev, bDelBtn, obj, bIsGroup) {
  var id = 0;
  if (obj) { id = obj['id']; }
  var tbl = Builder.node('table', {width: '100%', cellpadding: '0'}, [
   Builder.node('colgroup', [
     Builder.node('col', {width: '40%'}),
     Builder.node('col', {width: '60%'})
   ])
  ]);
  var tbody = Builder.node('tbody');
  var tr = Builder.node('tr');
  var tdLeft = Builder.node('td');
  var tdRight = Builder.node('td');

  // buttons Löschen / Einstellen
  var tblSub = Builder.node('table', {width: '100%'});
  var tbodySub = Builder.node('tbody');
  var trSub = Builder.node('tr');
  var tdSub = Builder.node('td');
  var s;
  //var divSub = Builder.node('div', {className: 'StdButton'}, 'Löschen...');

  if (bIsDev && bDelBtn) {
   s = "PrepareDeleteDeviceForm('"+ obj['iface']+"', '"+obj['sn']+"', '"+obj['name']+"', '"+obj['type']+"')";
   var divSub = Builder.node('div', {className: 'StdButton', 
        onclick: s}, translateKey('btnRemove') /*'Löschen'*/);
   tdSub.appendChild(divSub);
   trSub.appendChild(tdSub);
   tbodySub.appendChild(trSub);
  }
  trSub = Builder.node('tr');
  tdSub = Builder.node('td');
  
  s = "";
  if (bIsDev) { s = "WebUI.enter(DeviceConfigPage, {'iface': '" + obj['iface'] + "', 'address': '" + obj['sn'] + "', 'redirect_url':'GO_BACK'});"; }
  else 
  {
    if (bIsGroup) { s = "WebUI.enter(DeviceConfigPage, {'iface': '" + obj['deviface'] + "' ,'address': '" + obj['sn'] + "', 'redirect_url':'GO_BACK', 'with_group': 1});"; }
    else          { s = "WebUI.enter(DeviceConfigPage, {'iface': '" + obj['deviface'] + "' ,'address': '" + obj['sn'] + "', 'redirect_url':'GO_BACK'});"; }
  }
  divSub = Builder.node('div', {className: 'StdButton', onclick: s}, translateKey('btnConfigure') /*'Einstellen'*/);

  tdSub.appendChild(divSub);
  trSub.appendChild(tdSub);
  tbodySub.appendChild(trSub);

  /* Geraetetausch */
  if (bIsDev && bDelBtn) {
    //divSub = Builder.node('div', {className: 'StdButton', onclick: 'loadDevicesToChange(\''+obj['sn']+'\',\''+obj['type']+'\')'}, translateKey('replaceDeviceBtn'));
    divSub = Builder.node('div', {className: 'StdButton', onclick: 'loadDevicesToChange(\''+obj['sn']+'\',\''+obj['type']+'\',\''+obj['id']+'\')'}, translateKey('replaceDeviceBtn'));
    tdSub.appendChild(divSub);
    trSub.appendChild(tdSub);
    tbodySub.appendChild(trSub);
  }
  /* END Geraetetausch */
  
  tblSub.appendChild(tbodySub);
  tdLeft.appendChild(tblSub);

  // checkboxes
  if (includeChecks)
  {
    tblSub = Builder.node('table', {width: '100%'});
    tbodySub = Builder.node('tbody');
    trSub = Builder.node('tr');
    var h = {type: 'checkbox', id: 'ha' + id};
    var sH = "";

    
    if( bIsDev )
    {
      sH = 'iseDevices.setHandling('+id+',id)';
    }
    else
    {
      sH = 'iseChannels.setHandling('+id+',id)';
    }
    switch( obj['handle'] )
    {
      case "YES":
        h = Object.extend(h, {checked: ''});
        break;
      case "READONLY":
        sH = "";
        h = Object.extend(h, {disabled: ''});
        h = Object.extend(h, {readonly: ''});
        break;
      default: break;
    }
    h = Object.extend(h, {onclick: sH});
    tdSub = Builder.node('td', [Builder.node('input', h), translateKey('lblUsable') /*'bedienbar'*/]);
    Element.setStyle(tdSub, {textAlign:"left"});
    trSub.appendChild(tdSub);
    tbodySub.appendChild(trSub);
    trSub = Builder.node('tr');
    var v = {type: 'checkbox', id: 'vi' + id};
    if( obj['vis'] )
    {
      v = Object.extend(v, {checked: ''});
      conInfo("Object "+obj['id']+":"+obj['name']+" is visble");
    }
    else
    {
      conInfo("Object "+obj['id']+":"+obj['name']+" is NOT visble");
    }
    if( bIsDev )
    {
      v = Object.extend(v, {onclick: 'iseDevices.setVisible('+id+',id)'});
    }
    else
    {
      v = Object.extend(v, {onclick: 'iseChannels.setVisible('+id+',id)'});
    }
    tdSub = Builder.node('td', [Builder.node('input', v), translateKey('lblVisible') /*'sichtbar'*/]);
    Element.setStyle(tdSub, {textAlign:"left"});

    trSub.appendChild(tdSub);
    tbodySub.appendChild(trSub);
    trSub = Builder.node('tr');
    var p = {type: 'checkbox', id: 'pr' + id};
    if (obj['proto'])
     p = Object.extend(p, {checked: ''});
    if (bIsDev)
     p = Object.extend(p, {onclick: 'iseDevices.setProto('+id+',id)'});
    else
     p = Object.extend(p , {onclick: 'iseChannels.setProto('+id+',id)'});
    tdSub = Builder.node('td', [Builder.node('nobr', [Builder.node('input', p), translateKey('lblRecorded') /*'protokolliert'*/])]);
    Element.setStyle(tdSub, {textAlign:"left"});
    trSub.appendChild(tdSub);
    tbodySub.appendChild(trSub);
    tblSub.appendChild(tbodySub);
    tdRight.appendChild(tblSub);
  }

  tr.appendChild(tdLeft);
  tr.appendChild(tdRight);
  tbody.appendChild(tr);
  tbl.appendChild(tbody);
  tdParent.appendChild(tbl);
};

spaceCut = function(s) {
  if (s)
  {
    var arTmp = s.split(' ');
    var z = new Array();
    
    for(var i = 0; i < arTmp.length; i++)
    {
      if (arTmp[i] !== "")
      {
        z[z.length] = document.createTextNode(arTmp[i]);
        z[z.length] = document.createElement('br');
      }
    }
    z.pop();
    return z;
  }
  return "";
};

spaceCutHtmlIf = function(s, iCount) {
  if (s)
  {
    var sRet = "";
    var arTmp = s.split(' ');
    var iTmp = 0;
    
    if (arTmp.length > iCount)
    {
      for (var i = 0; i < arTmp.length; i++)
      {
        sRet += arTmp[i] + " ";
        iTmp++;
        if (iTmp == iCount)
        {
          sRet += "<br />";
          iTmp = 0;
        }
      }
      return sRet;
    }
    else { return s; }
  }
  else { return ""; }
};

semCut = function(s) {
  if (s)
  {
    var arTmp = s.split(';');
    var z = new Array();
    for (var i = 0; i < arTmp.length; i++)
    {
      if (arTmp[i] !== "")
      {
        z[z.length] = document.createTextNode(arTmp[i]);
        z[z.length] = document.createElement('br');
      }
    }
    z.pop();
    return z;
  }
  return "";
};

strCut = function(s, bCountOnly, bPlainText) {
  var CUTS = ".:-";
  var MAX_WITHOUT_CUT = 8;
  var bCutChar = false;
  var iSinceLastCut = 0;
  var ret = "";
  var arSplit = new Array();
  var iLastCutPos = 0;
  var i;
  
  if(s)
  {
    for (i = 0; i < s.length; i++) {
      var c = s.charAt(i);
      
      if (!bCountOnly) {
        for (var x = 0; x < CUTS.length; x++) {
          bCutChar = false;
          if (c == CUTS.charAt(x)) {
            arSplit[arSplit.length] = s.slice(iLastCutPos, i+1);
            iLastCutPos = i+1;
            iSinceLastCut = 0;
            break;
          }
        }
      }
    
      iSinceLastCut++;
      if (iSinceLastCut == MAX_WITHOUT_CUT) {
        arSplit[arSplit.length] = s.slice(iLastCutPos, i);
        iLastCutPos = i;
        iSinceLastCut = 0;
      }
    }
    if (iLastCutPos !== 0) { arSplit[arSplit.length] = s.slice(iLastCutPos, i); }
    else                   { arSplit[arSplit.length] = s; }
    
    if (bPlainText) {
      var _s = "";
      for (i = 0; i < arSplit.length; i++) {
        _s += arSplit[i] + "<br />";
      } 
      return _s;
    }
    else {
      var z = new Array();
      for (i = 0; i < arSplit.length; i++) {
        z[z.length] = document.createTextNode(arSplit[i]);
        z[z.length] = document.createElement('br');
      }
      return z;
    }
  }
};

tabToBr = function(s) {
  if (s) {
    var arTmp = s.split('\t');
    var z = new Array();
    for(var i = 0; i < arTmp.length; i++)
    {
      if (arTmp[i] !== "")
      {
        z[z.length] = document.createTextNode(arTmp[i]);
        z[z.length] = document.createElement('br');
      }
    }
    z.pop();
    return z;
  }
  return "";
};

insertBR = function(s) {
  var z = new Array();
  var arSplit = s.split('\t');
  for (var i = 0; i < arSplit.length; i++)
  {
    if (arSplit[i] !== "") 
    {
      z[z.length] = document.createTextNode(arSplit[i]);
      z[z.length] = document.createElement('br');
    }
  }
  if (z.length > 1)
    z.pop();
  return z;
};

show = function(id) {
  if ($(id))
    $(id).show();
};

hide = function(id) {
  if($(id))
    $(id).hide();
};

setProtoIfExist = function(id, bProto) {
  if ($("pr" + id)) {
    $("pr" + id).checked = bProto;
  }  
};

setHandlingIfExist = function(id, bHand) {
  if ($("ha" + id)) {
    $("ha" + id).checked = bHand;
  }  
};

setVisibleIfExist = function(id, bVisi) {
  if ($("vi" + id)) {
    $("vi" + id).checked = bVisi;
  }  
};

/*
textEdit = function(ctrlId, id, allowEmptyString, callback, callStrFunc) 
{
  bTxtEditMode = true;
  var iSize = 8;
  if (screen.availWidth >= 1024) iSize = 12;
  if (!$(ctrlId+"inp"))  
  {
    sPrevVal = $(ctrlId).innerHTML;
    var isEmptyAllowed = false;
    if ((allowEmptyString !== null) && (allowEmptyString === true))
    {
      isEmptyAllowed = true;
    }
    var sValue = $(ctrlId).innerHTML;
    while (sValue.indexOf("<br>") > -1){
      sValue = sValue.replace("<br>","");
    }
    while (sValue.indexOf("<BR>") > -1){
      sValue = sValue.replace("<BR>","");
    }
    sValue = sValue.replace(/^\s+/,""); // Left trim
    sValue = sValue.replace(/$\s+/,""); // Left trim         
    sValue = sValue.replace(/<br>/gi, "");
      var s = "<input id='"+ctrlId+"inp' value='"+sValue+"' size='"+iSize+"' maxlength='100' onblur='saveEdit(id, "+id+","+isEmptyAllowed+"," + callback +"," + callStrFunc+")' onkeypress='checkkey(id, "+id+","+isEmptyAllowed+"," + callback + "," + callStrFunc + ", event)'/>";
    //var s = "<input id='"+ctrlId+"inp' value='"+sValue+"' size='"+iSize+"' maxlength='100' onblur=\"saveEdit(id, '"+id+"',"+isEmptyAllowed+"," + callback +"," + callStrFunc+")\" onkeypress=\"checkkey(id, '"+id+"',"+isEmptyAllowed+"," + callback + "," + callStrFunc + ", event)\"/>";
    s = s+"<input type=hidden id='"+ctrlId+"old' value='"+sValue+"'>";
    // var s = "<input id='"+ctrlId+"inp' value='"+sValue+"' size='"+iSize+"' onkeypress='checkkey(id, "+id+","+isEmptyAllowed+"," + callback +", event)'/>";
    $(ctrlId).innerHTML = s;
    $(ctrlId+'inp').focus();
    $(ctrlId+'inp').select();
  }
};
*/

textEdit = function(ctrlId, id, allowEmptyString, callback, callStrFunc) 
{
  bTxtEditMode = true;
  var iSize = 8;
  if (screen.availWidth >= 1024) iSize = 12;
  if (!$(ctrlId+"inp"))  
  {
    sPrevVal = $(ctrlId).innerHTML;
    var isEmptyAllowed = false;
    if ((allowEmptyString !== null) && (allowEmptyString === true))
    {
      isEmptyAllowed = true;
    }
    var sValue = $(ctrlId).innerHTML;
    while (sValue.indexOf("<br>") > -1){
      sValue = sValue.replace("<br>","");
    }
    while (sValue.indexOf("<BR>") > -1){
      sValue = sValue.replace("<BR>","");
    }
    sValue = sValue.replace(/^\s+/,""); // Left trim
    sValue = sValue.replace(/$\s+/,""); // Left trim         
    sValue = sValue.replace(/<br>/gi, "");
   // var s = "<input id='"+ctrlId+"inp' value='"+sValue+"' size='"+iSize+"' maxlength='50' onblur='saveEdit(id, "+id+","+isEmptyAllowed+"," + callback +"," + callStrFunc+")' onkeypress='checkkey(id, "+id+","+isEmptyAllowed+"," + callback + "," + callStrFunc + ", event)'/>";
    if (PLATFORM == "Central") {
      var s = "<input id='"+ctrlId+"inp' value='"+sValue+"' size='"+iSize+"' maxlength='100' onblur='saveEdit(id, "+id+","+isEmptyAllowed+"," + callback +"," + callStrFunc+")' onkeypress='checkkey(id, "+id+","+isEmptyAllowed+"," + callback + "," + callStrFunc + ", event)'/>";
      s = s+"<input type=hidden id='"+ctrlId+"old' value='"+sValue+"'>";
    } else {
      var s = "<input id='"+ctrlId+"inp' value='"+sValue+"' size='"+iSize+"' maxlength='100' onblur=\"saveEdit(id, '"+id+"',"+isEmptyAllowed+"," + callback +"," + callStrFunc+")\" onkeypress=\"checkkey(id, '"+id+"',"+isEmptyAllowed+"," + callback + "," + callStrFunc + ", event)\"/>";
      s = s+"<input type=hidden id='"+ctrlId+"old' value='"+sValue+"'>";
    }
    $(ctrlId).innerHTML = s;
    $(ctrlId+'inp').focus();
    $(ctrlId+'inp').select();
  }
};

checkkey = function(ctrlId, id, allowEmptyString, callback, callStrFunc, e) {
  var keycode = 0;
  if (window.event) keycode = window.event.keyCode;
  else if(e) keycode = e.which;
  if (keycode == 13)
    saveEdit(ctrlId, id, allowEmptyString, callback, callStrFunc);
};

checkKeyInfo = function(ctrlId, id, allowEmptyString, e) {
  var keycode = 0;
  if (window.event) keycode = window.event.keyCode;
  else if(e) keycode = e.which;
  if (keycode == 13)
    saveEditInfo(ctrlId, id, allowEmptyString);
};

textEditInfo = function(ctrlId, id, allowEmptyString) 
{
  bTxtEditMode = true;
  var iSize = 8;
  if (screen.availWidth >= 1024) iSize = 12;
  if (!$(ctrlId+"inp"))  
  {
    var isEmptyAllowed = false;
    if ((allowEmptyString !== null) && (allowEmptyString === true))
    {
      isEmptyAllowed = true;
    }
    sPrevValInfo = $(ctrlId).innerHTML;
    var sValue = $(ctrlId).innerHTML;
    sValue = sValue.replace(/^\s+/,""); // Left trim    
    sValue = sValue.replace(/$\s+/,""); // Left trim     
    sValue = sValue.replace(/<br>/gi,"");
    sValue = sValue.replace(/&nbsp;/gi,"");
    var s = "<input id='"+ctrlId+"inp' value='"+sValue+"' size='"+iSize+"' onblur='saveEditInfo(id, "+id+","+isEmptyAllowed+")' onkeypress='checkKeyInfo(id, "+id+","+isEmptyAllowed+", event)' />";
    $(ctrlId).innerHTML = s;
    $(ctrlId+'inp').focus();
    $(ctrlId+'inp').select();
  }
};

isPasswordAllowed = function(text,minLen,suppressAlert)
{
  var re = new RegExp( '^[a-zA-Z0-9.=!$():;#*ßüäö-]{'+minLen+',}$', 'i' );
  var bRet = re.test( text );
  var bShowAlert = (typeof(suppressAlert)=="undefined");
  //if( !bRet && ( bShowAlert ) ) alert( "Bitte verwenden Sie nur die erlaubten Sonderzeichen [., !, $, (, ), :, ;, #, ß, ä, ö, ü, -]." );
  if( !bRet && ( bShowAlert ) ) alert( translateKey("alertUseOnlySpecialChars") );
  return bRet;
};

/**
 * Prüft, ob ein Text verbotene Sonderzeichen verwendet.
 * Zu diesen Zeichen gehören: <, >, ', ", &, $, [, ], {, } und \
 * --> Es ist alles erlaubt, was nicht verboten ist
 **/
isTextAllowed = function(text, minLen, suppressAlert)
{
  var forbidden   = /[<>'"&$\[\]\{\}\\]/;
  var isForbidden = forbidden.test( text );
  
  if ((isForbidden) && (typeof(suppressAlert) == "undefined"))
  {
    //alert("Bezeichnungen dürfen keines der folgenden Zeichen enthalten: <, >, ', \", &, $, [, ], {, } und \\");
    alert(translateKey("alertCharsNotAllowed"));
  }
  
  return !(isForbidden);
};

/*
isTextAllowed = function(text,minLen,suppressAlert)
{
  var re = new RegExp( '^[a-zA-Z0-9 .=!$&():;#*ßüäö?-]{'+minLen+',}$', 'i' );
  var bRet = re.test( text );
  var bShowAlert = (typeof(suppressAlert)=="undefined");
  if( !bRet && ( bShowAlert ) ) alert( "Bitte verwenden Sie nur die erlaubten Sonderzeichen!" );
  conInfo( "isTextAllowed[minLen="+minLen+"]="+bRet+":["+text+"]" );
  return bRet;
};
*/

if (PLATFORM == "Central")
{  
  saveEdit = function(ctrlId, id, allowEmptyString, callback, callStrFunc)
  {
    // verhindern dass das OnBlur-Event ausgelöst wird wenn mit ENTER bestätigt wurde
    if (!bTxtEditMode) return;
    bTxtEditMode = false;
    var divId = ctrlId.substr(0, ctrlId.length - 3);
    var newVal = $(ctrlId).value;
    var oldV = "";
    if($(divId+"old")){
      oldV = $(divId+"old").value;
      oldV = oldV.replace(/\n/,""); //  trim        
      if (NAV_IE) {
        oldV = oldV.replace(/^\s+|$\s+/,""); // trim
      } else {
        oldV = oldV.replace(/^\s+|\s+$/,""); // trim      
      }
    }
    var minLen = 1;
    if ((allowEmptyString !== null) && (allowEmptyString === true))
    {
      minLen = 0;
    }
    if ( isTextAllowed(newVal,minLen) )
    {
      if( id !== 0 )
      {
        if (typeof callback == "function")
        {
          callback(id, newVal);
        }
        iseSystem.saveName(id, newVal, divId, callStrFunc);
        $(divId).innerHTML = newVal;
      }
      else
      {
        if (newVal != oldV){
          iseSystem.checkName( newVal, divId );        
        } else {
          $(divId).innerHTML = sPrevVal;
        }
      }
    }
    else
    {
      $(divId).innerHTML = sPrevVal;
    }
  };
  
  saveEditInfo = function(ctrlId, id, allowEmptyString) 
  {
    // verhindern dass das OnBlur-Event ausgelöst wird wenn mit ENTER bestätigt wurde
    if (!bTxtEditMode) return;
    bTxtEditMode = false;
    var divId = ctrlId.substr(0, ctrlId.length - 3);
    var newVal = $(ctrlId).value;
    var minLen = 1;
    if ((allowEmptyString !== null) && (allowEmptyString === true))
    {
      minLen = 0;
    }
    if ( isTextAllowed(newVal,minLen) )
    {
      $(divId).innerHTML = newVal;
      if( id !== 0 ) { iseSystem.saveDesc(id, newVal); }
    }
    else 
    {
      $(divId).innerHTML = sPrevValInfo;
    }
  };
} 
else 
{
  //Funktionen für das Konfigtool
  saveEdit = function(ctrlId, id, allowEmptyString, callback, callStrFunc)
  {
    // verhindern dass das OnBlur-Event ausgelöst wird wenn mit ENTER bestätigt wurde
    if (!bTxtEditMode) return;
    bTxtEditMode = false;
    var divId = ctrlId.substr(0, ctrlId.length - 3);
    var newVal = $(ctrlId).value;
    var oldV = "";
    if($(divId+"old")){
      oldV = $(divId+"old").value;
      oldV = oldV.replace(/\n/,""); //  trim        
      if (NAV_IE) {
        oldV = oldV.replace(/^\s+|$\s+/,""); // trim
      } else {
        oldV = oldV.replace(/^\s+|\s+$/,""); // trim      
      }
    }
    var minLen = 1;
    if(allowEmptyString != null && allowEmptyString == true)
    {
      minLen = 0;
    }
    if ( isTextAllowed(newVal,minLen) )
    {
      if( id != 0 )
      {
        if (typeof callback == "function")
        {
          callback(id, newVal);
        }else{
          configMetadata.save(id, newVal, divId, callStrFunc);
        }
        $(divId).innerHTML = newVal;
      }
      else
      {
        if (newVal != oldV){
          //iseSystem.checkName( newVal, divId );        
        } else {
          $(divId).innerHTML = sPrevVal;
        }
      }
    }
    else
    {
      $(divId).innerHTML = sPrevVal;
    }
  };
  saveEditInfo = function(ctrlId, id, allowEmptyString) 
  {
    // verhindern dass das OnBlur-Event ausgelöst wird wenn mit ENTER bestätigt wurde
    if (!bTxtEditMode) return;
    bTxtEditMode = false;
    var divId = ctrlId.substr(0, ctrlId.length - 3);
    var newVal = $(ctrlId).value;
    var minLen = 1;
    if(allowEmptyString != null && allowEmptyString == true)
    {
      minLen = 0;
    }
    if ( isTextAllowed(newVal,minLen) )
    {
      $(divId).innerHTML = newVal;
      if( id != 0 ) iseSystem.saveDesc(id, newVal);
    }
    else 
    {
      $(divId).innerHTML = sPrevValInfo;
    }
  };
};


/* * * * * * *  Overlay  * * * * * * * * * * * * * * * * * * * */
showRoomOverlay = function(tdId, chnId) {
  iLastChnId = chnId;

  /*
  var tdPos = Position.page($(tdId));
  if (NAV_IE) {
    tdPos[1] -= $("header").getHeight() + $("menubar").getHeight();
  }
  */
  translatePage("#roomOverlay");
  var elmPos = getElemCenterPos("#roomOverlay");
  $("roomOverlay").style.top = elmPos.top; //tdPos[1]+"px";
  $("roomOverlay").style.left = elmPos.left; //tdPos[0]+"px";
  iseChannels.showOverlay(chnId, ID_ROOMS);
};

showFuncOverlay = function(tdId, chnId) {
  iLastChnId = chnId;

  /*
  var tdPos = Position.page($(tdId));
  if (NAV_IE) {
    tdPos[1] -= $("header").getHeight() + $("menubar").getHeight();
  }
  */
  translatePage("#funcOverlay");
  var elmPos = getElemCenterPos("#funcOverlay");
  $("funcOverlay").style.top = elmPos.top; //tdPos[1]+"px";
  $("funcOverlay").style.left = elmPos.left; //tdPos[0]+"px";
  iseChannels.showOverlay(chnId, ID_FUNCTIONS);
};

addRoom = function(ctrlId, roomId) {
  iseChannels.chnToRoom(iLastChnId, roomId, $(ctrlId).checked);
};

addFunc = function(ctrlId, funcId) {
  iseChannels.chnToFunc(iLastChnId, funcId, $(ctrlId).checked);
};

convertDomDate = function(s)
{
  var tmp = s;
  var arTmp = tmp.split(' ');
  arTmp = arTmp[0].split('-');
  return arTmp[2]+'.'+arTmp[1]+'.'+arTmp[0];
};

convertDomTime = function(s) {
  if (s.length === 0) { return ""; }
  var tmp = s;
  var arTmp = tmp.split(' ');
  arTmp = arTmp[1].split(':');
  return arTmp[0]+':'+arTmp[1];
};

ExecuteProgram = function(dpid)
{
  var url = "/esp/exec.htm?sid=" + SessionId;
  var pb = "";
  pb += "object o = dom.GetObject( "+dpid+" );";
  pb += "if( o )";
  pb += "{";
  pb += "  o.ProgramExecute();";
  pb += "}";
  var opts = {postBody: ReGa.encode(pb)};
  if(dbg)alert(pb);
  new Ajax.Request(url, opts);
};

setDpState = function(dpid, iState, boolVal)
{
  var url = "/esp/system.htm?sid="+SessionId;
  var pb = "string action = 'setDpState';";
  pb += "integer dpid = "+dpid+";";
  if (boolVal)
  {
    pb += "boolean iState = "+(iState == 1? true : false)+";";
  }
  else
  {
    pb += "integer iState = '"+iState+"';";
  }
  var opts =
  {
    postBody: ReGa.encode(pb)
  };
  if(dbg)alert(pb);
  new Ajax.Request(url, opts);
};

removeDuplicates = function(s1, s2, splitChar, bPlainText) {
  var arTmp = new Array();
  var iAr;
  var bFound;
  var sSC = ' ';
  if (splitChar) { sSC = splitChar; }
  var ar1 = s1.split(sSC);
  var ar2 = s2.split(sSC);
  
  for (var i1 = 0; i1 < ar1.length; i1++) {
    bFound = false;
    for (iAr = 0; iAr < arTmp.length; iAr++) {
      if (ar1[i1] == arTmp[iAr]) {
        bFound = true;
        break;
      }
    }
    if (!bFound) {
      arTmp[arTmp.length] = ar1[i1];
    }
  }
  for (var i2 = 0; i2 < ar2.length; i2++) {
    bFound = false;
    for (iAr = 0; iAr < arTmp.length; iAr++) {
      if (ar2[i2] == arTmp[iAr]) {
        bFound = true;
        break;
      }
    }
    if (!bFound) {
      arTmp[arTmp.length] = ar2[i2];
    }
  }
  
  var i;
  if (bPlainText)
  {
    var sRet = "";
    for(i = 0; i < arTmp.length; i++) {
      if (arTmp[i] !== "") {
        sRet += arTmp[i] + "<br>";
      }
    }
    sRet = sRet.substr(0, sRet.length - 4);
    return sRet;
  }
  else {
    var z = new Array();
    for(i = 0; i < arTmp.length; i++) {
      if (arTmp[i] !== "") {
        z[z.length] = document.createTextNode(arTmp[i]);
        z[z.length] = document.createElement('br');
      }
    }
    z.pop();
    return z;
  }
};

lastSort = "";
lastDir = 0;

lastSort2 = "";
lastDir2 = 0;

iseSetLastSort = function(sort)
{
  lastSort = sort;
};

iseClearLastSort = function()
{
  lastSort = "";
  iseResetDirection();
  iseClearLastSort2();
};

iseClearLastSort2 = function()
{
  lastSort2 = "";
  iseResetDirection2();
};

iseChangeDirection = function()
{
  if( lastDir == 1 )
  {
    lastDir = 0;
  }
  else
  {
    lastDir = 1;
  }
};

iseChangeDirection2 = function()
{
  if( lastDir2 == 1 )
  {
    lastDir2 = 0;
  }
  else
  {
    lastDir2 = 1;
  }
};

iseResetDirection = function()
{
  lastDir = 0;
};

iseResetDirection2 = function()
{
  lastDir2 = 0;
};

iseArraySwap = function(arr,entryA,entryB)
{
  var tmp = arr[entryA];
  arr[entryA] = arr[entryB];
  arr[entryB] = tmp;
  return arr;
};

iseSortMultiArray = function(arr,dsc,dir,sln, sessionVar,popup)
{
  conInfo("Sort multi array.");
  do
  {
    var n = arr.length - 1;
    var bSwapped = false;
    for(var i=0;i<n;i++)
    {
      if( typeof arr[i][dsc] == "undefined" )
      {
        arr[i][dsc] = "";
      }
      if( typeof arr[i+1][dsc] == "undefined" )
      {
        arr[i+1][dsc] = "";
      }      
      var item = arr[i][dsc].toLowerCase();
      item = item.replace("ö", "o");
      item = item.replace("ä", "a");
      item = item.replace("ü", "u");
      item = item.replace("ß", "ss");
      var nextitem = arr[i+1][dsc].toLowerCase();
      nextitem = nextitem.replace("ö", "o");
      nextitem = nextitem.replace("ä", "a");
      nextitem = nextitem.replace("ü", "u");
      nextitem = nextitem.replace("ß", "ss");
      if( dir === 0 )
      {
        if( item > nextitem )
        {
          iseArraySwap(arr,i,i+1);
          bSwapped = true;
        }
      }
      else
      {
        if( item < nextitem )
        {
          iseArraySwap(arr,i,i+1);
          bSwapped = true;
        }
      }
    }
  } while( bSwapped );
    
  if (!popup) iseTransferSortedArray(arr,dsc,sln, sessionVar);
  
};

iseTransferSortedArray = function(arr,dsc,sortListNumber, sessionVar)
{
  conInfo("Transferring sorted array.");
  var url = "/esp/system.htm?sid="+SessionId;
  var pb = "";
  pb += 'string action = "AddToTempView'+sortListNumber+'";';
  
  var s = "sessionLS";
  if (typeof(sessionVar) != 'undefined') s = sessionVar;
  pb += 'system.SetSessionVar("'+s+'", "'+dsc+'");';
  pb += 'string ids = "';
  for(var i=0;i<arr.length;i++)
  {
    pb += arr[i]["id"];
    if( i != (arr.length-1) )
    {
      pb += "\t";
    }
  }
  pb += '";';
  if(dbg)alert(pb);
  var opts = 
  {
    postBody: ReGa.encode(pb),
    onComplete: function(t)
    {
      if(dbg){alert(t.responseText);}
      if(rsp){conInfo("RELOAD SORTED PAGE");reloadSortedPage();}
      if(gac){conInfo("GET ALL CHANNELS"); if (typeof GetAllChannels() == "function") {GetAllChannels();}}
      isSorting = false;
    }
  };
  new Ajax.Request(url,opts); 

};

iseRemoveSpecialCharacters = function(s, bBrToSpace)
{
  var newVal;
  
  // replace all whitespaces (\f, \n, \t, \v) 
  if( bBrToSpace ) { newVal = s.replace(/\s/g, " "); }
  else             { newVal = s.replace(/\s/g, ""); }
  return newVal;
};

iseStripAll = function(s)
{
  var retVal = s;
  retVal = retVal.replace(/\r/g, "");
  retVal = retVal.replace(/\n/g, "");
  retVal = retVal.replace(/\t/g, "");
  return retVal;
};

rsp = true;
gac = false;
isSorting = false;

IseSort = function(array, colName, reload, popup)
{
  conInfo("Start IseSort");
  if (!isSorting)
  {
    isSorting = true;
    Cursor.set(Cursor.WAIT);
    gac = false;
    rsp = reload;
    conInfo( "IseSort: SET RSP = "+rsp );
    if( lastSort == colName ) { iseChangeDirection(); } else { iseResetDirection(); }
    if (popup) 
    {
      iseSortMultiArray(array,colName,lastDir,1,this.popup);
    }
    else
    {
      iseSortMultiArray(array,colName,lastDir,1);
    }
    lastSort = colName;
  }
};

IseSort2 = function(array, colName, reload, gacCall,utvNo, sessionVar)
{
  conInfo("Start IseSort2");
  if (!isSorting)
  { 
    isSorting = true;
    Cursor.set(Cursor.WAIT);
    if(typeof utvNo == "undefined")
    {
      utvNo = 2;
    }
    gac = gacCall;
    rsp = reload;
    conInfo( "IseSort2: SET RSP = "+rsp );
    if( lastSort2 == colName ) { iseChangeDirection2(); } else { iseResetDirection2(); }
    iseSortMultiArray(array,colName,lastDir2,utvNo, sessionVar);
    lastSort2 = colName;
  }
};

iseUpdateIDArray = new Array();
iseUpdateTMArray = new Array();

iseInitUpdateArrays = function()
{
  iseUpdateIDArray = new Array();
  iseUpdateTMArray = new Array();
};

updateChannelControl = function( chnId, lastTimestamp )
{
  conInfo("updateChannelControl");
  if(dbg)alert("new update dp "+chnId);
  //if(rfr)setTimeout( "callbackUpdateChannelControl(" + chnId + ",'" + lastTimestamp + "')", 10000 );
  var iPos = iseUpdateIDArray.indexOf(chnId);
  if( iPos > -1 )
  {
    iseUpdateTMArray[iPos] = lastTimestamp;
  }
  else
  {
    iseUpdateIDArray.push( chnId );
    iseUpdateTMArray.push( lastTimestamp );
  }

  translatePage("#tblfav");

};

callbackUpdateChannelControl = function( chnId, lastTimestamp )
{
  conInfo("callbackUpdateChannelControl");
  var url = "/esp/system.htm?sid=" + SessionId;
  var pb = "string action = 'getLastTimeOfChn';";
  pb += 'string chnId = "' + chnId + '";';
  var opts = 
  {
    postBody: Rega.encode(pb),
    onComplete: function(t) 
    {
      var sResp = t.responseText;
      // CR or LF may be appended which must be ignored
      if( sResp.length > lastTimestamp.length )
      {
        sResp = sResp.substr( 0, lastTimestamp.length );
      }
      if( sResp != lastTimestamp )
      {
        reloadPage();
      }
      else
      {
        updateChannelControl( chnId, lastTimestamp );
      }
    }
  };  
  
  new Ajax.Request(url, opts);
};

changeTransMode = function(chnId, ctrlId) {
  dlgPopup = new iseMessageBox(ID_TRANSFER_PARAMETERS, chnId);
  PopupClose = function(selIdx)
  {
    dlgPopup.hide();
    if (selIdx === 0) {
      $(ctrlId).innerHTML = translateKey("lblStandard");
    }
    else {
      $(ctrlId).innerHTML = translateKey("lblSecured");
    }
  };
  if (PLATFORM != 'Central') {
    SendRequest('/popupTransEditor.cgi');
  }
  dlgPopup.ShowPopup();
};

recreateControl = function(chnId,sTimeStamp)
{
  var url;
  var pb;
  var opts;
  
  //alert("recreating control "+chnId+" at "+sTimeStamp);
  conInfo("recreateControl");
  if( $("tmc"+chnId) )
  {
    if( typeof sTimeStamp == "undefined" )
    {
      url = "/esp/system.htm?sid="+SessionId;
      pb = "string action = 'getLastTimeOfChn';";
      pb += "integer cId = "+chnId+";";
      opts =
      {
        postBody: ReGa.encode(pb),
        onSuccess: function(t) {
          translatePage("#dpc"+chnId);
        }
      };
      new Ajax.Updater("tmc"+chnId, url, opts);
    }
    else
    {
      $("tmc"+chnId).innerHTML = sTimeStamp;
    }
  }
  
  if( $("dpc" + chnId) )
  {
    var iStatusOnly = 0;
    if (sActPage.indexOf("statusviews") > -1) 
    {
      iStatusOnly = 1;    
    }
    url = "/esp/datapointconfigurator.htm?sid="+SessionId;
    pb = "string action = 'dcCreate';";
    pb += "integer cId = "+chnId+";";
    pb += "integer iStatusOnly = " + iStatusOnly + ";";
    opts =
    {
      postBody: ReGa.encode(pb),
      evalScripts: true,
      onComplete: function(t)
      {
        //alert(t.responseText);
        translatePage("#dpc"+chnId);
      }
    };
    //alert(pb);
    new Ajax.Updater("dpc"+chnId, url, opts);
  }
};

LogoClick = function()
{
  //alert( iseUpdateIDArray.join("_") );
  //alert( iseUpdateTMArray.join("_") );
  //loadLinkList();
};

updateGroupCell = function(prefix, chnId1, chnId2, content) {
  var sCellId = prefix + chnId1 + chnId2;
  if ($(sCellId)) 
    $(sCellId).innerHTML = content;
  else {
    sCellId = prefix + chnId2 + chnId1;
    if ($(sCellId))
      $(sCellId).innerHTML = content;
  }
};

pause = function(ms)
{
  var currentTime = new Date();
  var exitTime = currentTime.getTime() + ms;
  while( true )
  {
    currentTime = new Date();
    if( currentTime.getTime() > exitTime ) return;
  }
};

iseFlasher = null;

StartFlashing = function()
{
  iseFlasher = new PeriodicalExecuter(
    function(pe)
    {
      if( $("headerLogo") )
      {
        if( $("headerLogo").src.indexOf("_red") >= 0 )
        {
          $("headerLogo").src = "/ise/img/homematic_logo_small.png";
        }
        else
        {
          $("headerLogo").src = "/ise/img/homematic_logo_small_red.png";
        }
      }
    },
    1);
};

StopFlashing = function()
{
  iseFlasher.stop();
  iseFlasher = null;
};

SwitchOnFlashLight = function()
{
  if ($("headerLogo")) { $("headerLogo").src = "/ise/img/homematic_logo_small_red.png"; }
};

SwitchOffFlashLight = function()
{
  if ($("headerLogo")) { $("headerLogo").src = "/ise/img/homematic_logo_small.png"; }
};

getAjaxLoadElem = function() {
  return jQuery("#ajaxload");
};

getWaitAnimElem = function() {
  return jQuery("#waitAnim");
};

isWaitAnimActive = function() {
  var waitAnimElem = getWaitAnimElem();
  var result = false;
  if (!waitAnimElem.hasClass("hidden")) {
    result = true;
  }
  return result;
};

// Only visible when the waitAnimElem is hidden
// See ShowWaitAnim ...
ShowAjaxLoad = function()
{
  var ajaxLoadElem = getAjaxLoadElem();
  if (ajaxLoadElem && !isWaitAnimActive())
    ajaxLoadElem.show().removeClass('hidden');
};

HideAjaxLoad = function()
{
  var ajaxLoadElem = getAjaxLoadElem();
  if (ajaxLoadElem)
    ajaxLoadElem.hide().addClass('hidden');
};

ShowWaitAnim = function() {
  var waitAnimElem = getWaitAnimElem(),
  ajaxLoadElem = getAjaxLoadElem();
  ajaxLoadElem.hide().addClass('hidden');
  waitAnimElem.show().removeClass('hidden');
};

HideWaitAnim = function() {
  var waitAnimElem = getWaitAnimElem();
  waitAnimElem.hide().addClass('hidden');

};

HideWaitAnimAutomatically = function(seconds) {
  window.setTimeout("HideWaitAnim()", seconds * 1000);

};

buildObj = function(id, trId, ctrlId, name, rooms, funcs, roomIDs, funcIDs) {
  var tmp = new Object();
  tmp['id'] = id;
  tmp['trid'] = trId;
  tmp['ctrlId'] = ctrlId;
  tmp['name'] = name;
  tmp['room'] = rooms;
  tmp['func'] = funcs;
  tmp['fltOpts'] = new Object();
  tmp['fltOpts']['rooms'] = roomIDs;
  tmp['fltOpts']['funcs'] = funcIDs;
  return tmp;
};

RemoveAllRowsFromTable = function(table)
{
  if( $(table) )
  {
    while($(table).rows.length )
    {
      $(table).deleteRow(0);
    }
  }
};

array_merge = function(one,two)
{
  one.push(two);
  return one.flatten();
};

DeleteObject = function(id)
{
  var url = "/esp/system.htm?sid="+SessionId;
  var pb = "";
  pb += 'string action = "DeleteObject";';
  pb += 'string id = "'+id+'";';
  var opts = 
  {
    postBody: ReGa.encode(pb),
    onSuccess: function(t) 
    {
      if( t.responseText == "false" )
      {
        //if(dbg){alert("Objekt konnte nicht gelöscht werden.");}
        if(dbg){alert(translateKey("alertErrorDeleteObject"));}
      }
      reloadPage();
    }
  };
  new Ajax.Request(url, opts);
};

DeleteObject2 = function(id)
{
  var url = "/esp/system.htm?sid="+SessionId;
  var pb = "";
  pb += 'string action = "DeleteObject";';
  pb += 'string id = "'+id+'";';
  var opts = { 
    postBody: ReGa.encode(pb), 
    onSuccess: function(t) 
    { 
      if( t.responseText == "false" )
      {
        //if(dbg){alert("Objekt konnte nicht gelöscht werden.");}
        if(dbg){alert(translateKey("alertErrorDeleteObject"));}
      }
      dlgPopup.load(); 
    }
  };
  new Ajax.Request(url, opts);
};

iseRefr = function(state)
{
  //rfr = state;
};

conInfo = function(msg)
{
  if( (typeof console != "undefined") && (urlDebug =="true") )
  {
    console.info(msg);
  }
};

conError = function(msg)
{
  if( typeof console != "undefined" )
  {
    console.error(msg);
  }
};

ResetGAC = function()
{
  conInfo("ResetGAC called.");
  GetAllChannels = function()
  {
    conInfo("GetAllChannels: NOP");
  };
};

addLeadingZero = function( iValue )
{
  var sRet = ""+iValue;
  if( iValue < 10 )
  {
    sRet = "0"+iValue;
  }
  return sRet;
};

addTrailingZero = function(val) {
  var sVal = val.toString(),
  decPlace = sVal.split(".")[1];
  if (!decPlace) {
    return sVal + ".00";
  }
  if (decPlace.length == 1) {
    return sVal + "0";
  }
  return sVal;
};

roundValue05 = function(val) {
  var intVal = Math.floor(val);
  if (val - intVal > 0.5) {
    return Math.ceil(val);
  }

  if (val - intVal == 0) {
    return val;
  }

  return intVal + 0.5;
};

round = function(x, n)
{ 
  // x = Fließkommazahl, n = gewünschte Nachkommastellen
  if (!n) n = 2; //wenn n fehlt wird n = 2
  if (n < 1 || n > 14) return false;
  var e = Math.pow(10, n);
  var k = (Math.round(x * e) / e).toString();
  if (k.indexOf('.') == -1) k += '.';
  k += e.toString().substring(1);
  return k.substring(0, k.indexOf('.') + n+1);
};

/**
 * Entfernt einen Kanal aus einem Raum.
 **/
removeChannelFromRoom = function(roomId, channelId)
{
  decChnCount(roomId);
  iseChannels.delChnFromID(channelId, roomId, true);
  clearUserTempViewIDs2Room();
  
  var room = RoomList.get(roomId);
  if (room)
  {
    room.removeChannel(channelId);
  }
};

/**
 * Entfernt einen Kanal aus allen Räumen.
 **/
removeChannelFromAllRooms = function(roomId, channelId)
{
  decChnCount(roomId);
  iseChannels.delChnFromAllRooms(channelId, true);
  clearUserTempViewIDs2Room();
  
  RoomList.list().each(function (room) {
    room.removeChannel(channelId);
  });
};

removeChannelFromSubsection = function(subsectionId, channelId)
{
  decChnCount(subsectionId);
  iseChannels.delChnFromID(channelId, subsectionId, true);
  clearUserTempViewIDs2Function();
  
  var subsection = SubsectionList.get(subsectionId);
  if (subsection)
  {
    subsection.removeChannel(channelId);
  }
};

removeChannelFromAllSubsections = function(subsectionId, channelId)
{
  decChnCount(subsectionId);
  iseChannels.delChnFromAllFunctions(channelId, true);
  clearUserTempViewIDs2Function();
  
  SubsectionList.list().each(function (subsection) {
    subsection.removeChannel(channelId);
  });
};

removeRoomOrSubsection = function(id)
{
  var room = RoomList.get(id);
  if (room) { RoomList.remove(room); }
  
  var subsection = SubsectionList.get(id);
  if (subsection) { SubsectionList.remove(subsection); }
  
};

changeRoomOrSubsection = function(id)
{
  var room = RoomList.get(id);
  if (room) { RoomList.beginUpdate(id); }
  
  var subsection = SubsectionList.get(id);
  if (subsection) { SubsectionList.beginUpdate(id); }
};

encodeStringStatusDisplay = function(elmID, is4Dis)
{
	//Wird zur Zeit nur für die Textzeilen des HM-PB-4Dis-WM und des HM-Dis-WM55 genutzt,
	//da dort einige Zeichen im Speicher an anderer Stelle liegen.
  var jElm = jQuery("#"+elmID),
  inString = jElm.val(),
  outString = "",
  szKey = "0x5f";

  conInfo("encodeStringStatusDisplay - inString: " + inString);

  // Beim HM-PB-4Dis-WM wird die Tilde zum Darstellen des ß benutzt.
  // Hier ist kein ReGa im Spiel.
  // Beim HM-Dis-WM55 ist ReGA im Spiel. Leider wandelt Ise-Script
  // die Tilde in ein " um, so daß der generierte String zerstört wird.
  // Daher hier die Prüfung ....
  szKey = (is4Dis == true) ? "~" : szKey;
  if (is4Dis == true) {
    outString = inString.replace(/Ä/g, "[");
    outString = outString.replace(/Ö/g, "#");
    outString = outString.replace(/Ü/g, "$");
    outString = outString.replace(/ä/g, "{");
    outString = outString.replace(/ö/g, "|");
    outString = outString.replace(/ü/g, "}");
    outString = outString.replace(/ß/g, szKey);
    outString = outString.replace(/&/g, "]");
    outString = outString.replace(/=/g, "'");
    jQuery("#"+elmID.replace(/^_/, "")).val(outString);
    return;
  } else {
    outString = inString.replace(/0xc4/g, "0x5b"); //Ä
    outString = outString.replace(/0xd6/g, "0x23"); // Ö
    outString = outString.replace(/0xdc/g, "0x24"); // Ü
    outString = outString.replace(/0xe4/g, "0x7b"); // ä
    outString = outString.replace(/0xf6/g, "0x7c"); // ö
    outString = outString.replace(/0xfc/g, "0x7d"); // ü
    outString = outString.replace(/0xdf/g, szKey); // ß
    outString = outString.replace(/0x26/g, "0x5d"); // &
    outString = outString.replace(/0x3d/g, "0x27"); // =
  }
  jElm.val(outString);
};

decodeStringStatusDisplay = function(sString) {
  var outString = sString.replace(/\[/g,"Ä");
  outString = outString.replace(/#/g,"Ö");
  outString = outString.replace(/\$/g,"Ü");
  outString = outString.replace(/{/g,"ä");
  outString = outString.replace(/\|/g,"ö");
  outString = outString.replace(/}/g,"ü");
  outString = outString.replace(/\_/g,"ß");
  outString = outString.replace(/\]/g,"&");
  outString = outString.replace(/\'/g,"=");
  return outString;
};

// For testing only
showRFInterfaces = function()
{
  var elemInfoPanel = jQuery("#infoPanel");
  if (elemInfoPanel.hasClass('hidden')) {
    jQuery("#btnInterfaces").bind("click", function() {showAllRFInterfaces();});
    elemInfoPanel.removeClass("hidden");
  }
};

showAllRFInterfaces = function() {
  var sOutput = "";

  homematic("Interface.listBidcosInterfaces", {"interface": "BidCos-RF"}, function(gatewayStatus) {
    if (gatewayStatus)
    {
      for (var loop = 0; loop < gatewayStatus.length; loop++) {
        sOutput += "BidCos-RF address: " + gatewayStatus[loop].address;
        sOutput += "<br/>BidCos-RF description: " + gatewayStatus[loop].description;
        sOutput += "<br/>BidCos-RF dutyCycle: " + gatewayStatus[loop].dutyCycle;
        sOutput += "<br/>BidCos-RF isConnected: " + gatewayStatus[loop].isConnected;
        sOutput += "<br/>BidCos-RF isDefault: " + gatewayStatus[loop].isDefault;
        sOutput += "<br/><br/><br/>";
      }
      MessageBox.show(translateKey("dialogAllRFInterfacesTitle"), sOutput, null, 300,100);
    }
  });
  return sOutput;
};

// When this grows more we need another solution
getExtendedDescription = function(type, ch) {
  var result = "";
  ch = parseInt(ch);

  // We have a whole bunch of different names for the same device (e. g. HM-ES-PMSw1-Pl-DN-R1,....-R2, -R3 and so on)
  type = (type.indexOf("HM-ES-PMSw1-") > - 1) ? "HM-ES-PMSw1-Pl" : type;

  switch (type) {
    case "HM-CC-RT-DN":
    case "HM-TC-IT-WM-W-EU":
      switch (ch) {
        case 1 :
          result = translateKey("lblLinkPartnerTempSensor");
          break;
        case 2 :
          result = (type == "HM-TC-IT-WM-W-EU") ? translateKey("lblLinkPartnerHeatingThermostat") : translateKey("lblLinkPartnerWallMountedThermostat");
          break;
        case 3 :
          result = translateKey("lblLinkPartnerShutterContact");
          break;
        case 4 :
          result = translateKey("lblLinkPartnerHeatingThermostatSender");
          break;
        case 5 :
          result = translateKey("lblLinkPartnerHeatingThermostatReceiver");
          break;
        case 6 :
          result = translateKey("lblLinkPartnerKey");
          break;
        case 7 :
          result = translateKey("lblLinkPartnerSwitchActor");
          break;
        default: result = "";
      }
      break;

    case "HM-ES-PMSw1-Pl":
      switch (ch) {
        case 1 :
          result = translateKey("lblSwitchActor");
          break;
        case 2 :
          result = translateKey("lblMeasurementChannel");
          break;
        case 3 :
          result = translateKey("lblPower");
          break;
        case 4 :
          result = translateKey("lblCurrent");
          break;
        case 5 :
          result = translateKey("lblVoltage");
          break;
        case 6 :
          result = translateKey("lblFrequency");
          break;
        default: result = "";
      }
      break;

      // Schueco TipTronic
      case "263_149_/_263_150":
        switch (ch) {
          case 1 :
            result = translateKey("lblTipTronicChn1");
            break;
          case 2 :
            result = translateKey("lblTipTronicChn2");
            break;
          case 3 :
            result = translateKey("lblTipTronicChn3");
            break;
          default: result = "";
        }
        break;

    // RGBW-Controller
    case "HM-LC-RGBW-WM":
      switch (ch) {
        case 1 :
          result = translateKey("lblRGBWControllerDimmer");
          break;
        case 2 :
          result = translateKey("lblRGBWControllerColor");
          break;
        case 3 :
          result = translateKey("lblRGBWControllerAutomatic");
          break;
        default: result = "";
      }
      break;
  }
  return result;
};

getElemCenterPos = function(jElemStr) {
  var elmWindow = jQuery(window),
  elm = jQuery(jElemStr),
  viewPortHeight = elmWindow.height(),
  viewPortWidth = elmWindow.width(),
  elmHeight = elm.height(),
  elmWidth = elm.width(),
  result = {
    "top" : ((viewPortHeight / 2) - (elmHeight / 2)) + "px",
    "left" : ((viewPortWidth / 2) - (elmWidth / 2)) + "px"
  };
  return result;
};

getVerticalCenterPos = function(jElemStr) {
  var viewPortHeight = jQuery(window).height(),
  elemHeight = jQuery(jElemStr).height();
  return ((viewPortHeight / 2) - (elemHeight / 2)) + "px";
};

getHorizontalCenterPos = function(jElemStr) {
  var viewPortWidth = jQuery(window).width(),
  elemWidth = jQuery(jElemStr).width();
  return ((viewPortWidth / 2) - (elemWidth / 2)) + "px";
};

getDefaultPartyModeString = function() {
  var curDate = new Date(),
  partyTemp = "21",
  strPartyMode = "";

  strPartyMode += partyTemp + ",";
  strPartyMode += (parseInt(curDate.getHours()) + 1) * 60 + ",";
  strPartyMode += curDate.getDate() + ",";
  strPartyMode += curDate.getMonth() + 1 + ",";
  strPartyMode += curDate.getFullYear() - 2000 + ",";

  strPartyMode += (parseInt(curDate.getHours()) + 3) * 60 + ",";
  strPartyMode += curDate.getDate() + ",";
  strPartyMode += curDate.getMonth() + 1 + ",";
  strPartyMode += curDate.getFullYear() - 2000;

  return strPartyMode;
};/**
 * ise/debug_funcs.js
 **/

/**
 * @fileOverview Debug-Funktionen
 * @author ise
 **/
 
debugAddMsg = function() {
  if(typeof(eventLogSystem) == "undefined") {
    $("dbgLog").innerHTML = "eventLogSystem -> undefined";
  } 
  else {
    $("dbgLog").innerHTML = "calling eventLogSystem.add()";
    eventLogSystem.add("10.07.2007 12:15", "Wetterstation", "LowBat");
  }
};

createDebugAlarmMsgs = function() {
  
  var table = Builder.node("table", {id:"tblDebugAlarms", style: "width:100%;color:Black;"});
  var colgroup = Builder.node("colgroup");
  var col1 = Builder.node("col", {width: "25%"});
  var col2 = Builder.node("col", {width: "50%"});
  var col3= Builder.node("col", {width: "25%"});
  colgroup.appendChild(col1);
  colgroup.appendChild(col2);
  colgroup.appendChild(col3);
  table.appendChild(colgroup);
  // Zeile 1 erstellen
  var tbody = Builder.node("tbody");
  var tr = Builder.node("tr");
  var td1 = Builder.node("td", {}, "01.03. 13:22");
  var td2 = Builder.node("td", {}, "Bewegungsmelder - Eingang");
  var td3 = Builder.node("td", {}, "Low Bat");
  
  // Zeile 1 hinzufügen
  tr.appendChild(td1);
  tr.appendChild(td2);
  tr.appendChild(td3);
  tbody.appendChild(tr);
  
  // Zeile 2 erstellen
  tr = Builder.node("tr");
  td1 = Builder.node("td", {}, "01.03. 13:19");
  td2 = Builder.node("td", {}, "Kombi-Wettersensor");
  td3 = Builder.node("td", {}, "Empfangsausfall");
  
  // Zeile 2 hinzufügen
  tr.appendChild(td1);
  tr.appendChild(td2);
  tr.appendChild(td3);
  
  tbody.appendChild(tr);
  
  tr = Builder.node("tr");td1 = Builder.node("td", {}, "01.03. 13:44");td2 = Builder.node("td", {}, "Mülleimer");td3 = Builder.node("td", {}, "Voll");tr.appendChild(td1);tr.appendChild(td2);tr.appendChild(td3);
  tbody.appendChild(tr);
  tr = Builder.node("tr");td1 = Builder.node("td", {}, "01.03. 13:45");td2 = Builder.node("td", {}, "Badewanne");td3 = Builder.node("td", {}, "Übergelaufen");tr.appendChild(td1);tr.appendChild(td2);tr.appendChild(td3);
  tbody.appendChild(tr);
  
  table.appendChild(tbody);

  if( $('logAlarms') )
  {
    $('logAlarms').appendChild(table);
  }
};

debugCreatePopup = function() {
  var s = $("dbgSelect").options[$("dbgSelect").selectedIndex].text;
  var type = 0;
  if (s == "ID_INSERT_VALUE")
     type = 1;
   if (s == "ID_INSERT_STRING")
     type = 2;
  CreatePopup(eval(s), type);
};

debugForcePos = function() {
  if ($("btnRoomsSub")) {
    var topCoords = Position.positionedOffset($("btnRooms"));
    var offsetCoords = Position.positionedOffset($("subOffsetDiv"));
    var dimTop = $("btnRooms").getDimensions();
    
    $("btnRoomsSub").style.top = topCoords[1] - offsetCoords[1] + dimTop.height;
    $("btnRoomsSub").style.left = topCoords[0] - offsetCoords[0] - 5;
    $("btnRoomsSub").show();
  }
};

debugShowFilters = function() {
  if (typeof(filterOptions) != 'undefined') {
    var s = "";
    for (var i = 0; i < filterOptions.filters.length; i++) {
      s += filterOptions.filters[i]["id"] + "\n";
    }
    if(dbg)alert(s);
  }
  else {
    if(dbg)alert("No filter options");
  }
};

showTimemodule = function() {
  CreatePopup(ID_TIMEMODULE, $("tmID").value);
};/**
 * ise/iseFilter.js
 **/

/**
 * @fileOverview Speichert und verwaltet Filter-Kriterien für Listen-Ansichten
 * @author Michael Niehaus (ise)
 **/

// file: iseFilter
// author: Michael Niehaus
// date created: 15.05.2007
//
// speichert und verwaltet Filter-Kriterien für Listen-Ansichten
FLT_OBJ_TYP_VARS = 1;
bFilterUsed = false;           

/**
 * @class
 **/
iseFilter = Class.create();
iseFilter.prototype = {
  initialize: function(sPageId, fltObjType) {
    this.filRooms = "";
    this.filFuncs = "";
    this.filType = "";
    this.filDesc = "";
    this.filSn = "";
    this.filName = "";
    this.filUnit = "";
    this.filChnLink = "";
    this.filVarTypes = "";
    this.filTime = "";
    this.filDate = "";
    this.bSend = false;
    this.bRec = false;
    this.bStd = false;
    this.bSafe = false;
    this.bTypeLogic = false;
    this.bTypeValueList = false;
    this.bTypeNumber = false;
    this.bTypeAlarm = false;
    this.bColLeft = false;
    this.bColCenter = false;
    this.bNameLeft = false;
    this.bNameTop = false;
    this.bPC = false;
    this.bPDA = false;
    this.bCentral = false;
    this.filUsers  = "";
    this.pageID = sPageId;
    this.fltObjType = 0;
    if (fltObjType)
      this.fltObjType = fltObjType;
  },
  

  saveModeFilter: function(bModeStd, bModeSafe)
  {
    this.bStd  = bModeStd;
    this.bSafe = bModeSafe;
    var url = "/esp/system.htm?sid="+SessionId;
    var pb = "";
    pb += 'string action = "saveModeFilter";';
    pb += 'string sPageId = "'+this.pageID+'";';
    pb += 'integer iModeStd = '+(bModeStd? 1:0)+';';
    pb += 'integer iModeSafe = '+(bModeSafe? 1:0)+';';
    var opt =
    {
      postBody: ReGa.encode(pb)
    };
    new Ajax.Request(url, opt);
  },
  
  saveIfaceFilter: function(bSend, bRec)
  {
    this.bSend = bSend;
    this.bRec = bRec;
    var url = "/esp/system.htm?sid="+SessionId;
    var pb = "";
    pb += 'string action = "saveIfaceFilter";';
    pb += 'string sPageId = "'+this.pageID+'";';
    pb += 'integer iSend = '+(bSend? 1:0)+';';
    pb += 'integer iRec = '+(bRec? 1:0)+';';
    var opt =
    {
      postBody: ReGa.encode(pb)
    };
    new Ajax.Request(url, opt);
  },

  
  addStringFilter: function(fId, s) {
    switch(fId) {
      case FIL_NAME:  this.filName    = s; break;
      case FIL_DESC:  this.filDesc    = s; break;
      case FIL_SN:    this.filSn      = s; break;
      case FIL_TYPE:  this.filType    = s; break;
      case FIL_ROOMS: this.filRooms   = s; break;
      case FIL_FUNCS: this.filFuncs   = s; break;
      case FIL_UNIT:  this.filUnit    = s; break;
      case FIL_TIME:  this.filTime    = s; break;
      case FIL_DATE:  this.filDate    = s; break;
      case FIL_USERS: this.filUsers   = s; break;
      case FIL_CHN:   this.filChnLink = s; break;
      default:        break;
    }
  },
  
  isFilterType: function(ft) {
    switch(ft) {
      case FIL_MODE_AES: return this.bSafe;
      case FIL_MODE_STD: return this.bStd;
      case FIL_IFACE_S : return this.bSend;
      case FIL_IFACE_R : return this.bRec;
      default          : return null;
    }
  },
  
  objPassFilter: function(obj)
  {
    var bFound;
    var arF;
    var arO;
    var i;
    var x;
    
    bFilterUsed = true;                  
    if (this.filRooms !== "")
    {
      bFound = false;
      arF = this.filRooms.split('\t');
      
      if (obj['fltOpts']['rooms'])
      {
        arO = obj['fltOpts']['rooms'].split('\t');
        for (i = 0; i < arF.length; i++)
        {
          if (!bFound)
          {
            for (x = 0; x < arO.length; x++)
            {
              if (arF[i] == arO[x])
              {
                bFound = true;
                break;
              }
            }
          }
        }
      }
      if (!bFound) { return false; }
    }
    
    if (this.filFuncs !== "")
    {
      bFound = false;
      arF    = this.filFuncs.split('\t');
       arO   = obj['fltOpts']['funcs'].split('\t');
       
      for (i = 0; i < arF.length; i++)
      {
        if (!bFound) {
          for (x = 0; x < arO.length; x++)
          {
            if (arF[i] == arO[x])
            {
              bFound = true;
              break;
            }
          }
        }
      }
      if (!bFound) { return false; }
    }
    if (this.filType !== "")
    {
      if (typeof obj['type'] != 'undefined') {
        if (obj['type'] === "")                      { return false; }
        if (obj['type'].indexOf(this.filType) == -1) { return false; }
      }
    }
    if (this.filDesc !== "")
    {
      //conInfo( "iseFilter: filDesc="+this.filDesc );
      if (typeof obj['desc'] != 'undefined')
      {
        //conInfo( "iseFilter: desc="+obj['desc'] );
        if (obj['desc'] === "")                      { return false; }
        if (obj['desc'].indexOf(this.filDesc) == -1) { return false; }
      }
    }
    if (this.filName !== "")
    {
      if (typeof obj['name'] != 'undefined')
      {
        if (obj['name'] === "")                      { return false; }
        var transName = translateString(obj['name']);
        if (transName.indexOf(this.filName) == -1) { return false; }
      }
    }
    if (this.filSn !== "")
    {
      if (typeof obj['sn'] != 'undefined')
      {
        if (obj['sn'] === "")                     { return false; }
        if (obj['sn'].indexOf(this.filSn) == -1) { return false; }
      }
    }
    if (this.filUnit !== "")
    {
      if (typeof obj['unit'] != 'undefined')
      {
        if (obj['unit'] === "")                      { return false; }
        if (obj['unit'].indexOf(this.filUnit) == -1) { return false; }
      }
    }

    if (this.filTime !== "")
    {
      if (typeof obj['time'] != 'undefined')
      {
        if (obj['time'] === "")                      { return false; }
        if (obj['time'].indexOf(this.filTime) == -1) { return false; }
      }
    }
    
    if (this.filDate !== "")
    {
      if (typeof obj['date'] != 'undefined')
      {
        if (obj['date'] === "")                      { return false; }
        if (obj['date'].indexOf(this.filDate) == -1) { return false; }
      }
    }
    if (this.filChnLink !== "")
    {
      if (obj['chn'] === "")                         { return false; }
      if (obj['chn'].indexOf(this.filChnLink) == -1) { return false; }
    }
/*    
    if (this.filVarTypes !== "")
    {
    }
*/    
    if (this.bSend != this.bRec) {
      if (this.bSend) {
        if (obj['fltOpts']['iCat'] == 2)
          return false;
      }
      if (this.bRec) {
        if (obj['fltOpts']['iCat'] == 1)
          return false;
      }
    }
    if (this.bStd != this.bSafe) {
      if (this.bStd) {
        if (obj['fltOpts']['iTrans'] === true) { return false; }
      }
      if (this.bSafe) {
        if (obj['fltOpts']['iTrans'] === false) { return false; }
      }
    }
    if (this.fltObjType == FLT_OBJ_TYP_VARS) {
      if (this.varTypeFilterSet()) {
        var bRet = false;
        if (this.bTypeLogic) {
          if ((obj['type'] == "bool") || (obj['type'] == "boolean") ) { bRet = true; }
        }
        if (this.bTypeValueList) {
          if (obj['type'] == "enum")
          {
            if (!bRet) { bRet = true; }
          }
        }
        if (this.bTypeNumber) {
          if (obj['type'] == "generic")
          {
            if (!bRet) { bRet = true; }
          }
        }
        if (this.bTypeAlarm) {
          if (obj['type'] == "alarm")
          {
            if (!bRet) { bRet = true; }
          }
        }
        return bRet;
      }
    }
    if (this.bColLeft != this.bColCenter) {
      if (this.bColLeft) {
        if (obj['colpos'] == 1) { return false; }
      }
      if (this.bColCenter) {
        if (obj['colpos'] == 0) { return false; }
      }
    }
    if (this.bNameLeft != this.bNameTop) {
      if (this.bNameLeft) {
        if (obj['namepos'] == 1) { return false; }
      }
      if (this.bNameTop) {
        if (obj['namepos'] == 0) { return false; }
      }
    }
    if (this.bPC){
      if (!obj['devPC']) { return false; }
    }
    if (this.bPDA) {
      if (!obj['devPDA']) { return false; }
    }
    if (this.bCentral) {
      if (!obj['devCentral']) { return false; }
    }
    if (this.filUsers) {
      bFound = false;
      arF = this.filUsers.split('\t');
      arO = obj['users'].split('\t');
      for (i = 0; i < arF.length; i++) {
        if (!bFound) {
          for (x = 0; x < arO.length; x++) {
            if (arF[i] == arO[x]) {
              bFound = true;
              break;
            }
          }
        }
      }
      if (!bFound)
        return false;
    }
    return true;
  },
  
  varTypeFilterSet: function() {
    if (this.bTypeLogic) return true;
    if (this.bTypeValueList) return true;
    if (this.bTypeNumber) return true;
    if (this.bTypeAlarm) return true;
    return false; 
  },
    
  isFilterId: function(id, fId)
  {
    var i;
    var rIds;
    var fIds;
    
    switch(fId) 
    {
      case FIL_ROOMS:
        rIds = this.filRooms.split('\t');
        for(i = 0; i < rIds.length; i++) {
          if (rIds[i] == id) { return true; }
        }
        return false;
      case FIL_FUNCS:
        fIds = this.filFuncs.split('\t');
        for(i = 0; i < fIds.length; i++) {
          if (fIds[i] == id) { return true; }
        }
        return false;
      case FIL_USERS:
        fIds = this.filUsers.split('\t');
        for(i = 0; i < fIds.length; i++) {
          if (fIds[i] == id) { return true; }
        }
        return false;
      default:
        return false;
    }
  },
  
  clearFilters: function(id, ftType)
  {
//    var url = "/esp/system.htm?sid="+SessionId;
//    var pb = 'string action = "clearFilter";';
//    pb += 'string sPageId = "' + this.pageID + '";';
//    var opt =
//    {
//      postBody: ReGa.encode(pb),
//      onSuccess: function(t)
//      {
//        conInfo( t.responseText );
//      }
//    }
//    new Ajax.Request(url, opt);
    
    this.filRooms = "";
    this.filFuncs = "";
    this.filType = "";
    this.filDesc = "";
    this.filSn = "";
    this.filName = "";  
    this.filUnit = ""; 
    this.filChnLink = "";
    this.filVarTypes = "";
    this.filTime = "";
    this.filDate = "";
    this.bSend = false;
    this.bRec = false;
    this.bStd = false;
    this.bSafe = false; 
    this.bColLeft = false;
    this.bColCenter = false;
    this.bNameLeft = false;
    this.bNameTop = false;
    this.bPC = false;
    this.bPDA = false;
    this.bCentral = false;
    this.filUsers  = "";
    this.bTypeLogic = false;
    this.bTypeValueList = false;
    this.bTypeNumber = false;
    this.bTypeAlarm = false;
    conInfo("Alle Filter wurden zurückgesetzt.");
  }
};
 
/* * * * * * * * * * * * *   HILFS-FUNKTIONEN   * * * * * * * * * * * * * * */

// Prüft anhand der filterOptions ob Checkboxen in Submenüs gesetzt werden sollen
selectFilters = function(fltObj, divToShow)
{
  var i;
  var inplist;
  
  switch(divToShow) {
    case "btnFilterRoomSub":
      inplist = $("btnFilterRoomSub").getElementsByTagName('input');
      for (i = 0; i < inplist.length; i++) {
        var roomId = parseInt(inplist[i].id.substr(2));
        inplist[i].checked = fltObj.isFilterId(roomId, FIL_ROOMS);
      }
      break;
    case "btnFilterFuncSub":
      inplist = $("btnFilterFuncSub").getElementsByTagName('input');
      for (i = 0; i < inplist.length; i++) {
        var funcId = parseInt(inplist[i].id.substr(2));
        inplist[i].checked = fltObj.isFilterId(funcId, FIL_FUNCS);
      }
      break;
    case "btnFilterVarTypeSub":
      $("cbLogic").checked = fltObj.bTypeLogic;
      $("cbValueList").checked = fltObj.bTypeValueList;
      $("cbNumber").checked = fltObj.bTypeNumber;
      $("cbAlarm").checked = fltObj.bTypeAlarm;
      break;
    case "btnFilterIfaceSub":
      $("cbSend").checked = fltObj.isFilterType(FIL_IFACE_S); 
      $("cbRec").checked = fltObj.isFilterType(FIL_IFACE_R); 
      break;
    case "btnFilterModeSub":
      $("cbSafe").checked = fltObj.isFilterType(FIL_MODE_AES); 
      $("cbStd").checked = fltObj.isFilterType(FIL_MODE_STD); 
      break;
    case "btnFilterNameSub":
      $("ftName").value = fltObj.filName;
      break;
    case "btnFilterTypeSub":
      $("ftType").value = fltObj.filType;
      break;
    case "btnFilterDescSub":
      $("ftDesc").value = fltObj.filDesc;
      break;
    case "btnFilterSNSub":
      $("ftSN").value = fltObj.filSn;
      break;
    case "btnFilterTimeSub":
      $("ftTime").value = fltObj.filTime;
      break;
    case "btnFilterDateSub":
      $("ftDate").value = fltObj.filDate;
      break;
    case "btnFilterColPos":
      $("cbColLeft").checked = fltObj.bColLeft;
      $("cbColCenter").checked = fltObj.bColCenter;
      break;
    case "btnFilterNamePos":
      $("cbNameLeft").checked = fltObj.bNameLeft;
      $("cbNameTop").checked = fltObj.bNameTop;
      break;
    case "btnFilterEndDev":
      $("cbPC").checked = fltObj.bPC;
      $("cbPDA").checked = fltObj.bPDA;
      $("cbCentral").checked = fltObj.bCentral;
      break;
    case "btnFilterUsersSub":
      inplist = $("btnFilterUsersSub").getElementsByTagName('input');
      for (i = 0; i < inplist.length; i++) {
        var userId = parseInt(inplist[i].id.substr(2));
        inplist[i].checked = fltObj.isFilterId(userId, FIL_USERS);
      }
      break;
    case "btnFilterChn":
      $("ftChn").value = fltObj.filChnLink;
      break;
    default:
      break;
  }
};


iseSFilterCheckEnterEsc = function(keyCode, idSet, idCancel)
{
  switch (keyCode) {
    case 13:
      // Set the filter -- press ok
      jQuery("#"+ idSet).click();
      break;
    case 27:
      jQuery("#"+ idCancel).click();
      break;
    default:
      break;
  }
};

// Freitext-Filter
setSFilter = function(fltObj, ctrlId, fId)
{
  //conInfo("iseFilter: setSFilter "+fId+" to "+$(ctrlId).value);
  fltObj.addStringFilter(fId, $(ctrlId).value);
};

// Integer-Filter (Modus, Iface)
setIFilter = function(fltObj, sId)
{
  switch (sId)
  {
    case "mode": 
      fltObj.saveModeFilter($("cbStd").checked, $("cbSafe").checked);
      break;
    case "iface":
      fltObj.saveIfaceFilter($("cbSend").checked, $("cbRec").checked);
      break;
    default:
      break;
  }
};

// ID-Filter (rooms, funcs)
setAFilter = function(fltObj, sId)
{
  var sTmp = "";
  var inplist;
  var i;
  
  switch(sId) {
    case "rooms":
      inplist = $("btnFilterRoomSub").getElementsByTagName('input');
      for (i = 0; i < inplist.length; i++) {
        var roomId = parseInt(inplist[i].id.substr(2));
        if (inplist[i].checked)
          sTmp += roomId + "\t";
      }
      sTmp = sTmp.substr(0, sTmp.length - 1);
      fltObj.addStringFilter(FIL_ROOMS, sTmp);
      break;
    case "funcs":
      inplist = $("btnFilterFuncSub").getElementsByTagName('input');
      for (i = 0; i < inplist.length; i++) {
        var funcId = parseInt(inplist[i].id.substr(2));
        if (inplist[i].checked)
          sTmp += funcId + "\t";
      }
      sTmp = sTmp.substr(0, sTmp.length - 1);
      fltObj.addStringFilter(FIL_FUNCS, sTmp);
      break;
    case "vartypes":
      fltObj.bTypeLogic = $("cbLogic").checked;
      fltObj.bTypeValueList = $("cbValueList").checked;
      fltObj.bTypeNumber = $("cbNumber").checked;
      fltObj.bTypeAlarm = $("cbAlarm").checked; 
      break;
    case "colPos":
      fltObj.bColLeft = $("cbColLeft").checked; 
      fltObj.bColCenter = $("cbColCenter").checked; 
      break;
    case "namePos":
      fltObj.bNameLeft = $("cbNameLeft").checked; 
      fltObj.bNameTop = $("cbNameTop").checked; 
      break;
    case "endDev":
      fltObj.bPC = $("cbPC").checked;
      fltObj.bPDA = $("cbPDA").checked;
      fltObj.bCentral = $("cbCentral").checked;
      break;
    case "users":
      inplist = $("btnFilterUsersSub").getElementsByTagName('input');
      for (i = 0; i < inplist.length; i++) {
        var userId = parseInt(inplist[i].id.substr(2));
        if (inplist[i].checked)
          sTmp += userId + "\t";
      }
      sTmp = sTmp.substr(0, sTmp.length - 1);
      fltObj.addStringFilter(FIL_USERS, sTmp);
      break;
    default:
      break;
  }
};

filterBtn = function(id) {
  if ($(id))
    $(id).style.backgroundColor = WebUI.getColor("clickable");
};

filterBtnSelected = function(id) {
  if ($(id))
    $(id).style.backgroundColor = WebUI.getColor("active");
};

colorFilterBtns = function(fltObj)
{
  if (fltObj.filName !== "") filterBtnSelected('btnFilterName'); 
  else filterBtn('btnFilterName');
  if (fltObj.filType !== "") filterBtnSelected('btnFilterType'); 
  else filterBtn('btnFilterType');
  if (fltObj.filDesc !== "") filterBtnSelected('btnFilterDesc'); 
  else filterBtn('btnFilterDesc');
  if (fltObj.filSn !== "") filterBtnSelected('btnFilterSN'); 
  else filterBtn('btnFilterSN');
  if (fltObj.filRooms !== "") filterBtnSelected('btnFilterRoom');
  else filterBtn('btnFilterRoom');
  if (fltObj.filFuncs !== "") filterBtnSelected('btnFilterFunc');
  else filterBtn('btnFilterFunc');
  if (fltObj.bSend||fltObj.bRec) filterBtnSelected('btnFilterIface');
  else filterBtn('btnFilterIface');
  if (fltObj.bStd||fltObj.bSafe) filterBtnSelected('btnFilterMode');
  else filterBtn('btnFilterMode');
  if (fltObj.varTypeFilterSet()) filterBtnSelected('btnFilterVarType');
  else filterBtn('btnFilterVarType'); 
  if (fltObj.filTime !== "") filterBtnSelected('btnFilterTime'); 
  else filterBtn('btnFilterTime');
  if (fltObj.filDate !== "") filterBtnSelected('btnFilterDate'); 
  else filterBtn('btnFilterDate');
  if (fltObj.bColLeft) filterBtnSelected('btnFilterColPos'); 
  else filterBtn('btnFilterColPos');
  if (fltObj.bColCenter) filterBtnSelected('btnFilterColPos'); 
  else filterBtn('btnFilterColPos');
  if (fltObj.bNameLeft) filterBtnSelected('btnFilterNamePos'); 
  else filterBtn('btnFilterNamePos');
  if (fltObj.bNameTop) filterBtnSelected('btnFilterNamePos'); 
  else filterBtn('btnFilterNamePos');
  if (fltObj.filChnLink !== "") filterBtnSelected('btnFilterChn'); 
  else filterBtn('btnFilterChn');
  
};
/**
 * ise/iseButtonsSwitch.js
 **/

/**
 * @fileOverview ?
 * @author ise
 **/

/**
 * @class
 **/
iseButtonsSwitch = Class.create();

iseButtonsSwitch.prototype = {
  /*
   * id = datapoint-ID of switch
   * initState = Creation State (0 or 1)
   * idDpState = id of state-DP
   */
  initialize: function(id, initState, idDpState, iViewOnly) {
    this.id = id;
    this.state = initState;
    this.divOn = $(this.id + "On");
    this.divOff = $(this.id + "Off");
    this.idDpState = idDpState;
    
    if (initState) { ControlBtn.on(this.divOn); }
    else  { ControlBtn.on(this.divOff); }
      
    // Add event handlers
    if (iViewOnly === 0)
    {
      this.clickOff = this.onClickOff.bindAsEventListener(this);
      Event.observe(this.divOff, 'mousedown', this.clickOff);
      
      this.clickOn = this.onClickOn.bindAsEventListener(this);
      Event.observe(this.divOn, 'mousedown', this.clickOn);
    }
  },
  
  onClickOff: function() {
    ControlBtn.pushed(this.divOff);
    //this.state = false;
    setDpState(this.idDpState, 0, true);
    var t = this;
    new PeriodicalExecuter(function(pe) {
      t.refresh();
      pe.stop();
    }, 1);
  },
 
  onClickOn: function() {
    ControlBtn.pushed(this.divOn);
    //this.state = true;
    setDpState(this.idDpState, 1, true);
    var t = this;
    new PeriodicalExecuter(function(pe) {
      t.refresh();
      pe.stop();
    }, 1);
  },
 
  
  refresh: function() {
    if (this.state) {
      ControlBtn.on(this.divOn);
      ControlBtn.off(this.divOff);
    }
    else {
      ControlBtn.off(this.divOn);
      ControlBtn.on(this.divOff);
    }
  }
};

/**
 * @class
 **/
iseButtonsKey = Class.create();

iseButtonsKey.prototype = {
  /*
   * id = datapoint-ID of switch
   */
  initialize: function(id, shortId, longId, iViewOnly) {
    this.id = id;
    this.divShort = $(this.id + "Short");
    this.divLong = $(this.id + "Long");
    this.shortId = shortId;
    this.longId = longId;
    
    if( this.divShort ) { ControlBtn.off(this.divShort); }
    if( this.divLong ) { ControlBtn.off(this.divLong); }
    
    // Add event handlers
    if (iViewOnly === 0)
    {
      if (this.divShort) {
        this.clickShort = this.onClickShort.bindAsEventListener(this);
        Event.observe(this.divShort, 'mousedown', this.clickShort);
      }
      if (this.divLong) {
        this.clickLong = this.onClickLong.bindAsEventListener(this);
        Event.observe(this.divLong, 'mousedown', this.clickLong);
      }
    }
  },
  
  onClickShort: function() {
    setDpState(this.shortId, 1);
    ControlBtn.pushed(this.divShort);
    $("btn" + this.shortId + "s").src = "/ise/img/btn_press.png";
    var t = this;
    new PeriodicalExecuter(function(pe) {
      ControlBtn.off(t.divShort);
      $("btn" + t.shortId + "s").src = "/ise/img/btn_no_press.png";
      pe.stop();
    }, 1);
  },
  
  onClickLong: function() {
    setDpState(this.longId, 1);
    ControlBtn.pushed(this.divLong);
    $("btn" + this.longId + "l").src = "/ise/img/btn_press.png";
    var t = this;
    new PeriodicalExecuter(function(pe) {
      ControlBtn.off(t.divLong);
      $("btn" + t.longId + "l").src = "/ise/img/btn_no_press.png";
      pe.stop();
    }, 1);
  }
};

/**
 * @class
 **/
iseButtonProg = Class.create();
iseButtonProg.prototype = {
  initialize: function(id, progActive) {
    this.id = id;
    this.progActive = progActive;
    
    this.startBtn = $(id + "Start");
    this.actBtn = $(id + "Act");
    
    if ( progActive ) { ControlBtn.on(this.actBtn); }
    
    // Add event handlers
    this.clickStart = this.onClickStart.bindAsEventListener(this);
    Event.observe(this.startBtn, 'mousedown', this.clickStart);
  },
  
  onClickStart: function() 
  {
    ControlBtn.pushed(this.startBtn);
    ExecuteProgram(this.id);
    var t = this;
    new PeriodicalExecuter(function(pe)
    {
      ControlBtn.off(t.startBtn);
      pe.stop();
    }, 1);
  }
};

/**
 * @class
 **/
iseButtonsEvent = Class.create();
iseButtonsEvent.prototype = {
  /*
   * id = datapoint-ID of Event
   */
  initialize: function(id, eventId, iViewOnly) {
    this.id = id;
    this.divEvent = $(this.id + "event");
    this.eventId = eventId;
    
    if( this.divEvent ) { ControlBtn.off(this.divEvent); }
    
    // Add event handlers
    if (iViewOnly === 0)
    {
      this.clickEvent = this.onClickEvent.bindAsEventListener(this);
      Event.observe(this.divEvent, 'mousedown', this.clickEvent);
    }
  },
  
  onClickEvent: function() {
    setDpState(this.eventId, 1);
    ControlBtn.pushed(this.divEvent);
    $("btn" + this.id + "s").src = "/ise/img/btn_press.png";
    var t = this;
    new PeriodicalExecuter(function(pe) {
      ControlBtn.off(t.divEvent);
      $("btn" + t.id + "s").src = "/ise/img/btn_no_press.png";
      pe.stop();
    }, 1);
  }
 
};/**
 * ise/iseButtonsDimmer.js
 **/

/**
 * @fileOverview ?
 * @author ise
 **/

/**
 * @class
 **/ 
iseButtonsDimmer = Class.create();

iseButtonsDimmer.prototype = {
  /*
   * id = DOM-ID of switch
   * initState = Creation State 
   */
  initialize: function(id, initState, lvlDP, oldLvlDP, iViewOnly, bSliderPosFlag)
  {
    conInfo( "iseDimmer: initialize()" );
    this.id = id;
    this.state = initState;
    this.lvlDP = lvlDP;
    this.oldLvlDP = oldLvlDP;
    if(bSliderPosFlag) 
    {
        this.bSliderPosFlag = bSliderPosFlag;
    }
    else
    {
        this.bSliderPosFlag = false;
    }
    this.slider = new sliderControl("dimmer", this.id, initState, iViewOnly,this.bSliderPosFlag);
    
    this.hasRampClicked = false;
    
    this.txtPerc = $(this.id + "Perc");
    
    // Add event handlers
    if (iViewOnly === 0)
    {
      this.mouseOut = this.onMouseOut.bindAsEventListener(this);
      Event.observe($("slidCtrl" + this.id), 'mouseout', this.mouseOut);
    
      this.rampClick = this.onRampClick.bindAsEventListener(this);
      Event.observe(this.slider.e_base, 'mousedown', this.rampClick);
      
      this.handleClick = this.onHandleClick.bindAsEventListener(this);
      Event.observe($("slidCtrl" + this.id), 'mouseup', this.handleClick);
      
      this.clickUp = this.onClickUp.bindAsEventListener(this);
      Event.observe($(this.id + "Up"), 'click', this.clickUp);

      this.clickDown = this.onClickDown.bindAsEventListener(this);
      Event.observe($(this.id + "Down"), 'click', this.clickDown);
      
      this.clickOn  = this.onClickOn.bindAsEventListener(this);
      Event.observe($(this.id + "On"), 'mousedown', this.clickOn);
      
      this.clickOff  = this.onClickOff.bindAsEventListener(this);
      Event.observe($(this.id + "Off"), 'mousedown', this.clickOff);
      
      this.percChange = this.onPercChange.bindAsEventListener(this);
      Event.observe($(this.id + "Perc"), 'change', this.percChange);
    }
    this.refresh(false);
  },
  
  onMouseOut: function(event)
  {
    var e = event;
    if (!e) { e = window.event; }
    var relTarg = e.relatedTarget || e.fromElement;
    if( relTarg )
    {
      var b1 = (relTarg.id.indexOf("slider")!=-1);
      var b2 = (relTarg.id.indexOf("base")!=-1);
      var b3 = (relTarg.id.indexOf("green")!=-1);
      if( !b1 && !b2 && !b3 ) 
      {
        if( this.hasRampClicked )
        {
          conInfo( "iseDimmer: onMouseOut() ["+relTarg.id+"]"  );
          this.hasRampClicked = false;
          this.state = this.slider.n_value;
          this.refresh();
        }
      }
    }
  },
 
  onRampClick: function(ev)
  {
     conInfo( "iseDimmer: onRampClick()" );
     this.hasRampClicked = true;
     var pos = Position.page(this.slider.e_base);
     var offset = ev.clientX - pos[0];
     var val = ( offset * 100 ) / this.slider.n_controlWidth;  
     var oldstate = parseInt(this.state);
     this.state = Math.floor(val);
     if (this.state < (oldstate-3))
     {
       this.slider.f_setValue(val);     
     }     
     else if (this.state > (oldstate+3))
     {
       this.slider.f_setValue(val);     
     } 
     //conInfo("setting Dimmer DP "+this.lvlDP+" State --> " + this.state + " -- old State --> "+oldstate);   
     //window.setTimeout("ibd"+this.id+".refresh()",1000);
  },
  
  onHandleClick: function()
  {
    conInfo( "iseDimmer: onHandleClick()" );
    this.state = this.txtPerc.value;
    this.refresh();
  },
  
  onClickUp: function()
  {
    conInfo( "iseDimmer: onClickUp()" );
    this.state = this.slider.n_value;
    this.state += 10; 
    if (this.state > 100)
    {
      this.state = 100;
    }
    this.refresh();
  },
  
  onClickDown: function()
  {
    conInfo( "iseDimmer: onClickDown()" );
    this.state = this.slider.n_value;
    this.state -= 10; 
    if (this.state < 0)
      this.state = 0;
    this.refresh();
  },
  
  onClickOn: function()
  {
    conInfo( "iseDimmer: onClickOn()" );
    var url = "/esp/channels.htm?sid=" + SessionId;
    var pb = "integer chnId = "+this.id+";";
    pb += "string action = 'dimmerOldVal';";
    var t = this;
    new PeriodicalExecuter(function(pe)
    {
      if( t.state > 0 )
      {
        if( $(t.id + "On") ) { ControlBtn.on($(t.id + "On")); }
        if( $(t.id + "Off") ) {ControlBtn.off($(t.id + "Off")); }
      }
      else
      {
        if( $(t.id + "On") ) { ControlBtn.off($(t.id + "On")); }
        if( $(t.id + "Off") ) { ControlBtn.on($(t.id + "Off")); }
      }
      pe.stop();
    }, 1);
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete: function(resp)
      {
        t.refresh(false);
      }
    };
    new Ajax.Request(url, opts);
    ControlBtn.pushed($(this.id + "On"));
  },
  
  onClickOff: function()
  {
    conInfo( "iseDimmer: onClickOff()" );
    var t = this;
    new PeriodicalExecuter(function(pe)
    {
      if( t.state > 0 )
      {
        if( $(t.id + "On") ) { ControlBtn.on($(t.id + "On")); }
        if( $(t.id + "Off") ) { ControlBtn.off($(t.id + "Off")); }
      }
      else
      {
        if( $(t.id + "On") ) { ControlBtn.off($(t.id + "On")); }
        if( $(t.id + "Off") ) { ControlBtn.on($(t.id + "Off")); }
      }
      pe.stop();
    }, 1);
    setDpState(this.lvlDP, 0);
    ControlBtn.pushed($(this.id + "Off"));
  },
 
  
  onPercChange: function()
  {
    conInfo( "iseDimmer: onPercChange()" );
    if( isNaN(this.txtPerc.value) ) return;
    if( parseInt(this.txtPerc.value) > 100 ) this.txtPerc.value = 100;
    if( parseInt(this.txtPerc.value) < 0 ) this.txtPerc.value = 0;
    this.state = this.txtPerc.value;
    this.refresh();
  },
  
  update: function(newVal)
  {
    conInfo( "iseDimmer: update()" );
    this.state = newVal;
    this.refresh(newVal);
  },
  
  refresh: function(setstate)
  {
    conInfo( "iseDimmer: refresh()" );
    this.slider.f_setValue(this.state, true);
    this.txtPerc.value = this.state;
    if (parseInt(this.state) > 0)
    {
      ControlBtn.on($(this.id + "On"));
      ControlBtn.off($(this.id + "Off"));
    }
    else {
      ControlBtn.off($(this.id + "On"));
      ControlBtn.on($(this.id + "Off"));
    }
    if(typeof setstate == "undefined")
    {
      conInfo("setting Dimmer DP "+this.lvlDP+" State -------> " + this.state);    
      setDpState(this.lvlDP, (this.state / 100));
    }
  }
};
/**
 * ise/iseThermostat.js
 **/

/**
 * @fileOverview ?
 * @author ise
 **/

 /**
 * @class
 **/
iseThermostat = Class.create();

iseThermostat.prototype = {
  /*
   * id = DOM-ID of switch
   * initState = Creation State 
   */
  initialize: function(id, initState, lvlDP, min, max, iViewOnly, bSliderPosFlag, opts)
  {
    conInfo( "iseThermostat: initialize()" );
    conInfo ("value(: " + initState + ") min(" + min + ") max(" + max + ")");
    this.id = id;
    this.state = initState;
    this.lvlDP = lvlDP;
    this.min = min;
    this.max = max;
    this.factor = 100/(max-min);
    this.unit = " &deg;C";
    this.statusOFF = "OFF";
    this.statusON = "ON";
    this.opts = opts;
    if(bSliderPosFlag)
    {
        this.bSliderPosFlag = bSliderPosFlag;
    }
    else
    {
        this.bSliderPosFlag = false;
    }
    // AG this.slider = new sliderControl( "thermo", this.id, initState, iViewOnly, this.bSliderPosFlag,this.min, this.max, this.factor, this.unit);
    this.slider = new sliderControl( "thermo", this.id, this.state, iViewOnly, this.bSliderPosFlag,this.min, this.max, this.factor, this.unit);
    this.hasRampClicked = false;
    this.txtDeg = $(this.id + "Deg");
    this.unitDegree = $(this.id + "unitDegree");
    // Add event handlers
    if (iViewOnly === 0)
    {
      this.mouseOut = this.onMouseOut.bindAsEventListener(this);
      Event.observe($("slidCtrl" + this.id), 'mouseout', this.mouseOut);

      this.rampClick = this.onRampClick.bindAsEventListener(this);
      Event.observe(this.slider.e_base, 'mousedown', this.rampClick);

      this.handleClick = this.onHandleClick.bindAsEventListener(this);
      Event.observe($("slidCtrl" + this.id), 'mouseup', this.handleClick);

      this.clickUp = this.onClickUp.bindAsEventListener(this);
      Event.observe($(this.id + "Up"), 'click', this.clickUp);

      this.clickDown = this.onClickDown.bindAsEventListener(this);
      Event.observe($(this.id + "Down"), 'click', this.clickDown);

      this.percChange = this.onPercChange.bindAsEventListener(this);
      Event.observe($(this.id + "Deg"), 'change', this.percChange);

      this.init2ndGen();
    }
    this.refresh(false);
  },

  init2ndGen: function() {},

  onMouseOut: function(event)
  {
    var e = event;
    if (!e) { e = window.event; }
    var relTarg = e.relatedTarget || e.fromElement;
    if( relTarg )
    {
      var b1 = (relTarg.id.indexOf("slider")!=-1);
      var b2 = (relTarg.id.indexOf("base")!=-1);
      var b3 = (relTarg.id.indexOf("green")!=-1);
      var b4 = (relTarg.id.indexOf("spec")!=-1);
      if( !b1 && !b2 && !b3 && !b4)
      {
        if( this.hasRampClicked )
        {
          conInfo( "iseThermostat: onMouseOut() ["+relTarg.id+"], wanna set: " + ( (this.slider.n_value/this.factor) + this.min)  );
          this.hasRampClicked = false;

          this.state = (this.slider.n_value/this.factor) + this.min;
          this.refresh();
        }
      }
    }
  },

  onRampClick: function(ev)
  {
     this.hasRampClicked = true;
     var pos = Position.page(this.slider.e_base);
     var offset = ev.clientX - pos[0];
     var val = ( offset * 100 ) / this.slider.n_controlWidth;
     this.slider.f_setValue(val);
     this.state = (Math.floor(val)/ this.factor) + this.min;
     conInfo( "iseThermostat: onRampClick() at ("+val + ") set-> " + this.state );
     // this.refresh();
     //window.setTimeout("ibd"+this.id+".refresh()",1000);
  },

  onHandleClick: function()
  {
    conInfo( "iseThermostat: onHandleClick() deg: "  + this.txtDeg.value);
    this.hasRampClicked = false;
    this.state = this.txtDeg.value;
    //this.refresh();

    if(this.state < this.min){ this.state = this.min; }
    if (this.state > this.max) this.state = this.max;
    conInfo("onHandleClick - setting DP "+this.lvlDP+" State -------> " + this.state);
    setDpState(this.lvlDP, (this.state));
  },

  onClickUp: function()
  {
    conInfo( "iseThermostat: onClickUp()" );
    // this.state = (this.slider.n_value/this.factor);
    this.state = Math.round(this.state  + 1);
    if (this.state > this.max)
      this.state = this.max;

    this.refresh();
  },

  onClickDown: function()
  {
    conInfo( "iseThermostat: onClickDown()" );
    // this.state = (this.slider.n_value/this.factor);
    this.state = Math.round(this.state - 1);
    if (this.state < this.min)
      this.state = this.min;

    this.refresh();
  },

  onPercChange: function()
  {
    conInfo( "iseThermostat: onPercChange()" );
    if( isNaN(this.txtDeg.value) ) return;
    if( parseInt(this.txtDeg.value) > this.max ) this.txtDeg.value = this.max;
    if( parseInt(this.txtDeg.value) < this.min ) this.txtDeg.value = this.min;
    this.state = this.txtDeg.value;
    this.refresh();
  },

  update: function(newVal)
  {
    conInfo( "iseThermostat: update()" );
    this.state = newVal;
    this.refresh(newVal);
  },

  hideUnitDegree: function()
  {
    if (this.unitDegree != null) {
      this.unitDegree.hide();
    }
  },

  refresh: function(setstate)
  {
    conInfo( "iseThermostat: refresh()"+this.state );
    if(this.state < 0){ this.state = 0; }
    if (this.state > this.max) this.state = this.max;
    this.slider.f_setValue((this.state -this.min) * this.factor, true);
    switch (this.state) {
      case 4.5:
        this.txtDeg.value = this.statusOFF;
        this.hideUnitDegree();
        break;
      case 30.5:
        this.txtDeg.value = this.statusON;
        this.hideUnitDegree();
        break;
      default:
        this.txtDeg.value = round(this.state, 1);
        if(this.unitDegree != null) {
          this.unitDegree.show();
        }
    }
    if(typeof setstate == "undefined")
    {
      conInfo("setting DP "+this.lvlDP+" State -------> " + this.state);
      setDpState(this.lvlDP, (this.state));
    }
  }
};

iseThermostat_2ndGen = Class.create(iseThermostat, {

  init2ndGen: function() {
    conInfo("2nd Generation");
    conInfo(this.opts);
    this.level = parseFloat(this.opts.stLevel);
    this.activeMode = this.opts.stControlMode; // stControlMode = 0 - 3 / AUTO, MANU, HOLIDAY, BOOST
    this.inputDegree = $(this.id + "Deg");
    this.btnHeatingUncertain = $(this.id + "HeatingModeUncertain");
    this.btnHeatingON = $(this.id + "modeON");
    this.btnHeatingOFF = $(this.id + "modeOFF");
    this.btnModeAuto = $(this.id + "mode0");
    this.btnModeManu = $(this.id + "mode1");
    this.btnModeParty = $(this.id + "mode2");
    this.btnModeBoost = $(this.id + "mode3");
    this.btnTempComfort = $(this.id + "tempCOMFORT");
    this.btnTempEco = $(this.id + "tempECO");
    this.chn = homematic("Device.get",{"id": this.id});

    if (this.opts.stTemp) {
      this.showActualTemp();
    }
    if (this.opts.idComfort && this.opts.idLowering) {
      this.showComfortEco();
    }
    if (this.opts.idAuto && this.opts.idManu && this.opts.idBoost) {
      this.showChangeMode();
    }

    if (this.opts.idPartyTemp) {
      this.showPartyMode();
    }

    this.showOnOff();

    // opts.stPartyStartTime and opts.stPartyStopTime will be overwritten here because ReGa is setting this values wrong.
    // This seems to be a 8 bit problem. ReGa sets a real value of 300 (5 hours since midnight ) e. g. to 44 which equals 300 - 256
    // As a result the party mode dialog will show a time of AM 5:00 as AM 0:44
    this.opts.stPartyStartTime = homematic("Interface.getValue", {'interface': this.chn["interface"], 'address' : this.chn["address"], 'valueKey': 'PARTY_START_TIME'});
    this.opts.stPartyStopTime = homematic("Interface.getValue", {'interface': this.chn["interface"], 'address' : this.chn["address"], 'valueKey': 'PARTY_STOP_TIME'});

    if (this.activeMode == 2) {
      // Holiday mode active
      this.showHolidayEndTime();
    }
    try {
      this.initButtons();
      this.bindEvents();
    } catch (e) {}
  },

  initButtons: function() {
    this.initOnOffBtn();
    this.setActiveMode();
  },

  initOnOffBtn: function() {

    if (this.level < 4.5 || this.level > 30.5) {
      //ControlBtn.on(this.btnHeatingUncertain);
      ControlBtn.off(this.btnHeatingON);
      ControlBtn.off(this.btnHeatingOFF);
      this.clearDegree();
      return;
    }

    if (this.level < 5.0) {
      ControlBtn.on(this.btnHeatingOFF);
      ControlBtn.off(this.btnHeatingON);
      this.clearDegree();
    } else if (this.level > 30.0) {
      ControlBtn.on(this.btnHeatingON);
      ControlBtn.off(this.btnHeatingOFF);
      this.clearDegree();
    } else {
      ControlBtn.off(this.btnHeatingON);
      ControlBtn.off(this.btnHeatingOFF);
    }
  },

  // sets the button of the active mode
  setActiveMode: function() {
    ControlBtn.on(this.id + "mode" + this.activeMode);
  },

  // Clears the temperature field whithin the temp. box
  clearDegree: function() {
    this.inputDegree.value = "";
  },

  bindEvents: function() {
    this.clickModeAuto = this.onClickModeAuto.bindAsEventListener(this);
    Event.observe(this.btnModeAuto, 'mousedown', this.clickModeAuto);

    this.clickModeManu = this.onClickModeManu.bindAsEventListener(this);
    Event.observe(this.btnModeManu, 'mousedown', this.clickModeManu);

    this.clickModeBoost = this.onClickModeBoost.bindAsEventListener(this);
    Event.observe(this.btnModeBoost, 'mousedown', this.clickModeBoost);

    // Party Mode currently deactivated
     this.clickModeParty = this.onClickModeParty.bindAsEventListener(this);
     Event.observe(this.btnModeParty, 'mousedown', this.clickModeParty);

    this.clickHeatingOFF = this.onClickHeatingOFF.bindAsEventListener(this);
    Event.observe(this.btnHeatingOFF, 'mousedown', this.clickHeatingOFF);

    this.clickHeatingON = this.onClickHeatingON.bindAsEventListener(this);
    Event.observe(this.btnHeatingON, 'mousedown', this.clickHeatingON);

    this.clickTempCOMFORT = this.onClickTempComfort.bindAsEventListener(this);
    Event.observe(this.btnTempComfort, 'mousedown', this.clickTempCOMFORT);

    this.clickTempECO = this.onClickTempEco.bindAsEventListener(this);
    Event.observe(this.btnTempEco, 'mousedown', this.clickTempECO);

  },

  onClickModeAuto: function() {
    conInfo("clickModeAuto");
    setDpState(this.opts.idAuto, 1);
    this.setModeButton(this.btnModeAuto);
  },

  onClickModeManu: function() {
    conInfo("clickModeManu");
    setDpState(this.opts.idManu, this.level);
    this.setModeButton(this.btnModeManu);
  },


  onClickModeBoost: function() {
    conInfo("clickModeBoost");
    setDpState(this.opts.idBoost, 1);
    this.setModeButton(this.btnModeBoost);
  },

  onClickModeParty: function() {
    conInfo("clickModeParty");
    var self = this;
    var url = "/pages/msg/setPartyMode.htm";

    var req = jQuery.ajax({
      url : url +"?sid=" + SessionId,
      dataType: "html"
    });

    req.done(function(data) {

      partyModeDialog = new PartyModeDialog(translateKey("partyModeDialogTitle"), data, self.opts ,function(result) {
        if (result == 1) {
          conInfo("SET PARTYMODE");
          var oPartyMode = this.getPartyModeObject();
          homematic("Interface.putParamset",{'interface': self.chn["interface"], 'address' : self.chn["address"], 'paramsetKey' : 'VALUES', 'set':
            [
              {name:'PARTY_TEMPERATURE', type: 'string', value: oPartyMode.temp},
              {name:'PARTY_START_TIME', type: 'string', value: oPartyMode.startMinutesSinceMidnight},
              {name:'PARTY_START_DAY', type: 'string', value: oPartyMode.startDay},
              {name:'PARTY_START_MONTH', type: 'string', value: oPartyMode.startMonth},
              {name:'PARTY_START_YEAR', type: 'string', value: oPartyMode.startYear},
              {name:'PARTY_STOP_TIME', type: 'string', value: oPartyMode.stopMinutesSinceMidnight},
              {name:'PARTY_STOP_DAY', type: 'string', value: oPartyMode.stopDay},
              {name:'PARTY_STOP_MONTH', type: 'string', value: oPartyMode.stopMonth},
              {name:'PARTY_STOP_YEAR', type: 'string', value: oPartyMode.stopYear}
            ]
          });
          self.setModeButton(self.btnModeParty);
        }
      }, "html");
    });

    req.fail(function() {
      alert("Error while loading " + url);
    });
    //this.setModeButton(this.btnModeParty);
  },


  onClickHeatingOFF: function() {
    conInfo("clickTempOFF");
    setDpState(this.opts.idManu, 4.5);
    ControlBtn.on(this.btnHeatingOFF);
    ControlBtn.off(this.btnHeatingON);
  },

  onClickHeatingON: function() {
    conInfo("clickTempON");
    setDpState(this.opts.idManu, 30.5);
    ControlBtn.on(this.btnHeatingON);
    ControlBtn.off(this.btnHeatingOFF);
  },

  onClickTempComfort: function() {
    var self = this;
    conInfo("clickTempComfort");
    setDpState(this.opts.idComfort, 1);
    ControlBtn.pushed(this.btnTempComfort);
    setTimeout(function() {ControlBtn.off(self.btnTempComfort);},3000);
  },

  onClickTempEco: function() {
    var self = this;
    conInfo("clickTempEco");
    setDpState(this.opts.idLowering, 1);
    ControlBtn.pushed(this.btnTempEco);
    setTimeout(function() {ControlBtn.off(self.btnTempEco);},3000);
  },

  showActualTemp: function() {
    jQuery("#"+this.id +"actTemp").text(this.opts.stTemp);
    jQuery("#"+this.id +"tblShowTemp").show();
  },

  showHolidayEndTime: function() {
    var stopTime = this.getHolidayEndTime();
    if (stopTime) {
      jQuery("#"+this.id+"partyEndTime").text(stopTime);
      jQuery("#"+this.id+"showPartyEnd").show();
    }
  },

  showChangeMode: function() {
    jQuery("#tblChangeMode"+this.id).show();
  },

  showOnOff: function() {
    jQuery("#"+this.id+"modeOFF, #"+this.id+"modeON").show();
  },

  showComfortEco: function() {
    jQuery("#"+this.id+"tempECO, #"+this.id+"tempCOMFORT").show();
  },

  showPartyMode: function() {
    jQuery("#"+this.id + "mode2").show();
  },

  setModeButton: function(btn) {
    ControlBtn.off(this.btnModeAuto);
    ControlBtn.off(this.btnModeManu);
    ControlBtn.off(this.btnModeBoost);
    ControlBtn.off(this.btnModeParty);
    ControlBtn.on(btn);
  },

  getHolidayEndTime: function() {
    if (isNaN(parseInt(this.opts.stPartyStopTime))) {return false;}
    var stopTime = "";
    stopTime += addLeadingZero(this.opts.stPartyStopDay) + ".";
    stopTime += addLeadingZero(this.opts.stPartyStopMonth) + ".";
    stopTime += addLeadingZero(this.opts.stPartyStopYear) + " - ";
    stopTime += addLeadingZero(parseInt((parseInt(this.opts.stPartyStopTime) / 60))) + ":" + addLeadingZero(parseInt(this.opts.stPartyStopTime) % 60);

    // Device firmware  < 1.3
    if ((stopTime == "01.01.00 - 00:00") || (stopTime.indexOf("undefined") > -1)) {return false;}

    return stopTime;
  }

});/**
 * ise/iseFrequency.js
 **/

/**
 * @fileOverview ?
 * @copy of iseThermostat.js
 **/

 /**
 * @class
 **/
iseFrequency = Class.create();

iseFrequency.prototype = {
  /*
   * id = DOM-ID of switch
   * initState = Creation State 
   */
  initialize: function(id, initState, lvlDP, min, max, iViewOnly, bSliderPosFlag)
  {
    conInfo( "iseFrequency: initialize()" );
    conInfo ("value(: " + initState + ") min(" + min + ") max(" + max + ")");
    this.id = id;
    this.state = initState;
    this.lvlDP = lvlDP;
    this.min = min;
    this.max = max;
    this.factor = 100/(max-min);
    this.unit = " mHz";
    if(bSliderPosFlag) 
    {
        this.bSliderPosFlag = bSliderPosFlag;
    }
    else
    {
        this.bSliderPosFlag = false;
    }
    this.slider = new sliderControl( "thermo", this.id, initState, iViewOnly, this.bSliderPosFlag,this.min, this.max, this.factor, this.unit);
    this.hasRampClicked = false;
    this.txtDeg = $(this.id + "Deg");
    // Add event handlers
    if (iViewOnly === 0)
    {
      this.mouseOut = this.onMouseOut.bindAsEventListener(this);
      Event.observe($("slidCtrl" + this.id), 'mouseout', this.mouseOut);
    
      this.rampClick = this.onRampClick.bindAsEventListener(this);
      Event.observe(this.slider.e_base, 'mousedown', this.rampClick);
      
      this.handleClick = this.onHandleClick.bindAsEventListener(this);
      Event.observe($("slidCtrl" + this.id), 'mouseup', this.handleClick);
      
      this.clickUp = this.onClickUp.bindAsEventListener(this);
      Event.observe($(this.id + "Up"), 'click', this.clickUp);

      this.clickDown = this.onClickDown.bindAsEventListener(this);
      Event.observe($(this.id + "Down"), 'click', this.clickDown);

      this.percChange = this.onPercChange.bindAsEventListener(this);
      Event.observe($(this.id + "Deg"), 'change', this.percChange);
    }
    this.refresh(false);
  },
  
  onMouseOut: function(event)
  {
    var e = event;
    if (!e) { e = window.event; }
    var relTarg = e.relatedTarget || e.fromElement;
    if( relTarg )
    {
      var b1 = (relTarg.id.indexOf("slider")!=-1);
      var b2 = (relTarg.id.indexOf("base")!=-1);
      var b3 = (relTarg.id.indexOf("green")!=-1);
      var b4 = (relTarg.id.indexOf("spec")!=-1);
      if( !b1 && !b2 && !b3 && !b4) 
      {
        if( this.hasRampClicked )
        {
          conInfo( "iseFrequency: onMouseOut() ["+relTarg.id+"], wanna set: " + ( (this.slider.n_value/this.factor) + this.min)  );
          this.hasRampClicked = false;
          
          this.state = (this.slider.n_value/this.factor) + this.min;
          this.refresh();
        }
      }
    }
  },
 
  onRampClick: function(ev)
  {
     this.hasRampClicked = true;
     var pos = Position.page(this.slider.e_base);
     var offset = ev.clientX - pos[0];
     var val = ( offset * 100 ) / this.slider.n_controlWidth;  
     this.slider.f_setValue(val);
     this.state = (Math.floor(val)/ this.factor) + this.min;
     conInfo( "iseFrequency: onRampClick() at ("+val + ") set-> " + this.state );
     // this.refresh();
     //window.setTimeout("ibd"+this.id+".refresh()",1000);
  },
  
  onHandleClick: function()
  {
    conInfo( "iseFrequency: onHandleClick() perc: "  + this.txtDeg.value);
    this.hasRampClicked = false;
    this.state = this.txtDeg.value;
    this.refresh();
  },
  
  onClickUp: function()
  {
    conInfo( "iseFrequency: onClickUp()" );
    // this.state = (this.slider.n_value/this.factor);
    this.state = Math.round(this.state  + 100); 
    if (this.state > this.max)
      this.state = this.max;

    this.refresh();
  },
  
  onClickDown: function()
  {
    conInfo( "iseFrequency: onClickDown()" );
    // this.state = (this.slider.n_value/this.factor);
    this.state = Math.round(this.state - 100); 
    if (this.state < this.min)
      this.state = this.min;

    this.refresh();
  },
  
  onPercChange: function()
  {
    conInfo( "iseFrequency: onPercChange()" );
    if( isNaN(this.txtDeg.value) ) return;
    if( parseInt(this.txtDeg.value) > this.max ) this.txtDeg.value = this.max;
    if( parseInt(this.txtDeg.value) < this.min ) this.txtDeg.value = this.min;
    this.state = this.txtDeg.value;
    this.refresh();
  },
  
  update: function(newVal)
  {
    conInfo( "iseFrequency: update()" );
    this.state = newVal;
    this.refresh(newVal);
  },
  
  refresh: function(setstate)
  {
    conInfo( "iseFrequency: refresh()"+this.state );
    if(this.state < 0){ this.state = 0; }
    if (this.state > this.max) this.state = this.max;
    this.slider.f_setValue((this.state -this.min) * this.factor, true);
    this.txtDeg.value = round(this.state,2);
    if(typeof setstate == "undefined")
    {
      conInfo("setting DP "+this.lvlDP+" State -------> " + this.state);
      setDpState(this.lvlDP, (this.state));
    }
  }
};
/**
 * ise/iseButtonsDoorContact.js
 **/

/**
 * @fileOverview ?
 * @author ise
 **/

/**
 * @class
 **/ 
iseButtonsDoorContact = Class.create();

iseButtonsDoorContact.prototype = {
  /*
   * id = datapoint-ID of switch
   * initState = Creation State (0 or 1)
   */
  initialize: function(id, initState)
  {
    this.id = id;
    this.state = initState;
    this.divOpen = $(this.id + "Open");
    this.divClosed = $(this.id + "Closed");
    
    if( this.state > 0 )
    {
      ControlBtn.on(this.divOpen);
    }
    else 
    {
      ControlBtn.on(this.divClosed);
    }
  }
};/**
 * ise/iseButtonsWindow.js
 **/

/**
 * @fileOverview ?
 * @author ise
 **/

/* * * * * * * * * * * * * * * * * * * * * * * *
 * iseButtonsWindow                            *
 * * * * * * * * * * * * * * * * * * * * * * * */

/**
 * @class
 **/ 
iseButtonsWindow = Class.create();

iseButtonsWindow.prototype = {
  /*
   * id = datapoint-ID of switch
   * initState = Creation State (0 or 1)
   */
  initialize: function(id, initState) {
    this.id = id;
    this.state = initState;
    this.divOpenH = $(this.id + "OpenH");
    this.divOpenV = $(this.id + "OpenV");
    this.divClosed = $(this.id + "Closed");
    
    switch (initState) {
      case 0:
        ControlBtn.on(this.divClosed);
        break;
      case 1:
        ControlBtn.on(this.divOpenV);
        break;
      case 2:
        ControlBtn.on(this.divOpenH);
        break;
      default:
        break;
    }    
  }
};

/* * * * * * * * * * * * * * * * * * * * * * * *
 * iseButtonsShutter                           *
 * * * * * * * * * * * * * * * * * * * * * * * */
 
/**
 * @class
 **/
iseButtonsShutter= Class.create();

iseButtonsShutter.prototype = {
  /*
   * id = datapoint-ID of switch
   * initState = Creation State (0 or 1)
   */
  initialize: function(id, initState, dpLevel, dpStop, iViewOnly) {
    
    this.id = id;
    this.state = initState;
    this.dpLevel = dpLevel;
    this.dpStop = dpStop;
    this.Perc = $(this.id + "Perc");
    this.divPercUp = $(this.id + "PercUp");
    this.divPercDown = $(this.id + "PercDown");
    this.divStop = $(this.id + "Stop");
    this.divUp = $(this.id + "Up");
    this.divDown = $(this.id + "Down");
    
    this.shutter = new shutterControl(id, initState);
    this.Perc.value = initState;
    this.shutter.setValue(initState);
    
    // Add event handlers
    if (iViewOnly === 0)
    {
      this.clickCtrl = this.onClickShutter.bindAsEventListener(this);
      Event.observe(this.shutter.divShutterBg, 'mousedown', this.clickCtrl);
       
      this.clickPercUp = this.onClickPercUp.bindAsEventListener(this);
      Event.observe(this.divPercUp, 'click', this.clickPercUp);
      this.clickPercDown = this.onClickPercDown.bindAsEventListener(this);
      Event.observe(this.divPercDown, 'click', this.clickPercDown);
      this.changePerc = this.onChangePerc.bindAsEventListener(this);
      Event.observe(this.Perc, 'change', this.changePerc);
      
      this.clickUp = this.onClickUp.bindAsEventListener(this);
      Event.observe(this.divUp, 'mousedown', this.clickUp);
      this.clickDown = this.onClickDown.bindAsEventListener(this);
      Event.observe(this.divDown, 'mousedown', this.clickDown);
      
      this.clickStop = this.onClickStop.bindAsEventListener(this);
      Event.observe(this.divStop, 'mousedown', this.clickStop);
    }
  },
  
  onClickShutter: function(ev) {
    var pos = Position.page(this.shutter.divShutterBg);
    var offset = ev.clientY - pos[1];
    var val = 100 - (( offset * 100 ) / this.shutter.MAX_HEIGHT);  
    var setVal = 0;
    if ( (val >  0) && ( val <= 20) ) setVal = 0;
    if ( (val > 20) && ( val <= 40) ) setVal = 25;
    if ( (val > 40) && ( val <= 60) ) setVal = 50;
    if ( (val > 60) && ( val <= 80) ) setVal = 75;
    if ( (val > 80) && ( val <= 100) ) setVal = 100;
    this.state = setVal;
    this.Perc.value = this.state;
    this.shutter.setValue(this.state);
    this.saveValue();
  },
  
  onClickPercUp: function() {
    this.state += 10; 
    if (this.state > 100)
      this.state = 100;
    this.Perc.value = this.state;
    this.shutter.setValue(this.state);
    this.saveValue();
  },
  
  onClickPercDown: function() {
    this.state -= 10; 
    if (this.state < 0)
      this.state = 0;
    this.Perc.value = this.state;
    this.shutter.setValue(this.state);
    this.saveValue();
  },
  
  onChangePerc: function() {
    if (isNaN(this.Perc.value)) { return; }
    this.state = parseInt(this.Perc.value);
    this.shutter.setValue(this.state);
    this.saveValue();
  },
    
  onClickUp: function() {
    this.state = 100;
    this.Perc.value = this.state;
    ControlBtn.pushed(this.divUp);
    this.shutter.setValue(this.state);
    this.saveValue();
    var t = this;
    new PeriodicalExecuter(function(pe) {
      ControlBtn.off(t.divUp);
      pe.stop();
    }, 1);
  },
  
  saveValue: function() {
    setDpState(this.dpLevel, this.state / 100);
  },
  
  onClickDown: function() {
    this.state = 0;
    this.Perc.value = this.state;
    this.shutter.setValue(this.state);
    this.saveValue();
    var t = this;
    ControlBtn.pushed(this.divDown);
    new PeriodicalExecuter(function(pe) {
      ControlBtn.off(t.divDown);
      pe.stop();
    }, 1);
  },
  
  onClickStop: function() {
    ControlBtn.pushed(this.divStop);
    setDpState(this.dpStop, 1);
    var t = this;
    new PeriodicalExecuter(function(pe) {
      ControlBtn.off(t.divStop);
      pe.stop();
    }, 1);
  }
};

/* * * * * * * * * * * * * * * * * * * * * * * *
 * iseButtonsWinMatic                          *
 * * * * * * * * * * * * * * * * * * * * * * * */

/**
 * @class
 **/ 
iseButtonsWinMatic= Class.create();

iseButtonsWinMatic.prototype = {
  /*
   * id = datapoint-ID of switch
   * initState = Creation State (0 or 1)
   */
  initialize: function(id, opts, iViewOnly)
  {
    this.Window = "WinMatic";
    conInfo(this.Window);
    this.id = id;
    this.opts = opts;
    this.Circle = $(this.id + "Circle");
    this.Perc = $(this.id + "Perc");
    this.divPercUp = $(this.id + "PercUp");
    this.divPercDown = $(this.id + "PercDown");
    this.divStop = $(this.id + "Stop");
    this.divOpen = $(this.id + "Open");
    this.divClose = $(this.id + "Close");
    this.divLocked = $(this.id + "Locked");
    this.divUnknown = $(this.id + "Unknown");
    this.state = this.opts.stLevel * 100;
    Released = false;
    // Draw WinMatic Control
    var s = "<div id='spec"+this.id+"'><div id='"+this.id+"Ctrl' style='position:relative;top:0px;left:0px;line-height:0;background-color: White; width:100px;height:100px;'>" +
            "<img src='/ise/img/window/circle.png' /></div></div>";
    this.Circle.innerHTML = s;
    this.graphics = new jsGraphics(this.id+"Ctrl");
    this.graphics.setColor(WebUI.getColor("active")); // grün
    
    // Add event handlers
    if (iViewOnly === 0) {
      this.bindEvents();
      this.initSpecialDevice();
    }
    this.refresh(false);
  },

  onClickCtrl: function(ev) {
    var pos = Position.page(this.Circle);
    var offsetX = ev.clientX - pos[0];
    var offsetY = ev.clientY - pos[1];
    if (offsetX < 60)
      this.state = 0;
    else {
      if (this.isInZone50(offsetX, offsetY) ) 
        this.state = 50;
      else
        this.state = 100;
    }
    this.refresh();    
  },
  
  isInZone50: function(x, y)
  {
    var px = x;
    var py = y;
    var x1 = 57;
    var y1 = 0;
    var x2 = 57;
    var y2 = 100;
    var x3 = 120;
    var y3 = 0;

    var fAB = (py-y1)*(x2-x1) - (px-x1)*(y2-y1);
    var fCA = (py-y3)*(x1-x3) - (px-x3)*(y1-y3);
    var fBC = (py-y2)*(x3-x2) - (px-x2)*(y3-y2);

    var bRet = false;
    if ( (fAB*fBC > 0) && (fBC*fCA > 0) )
    {
      bRet = true;
    }
    return bRet;
  },
  
  onClickPercUp: function()
  {
    this.state += 10; 
    if( this.state > 100 ) this.state = 100;
    this.Perc.value = this.state;
    this.refresh();
  },
  
  onClickPercDown: function()
  {
    this.state -= 10; 
    if( this.state < 0 ) this.state = 0;
    this.refresh();
  },
  
  onChangePerc: function()
  {
    if( !isNaN( this.Perc.value ) )
    {
      var iTmp = parseInt(this.Perc.value);
      if (iTmp < 0)
        iTmp = 0;
      this.state = iTmp;
      this.refresh();
    }
  },
  
  onClickOpen: function() {
    this.state = 100;
    ControlBtn.pushed(this.divOpen);
    var t = this;
    new PeriodicalExecuter(function(pe) {
      ControlBtn.off(t.divOpen);
      t.refresh();
      pe.stop();
    }, 1);
  },
  
  onClickClose: function() {
    this.state = 0;
    this.Perc.value = this.state;
    ControlBtn.pushed(this.divClose);
    var t = this;
    new PeriodicalExecuter(function(pe) {
      ControlBtn.off(t.divClose);
      t.refresh();
      pe.stop();
    }, 1);
  },
  
  onClickStop: function()
  {
    var t = this;
    conInfo( this.Window + " OnClickStop [ID:"+this.opts.idStop+"]" );
    setDpState(this.opts.idStop, 1);
    ControlBtn.pushed(this.divStop);
    new PeriodicalExecuter(function(pe)
    {
      ControlBtn.off(t.divStop);
      pe.stop();
    }, 1);
  },
  
  onClickLock: function() {
    ControlBtn.pushed(this.divLocked);
    this.state = -5;
    var t = this;
    new PeriodicalExecuter(function(pe) {
      ControlBtn.off(t.divLocked);
      t.refresh();
      pe.stop();
    }, 1);
  },

  bindEvents: function() {
    this.clickCtrl = this.onClickCtrl.bindAsEventListener(this);
    Event.observe(this.Circle, 'mousedown', this.clickCtrl);

    this.clickPercUp = this.onClickPercUp.bindAsEventListener(this);
    Event.observe($(this.id + "PercUp"), 'click', this.clickPercUp);
    this.clickPercDown = this.onClickPercDown.bindAsEventListener(this);
    Event.observe($(this.id + "PercDown"), 'click', this.clickPercDown);
    this.changePerc = this.onChangePerc.bindAsEventListener(this);
    Event.observe(this.Perc, 'change', this.changePerc);

    this.clickOpen = this.onClickOpen.bindAsEventListener(this);
    Event.observe($(this.id + "Open"), 'mousedown', this.clickOpen);

    this.clickClose = this.onClickClose.bindAsEventListener(this);
    Event.observe($(this.id + "Close"), 'mousedown', this.clickClose);

    this.clickLock = this.onClickLock.bindAsEventListener(this);
    Event.observe($(this.id + "Locked"), 'mousedown', this.clickLock);

    this.clickStop = this.onClickStop.bindAsEventListener(this);
    Event.observe($(this.id + "Stop"), 'mousedown', this.clickStop);
  },


  initSpecialDevice: function() {},

  refresh: function(bRefresh)
  {
    this.Perc.value = this.state;
    if (this.state == -5 || this.state == -0.5 || isNaN(this.state))
    {
      this.Perc.value = "0";
    }


    this.graphics.clear();
    var startAngle = 90 - (this.state * 0.45);
    if( (startAngle > 0) && (startAngle < 90))
    {
      // verhindern dass ein voller Kreis gezeichnet wird
      this.graphics.fillArc(-65, 5, 188, 179 , startAngle, 90);
    }
    this.graphics.paint();

    if( typeof( bRefresh ) == "undefined" )
    {
      setDpState(this.opts.idLevel, (this.state / 100));
    }
    if (this.state == -0.5)
    {
      // Zustand verriegelt ??
      ControlBtn.off(this.divOpen);
      ControlBtn.on(this.divClose);
      ControlBtn.on(this.divLocked);
    }
    else
    {
      ControlBtn.off(this.divLocked);
      if (this.state > 0)
      {
        ControlBtn.on(this.divOpen);
        ControlBtn.off(this.divClose);
      }
      else
      {
        ControlBtn.off(this.divOpen);
        ControlBtn.on(this.divClose);
      }
    }

    if( this.opts.stUncertain )
    {
      ControlBtn.on(this.divUnknown);
    }
    else
    {
      ControlBtn.off(this.divUnknown);
    }
  }
};

iseButtonsWin_SC = Class.create(iseButtonsWinMatic, {

  initSpecialDevice: function() {
    this.Window = "WIN_SC";
    conInfo(this.Window);
    this.LEDMode1 = $(this.id + "LEDMode1");
    this.LEDMode2 = $(this.id + "LEDMode2");
    this.LEDMode3 = $(this.id + "LEDMode3");
    this.SummerMode = $(this.id + "SummerMode");
    this.WinterMode = $(this.id + "WinterMode");
    this.HandleLock = $(this.id + "HandleLock");
    this.HandleUnlock = $(this.id + "HandleUnlock");
    this.Open = $(this.id + "Open");
    this.Close = $(this.id + "Close");
    this.Release = $(this.id + "Release");
    this.elmHH = jQuery("#winterModeHH");
    this.elmMM = jQuery("#winterModeMM");
    this.elmSS = jQuery("#winterModeSS");
    this.initControls();
    this.bindAdditionalEvents();
  },


  initControls: function() {
    var controls = [
      this.LEDMode1,
      this.LEDMode2,
      this.LEDMode3,
      this.SummerMode,
      this.WinterMode,
      this.HandleLock,
      this.HandleUnlock
      //this.Open,
      //this.Close,
      //this.Release
    ];

    // All off
    jQuery(controls).each(function(){
      ControlBtn.off(this);
    });

    switch (this.opts.stLEDMode.toString()) {
      case "0" :
        ControlBtn.on(this.LEDMode1);
        break;
      case "1" :
        ControlBtn.on(this.LEDMode2);
        break;
      case "2" :
        ControlBtn.on(this.LEDMode3);
        break;
    }

    if (this.opts.stWinterMode != 111600) {
      ControlBtn.on(this.WinterMode);
      this.setValueWinterMode(true);
    } else {
      ControlBtn.on(this.SummerMode);
      this.setValueWinterMode(false);
    }

    if (this.opts.stHandleLock) {
      ControlBtn.on(this.HandleLock);
    } else {
      ControlBtn.on(this.HandleUnlock);
    }

    // Window is released
    /*
    if (this.opts.stRelease) {
      ControlBtn.on(this.Release);
      ControlBtn.off(this.Open);
      ControlBtn.off(this.Close);
    } else {
      // Window is either closed or open
      ControlBtn.off(this.Release);

      if (this.opts.stLevel <= 0) {
        // Window is closed
        ControlBtn.on(this.Close);
        ControlBtn.off(this.Open);
      } else {
        // Window is open
        ControlBtn.on(this.Open);
        ControlBtn.off(this.Close);
      }
    }
    */
  },

  /**
   * Sets the input fields for the time of the winter mode control
   * @param bMode true = winter mode - false = summer mode
   */
  setValueWinterMode: function(bMode) {
    if (bMode) {
      var oTime = this.getHHMMSSWinterMode();
      this.elmHH.val(oTime.hh);
      this.elmMM.val(oTime.mm);
      this.elmSS.val(oTime.ss);
    } else {
      this.elmHH.val("18");
      this.elmMM.val("12");
      this.elmSS.val("15");
    }
  },

  getHHMMSSWinterMode: function() {
    var s = this.opts.stWinterMode;
    var h = Math.floor(s/3600);
    s -= h*3600;
    var m = Math.floor(s/60);
    s -= m*60;
    return {"hh" : h, "mm":m, "ss": s};
  },

  getSecondsWinterMode: function() {
    return (parseInt(this.elmHH.val() * 3600)) + (parseInt(this.elmMM.val() * 60)) + parseInt(this.elmSS.val());
  },

  checkValue: function(val) {

    switch (val) {
      case "hh" :
          var val = parseInt(this.elmHH.val());
          if (val > 18) {this.elmHH.val("18");break;}
          if (val < 0 ) {this.elmHH.val("0");break;}
          if (isNaN(val)) {this.elmHH.val("0");}
        break;
      case "mm" :
        var val = parseInt(this.elmMM.val());
        if (val > 59) {this.elmMM.val("59");break;}
        if (val < 0 ) {this.elmMM.val("0");break;}
        if (isNaN(val)) {this.elmMM.val("0");}
        break;
      case "ss" :
        var val = parseInt(this.elmSS.val());
        if (val > 59) {this.elmSS.val("59");break;}
        if (val < 0 ) {this.elmSS.val("0");break;}
        if (isNaN(val)) {this.elmSS.val("0");}
        break;
    }
  },

  bindAdditionalEvents : function() {
    var self = this;

    this.clickWinRelease = this.onClickWinRelease.bindAsEventListener(this);
    Event.observe($(this.id + "Release"), 'mousedown', this.clickWinRelease);

    this.clickHandleUnlock = this.onClickHandleUnlock.bindAsEventListener(this);
    Event.observe($(this.id + "HandleUnlock"), 'mousedown', this.clickHandleUnlock);

    this.clickHandleLock = this.onClickHandleLock.bindAsEventListener(this);
    Event.observe($(this.id + "HandleLock"), 'mousedown', this.clickHandleLock);

    this.clickSummerMode = this.onClickSummerMode.bindAsEventListener(this);
    Event.observe(this.SummerMode, 'mousedown', this.clickSummerMode);

    this.clickWinterMode = this.onClickWinterMode.bindAsEventListener(this);
    Event.observe(this.WinterMode, 'mousedown', this.clickWinterMode);

    this.clickLEDMode1 = this.onClickLEDMode1.bindAsEventListener(this);
    Event.observe(this.LEDMode1, 'mousedown', this.clickLEDMode1);

    this.clickLEDMode2 = this.onClickLEDMode2.bindAsEventListener(this);
    Event.observe(this.LEDMode2, 'mousedown', this.clickLEDMode2);

    this.clickLEDMode3 = this.onClickLEDMode3.bindAsEventListener(this);
    Event.observe(this.LEDMode3, 'mousedown', this.clickLEDMode3);

    this.elmHH.bind("blur", function() {self.checkValue("hh");});
    this.elmMM.bind("blur", function() {self.checkValue("mm");});
    this.elmSS.bind("blur", function() {self.checkValue("ss");});

  },

  onClickOpen: function() {
    if (Released == undefined || Released == false) {
      this.state = 100;
      setDpState(this.opts.idLevel, (this.state / 100));
    }
  },

  onClickClose: function() {
    if (Released == undefined || Released == false) {
      this.state = 0;
      this.Perc.value = this.state;
      setDpState(this.opts.idLevel, (this.state / 100));
    }
  },

  _onClickWinRelease : function() {
      //setDpState(this.opts.idRelease, true);
      setDpState(this.opts.idRelease, 1);
      if (this.state > 0) {
        ControlBtn.off(this.Open);
        ControlBtn.off(this.Close);
        ControlBtn.on(this.Release);
      }
  },

  onClickWinRelease : function() {
     setDpState(this.opts.idRelease, 1);
  },

  onClickHandleUnlock : function() {
    //alert("HANDLE UNLOCK");
    setDpState(this.opts.idHandleLock, false);
    //ControlBtn.pushed(this.HandleUnlock);
    //ControlBtn.on(this.HandleUnlock);
    //ControlBtn.off(this.HandleLock);
  },

  onClickHandleLock : function() {
    //alert("HANDLE LOCK");
    setDpState(this.opts.idHandleLock, true);
    //ControlBtn.pushed(this.HandleLock);
    //ControlBtn.off(this.HandleUnlock);
    //ControlBtn.on(this.HandleLock);
  },

  onClickSummerMode : function() {
    //alert("Summer Mode");
    setDpState(this.opts.idWinterMode, 111600);
    ControlBtn.pushed(this.SummerMode);
    var t = this;
    new PeriodicalExecuter(function(pe) {
      //ControlBtn.on(t.SummerMode);
      //ControlBtn.off(t.WinterMode);
      pe.stop();
    }, 1);
  },

  onClickWinterMode : function() {
    //alert("Winter Mode");
    fixTimeForWinterMode = 600;

    this.checkValue("hh");
    this.checkValue("mm");
    this.checkValue("ss");

    //setDpState(this.opts.idWinterMode, this.getSecondsWinterMode()); // for development only

    setDpState(this.opts.idWinterMode, fixTimeForWinterMode);
    ControlBtn.pushed(this.WinterMode);
    var t = this;
    new PeriodicalExecuter(function(pe) {
      //ControlBtn.off(t.SummerMode);
      //ControlBtn.on(t.WinterMode);
      pe.stop();
    }, 1);
  },

  onClickLEDMode1 : function() {
    // LED OFF
    conInfo("WIN_SC.HANDLE_LED_MODE 0");
    setDpState(this.opts.idLEDMode, 0);
    ControlBtn.pushed(this.LEDMode1);
    var t = this;
    new PeriodicalExecuter(function(pe) {
      //ControlBtn.on(t.LEDMode1);
      //ControlBtn.off(t.LEDMode2);
      //ControlBtn.off(t.LEDMode3);
      pe.stop();
    }, 1);
  },

  onClickLEDMode2 : function() {
    // LED LOW
    conInfo("WIN_SC.HANDLE_LED_MODE 1");
    setDpState(this.opts.idLEDMode, 1);
    ControlBtn.pushed(this.LEDMode2);
    var t = this;
    new PeriodicalExecuter(function(pe) {
     //ControlBtn.off(t.LEDMode1);
     //ControlBtn.on(t.LEDMode2);
     //ControlBtn.off(t.LEDMode3);
      pe.stop();
    }, 1);
  },

  onClickLEDMode3 : function() {
    // LED ON
    conInfo("WIN_SC.HANDLE_LED_MODE 2");
    setDpState(this.opts.idLEDMode, 2);
    ControlBtn.pushed(this.LEDMode3);
    var t = this;
    new PeriodicalExecuter(function(pe) {
      //ControlBtn.off(t.LEDMode1);
      //ControlBtn.off(t.LEDMode2);
      //ControlBtn.on(t.LEDMode3);
      pe.stop();
    }, 1);
  },

  onClickPercUp: function()
  {
    if (this.state <= 0) {
      this.state = 20;
    } else {
      this.state += 10;
    }
    if( this.state > 100 ) this.state = 100;
    this.Perc.value = this.state;
    this.refresh();
  },

  onClickPercDown: function()
  {
    if (this.state >= 30) {
      this.state -= 10;
    } else {
      this.state-= 20;
    }
    if( this.state < 0 ) this.state = 0;
    this.refresh();
  }

});

iseButtonsWin_SC_SENSOR = Class.create(iseButtonsWinMatic, {

  initSpecialDevice: function() {
    this.Window = "WIN_SC_SENSOR";
    conInfo(this.Window);
    this.imgWinClosed = "/ise/img/window/closed.png";
    this.imgWinOpen = "/ise/img/window/open_v.png";
    this.imgWinReleased = "/ise/img/window/open_h.png";

    //this.Open = $(this.id + "Open");
    //this.Close = $(this.id + "Close");
    this.stateIndicatorImgElem = jQuery("#" + this.id + "stateIndicatorImg");
    this.stateIndicatorDescrElem = jQuery("#" + this.id + "stateIndicatorDescr");
    this.stateDescrElem = jQuery("#" + this.id + "stateDescr");
    this.windowTypeDescr = jQuery("#" + this.id + "windowType");


    this.level = (this.state < 0 ) ? 0 : this.state;

    jQuery("#" + this.id + "lblPerc").html("Öffnungs-<br/>winkel<br/>" + this.level);
    this.initControls();
  },

  initControls: function() {
    var tmpLevel;

    var release = $$(".j_winSC_Release")[0],
      open = jQuery(".j_winSC_Open")[0],
      close = jQuery(".j_winSC_Close")[0],
      perc = jQuery(".j_winSC_Perc")[0],

      codeReleasedDue = 9,
      codeReleased = 10;

    // Window released
    if ((this.opts.stTipTronicState == codeReleased) || (this.opts.stTipTronicState == codeReleasedDue)) {
      Released = true;
      ControlBtn.on(release);
      ControlBtn.off(open);
      ControlBtn.off(close);

      this.stateIndicatorImgElem.attr('src', this.imgWinReleased);
      this.stateIndicatorDescrElem.html(translateKey("actionStatusControlReleased"));
    } else {
      Released = false;
      new PeriodicalExecuter(function(pe) {
        ControlBtn.off(release); // channel 1
        pe.stop();
      }, 1);
      tmpLevel = this.level;
      // Window open
      if (parseInt(tmpLevel) > 0) {
        ControlBtn.on(open); // channel 1
        ControlBtn.off(close); // channel 1
        ControlBtn.off(release); // channel 1

        this.stateIndicatorImgElem.attr('src', this.imgWinOpen);
        this.stateIndicatorDescrElem.html(translateKey("actionStatusControlOpenB") + "<br/>" + this.level + "%");
      } else {
        // window closed
        ControlBtn.on(close); // channel 1
        ControlBtn.off(open); // channel 1
        ControlBtn.off(release); // channel 1
        this.stateIndicatorImgElem.attr('src', this.imgWinClosed);
        this.stateIndicatorDescrElem.html(translateKey("actionStatusControlClosed"));
      }
    }
    jQuery(perc).val(this.level);
    this.stateDescrElem.html(translateKey("stringTableActorWindowTT_"+this.opts.stTipTronicState));
    this.windowTypeDescr.html(translateKey("stringTableSensorWindowType_"+this.opts.stWindowType));

  },

  // No action when clicking the buttons
  onClickCtrl: function() {},
  onClickOpen: function() {},
  onClickClose : function() {}
});/**
 * ise/iseButtonsKeyMatic.js
 **/

/**
 * @fileOverview ?
 * @author ise
 **/

/* * * * * * * * * * * * * * * * * * * * * * * *
 * iseButtonsKeyMatic                          *
 * * * * * * * * * * * * * * * * * * * * * * * */

/**
 * @class Bedien-Control für die KeyMatic
 **/ 
iseButtonsKeyMatic = Class.create();

iseButtonsKeyMatic.prototype = {
  /*
   * id = ID of KeyMatic
   */
  initialize: function(id, opts, iViewOnly) {
    this.id = id;
    this.opts = opts;
    this.divOpen = $(opts.idState + "Open");
    this.divClosed = $(opts.idState + "Close");
    this.divOpenDoor = $(opts.idOpen + "OpenDoor");
    this.divStatusIndefinite = $(opts.idUncertain + "na");
        
    if (iViewOnly === 0)
    {
      this.clickClose = this.onClickClose.bindAsEventListener(this);
      Event.observe(this.divClosed, 'mousedown', this.clickClose);
      
      this.clickOpen = this.onClickOpen.bindAsEventListener(this);
      Event.observe(this.divOpen, 'mousedown', this.clickOpen);
      
      this.clickDoorOpen = this.onClickDoorOpen.bindAsEventListener(this);
      Event.observe(this.divOpenDoor, 'mousedown', this.clickDoorOpen);
    }
    
    if (opts.stState == 1)
    { 
      ControlBtn.on(this.divOpen);
    }
    else
    {
      ControlBtn.on(this.divClosed);
    }
    
    if (opts.stUncertain == 1) {
      ControlBtn.on(this.divStatusIndefinite);
    }
    if (opts.stOpen == 1) {
      ControlBtn.on(this.divOpenDoor);
    }
  },
  
  onClickClose: function() {
    ControlBtn.pushed(this.divClosed);
    setDpState (this.opts.idState, 0);
    var t = this;
    new PeriodicalExecuter(function(pe) {
      ControlBtn.on(t.divClosed);
      ControlBtn.off(t.divOpen);
      pe.stop();
    }, 1);
  },
  
  onClickOpen: function() {
    ControlBtn.pushed(this.divOpen);
    setDpState (this.opts.idState, 1);
    var t = this;
    new PeriodicalExecuter(function(pe) {
      ControlBtn.on(t.divOpen);
      ControlBtn.off(t.divClosed);
      pe.stop();
    }, 1);
  },
  
  onClickDoorOpen: function() {
    ControlBtn.pushed(this.divOpenDoor);
    setDpState(this.opts.idOpen, 1);
    var t = this;
    new PeriodicalExecuter(function(pe) {
			if (t.opts.stOpen == 1) { ControlBtn.on(t.divOpenDoor); }
			else                    { ControlBtn.off(t.divOpenDoor); }
      pe.stop();
    }, 1);
  }
};
/**
 * ise/DoorOpener.js
 * Türöffner.
 **/

/**
 * @fileOverview ?
 * @author ise
 **/

/**
 * @class Bedien-Control für den Türöffner
 **/ 
DoorOpenerControl = Class.create();
DoorOpenerControl.prototype = {

  /**
   * Konstruktor.
   *   channelId  : Id des Türöffners (Kanal)
   *   dataPointId: Id des Datenpunkts DOOROPENER.STATE
   *   iViewOnly  :     0: Control bedienbar
   *                sonst: Control nicht bedienbar
   **/
  initialize: function(channelId, dataPointId, iViewOnly) 
  {
    this.channelId     = channelId;
    this.dataPointId   = dataPointId;
    this.doorOpenerDiv = $(channelId + "DoorOpener");
    
    if( this.doorOpenerDiv ) { ControlBtn.off(this.doorOpenerDiv); }
    
    if (iViewOnly === 0) 
    {
      this.click = this.onClick.bindAsEventListener(this);
      Event.observe(this.doorOpenerDiv, 'mousedown', this.click);
      Element.setStyle(this.doorOpenerDiv, {"cursor": "pointer"});
    }
  },
  
  /**
   * Ereignis: Click auf this.doorOpenerDiv
   * Öffnet die Tür.
   **/
  onClick: function() 
  {
    setDpState(this.dataPointId, 1);
    ControlBtn.pushed(this.doorOpenerDiv);
    var t = this;
    new PeriodicalExecuter(function(pe) {
      ControlBtn.off(t.doorOpenerDiv);
      pe.stop();
    }, 1);
  }

};
/**
 * ise/iseSysProtoLoader.js
 **/

/**
 * @fileOverview ?
 * @author ise
 **/

/**
 * @class
 **/
iseSysProtoLoader = Class.create();
iseSysProtoLoader.prototype =
{
  initialize: function(sTBody,iCount,bUpdateOnly)
  {
    this.tbody = $(sTBody);
    this.updateOnly = bUpdateOnly;
    this.currentIndex = 0;
    this.count = iCount;
    this.url = "/pages/tabs/control/systemProtocolLoader.htm?sid="+SessionId;
    Cursor.set(Cursor.WAIT);
    if( this.updateOnly )
    {
      this.updateTable();
    }
    else
    {
      arHistoryData = new Array();
      this.loadHistoryData();
    }
  },
  
  loadHistoryData: function()
  {
    var t = this;
    var pb = '';
    pb += 'string sStart = "'+this.currentIndex+'";';
    pb += 'string sCount = "'+this.count+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete: function(transParams)
      {
        transParams.responseText.evalScripts();
        var resp = iseStripAll(transParams.responseText.stripScripts());
//        alert("["+resp+"]");
        var iResponse = parseInt( resp );
        if( isNaN(iResponse) ) { iResponse = 0; }
        if( iResponse !== 0 )
        {
          t.updateTable();
          t.currentIndex += iResponse;
          t.loadHistoryData();
        }
        else
        {
          Cursor.set(Cursor.NORMAL);
          if( !t.updateOnly ) DivSort("sqldate");
        }
      }
    };
    new Ajax.Updater("dummy",this.url,opts);
  },
  
  updateTable: function()
  {
    if( this.updateOnly )
    {
      arTempHistoryData = arHistoryData;
    }
    for (var i = 0; i < arTempHistoryData.length; i++)
    {
      var sName = arTempHistoryData[i]['name'];
      var sValue = arTempHistoryData[i]['value'];
      var sDateTime = arTempHistoryData[i]['datetime'];
      var sDate = arTempHistoryData[i]['date'];
      var sTime = arTempHistoryData[i]['time'];
      
      var tr = Builder.node('tr', {id:  arTempHistoryData[i]['trid']} );
      var td;
      
      if( this.tbody.id == "sysprotopreview" )
      {
        td = Builder.node('td', {className: "GrayBkg"}, sDate+" "+sTime);
        tr.appendChild(td);        
      }
      else
      {
        td = Builder.node('td', {className: "GrayBkg"}, sTime);
        tr.appendChild(td);
  
        td = Builder.node('td', {className: "GrayBkg"}, sDate);
        tr.appendChild(td);
      }
  
      td = Builder.node('td', {className: "GrayBkg"}, translateString(sName));
      tr.appendChild(td);
  
      var div = document.createElement("div");
      //div.innerHTML = sValue;
      div.innerHTML = translateString(sValue) ;
      td = Builder.node('td', {className: "GrayBkg"}, div);
      Element.setStyle(td, {textAlign: "left", paddingLeft: "6px"});
      tr.appendChild(td);
      
      if( this.tbody )
      {
        this.tbody.appendChild(tr);
      }
    }
    if( this.updateOnly ) Cursor.set(Cursor.NORMAL);
    updateTable();
    arTempHistoryData = new Array();
  }
};
/**
 * ise/iseChannelLoader.js
 **/

/**
 * @fileOverview ?
 * @author ise
 **/

/**
 * @class
 **/ 
iseChannelLoader = Class.create();
iseChannelLoader.prototype =
{
  initialize: function(sTBody,iCountPerUpdate,bUpdateOnly)
  {
    this.tbody = $(sTBody);
    this.updateOnly = bUpdateOnly;
    this.currentIndex = 0;
    this.count = iCountPerUpdate;
    this.url = "/pages/tabs/statusviews/channelLoader.htm?sid="+SessionId;
    Cursor.set(Cursor.WAIT);
    if( this.updateOnly )
    {
      this.updateTable();
    }
    else
    {
      arChannels = new Array();
      this.loadChannels();
    }
  },
  loadChannels: function()
  {
    var t = this;
    var pb = '';
    pb += 'string sStart = "'+this.currentIndex+'";';
    pb += 'string sCount = "'+this.count+'";';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete: function(transParams)
      {
        transParams.responseText.evalScripts();
        var resp = iseStripAll(transParams.responseText.stripScripts());
        //alert("["+resp+"]");
        if( resp != "0" )
        {
          t.updateTable();
          t.currentIndex += parseInt(resp,10);
          t.loadChannels();
        }
        else
        {
          Cursor.set(Cursor.NORMAL);
          if( !t.updateOnly ) DivSort("name");
        }
      }
    };
    new Ajax.Updater("dummy",this.url,opts);
  },
  updateTable: function()
  {
    if( this.updateOnly )
    {
      arTempChannels = arChannels;
    }
    for (var i = 0; i < arTempChannels.length; i++)
    {
      var tr = Builder.node('tr', {id: 'tr'+arTempChannels[i]['id']} );
      var td;
      
      var sName = arTempChannels[i]['name'];
      td = Builder.node('td', {className: "GrayBkg"}, sName);
      tr.appendChild(td);
      
      var sRooms = arTempChannels[i]['rooms'];
      td = Builder.node('td', {className: "GrayBkg"}, sRooms);
      tr.appendChild(td);
      
      var sFunctions = arTempChannels[i]['funcs'];
      td = Builder.node('td', {className: "GrayBkg"}, sFunctions);
      tr.appendChild(td);
      
      var sLastTime = arTempChannels[i]['lasttime'];
      td = Builder.node('td', {id: 'tmc'+arTempChannels[i]['id'], className: "GrayBkg"}, sLastTime);
      tr.appendChild(td);
      
      var sDatapoint = arTempChannels[i]['id'];
      td = Builder.node('td', {id: 'dpc'+arTempChannels[i]['id'], className: "GrayBkg"});
      tr.appendChild(td);
      
      if( this.tbody ) this.tbody.appendChild(tr);
      
      recreateControl(arTempChannels[i]['id'],sLastTime);
    }
    
    if( this.updateOnly ) Cursor.set(Cursor.NORMAL);
    arTempChannels = new Array();
  }
};
/**
 * ise/shutterControl.js
 **/

/**
 * @fileOverview ?
 * @author ise
 **/

/**
 * @class
 **/
shutterControl = Class.create();

shutterControl.prototype = {

  m_color: WebUI.getColor("shutterOpeningDegree"),
  
  /*
   * id = id of div containing shutter-image
   * initState 
   */
  initialize: function(id, initState) {
    this.MAX_HEIGHT = 100;
    this.state = initState;
    

    $("shutter" + id).innerHTML = "<div id='shutterBg" + id + "' style='width:139px;height:"+this.MAX_HEIGHT+"px;background-image:url(/ise/img/shutterCtrl.png);'>" +
        "<div style='text-align:left;' id='spec"+id+"'><div id='shutterCtrl" +id +"' style='border-bottom:solid 1px Black;width:98px;height:"+ parseInt(this.MAX_HEIGHT - 1) + "px;background-color:" + this.m_color + ";position:relative;left:1px;top:1px;'></div>" +
        "</div></div>";
    this.divShutter = $("shutterCtrl" + id);
    this.divShutterBg = $("shutterBg" + id);
  },
  
  setValue: function(val) {
    this.state = val;
    this.divShutter.style.height = parseInt(this.MAX_HEIGHT - (val * (this.MAX_HEIGHT / 100))) + "px";
  }
};/**
 * ise/channelLoader.js
 **/

/**
 * @fileOverview ?
 * @author ise
 **/
 
/**
 * @class
 **/
channelLoader = Class.create();

channelLoader.prototype = {
  /*
   * id = DOM-ID of switch
   * initState = Creation State 
   */
  initialize: function(channelCount) {
    this.channelCount = channelCount;    
    this.currentIndex = 0;
    this.loadChannels(this.currentIndex);
  },

  
  loadChannels: function(index) {
    var url = "";
    var t = this;
    var pb ="";
    //pb += "system.SetSessionVar('sessionIdx', " + this.currentIndex + ");";
    pb += 'string index = "'+index+'";';
    var opts = {
      postBody: ReGa.encode(pb),
      evalScripts: true,
      onComplete: function(transParams) {
        t.currentIndex+=5;
        if (t.currentIndex <= t.channelCount)
        {
          t.loadChannels(t.currentIndex);
        }
        else
        {
          if(FirstSort){FirstSort();}
        }
        Cursor.set(Cursor.NORMAL);
      }
    };
    new Ajax.Updater("dummy", "/pages/tabs/statusviews/channelBody.htm?sid=" + SessionId, opts);
  }
};

/**
 * @class
 **/
newDevChnLoader = Class.create();
newDevChnLoader.prototype = {
  /*
   * id = DOM-ID of switch
   * initState = Creation State 
   */
  initialize: function(channelCount) {
    this.channelCount = channelCount;    
    this.currentIndex = 0;
    this.loadChannels(channelCount);
  },

  
  loadChannels: function(index)
  {
    var url = "";
    var t = this;
    var pb ="";
    pb += "system.SetSessionVar('sessionIdx', '" + this.currentIndex + "');";
    //pb += 'string index = "'+index+'";';
    var opts = {
      postBody: ReGa.encode(pb),
      evalScripts: true,
      onComplete: function(transParams) {
        t.currentIndex+=5;
        if (t.currentIndex <= t.channelCount)
        {
          t.loadChannels(t.currentIndex);
        }
        else
        {
          Cursor.set(Cursor.NORMAL);
        }
      }
    };
    new Ajax.Updater("dummy", "/pages/tabs/admin/views/newdevicechannelsloader.htm?sid=" + SessionId, opts);
  }
};


/**
 * ise/channelPopupLoader.js
 **/

/**
 * @fileOverview ?
 * @author ise
 **/
 
/**
 * @class
 **/
channelPopupLoader = Class.create();
channelPopupLoader.prototype =
{  
  initialize: function(path,colName,bSecondary,operations,channellist)
  {
    this.currentIndex = 0;
    this.count = 5;
    this.path = path;
    this.colName = colName;
    this.operations = operations;
    this.channellist = channellist;
    this.loadArray(this.currentIndex);
  },

  loadArray: function()
  {
    var url = this.path+"?sid="+SessionId;
    var pb = '';
    pb += 'string sStartPos = "'+this.currentIndex+'";';
    pb += 'string sCount = "'+this.count+'";';
    pb += 'string sOperations = "'+this.operations+'";';
    pb += 'string eChannelList = "'+this.channellist+'";';
    var me = this;
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete: function(t)
      {
        t.responseText.evalScripts();
        var resp = iseStripAll(t.responseText.stripScripts());
        if( resp == "stop" )
        {
          ChnSort(ccLastSort);
        }
        else
        {
          me.currentIndex+=me.count;
          me.loadArray();
        }
      }      
    };
    Cursor.set(Cursor.WAIT);
    new Ajax.Updater("dummy",url,opts);
  } 
  
};
/**
 * ise/programPopupLoader.js
 **/

/**
 * @fileOverview ?
 * @author ise
 **/

/**
 * @class
 **/
programPopupLoader = Class.create();
programPopupLoader.prototype =
{
  
  initialize: function(path,colName)
  {
    this.currentIndex = 0;
    this.path = path;
    this.colName = colName;
    this.loadPopupProgram(this.currentIndex);
  },

  loadPopupProgram: function(index)
  {      
    var t = this;    
    var url = t.path+"?sid="+SessionId;
    var pb = '';
    pb += 'integer iCurrentIndex = '+this.currentIndex+';';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete: function(transParams)
      {
        transParams.responseText.evalScripts();
        var resp = iseStripAll(transParams.responseText.stripScripts());
        if( resp == "true" )
        {
          t.currentIndex+=5;
          t.loadPopupProgram(t.currentIndex);
        }
        else
        {          
          t.updateTable();
        }
      }
    };
    new Ajax.Updater("dummy",url,opts);
  },
 
  updateTable: function()
  {
    var tableBody = $("prgBody");
    if( tableBody )
    {
      var count = tableBody.rows.length-1;
      for(var x=count; x > -1; x--)
      {
        tableBody.deleteRow(x);
      }

      IseSort(arProgs,this.colName,false);
      for (var i = 0; i < arProgs.length; i++) 
      {
        var tr = Builder.node('tr', {id: arProgs[i]['trid']});
        //var td = Builder.node('td', {className: 'SysVarsTblPopup'}, strCut(translateString(arProgs[i]['name']) , true) );
        var td = Builder.node('td', {className: 'SysVarsTblPopup'}, translateString(arProgs[i]['name']));
        tr.appendChild(td);
        td = Builder.node('td', {className: 'SysVarsTblPopup'}, arProgs[i]['prginfo']);
        tr.appendChild(td);
        td = Builder.node('td', {className: 'SysVarsTblPopup'},  translateString(arProgs[i]['active']) );
        tr.appendChild(td);
      
        td = Builder.node('td', {className: 'WhiteBkg'}, [
          Builder.node('div', {className: 'StdButton', onclick:"saveDlgResult(" + arProgs[i]['id'] + ");PopupClose();"}, translateKey('btnSelect'))
         ]);
        tr.appendChild(td);

        tableBody.appendChild(tr);       
      }
      Cursor.set(Cursor.NORMAL);   
   } 
  }
  
};
/**
 * ise/sysVarsPopupLoader.js
 **/

/**
 * @fileOverview ?
 * @author ise
 **/

/**
 * @class
 **/
sysVarsPopupLoader = Class.create();

sysVarsPopupLoader.prototype = {
  /*
   * id = DOM-ID of switch
   * initState = Creation State 
   */
  
  initialize: function(path,colName,iSec)
  {
    this.currentIndex = 0;
    this.path = path;
    this.colName = colName;
    this.sec = iSec;
    this.loadPopupsysVars(this.currentIndex);
  },

  loadPopupsysVars: function()
  {      
    var t = this;
    var url = t.path+"?sid="+SessionId;
    var pb = '';
    pb += 'integer iCurrentIndex = '+this.currentIndex+';';
    var opts =
    {
      postBody: ReGa.encode(pb),
      onComplete: function(transParams)
      {
        transParams.responseText.evalScripts();
        var resp = iseStripAll(transParams.responseText.stripScripts());
        if( resp == "true" )
        {
          t.currentIndex+=5;
          t.loadPopupsysVars(t.currentIndex);
        }
        else
        {          
          t.updateTable();
        }
      }
    };
    new Ajax.Updater("dummy",url,opts);
  },
 
  updateTable: function()
  {
    var tableBody = $("sysVarDisplay");
    if( tableBody )
    {
      var count = tableBody.rows.length-1;
      for(var x=count; x > -1; x--)
      {
        tableBody.deleteRow(x);
      }

      IseSort(arSysVars,this.colName,false,true);
      for (var i = 0; i < arSysVars.length; i++) 
      {
        var tr = Builder.node('tr', {id: arSysVars[i]['trid']});
        var td = Builder.node('td', {className: 'SysVarsTblPopup'}, strCut(translateString(arSysVars[i]['name']), true));
        tr.appendChild(td);
        td = Builder.node('td', {className: 'SysVarsTblPopup'}, translateString(arSysVars[i]['desc']));
        tr.appendChild(td);
        td = Builder.node('td', {className: 'SysVarsTblPopup'}, translateString(arSysVars[i]['typenames']));
        tr.appendChild(td);
        td = Builder.node('td', {className: 'SysVarsTblPopup'}, translateString(arSysVars[i]['values']));
        tr.appendChild(td);
        td = Builder.node('td', {className: 'SysVarsTblPopup'}, translateString(arSysVars[i]['unit']));
        tr.appendChild(td);
        
        var sOnclick = "PopupClose();";
        if( this.sec ) sOnclick = "restorePrevious();";
        sOnclick = "saveDlgResult("+arSysVars[i]['id']+");"+sOnclick;
      
        td = Builder.node('td', {className: 'WhiteBkg'}, [
          Builder.node('div', {className: 'StdButton', onclick:sOnclick}, translateKey('btnSelect'))
         ]);
        tr.appendChild(td);

        tableBody.appendChild(tr);       
      }
      Cursor.set(Cursor.NORMAL);   
   }
    
    
  }
};
/**
 * ise/checkUserInput.js
 **/

/**
 * @fileOverview ?
 * @author ise
 **/ 
 
/* 
 * * * checkUserInput.js
 * * * Enthaltene Funktionen
 *
 * checkTemperatureMinMax(input, MinVal, MaxVal)
 *    Überprüft ob Temperatur gültig und innerhalb von MinVal und MaxVal ist
 *
 * checkTemperature(input)
 *    Überprüft Temperatur ohne Min- und Max-Werte
 *    Erlaubt sind Eingaben wie 12, 13, 12C, 12°C, 87F, 87°F (sowie Dezimalwerte)
 * 
 * checkCharOnly(input)
 *
 * checkDigitsOnly(input)
 *
 * checkDecimal(input)
 *    Prüft auf eine Dezimalzahl
 *
 * checkPercentage(input)
 *   Erlaubte Eingaben: 50, 12, 13%, 13 %
 * 
 * convertPercentage(input)
 *   Entfernt das Prozentzeichen der Eingabe und gibt (input / 100) zurück
 *
 * checkInput(input, type)
 *   Kann mit einer der globalen Konstanten aufgerufen werden
 *
 * checkTime(val)
 *   gültige Eingabe  --> 12:54
 *
 * checkDate(val)
 *   gültige Eingabe  -->  18.09.2007 oder 18.09.07
 */

 
// * * *  Global Constants
CHK_TEMP = 1;
CHK_CHAR_ONLY = 2;
CHK_DIGITS_ONLY = 3;
CHK_PERCENT = 4;
CHK_DECIMAL = 5;


// * * * * * * * * * * * * * * * * 
// * * *       FUNCTIONS         *
// * * * * * * * * * * * * * * * * 

// Temperatur: erlaubt sind Zahlen sowie '.' und ','
// ausserdem: 'C', 'F', '°C'und '°F' als letzte Zeichen
// Bei Fahrenheit-Werten wird ausserdem nach Celsius umgerechnet
// und mit MinVal und MaxVal verglichen
//
// Wenn kein Vergleich mit Minimal- und Maximal-Werten gewünscht ist
// müssen MinVal und MaxVal auf 0 gesetzt werden
checkTemperatureMinMax = function(input, MinVal, MaxVal) {
  var doMinMaxCheck = ((MinVal !== 0) || (MaxVal !== 0));
  var tmpInput = input;
  var isFarVal = false;
  if (!checkDecimal(tmpInput)) {
    // Zeichen für Temperaturangaben rausfiltern
    if (tmpInput.indexOf('°C') != -1) {
      tmpInput = tmpInput.substr(0, tmpInput.indexOf('°C'));
    }
    if (tmpInput.indexOf('C') != -1) {
      tmpInput = tmpInput.substr(0, tmpInput.indexOf('C'));
    }
    if (tmpInput.indexOf('°F') != -1) {
      tmpInput = tmpInput.substr(0, tmpInput.indexOf('°F'));
      isFarVal = true;      
    }
    if (tmpInput.indexOf('F') != -1) {
      tmpInput = tmpInput.substr(0, tmpInput.indexOf('F'));
      isFarVal = true;      
    }
    
    // Fall Abgleich mit MinValue und MaxValue gewünscht wird und ein
    // Fahrenheit-Wert eingegeben wurde...
    if (doMinMaxCheck) {
      if (isFarVal) { 
        if (checkDecimal(tmpInput)) {
          var celVal = farToCel(tmpInput); // Umrechnen und prüfen ob innerhalb MinVal und MaxVal
          return ((celVal > MinVal) && (celVal < MaxVal));
        }
        else {
          return false;
        }
      }
    }
  }
  // Falls Chars entfernt wurden nochmal auf Dezimalwert testen
  if (checkDecimal(tmpInput)) {
    if (doMinMaxCheck) {
      tmpInput = tmpInput.replace(/,/, "."); // für WerteVergleich
      return ((tmpInput >= MinVal) && (tmpInput <= MaxVal ));
    } 
    else {
      return true;
    }
  } 
  else {
   return false;
  }     
};

// Temperatur-Überprüfung ohne Beachtung von Minimal- und Maximal-Werten
checkTemperature = function(input) {
  return checkTemperatureMinMax(input, 0, 0);
};

checkCharOnly = function(input) {
  ok = true;
  for(var i = 0; i < input.length; i++) {
    if (!isChar(input.charAt(i))) {
      ok = false;
      break;
    }
  }
  return ok;
};

checkDigitsOnly = function(input) {
  var ok = true;
  for (var i = 0; i < input.length; i++) {
    if (isNaN(input.charAt(i))) {
      ok = false;
      break;
    }
  }
  return ok;
};

// CheckDecimal: erlaubt sind [0..9] und ' und .
// True wird auch bei ganzen oder negativen Zahlen zurückgegeben 
checkDecimal = function(input) {
  var ok = true;
  var i = 0;
  if (input.charAt(0) == '-') // für negative Zahlen
    i = 1;
  for (i; i < input.length; i++) {
    tmp = input.charAt(i);
    if (isNaN(tmp)) {
      // Ausnahmen für '.' und ','
      if (tmp != '.' && tmp != ',') {
        ok = false;
        break;
      }
    }
  }
  return ok;
};

// Percentage: Erlaubt sind Zahlen zwischen 0 und 100, sowie
// Eingaben mit Prozentzeichen mit evtl. Leerzeichen zwischen
// Zahl und Prozentzeichen. Keine Dezimalwerte.
checkPercentage = function(input) {
  var tmpInput = "";
  // Evtl. vorhandenes Prozentzeichen zuerst entfernen
  if (input.indexOf('%') != -1) {
    tmpInput = input.substr(0, input.indexOf('%'));
    if(tmpInput.length < 1) { // falls nur '%' übergeben wurde
      return false;
    }
  } 
  else {
    tmpInput = input;
  }
  if (checkDigitsOnly(tmpInput)) {
    if (tmpInput < 0) 
      return false;
    if (tmpInput > 100)
      return false;
  } 
  else {
    return false;
  }
  return true;
};

// Von einem Prozentwert (string: 50, 50%, 50 % usw.) wird das
// Prozentzeichen entfernt und der Wert geteilt durch 100 zurückgegeben
convertPercentage = function(input) {
  var tmpInput = "";
  // Evtl. vorhandenes Prozentzeichen zuerst entfernen
  if (input.indexOf('%') != -1) {
    tmpInput = input.substr(0, input.indexOf('%'));
    if(tmpInput.length < 1) { // falls nur '%' übergeben wurde
      return false;
    }
  } 
  else {
    tmpInput = input;
  }
  return  parseInt(tmpInput,10) / 100;
  
};

checkInput = function(input, type) {
  if (type == CHK_TEMP){
    return checkTemperature(input);
  }
  if (type == CHK_CHAR_ONLY) {
    return checkCharOnly(input);
  }
  if (type == CHK_DIGITS_ONLY) {
    return checkDigitsOnly(input);
  }
  if (type == CHK_PERCENT) {
    return checkPercentage(input);
  }
  if (type == CHK_DECIMAL) {
    return checkDecimal(input);
  }
  // Wenn man hier ankommt wurde der typ nicht erkannt
  alert("checkInput: type unknown");
  return null;
};

// * * * * * * * * * * * * * * * * 
// * * *   DATUMS-FUNKTIONEN     *
// * * * * * * * * * * * * * * * * 
checkDay = function(val) {
  var ret = false;
  if (checkDigitsOnly(val)) {
    if ( (val >= 1) && (val <=31) )
      ret = true;
  }
  return ret;
};

checkMonth = function(val) {
  var ret = false;
  if (checkDigitsOnly(val)) {
    if ( (val >= 1) && (val <=12) )
      ret = true;
  }
  return ret;
};

checkYear = function(val) {
  var ret = false;
  if (checkDigitsOnly(val)) {
    if ( (val > 0) )
      ret = true;
  }
  return ret;
};

checkHours = function(val)
{
  if( checkDigitsOnly(val) )
  {
    if( (val >= 0) && (val <= 23) ) return true;
  }
  return false;
};

checkMinutes = function(val)
{
  if( checkDigitsOnly(val) )
  {
    if( (val >= 0) && ( val <= 59) ) return true;
  }
  return false;
};

checkSeconds = function(val)
{
  if( checkDigitsOnly(val) )
  {
    if( (val >= 0) && ( val <= 59) ) return true;
  }
  return false;
};

// Eingabe abhängig von Parameter bSeparator 
checkTime = function(val)
{
  var sSplit = new Array(2);
  sSplit = val.split(":");
  if( val === "" ) return false;
  if( sSplit.length != 2 ) return false;
  var tHours =  parseInt(sSplit[0],10);
  var tMinutes = parseInt(sSplit[1],10);
  if( isNaN(tHours) || isNaN(tMinutes) ) return false;
  return ( checkHours(sSplit[0]) && checkMinutes(sSplit[1]) );
};


// Eingabe abhängig von Parameter bSeparator 
checkDate = function(val) {
  var ret = false;
  var sSplit = new Array(3);
  
  if (val === "")
    return false;
  sSplit = val.split(".");
  
  if (sSplit.length != 3) 
    return false;
  if (checkDay(sSplit[0])) {
    if (checkMonth(sSplit[1])) {
      if (checkYear(sSplit[2])) {
        ret = true;
      }
    }
  }
  return ret;
};


// * * * * * * * * * * * * * * * * 
// * * *    HILFS-FUNKTIONEN     *
// * * * * * * * * * * * * * * * * 

// Konvertiert einen Fahrenheit- in einen Celsius-Wert
farToCel = function(farVal) { 
  return ((farVal - 32) / 1.8);
};

// Gibt true zurück falls ein Character übergeben wurde
isChar = function(Data) {
  var varChars = "éèàùûôoöë-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ ";
  return (varChars.indexOf(Data) != -1);
};
/**
 * ise/js/PowerMeter.js
 * POWERMETER. POWERMETER_IGL
 **/

/**
 * @author gral
 **/

/**
 * @class Control for the 'POWERMETER'
 **/ 
isePowerMeter = Class.create();

isePowerMeter.prototype = {

  initialize: function(id, opts) {
    conInfo("PowerMeter");
    var self = this;
    // 0 = Gas-Sensor, 1 = Electricity (IR-Sensor), 2 = Electricity (LED-Sensor), 3 = Unknown
    this.arMeasurementTypes = ["Gas", "Electricity", "Electricity", "Unknown"];
    this.id = id;
    this.opts = opts;
    this.EnergyCounterID = "svEnergyCounter_" + this.id + "_" + this.opts.chAddress;
    this.EnergyCounterRESETID = "svEnergyCounter_" + this.id + "_" + this.opts.chAddress + "_RESET";
    this.EnergyCounterOldValID = "svEnergyCounterOldVal_" + this.id;
    this.EnergyPrice = "unknown";
    this.summedUpEnergy = 0.0;
    this.measurementType = this.arMeasurementTypes[1]; // Default set to 'Electricity'
    this.bindEvents();

    if (opts.chType == "POWERMETER_IGL") {
      this.measurementType = this.getSensorType();
      this.setGenericInfoPanels(["Power"]);
    } else {
      this.setGenericInfoPanels(["Voltage", "Current", "Power", "Frequency"]);
    }

    // When gas sensor change the unit from Wh to m^3 and change the EnergyCounterID
    if (this.measurementType == this.arMeasurementTypes[0]) {
      this.opts.unitEnergyCounter = "m<sup>3</sup>";
      this.EnergyCounterID = "svEnergyCounterGas_" + this.id + "_" + this.opts.chAddress;
      this.EnergyCounterRESETID = "svEnergyCounterGas_" + this.id + "_" + this.opts.chAddress + "_RESET";
      this.EnergyCounterOldValID = "svEnergyCounterGasOldVal_" + this.id;
    } else if (this.measurementType == this.arMeasurementTypes[3]) {
      // Unknown sensor
      this.opts.unitEnergyCounter = "";
    }
    jQuery("[name = '"+ this.id + "EnergyCostDeviceUnit']").html(this.opts.unitEnergyCounter).show();
    this.setEnergyCounterPanel();

    this.energyConfig = homematic("system.getEnergyPrice", {}, function(result){
      self.energyConfig = result;
      // When the energy price config is available and it´s a known sensor (electricity or gas)
      // then show the energy cost
      if (result && (self.measurementType != self.arMeasurementTypes[3])) {
        self.showEnergyCost();
      }
    });
    jQuery("[name = '"+this.id+"sensor"+this.getGasExtension()+"']").show();
    conInfo("MeasurementType: " + this.measurementType);
  },

  getSensorType: function() {
      // Determine the type of measurement (gas or electicity)
      var paramSet = homematic("Interface.getParamset", {"interface": "BidCos-RF", "address" : this.opts.chAddress, "paramsetKey" :"MASTER"});
      //METER_TYPE can be
      // 0 = Gas-Sensor
      // 1 = Electricity (IR-Sensor)
      // 2 = Electricity (LED-Sensor)
      // 3 = Unknown
      return this.arMeasurementTypes[parseInt(paramSet.METER_TYPE)];

  },

  buttonPressed: function(btn) {
    var elem = jQuery(btn);
    elem.addClass("ControlBtnOn").removeClass("ControlBtnOff");
    setTimeout(function() {
      elem.addClass('ControlBtnOff').removeClass('ControlBtnOn');
    }, 500);

  },

  bindEvents: function() {
    var self = this;
    jQuery("#"+ this.id + "resetEnergyCounter").bind("click", function(){
      conInfo("Reset EnergyCounter.");
      self.buttonPressed(this);
      homematic("SysVar.setFloat", {"name" : self.EnergyCounterID, "value" : 0});
      homematic("SysVar.setBool", {"name" : self.EnergyCounterRESETID, "value" : true});
      if (self.opts.chType == "POWERMETER_IGL") {
        homematic("SysVar.setFloat", {"name": self.EnergyCounterOldValID, "value": 0});
      }
      self.setEnergyCounterPanel();
      self.showEnergyCost();
    });
  },

  /**
   * Sets the different parameter elements of the powermeter
   */
  setGenericInfoPanels: function(arElements) {
    var self = this;
    jQuery.each(arElements, function(index, panel) {
      self.setGenericPanel(panel);
    });
  },

  /**
   * Returns the jQuery element of a given parameter
   * @param {string} elem The name of the desired element
   * @return {object} The desired element
   */
  getJElem: function(elem) {
    return jQuery("#" + this.id + elem);
  },

  getGasExtension: function() {
    return (this.measurementType == this.arMeasurementTypes[0]) ? this.arMeasurementTypes[0] : "";
  },
  /**
   * Sets the text (value + unit) of the desired element
   * @param {string} panel The name of the desired element
   */
  setGenericPanel: function(panel) {
    var gasExtension = this.getGasExtension();
    var j_panel = this.getJElem(panel),
      value = this.opts["val" + panel + gasExtension],
      unit = this.opts["unit" + panel + gasExtension];
    j_panel.text(value.toFixed(2) + " " + unit);
  },

  setEnergyCounterPanel: function() {
    var j_panel = this.getJElem("EnergyCounter");
    this.summedUpEnergy = parseFloat(homematic("SysVar.getValue", {"id" : this.EnergyCounterID})).toFixed(2);
    j_panel.html(this.summedUpEnergy + " " + this.opts.unitEnergyCounter);
  },

  getEnergyConsumption: function(sType) {
    // Electricity sensor
    if ((this.measurementType == this.arMeasurementTypes[1])) {
      if (sType == "CCU")  return this.summedUpEnergy;
      if (sType == "Device") return this.opts.valEnergyCounter;
    }

    // Gas sensor
    if (this.measurementType == this.arMeasurementTypes[0]) {
      if (sType == "CCU")  return (this.summedUpEnergy * this.energyConfig.gasHeatingValue * this.energyConfig.gasConditionNumber) ;
      if (sType == "Device") return (this.opts.valEnergyCounter * this.energyConfig.gasHeatingValue * this.energyConfig.gasConditionNumber);
    }
  },

  showEnergyCost: function() {
    if (this.energyConfig && (this.measurementType != this.arMeasurementTypes[3])) {
      var unitFactor = 1000,
        kWh = " kWh";

      if (this.measurementType == this.arMeasurementTypes[0]) {
        this.EnergyPrice = this.energyConfig.gasPrice;
        unitFactor = 1;
      }
      if (this.measurementType == this.arMeasurementTypes[1]) this.EnergyPrice = this.energyConfig.curPrice;

      if (this.EnergyPrice != "unknown" && this.energyConfig.currency != null) {
        var j_energyCostCCU = this.getJElem("EnergyCostCCU"),
          j_energyCostDevice = this.getJElem("EnergyCostDevice"),
          energyConsumptionCCU = this.getEnergyConsumption("CCU"),
          energyConsumptionDevice = this.getEnergyConsumption("Device"),
          energyCostCCU = ((energyConsumptionCCU * this.EnergyPrice) / unitFactor).toFixed(2) + " " + this.energyConfig.currency,
          energyCostDevice = ((energyConsumptionDevice * this.EnergyPrice) / unitFactor).toFixed(2) + " " + this.energyConfig.currency;
        if (this.measurementType == this.arMeasurementTypes[0]) {
          j_energyCostCCU.text(energyConsumptionCCU.toFixed(1) + kWh + " = " + energyCostCCU).show();
          j_energyCostDevice.text(energyConsumptionDevice.toFixed(1) + kWh + " = " + energyCostDevice).show();
        } else {
          j_energyCostCCU.text(energyCostCCU).show();
          j_energyCostDevice.text(energyCostDevice).show();
        }
      } else {
        conInfo("Unknown energy price");
      }
    }
  }
};


iseRGBWController = Class.create();

iseRGBWController.prototype = {


  initialize: function (id, opts) {
    conInfo("iseRGBWController");
    this.id  = id;
    this.opts = opts;
    this.program = this.opts.valProgram;
    jQuery("#"+ this.id).text(this.program);

    this.brightness = this.opts.valBrightness;
    this.rampTime = this.opts.valRampTime;
    this.onTime = this.opts.valOnTime;
    this.minColor = this.opts.valMinBorder;
    this.maxColor = this.opts.valMaxBorder;

    this.chn = homematic("Device.get",{"id": this.id});
    this.value =
      this.program + "," +
      this.brightness + "," +
      this.rampTime + "," +
      this.onTime + "," +
      this.minColor + "," +
      this.maxColor;

    this.bindEvents();
  },

  bindEvents: function() {
    var self = this;
    jQuery("#"+ this.id).bind("click", function(){
      conInfo("show program dialog");


      /*************/
        var url = "/pages/msg/setRGBWController.htm";

        var req = jQuery.ajax({
          url : url +"?sid=" + SessionId,
          dataType: "html"
        });

        req.done(function(htmlContent) {

          var rgbwControllerDialog = new RGBWControllerDialog(translateKey("titleRGBWControllerDialogTitle"), htmlContent, "RGBW_AUTOMATIC", self.value, function(result) {
             if (result == 1) {
              conInfo("SetRGBWController: Yes pressed");
              var arConfigString = this.getConfigString().split(",");
              conInfo("rgbwControllerDialog: configString: " + arConfigString);

               homematic("Interface.putParamset",{'interface': self.chn["interface"], 'address' : self.chn["address"], 'paramsetKey' : 'VALUES', 'set':
                  [
                    {name:'PROGRAM', type: 'string', value: arConfigString[0]},
                    {name:'ACT_BRIGHTNESS', type: 'string', value: arConfigString[1]},
                    {name:'RAMP_TIME', type: 'string', value: arConfigString[2]},
                    {name:'ON_TIME', type: 'string', value: arConfigString[3]},
                    {name:'ACT_MIN_BOARDER', type: 'string', value: arConfigString[4]},
                    {name:'ACT_MAX_BOARDER', type: 'string', value: arConfigString[5]}
                  ]
               }, function(result){jQuery("#"+ self.id).text( arConfigString[0] );});
            }
          }, "html");
        });

        req.fail(function() {
          alert("Error while loading " + url);
        });
    });
  }

};/**
 * ic_gd.js
 **/

//Defines
BORDER_COLOR = WebUI.getColor("channelBorder");     //Border
HL_COLOR = WebUI.getColor("channelHighlight");  //Highlight
BG_COLOR = WebUI.getColor("channelBackground");//Background
HL_STROKE = 4;//Background
//-----

InitGD = function(jg, size)
{
  //alert(jg);
  
  ClearCanvas(jg, size);
    jg.setColor(HL_COLOR);
    jg.setStroke(parseInt(HL_STROKE));
};

ClearCanvas = function(jg, size)
{
  jg.clear();
    jg.setColor(BG_COLOR);
  jg.fillRect(parseInt(0), parseInt(0), parseInt(size), parseInt(size));
  jg.paint();
    jg.setColor(HL_COLOR);
};

Draw = function(jg, devtype, size, formname)
{
  //if (! DEV_TypeExists(devtype)) return;
  var path = DEV_getImagePath (devtype, size);

  if (path == "#") return;

  jg.drawImage2(path, 0, 0, size, size);
  if (formname && formname != "-1") DrawForm(jg, formname, devtype, size);
  jg.paint();
};

DrawForm = function(jg, formname, devtype, size, x_offset, y_offset)
{
  var form = DEV_getImageHighlight(devtype, formname);
  
  if (!form) return;

  if (!x_offset) x_offset = 0;
  if (!y_offset) y_offset = 0;

  switch (form[gd_type])
  {
    case GD_TYPE["CIRCLE"]:
      jg.fillArc(Math.round( (form[gd_xx]+x_offset) * size), Math.round((form[gd_yy]+y_offset)*size), Math.round(form[gd_rr]*2*size), Math.round(form[gd_rr]*2*size), parseInt(0.0), parseInt(360.0));
      break;
    case GD_TYPE["RECTANGLE"]:
      jg.fillRect(Math.round((form[gd_xx]+x_offset)*size), Math.round((form[gd_yy]+y_offset)*size), Math.round(form[gd_dx]*size), Math.round(form[gd_dy]*size));
      break;
    case GD_TYPE["STRING"]:
      jg.setFont(form[gd_fontfamily], Math.round(form[gd_fontsize]*size)+"px", form[gd_fontstyle]);
      jg.drawString(form[gd_string], Math.round((form[gd_xx]+x_offset)*size), Math.round((form[gd_yy]+y_offset)*size));
      break;
    case GD_TYPE["ELLIPSE"]:
      jg.fillArc(Math.round((form[gd_xx]+x_offset)*size), Math.round((form[gd_yy]+y_offset)*size), Math.round(form[gd_dx]*size), Math.round(form[gd_dy]*size), parseInt(0.0), parseInt(360.0));
      break;
    case GD_TYPE["LINE"]:
      jg.setStroke(Math.round(form[gd_stroke]*size));
      jg.drawLine(Math.round((form[gd_x1]+x_offset)*size), Math.round((form[gd_y1]+y_offset)*size), Math.round((form[gd_x2]+x_offset)*size), Math.round((form[gd_y2]+y_offset)*size));
      jg.setStroke(parseInt(HL_STROKE));
      break;
    case GD_TYPE["FORMSET"]:
      for (var i=gd_type+1; i<form.length; i++)
      {
        DrawForm(jg, form[i], devtype, size, x_offset, y_offset);
      }
      break;
    case GD_TYPE["OFFSET"]:
      DrawForm(jg, form[gd_nameoff], devtype, size, form[gd_xoff]+x_offset, form[gd_yoff]+y_offset);
      break;
    default:
      break;
  }
};

 /*
========================================================================
=====Positionierung und Anzeige des Detailbildes auf dem Bildschirm=====
========================================================================
 */

DrawBorder = function(jg, size)
{
  jg.setColor(BORDER_COLOR);
  jg.drawRect(parseInt(0), parseInt(0), parseInt(size), parseInt(size));
  jg.paint();
  jg.setColor(HL_COLOR);
};
 
picDivShow = function(jg, devtype, size, formname, divelem)
{
  if (! jg) return;

  if (! DEV_TypeExists(devtype)) return; //kein Bild anzeigen, wenn das Gerät unbekannt ist.
  
  var dim_div = Element.getDimensions(divelem);
  var dim     = getInnerDimensions();
  var off     = getPageOffsets();
  var winoy   = off.yOffset;
  var winuy   = off.yOffset + dim.height;

  //Mouse-Position (circa)-----
  var pagePosition = Position.page(divelem);//Returns the X/Y coordinates of element relative to the viewport
    
  //Draw Image and Highlight-----
  ClearCanvas(jg, size);
  Draw(jg, devtype, size, formname);
  DrawBorder(jg, size);
  //-----

  //y-Position----
  y       = pagePosition[1] +dim_div.height/2 - size/2; //mittig anordnen
  y_unten = y + size;

  if (y        < winoy+10) y = winoy + 10;
  if (y_unten  > winuy-30) y = winuy - 30 - size;

  $('picDiv').style.top  = y + "px";
  //-----
    
  //x-Position-----
  winrx    = dim.width + off.xOffset;
  x        = pagePosition[0] + dim_div.width + 30; //etwas rechts
  x_rechts = x + size;
    
  if (x_rechts > winrx) x = pagePosition[0] - size - 30;

  $('picDiv').style.left = x + "px";
  //-----

  ShowElement('picDiv');
};

picDivHide = function(jg)
{
  if (! jg) return;

  HideElement('picDiv');
  jg.drawImage("/ise/img/loading.gif", 0, 0, 250, 250);
};
/**
 * ic_common.js
 **/

poststr = "";
UI_PATH = "/config/";

Get_UI_CONTENTBOX_ID = function()
{
  //Muss als Funktion abgefragt werden, weil zur Zeit des Ladens
  //die Boxen noch nicht vollständig existieren.
  return ( document.getElementById('infobox') ? 'infobox' : 'centerbox'  );
};

ResetPostString = function()
{
  poststr = "";
};

AddProfileValues = function(prefix)
{
  var i = 1;

  while (document.getElementById(prefix + i))
  {
    AddParam(document.getElementById(prefix + i));
    i++;
  }
};

AddSeparateSettings = function(prefix, pnr)
{
  var i = 1;
  
  while (document.getElementById(prefix + pnr + '_' + i))
  {
    AddParam(document.getElementById(prefix + pnr + '_' + i));
    i++;
  }
};

SubmitProfile = function(pnr, pname)
{
  ShowLoadingBox('Bitte warten, das Profil \"' +pname+ '\" wird gespeichert...');
  ResetPostString();
  document.getElementById('profile').value = pnr;
  AddParam(document.getElementById('profile'));
  AddProfileValues('global_');
  AddSeparateSettings('separate_', pnr);
  AddSeparateSettings('subset_', pnr);
  SendRequest('ic_paramset.cgi');
};

AddParam = function(elem)
{
  if (elem !== null)
  {
    if (elem.name !== "")
    {
      if (poststr !== "") poststr += "&";

      if (elem.type == "checkbox")
      {
        if (elem.checked) { elem.value = "true";  }
        else              { elem.value = "false"; }
      }
 			
			var arrId = elem.id.split("_");
			var type = arrId[1];
					
	  	// falls es sich um Kanalparameter handelt (die ID ist länger)
		  if (arrId.length == 6) {
				type = arrId[1] + "_" + arrId[2] + "_" + arrId[3]; 
			} 
         
      if (elem.value == "99999999" ) 
      {  
          var sec  = document.getElementById("sec_"  + prefix[elem.name + type]);
          var min = document.getElementById("min_"  + prefix[elem.name + type]);
          var hour = document.getElementById("hour_"  + prefix[elem.name + type]);
		 
          free_options = (hour.value * 3600) + (min.value * 60) + (sec.value * 1);  
          // elem.name = "SHORT_ON_TIME|LONG_ON_TIME" usw 
          poststr += elem.name + "=" + parseFloat(free_options);
        } 
        else if (elem.value == "99999998" )
        {
          var percent = document.getElementById("percent_" + prefix[elem.name + type]);  
          
          free_options = percent.value / 100 ;
          poststr += elem.name + "=" + parseFloat(free_options);
        }
        else if (elem.value == "99999997" )
        {
          var temp = document.getElementById("temp_" + prefix[elem.name + type]);  
          
          // falls Fahrenheit eingestellt, dann Wert umrechnen
          if ( temp.value >= 31 ) free_options = ((temp.value - 32) / 9 * 5);
          else free_options = temp.value ;
          
          poststr += elem.name + "=" + parseFloat(free_options);
        }
        else if (elem.value == "99999996" ) // Expertenmodus HM-Sen-EP
        {
          // Kanal aus poststr herausfiltern
          type = poststr.split("=");
          ad = type[3];
          type = ad.split(":");
          ad = type[1];
          type = ad.split("&");
          ch = type[0];
          // Der Kanal steht jetzt in ch zur Verfuegung  
          poststr += "SEQUENCE_PULSE_1="    +  $F('free_CHANNEL_' + ch + '_1') ;
          poststr += "&SEQUENCE_PULSE_2="    +  $F('free_CHANNEL_' + ch + '_2') ;    
          poststr += "&SEQUENCE_PULSE_3="    +  $F('free_CHANNEL_' + ch + '_3') ;    
          poststr += "&SEQUENCE_PULSE_4="    +  $F('free_CHANNEL_' + ch + '_4') ;    
          poststr += "&SEQUENCE_PULSE_5="    +  $F('free_CHANNEL_' + ch + '_5') ;    
          poststr += "&SEQUENCE_TOLERANCE="  +  $F('free_CHANNEL_' + ch + '_6') ;
        }
        else if (elem.value == "99999995" )
        {
          poststr += "SEQUENCE_PULSE_1=0.496" ; 
          poststr += "&SEQUENCE_PULSE_2=0.496" ;
          poststr += "&SEQUENCE_PULSE_3=0.496" ;
          poststr += "&SEQUENCE_PULSE_4=0.496" ;
          poststr += "&SEQUENCE_PULSE_5=0.496" ;
          poststr += "&SEQUENCE_TOLERANCE=0.496" ;
        }
        else if (elem.value == "99999994" )
        {
          poststr += "SEQUENCE_PULSE_1=0.496" ;
          poststr += "&SEQUENCE_PULSE_2=0.496" ;
          poststr += "&SEQUENCE_PULSE_3=0.496" ;
          poststr += "&SEQUENCE_PULSE_4=0" ;
          poststr += "&SEQUENCE_PULSE_5=0" ;
          poststr += "&SEQUENCE_TOLERANCE=0.496" ; 
        }
        else if (elem.value == "99999993" )
        {
          poststr += "SEQUENCE_PULSE_1=0.496" ;
          poststr += "&SEQUENCE_PULSE_2=0" ;
          poststr += "&SEQUENCE_PULSE_3=0" ;
          poststr += "&SEQUENCE_PULSE_4=0" ; 
          poststr += "&SEQUENCE_PULSE_5=0" ; 
          poststr += "&SEQUENCE_TOLERANCE=0.496" ; 
        }
        else if (elem.value == "99999992" )
        {
          poststr += "SEQUENCE_PULSE_1=0" ;
          poststr += "&SEQUENCE_PULSE_2=0" ;
          poststr += "&SEQUENCE_PULSE_3=0" ;
          poststr += "&SEQUENCE_PULSE_4=0" ; 
          poststr += "&SEQUENCE_PULSE_5=0" ;
          poststr += "&SEQUENCE_TOLERANCE=0.496" ; 
        }
      
        //else   poststr += elem.name + "=" + elem.value;
        else poststr += elem.name + "=" + encodeURIComponent(elem.value);  
	}
  }
};

Get_ReGa_Path = function(path)
{
  //WebUI läuft von ise aus (Session-Parameter ist "sid")
  //der Pfad fängt nicht mit dem vom ise WebUI aus nötigen Prefix an
  if ( ($('global_sid').name == "sid") && (path.substr(0, UI_PATH.length ) != UI_PATH))
  {
    //Prefix anfügen:
    path = UI_PATH + path;
  }

  return path;
};

SendRequest = function(scriptname, html_container_id, callback)
{
  scriptname = Get_ReGa_Path(scriptname);
  var params = poststr;

  if (params === "") { params += "?AvoidBrowserCache=" + Math.random(); }
  else               { params += "&AvoidBrowserCache=" + Math.random(); }

  if ((html_container_id) && (html_container_id !== "")) { id = html_container_id; }
  else                                                   { id = Get_UI_CONTENTBOX_ID(); }

  var _callback_ = callback; 
  
  var opt =
  {
    method:'get',
    parameters:params,
    evalScripts:true,
    onComplete: function() { if (_callback_) { _callback_(); } }
  };

  new Ajax.Updater(id, scriptname, opt);
};

ShowLoadingBox = function(msg)
{
  
  $(Get_UI_CONTENTBOX_ID()).innerHTML = "<table><tr><td><img style=\"margin: 4px;\" src=\"/ise/img/loading.gif\"/></td>" +
    "<td><span>"+msg.escapeHTML()+"</span></td></tr></table>";

  ShowElement(Get_UI_CONTENTBOX_ID());
};

ShowLoadingBoxTimeout = function(msg, msec)
{
  ShowLoadingBox(msg);
    window.setTimeout("HideLoadingBox()",msec);
};

ShowInfoMsgBox = function(msg)
{
  $(Get_UI_CONTENTBOX_ID()).innerHTML = "<table><tr><td><span>" + msg + "</span></td></tr></table>";
  ShowElement(Get_UI_CONTENTBOX_ID());
};

ShowInfoMsgBoxTimeout = function(msg, msec)
{
  ShowInfoMsgBox(msg);
  window.setTimeout("HideLoadingBox()",msec);
};

HideLoadingBox = function()
{
  HideElement(Get_UI_CONTENTBOX_ID());
};

ShowElement = function(id)
{
  $(id).style.visibility = "visible";
  $(id).show();
};

HideElement = function(id)
{
  $(id).style.visibility = "hidden";
  $(id).hide();
};

ToggleVisibility = function(id)
{
  if ($(id).visible()) HideElement(id);
  else                 ShowElement(id);
};

EnableComponent = function(id, b)
{
  $(id).enabled = b;
};

EnableAllSeparateComponents = function(pcount)
{
  var elem;
  var i, j;
  
  for (i=0; i<=pcount; i++)
  {
    j = 1;
    elem = document.getElementById('separate_' + i + '_' + j);
    
    while (elem)
    {
      elem.enabled = true;
      ++j;
      elem = document.getElementById('separate_' + i + '_' + j);
    }
  }
};

initComponents = function(pcount)
{
  var elem;
  var i, j;
  
  for (i=0; i<=pcount; i++)
  {
    j    = 1;
    elem = document.getElementById('use_separate_' + i + '_' + j);
    
    while (elem)
    {
      elem.checked = elem.defaultChecked;
      EnableComponent(elem.id.substr(4), elem.defaultChecked);

      ++j;
      elem = document.getElementById('use_separate_' + i + '_' + j);
    }
  }
};

SwitchActiveProfile = function(pnr)
{
  var i = 0;
  var elem = document.getElementById('caption_profile' + i);
  
  while (elem)
  {
    elem.innerHTML = elem.innerHTML.replace(/ \(aktiv\)/, '');
    elem.style.backgroundColor = WebUI.getColor("profile");
  
    if (i == pnr)
    {
      elem.innerHTML += ' (aktiv)';
      elem.style.backgroundColor = WebUI.getColor("profileActive");
    }
  
    ++i;
    elem = document.getElementById('caption_profile' + i);
  }
  
  ShowElement('profile'+pnr);
};

ShowDeviceDetails = function()
{
  var select  = $('linkabledevices');
  var otext   = select.options[select.selectedIndex].text;
  var len     = select.length - 1;
  var idx     = otext.search(/\=\=/);
  var devname = otext.substr(idx+2);
  
  if (idx == -1) return;
  
  var elemId = "";
  var i;

  //Opera
  try       { elemId = $('radio_channels_'+devname).id; }
  catch (e) { elemId = ""; }

  for (i = 0; i<=len; i++) 
  {
    HideElement('radio_channels_' + i);

    //Internet Explorer:
    /*
    try {
      if (elemId == "" && document.getElementById)
      {
        var elem = document.getElementById('radio_channels_' + i);
        if (elem.name && elem.name == 'radio_channels_' + devname) elemId = 'radio_channels_' + i; 
      }
    }
    catch (e) { elemId = ""; }
    */
  }

  //Firefox:
  try
  {
    if ((elemId === "") && (document.getElementsByName)) { elemId = document.getElementsByName('radio_channels_'+devname)[0].id; }
  }
  catch (e) { elemId = ""; }

  try 
  { 
    if ((elemId === "") && (document.getElementsByTagName))
    {
      var divtags = document.getElementsByTagName("div");
      len = divtags.length - 1;
      
      for (i = 0; i <= len; i++) 
      {
        var elem = divtags[i];
        if (((elem.name) && (elem.name == 'radio_channels_' + devname)) || ((elem.className) && (elem.className == 'radio_channels_' + devname)))
        {
          elemId = elem.id;
          break;
        }
      }
    }
  }
  catch (e) { elemId = ""; }

  ShowElement(elemId);

  /* Beim Firefox gibt es kein elem.name und beim Internet Explorer gibt es kein elem.id */
  /* Opera kann weder document.getElementsByName, noch document.getElementById. Stattdessen geht $(name). */
};

AddPeer2Channel = function(iface, device, radioid)
{
  var elem = document.getElementsByName(radioid);
  var inputelem = null;

  for (var i=0; i<elem.length; i++)
  {
    if (elem[i].checked)
    {
      inputelem = elem[i];
      break;
    }
  }
      
  if (inputelem === null)
  {
    alert("Bitte wählen Sie einen Kanal aus.");
    return;
  }

  var peer = inputelem.value;
  
  AddLinkPeer (iface, device, peer);
};

SwitchDeviceInstallMode = function(iface, b)
{
  ShowLoadingBox('Bitte warten, der Installationsmodus wird gesetzt...');
  ResetPostString();
  
  document.getElementById('global_iface').value = iface;

  if (b) document.getElementById('global_cmd').value = 'enterinstallmode';
  else   document.getElementById('global_cmd').value = 'leaveinstallmode';
  
  AddParam(document.getElementById('global_sid'));
  AddParam(document.getElementById('global_cmd'));
  AddParam(document.getElementById('global_iface'));

  SendRequest('ic_newdev.cgi');
};

AddDeviceBySN = function(iface, sn)
{
  if (sn.length != 10)
  {
    alert('Bitte geben Sie eine gültige Seriennummer ein.');
  }
  else
  {
    ShowLoadingBox('Bitte warten, das Gerät mit der Seriennummer '+sn+' wird angelernt...');
    ResetPostString();
  
    document.getElementById('global_iface' ).value = iface;
    document.getElementById('global_cmd'   ).value = 'installviaserial';
    document.getElementById('global_serial').value = sn;
  
    AddParam(document.getElementById('global_sid'));
    AddParam(document.getElementById('global_cmd'));
    AddParam(document.getElementById('global_iface'));
    AddParam(document.getElementById('global_serial'));

    SendRequest('ic_newdev.cgi');
  }  
};

PrepareDeleteDeviceForm = function(iface, sn, devname, devtype)
{
  var deviceType = DeviceTypeList.getDeviceType(devtype);
  var device = {
    address: sn,
    interfaceName: iface,
    name: devname,
    thumbnailHTML: deviceType.getThumbnailHTML(),
    hasLinksOrPrograms: function(callback)
    {
      if (callback) { callback.defer(false); }
      return false;
    },
    remove: function(flags, callback)
    {
      homematic("Interface.deleteDevice", {
        "interface": this.interfaceName,
        "address"  : this.address,
        "flags"    : flags
      }, callback);
    }
  };
  
  new DeleteDeviceDialog(device, function(isDeleted) {
    if (isDeleted)
    {
      window.setTimeout("WebUI.reload()", 2500);
    }
  });
  
};

PrepareDeleteDeviceForm_old = function(iface, sn, devname, devtype)
{  
  ResetPostString();
  
  AddParam(document.getElementById('global_sid'));
  poststr += "&cmd=DeleteDeviceForm";
  poststr += "&iface="   + iface;
  poststr += "&address=" + sn;
  poststr += "&devname=" + devname;
  poststr += "&devtype=" + devtype;

  SendRequest('ic_ifacecmd.cgi');

  ProgressBar = new ProgressBarMsgBox("Verknüpfungen und Programme werden abgefragt...", 1);
  ProgressBar.show();
    ProgressBar.StartKnightRiderLight();
};

DeleteDeviceForm = function(iface, sn, devname, devtype, devimg, linkcount)
{
  DeleteDeviceFrm = new DelDevMsgBox(640, 480, iface, sn, devname, devtype, devimg, linkcount);
  DeleteDeviceFrm.LoadFromFile("ic_deldev.htm");
  DeleteDeviceFrm.show();
};

DeleteDevice = function(iface, sn)
{
  if (confirm("Möchten Sie das Gerät mit der Seriennummer \'"+sn+"\' wirklich löschen?"))
  {
    ShowLoadingBox('Bitte warten, das Gerät mit der Seriennummer '+sn+' wird abgelernt...');
    ResetPostString();

    document.getElementById('global_iface' ).value = iface;
    document.getElementById('global_cmd'   ).value = 'deletedevice';
    document.getElementById('global_device').value = sn;
  
    AddParam(document.getElementById('global_sid'));
    AddParam(document.getElementById('global_cmd'));
    AddParam(document.getElementById('global_iface'));
    AddParam(document.getElementById('global_device'));

    SendRequest('ic_devices.cgi');
  }  
};

DeleteDeviceAndReset = function(iface, sn)
{
  if (confirm("Möchten Sie das Gerät mit der Seriennummer \'"+sn+"\' wirklich löschen und auf Werkseinstellungen zurücksetzen?"))
  {
    ShowLoadingBox('Bitte warten, das Gerät mit der Seriennummer '+sn+' wird abgelernt...');
    ResetPostString();

    document.getElementById('global_iface' ).value = iface;
    document.getElementById('global_cmd'   ).value = 'deletedevice';
    document.getElementById('global_device').value = sn;
  
    AddParam(document.getElementById('global_sid'));
    AddParam(document.getElementById('global_cmd'));
    AddParam(document.getElementById('global_iface'));
    AddParam(document.getElementById('global_device'));
    AddParam(document.getElementById('global_reset'));

    SendRequest('ic_devices.cgi');
  }  
};

AddLinkPeer = function(iface, device, peer)
{
  ShowLoadingBox('Bitte warten, der Verknüpfungspartner \'' +peer+ '\' wird hinzugefügt...');
  ResetPostString();

  document.getElementById('global_iface'  ).value = iface;
  document.getElementById('global_cmd'    ).value = 'newlinkpeer';
  document.getElementById('global_device' ).value = device;
  document.getElementById('global_peer'   ).value = peer;
  
  AddParam(document.getElementById('global_sid'));
  AddParam(document.getElementById('global_iface'));
  AddParam(document.getElementById('global_cmd'));
  AddParam(document.getElementById('global_device'));
  AddParam(document.getElementById('global_peer'));

  SendRequest('ic_linkpeers.cgi');
};

DeleteLinkPeer = function(iface, device, peer)
{
  if (confirm("Möchten Sie diesen Verknüpfungspartner \'" +peer+ "\' wirklich löschen?"))
  {
    ShowLoadingBox('Bitte warten, der Verknüpfungspartner \'' +peer+ '\' wird gelöscht...');
    ResetPostString();

    document.getElementById('global_iface'  ).value = iface;
    document.getElementById('global_cmd'    ).value = 'deletelinkpeer';
    document.getElementById('global_device' ).value = device;
    document.getElementById('global_peer'   ).value = peer;
  
    AddParam(document.getElementById('global_sid'));
    AddParam(document.getElementById('global_iface'));
    AddParam(document.getElementById('global_cmd'));
    AddParam(document.getElementById('global_device'));
    AddParam(document.getElementById('global_peer'));

    SendRequest('ic_linkpeers.cgi');
  }  
};

GoToStartPage = function()
{
  ResetPostString();
  AddParam(document.getElementById('global_sid'));
  SendRequest('ic_start.cgi');
};

SubmitCentralSetting = function(pnr)
{
  ShowLoadingBox('Bitte warten, Einstellung wird gespeichert...');
  ResetPostString();
  AddProfileValues('global_');
  AddSeparateSettings('separate_', pnr);
  SendRequest('ic_central.cgi');
};

CheckNetworkSettings = function()
{
  var a = isIPAddress(document.getElementsByName('IP')[0].value);
  var b = isIPAddress(document.getElementsByName('NETMASK')[0].value);
  var c = isIPAddress(document.getElementsByName('GATEWAY')[0].value);

  if (!a) alert("Die IP-Adresse ist ungültig");
  if (!b) alert("Die Netzmaske ist ungültig");
  if (!c) alert("Die Gateway-Adresse ist ungültig");
  
  return ( a && b && c );
};

isIPAddress = function( strIPAddress )
{
  var regExp = new RegExp ( "^([0-9]{1,3})[\.]{1,}([0-9]{1,3})[\.]{1,}([0-9]{1,3})[\.]{1,}([0-9]{1,3})$" );
  var aParts = regExp.exec ( strIPAddress );

  if ((aParts === null) || (aParts.length != 5)) return false;

  for ( var nLoopCnt = 1 ; nLoopCnt < 5 ; nLoopCnt++ )
  {
    if ((aParts [ nLoopCnt ] < 0) || (aParts [ nLoopCnt ] > 255 )) { return false; }
  }

  return true ;
};

SimulateShortKeyPress = function()
{
  SimulateKeyPress(false);
};

SimulateLongKeyPress = function()
{
  SimulateKeyPress(true);
};

SimulateKeyPress = function(longpress)
{
  ShowLoadingBox('Bitte warten, der Tastendruck wird ausgelöst...');
  ResetPostString();
  AddParam(document.getElementById('global_1'));//sid
  AddParam(document.getElementById('global_2'));//peer
  AddParam(document.getElementById('global_3'));//peer
  AddParam(document.getElementById('global_5'));//iface
  AddParam(document.getElementById('global_6'));//device
  poststr += "&longpress" + "=" +longpress;
  poststr += "&cmd" + "=" +"simulate"; 
  SendRequest('ic_paramset.cgi');
};

SetExpertMode = function(b)
{
  ShowLoadingBox('Bitte warten, der Expertenmodus wird gesetzt...');
  ResetPostString();
  
  AddParam(document.getElementById('global_sid'));

  if (b) document.getElementById('expert').value = 'true';
  else   document.getElementById('expert').value = 'false';

  AddParam(document.getElementById('expert'));
  
  SendRequest('ic_start.cgi');
};

SetCurrentTime = function()
{
  var jetzt = new Date();

  var hh = jetzt.getHours();
  var mm = jetzt.getMinutes();
  var DD = jetzt.getDate();
  var MM = jetzt.getMonth()+1;
  var YY = jetzt.getFullYear();

  if (hh < 10) hh = "0" + hh;
  if (mm < 10) mm = "0" + mm;
  if (DD < 10) DD = "0" + DD;
  if (MM < 10) MM = "0" + MM;
  if (YY < 10) YY = "0" + YY;

  document.getElementById('separate_3_1').value = hh;
  document.getElementById('separate_3_2').value = mm;
  document.getElementById('separate_3_3').value = DD;
  document.getElementById('separate_3_4').value = MM;
  document.getElementById('separate_3_5').value = YY;
};

RebootCentral = function()
{
  if (confirm("Möchten Sie die Zentrale wirklich neu starten?"))
  {
    ShowLoadingBox('Bitte warten, Zentrale startet neu...');
    ResetPostString();
    AddProfileValues('global_');
    poststr += "&cmd=reboot";
    SendRequest('ic_central.cgi');
  }  
};

set_value = function(input_id, id, type)
{
  var elem = document.getElementById(input_id);
  
  ShowLoadingBox('Bitte warten, Wert \''+id+'\' wird gesetzt');
  ResetPostString();
  document.getElementById('profile').value = "9999";
  AddParam(document.getElementById('profile'));
  AddProfileValues('global_');//sid
  if (elem.type == "checkbox")
  {
    if (elem.checked) elem.value = "true";
    else              elem.value = "false";
  }
  poststr += "&CH_VAL_VALUE=" +elem.value+ "&CH_VAL_ID=" +id+ "&CH_VAL_TYPE=" +type;
  SendRequest('ic_paramset.cgi');
};

RemoveLink = function(iface, sender_address, receiver_address, redirect_url)
{
  new YesNoDialog(translateKey('dialogSafetyCheck'), translateKey('dialogQuestionRemoveLink'), function(result) {
    if (result == YesNoDialog.RESULT_YES)
    {
      ResetPostString();

      AddParam(document.getElementById('global_sid'));

      poststr += "&cmd=removeLink";
      poststr += "&iface="            +iface;
      poststr += "&sender_address="   +sender_address;
      poststr += "&receiver_address=" +receiver_address;

      if ((redirect_url) && (redirect_url !== "")) { poststr += "&redirect_url=" + redirect_url; }
      else                                         { poststr += "&redirect_url=IC_LINKPEERLIST"; }

      SendRequest('ic_ifacecmd.cgi');
    }
  });
};

getInnerDimensions = function()
{
  var x, y;

  if (self.innerHeight) // all except Explorer
  {
    x = self.innerWidth;
    y = self.innerHeight;
  }
  else if (document.documentElement && document.documentElement.clientHeight)
  // Explorer 6 Strict Mode
  {
    x = document.documentElement.clientWidth;
    y = document.documentElement.clientHeight;
  }
  else if (document.body) // other Explorers
  {
    x = document.body.clientWidth;
    y = document.body.clientHeight;
  }

    return {width: x, height: y};
};

getPageOffsets = function()
{
  var x,y;

  if (self.pageYOffset) // all except Explorer
  {
    x = self.pageXOffset;
    y = self.pageYOffset;
  }
  else if (document.documentElement && document.documentElement.scrollTop)
  // Explorer 6 Strict
  {
    x = document.documentElement.scrollLeft;
    y = document.documentElement.scrollTop;
  }
  else if (document.body) // all other Explorers
  {
    x = document.body.scrollLeft;
    y = document.body.scrollTop;
  }

    return {xOffset: x, yOffset: y};
};

/*
Wenn nur ein Gerät angezeigt werden soll, kann man sender_address, oder receiver_address leer lassen ( '' )
*/
CheckConfigPending = function(iface, sender_address, receiver_address, redirect_url, goBack)
{
  ResetPostString();
  
  AddParam($('global_sid'));

  poststr += "&go_back="          + goBack;
  poststr += "&redirect_url="     +redirect_url;
  poststr += "&iface="            +iface;
  poststr += "&sender_address="   +sender_address;
  poststr += "&receiver_address=" +receiver_address;
  poststr += "&cmd=ShowConfigPendingMsg";

  SendRequest('ic_ifacecmd.cgi');
};


OpenSetProfiles = function(iface, sender_address, receiver_address)
{
  exists_timearr = "";
  exists_percarr = "";
  exists_tmparr = "";
  time_tmp = "";
  perc_tmp = "";
  temp_tmp = "";

  ResetPostString();

  poststr += "&iface="            +iface;
  poststr += "&sender_address="   +sender_address;
  poststr += "&receiver_address=" +receiver_address;
  
  updateContent(UI_PATH + 'ic_setprofiles.cgi', poststr);
};


IsDirty = function(inputelem)
{


  if (inputelem === null) return false;

  if (inputelem.type == "select-one")
  {
    return inputelem.options[inputelem.selectedIndex].defaultSelected != inputelem.options[inputelem.selectedIndex].selected;
  }
  else if (inputelem.type == "checkbox" || inputelem.type == "radio")
  {
    return inputelem.checked != inputelem.defaultChecked;
  }
  else if (inputelem.type == "text" || inputelem.type == "textarea" || inputelem.type == "password")
  {
    return inputelem.defaultValue != inputelem.value;
  }
  else if (inputelem.type == "hidden")
  {
    return false;
  }
  else
  {
    return true;
  }
};

ConvTime = function(u_value)
{
  //wird in SetInputValue für User-Profilvorlagen benötigt
  var Userwert = "";
  var hour = parseInt(u_value / 3600);
  var min  = parseInt((u_value % 3600) / 60);
  var sec  = parseInt((u_value % 3600) % 60);
  var msec = u_value - parseInt(u_value); 
  
  if (hour > 0) {
    Userwert = hour + "h ";
    if (min > 0) Userwert = Userwert.concat(min + "min ");
    if (sec > 0) Userwert = Userwert.concat(sec + "s");
  } 
  else if (min > 0) {
    Userwert = min + "min ";
    if (sec > 0) Userwert = Userwert.concat(sec + "s");
  }
  else if (sec > 0) {
    Userwert = sec + "s ";
    if (msec > 0) Userwert = sec + msec + "s";
  }
  else if (msec > 0) {
    Userwert = msec + "s";
  } 
  else Userwert = "0s";

  
  return Userwert ;
};

sort_num = function(a,b) {
  return a - b;
};

sort_opt = function(elem) {
  
  arrVal = new Array();
  arrTexts = new Array();
  arrTexts[0] = new Object();
  
  for(i = 0; i < elem.length; i++) {
    arrVal[i] = parseFloat(elem.options[i].value); 
    arrTexts[0][arrVal[i].toString(10)] = elem.options[i].text;
  }
  
  arrVal.sort(sort_num);
  
  for(i = 0; i < elem.length; i++) {
    elem.options[i].value = arrVal[i];
    elem.options[i].text  = arrTexts[0][arrVal[i].toString(10)];
  }
};

SetInputValue = function(html_inputelem_id, value)
{
  var inputelem = $(html_inputelem_id);
  var Userwert;
  var i;
  
  if (inputelem === null) return;

  if (inputelem.type == "select-one")
  {
    var selectelem = inputelem;
    var  no_entry = true;
      
    //AG  
    
    for (i = 0; i < selectelem.options.length; i++)
    {  
      if (selectelem.options[i].value == value) {  
        no_entry = false;
      } 
    }  
  
    // falls in der Profilvorlage kein entsprechender Wert vorhanden ist,
    // weil eine beutzerdef. Wert eingegeben wurde, der nicht als Auswahl vorhanden ist,
    // wird hier ein neuer Eintrag mit dem entsprechenden Wert erzeugt.
    // Die Werte müssen entsprechend konvertiert werden, 90 Sek. werden z. B. zu 1min 30sec usw.
    
    if (no_entry === true) 
    {
        perc = selectelem.options[1].text.search(/%/);
        h = selectelem.options[1].text.search(/min/);
        m = selectelem.options[1].text.search(/s/);
        s = selectelem.options[1].text.search(/h/);
      
        if (h != -1 || m != -1 || s != -1) Userwert = ConvTime(value);   //es handelt sich um einen Zeitwert
        if (perc != -1) {Userwert = parseInt(value * 100) + "%";}    //es handelt sich um einen Prozentwert
          
        new_option = new Option(Userwert,value,true,true);  //Userwert = angezeigter Wert, value = zu übertragener Wert  
        selectelem.options[selectelem.length] = new_option;  // hier wird der neue Eintrag hinzugefügt
        
      //  Optionen neu sortieren , die beiden nächsten Zeilen sortieren jeweils  wunderbar in Firefox. Im IE gehts mal wieder nicht
      //  $A(selectelem.options).sort(function(a,b) {return (parseFloat(a.value) < parseFloat(b.value)) ? -1 : 1;}).each(function(o,i){selectelem.options[i] = o});
      //  Array.prototype.sort.call(selectelem.options,function(a,b){return parseFloat(a.value) < parseFloat(b.value) ? -1 : parseFloat(a.value) > parseFloat(b.value) ? 1 : 0;});
        
      //  Dieser Aufwand ist wegen IE noetig
        sort_opt(selectelem);
    }
    //End AG 
    
    for (i = 0; i < selectelem.options.length; i++)
    {
      
      selectelem.options[i].selected        = (value == selectelem.options[i].value);
      selectelem.options[i].defaultSelected = (value == selectelem.options[i].value);
    }
  }
  else if (inputelem.type == "checkbox" || inputelem.type == "radio")
  {
    inputelem.checked        = value;
    inputelem.defaultChecked = value;
  }
  else if (inputelem.type == "text" || inputelem.type == "textarea" || inputelem.type == "password" || inputelem.type == "hidden")
  {
    inputelem.value        = value;
    inputelem.defaultValue = value;
  }
};

DetermineParameterValue = function(iface, address, ps_id, param_id, html_inputelem_id)
{
  ResetPostString();
  
  AddParam(document.getElementById('global_sid'));
  poststr += "&cmd=determineParameter";
  poststr += "&iface="             + iface;
  poststr += "&address="           + address;
  poststr += "&ps_id="             + ps_id;
  poststr += "&param_id="          + param_id;
  poststr += "&html_inputelem_id=" + html_inputelem_id;

  SendRequest('ic_ifacecmd.cgi');

  //ProgressBar = new ProgressBarMsgBox("Parameter wird festgesetzt...", 1);
  ProgressBar = new ProgressBarMsgBox(translateKey("dialogDetermineParameterTitle"), 1);
  ProgressBar.show();
    ProgressBar.StartKnightRiderLight();
};

ProofAndSetValue = function(srcid, dstid, min, max, dstValueFactor, event)
{
  // Falls das Tasten-Event nicht mit übergeben wurde ....
  var keyCode = 0;
  if (event) {
    keyCode = event.keyCode;
  }
 
  var ok = true;
    
  if (! min) min = 0;
  if (! max) max = 100;
  if (! dstValueFactor) dstValueFactor = 0.01;//dstValue = value/100
  
  value = $F(srcid);
  
  //replace , by .
  var idx = value.indexOf(',');
  if (idx >= 0)
  {
    var tokens = value.split(",");
    
    value = "";
    if (tokens[0]) value += tokens[0];
    value += '.';
    if (tokens[1]) value += tokens[1];

    $(srcid).value = value;
  }
  
  //User is already editing?
  if (value.charAt(value.length-1) == '.') return;

  if (! value)
  {
    //alert("Keine Zahl.");
    //value = 0;
    //$(dstid).value = min;
    ok = false;
  }
  else if (isNaN(value))
  {
    //alert("Keine Zahl.");
    //value = min;
    ok = false;
  }
  else if (value < min)
  {
    //alert("Der kleinste Wert ist 0.");
    //value = min;
    ok = false;
  }
  else if (value > max)
  {
    //alert("Der größte Wert ist 100.");
    //value = max;
    ok = false;
  }

  if (ok)
  {
    $(srcid).style.backgroundColor = "white";
    $(dstid).value = value * dstValueFactor;
    // Cursortasten abfangen, ansonsten springt der Cursor im Texteingabefeld
    // beim IE (Version 8 u. 9) mit jedem Druck auf eine Cursortaste ans Ende des Wertes.
    // Man kann nicht mittels Cursor-Links nach links wandern, da der Cursor immer ans Ende springt.
    // [HM-1293]
    if ((keyCode) < 37 && (keyCode > 40) ) {    
      $(srcid).value = value;
    }
  }
  else
  {
    $(srcid).style.backgroundColor = "red";
    $(dstid).value = max * dstValueFactor;
  }
};

elv_toQueryString = function(s)
{
  s = s.replace(/%/g, "%25");
  s = s.replace(/\+/g,"%2b");
  s = s.replace(/ /g, "%20");
  s = s.replace(/"/g, "%22");
  s = s.replace(/\?/g,"%3f");
  
  //Weicht von der tcl 'cgi_quote_url'-Funktion (cgi.tcl) ab:
  s = s.replace(/\&/g,"%26");

  return s;
};
/**
 * ic_msgbox.js
 **/

MsgBox = Class.create();

MsgBox.prototype =
{
  initialize: function(width, height, container_id)
  {
    if (width && height) this.init(width, height, container_id);
  },
  init: function(width, height, container_id)
  {
  if (width || height)
  {
      this.setWidth(width);
      this.setHeight(height);
  }
  else
  {
    this.stretchToMax();
  }

  if (container_id && container_id !== "") { this.container_id = container_id; }
  else                                     { this.container_id = "centerbox"; }

    this.setTopMargin(6);
    this.setLeftMargin(6);
  
    this.createMessagebox();
  },
  setWidth: function(width)
  {
    this.width = width;
  },
  setHeight: function(height)
  {
    this.height = height;
  },
  setLeftMargin: function(left)
  {
    this.LeftMargin = left;
  },
  setTopMargin: function(top)
  {
    this.TopMargin = top;
  },  
  stretchToMax: function() { 
    var maxHeight = 0;
    if (window.innerHeight) {
      maxHeight = window.innerHeight;
    }
    else {
      if (window.document.documentElement && window.document.documentElement.clientHeight)
        maxHeight = window.document.documentElement.clientHeight;
      else
        maxHeight = window.document.body.offsetHeight;
      
      this.setHeight(maxHeight - 50);
    }
    var maxWidth = screen.availWidth;
    this.setWidth(maxWidth - 50);
  },
  createMessagebox: function()
  {
    if ( !$('messagebox') )
    {      
      var newDiv = document.createElement("div");
      var newDivId = document.createAttribute("id");
      newDivId.nodeValue = "messagebox";
      newDiv.setAttributeNode(newDivId);
      var newDivStyle = document.createAttribute("style");
      newDivStyle.nodeValue = "width:"+this.width+"px;height:"+this.height+"px;padding: 0px;position:absolute;left: 50%;margin-left: -"+(this.width/2)+"px;margin-top: -"+(this.height/2)+"px;";
      if( typeof( newDiv.style.cssText ) == "string" )
        newDiv.style.cssText = newDivStyle.nodeValue;
      else
        newDiv.setAttributeNode(newDivStyle);
      
      $(this.container_id).appendChild(newDiv);
    }  
  },
  removeMessagebox: function()
  {
    if ( $('messagebox') )
    {
      $('messagebox').remove();
    }
  },
  setMessageText: function(text)
  {
    $(this.messagediv).innerHTML = text;
  },
  readaptSize: function()
  {
    if ( $('messagebox') )
    {
  /*
      $('messagebox').style.marginLeft = ($('messagebox').style.width.replace(/px$/,"")/2)*(-1)+"px";
      $('messagebox').style.marginTop = ($('messagebox').style.height.replace(/px$/,"")/2)*(-1)+"px";
  */
    //var h = $("messagebox").getHeight();
    var h = parseInt(jQuery("#messagebox").css("height"));
    $('messagebox').style.marginLeft = ($('messagebox').style.width.replace(/px$/,"")/2)*(-1)+"px";
    $('messagebox').style.marginTop = (h/4)*(-1)+"px";
    }
  },

  addMessage: function(id,message)
  {
    var newDiv;
    var newDivId;
    var newDivStyle;
    
    this.messagediv = id;
    newDiv = document.createElement("div");
    newDivId = document.createAttribute("id");
    newDivId.nodeValue = id;
    newDiv.setAttributeNode(newDivId);
    newDiv.className = "CLASS10102";
    var newTextNode = document.createTextNode(message);
    newDiv.appendChild(newTextNode);
    $('messagebox').appendChild(newDiv);
    newDiv = document.createElement("div");
    newDivId = document.createAttribute("id");
    newDivId.nodeValue = id+"_ctrls";
    newDiv.setAttributeNode(newDivId);
    newDiv.className = "CLASS10103";
    $('messagebox').appendChild(newDiv);
  },
  addButton: function(id,text,func)
  {
    var newInput = document.createElement("input");
    newInput.id = id;
    newInput.type = "button";
    newInput.value= text;
    newInput.onclick = func;
    Element.addClassName(newInput, "CLASS10100");  
//    var newBR = document.createElement("<br>");
//    $(this.messagediv).appendChild(newBR);
    $(this.messagediv+"_ctrls").appendChild(newInput);
  },
  show: function()
  {
  //$('messagebox').style.visibility = "visible";

  this.readaptSize();
  $('trlayer').show();
  $(this.container_id).show();
  },  
  hide: function(do_not_remove)
  {
  //$('messagebox').style.visibility = "hidden";
  //$('messagebox').hide();

  $(this.container_id).hide();
  if (! do_not_remove) this.remove();
  $('trlayer').hide();
  },
  removeAndReload: function()
  {
    this.hide();
//  this.remove();
  reloadPage();
  //location.reload();
  },    
  remove: function()
  {
    this.removeMessagebox();
    //this.removeModalbox();
  },
  LoadFromFile: function(url)
  {
  url = Get_ReGa_Path(url);
/*
    new Ajax.Updater('messagebox',url,{method:'get', evalScripts: true, onFailure:function(){alert('LoadFromFile-Error');} });
    try { this.OnFileLoaded(); } catch (e) {}
*/

  //var url = fn+'?sid='+SessionId;
  //var t = this; 
  var opt = 
  {
    method: 'get', 
    evalScripts: true,
    onComplete: function(trans) {
      centerMessageBox();
    },
    onFailure: function() { 
      alert('LoadFromFile-Error');
    }
  };

  new Ajax.Updater('messagebox', url, opt);
  },

  CreateButton: function(text) 
  {
    var newInputDiv = document.createElement("span");
    Element.addClassName(newInputDiv, "CLASS10101 colorGradient borderRadius2px");
    
    var newInputDivText = document.createTextNode(text);
    newInputDiv.appendChild(newInputDivText);
    
    return newInputDiv;
  }, 
  
  AddDivWrapper: function(divid, parentnodeid) {
    
  var newDiv = document.createElement("div");
  newDiv.setAttribute("id", divid);

  if (parentnodeid) $(parentnodeid).appendChild(newDiv);
    else              $('messagebox').appendChild(newDiv);
  }
};
/**
 * ic_infomsgbox.js
 **/

ShowInfoMsg = function(msg)
{
  InfoMsg = new InfoMessageBox("INFO", msg);
  InfoMsg.show();
};

ShowWarningMsg = function(msg)
{ 
  InfoMsg = new InfoMessageBox("WARNING", msg);
  InfoMsg.show();
};

ShowErrorMsg = function(msg)
{ 
  InfoMsg = new InfoMessageBox("ERROR", msg);
  InfoMsg.show();
};

InfoMessageBox = Class.create();

InfoMessageBox.prototype = Object.extend(new MsgBox(), {
  
  initialize: function(type, msg) {
  
  this.init(320, 240);

  this.AddDivWrapper("id_messagebox");
  this.AddDivWrapper("id_messagebox_wrapper", "id_messagebox");
  this.AddDivWrapper("id_messagebox_head",    "id_messagebox_wrapper");
  this.AddDivWrapper("id_messagebox_body",    "id_messagebox_wrapper");
  this.AddDivWrapper("id_messagebox_foot",    "id_messagebox_wrapper");

  var img = document.createElement("img");
  img.style.margin = "4px";
  
  if      (type == "INFO")    img.src = "/ise/img/dialog-information.png";
  else if (type == "WARNING") img.src = "/ise/img/dialog-warning.png";
  else                        img.src = "/ise/img/dialog-error.png";

  $("id_messagebox_head").style.verticalAlign = "top";
  $("id_messagebox_head").appendChild(img);
  
  var textnode;

  //if      (type == "INFO")    textnode = document.createTextNode("HomeMatic Information");
  if      (type == "INFO")    textnode = document.createTextNode(translateKey("dialogTitleHomeMaticInfo"));
  //else if (type == "WARNING") textnode = document.createTextNode("HomeMatic Warnung");
  else if (type == "WARNING") textnode = document.createTextNode(translateKey("dialogTitleHomeMaticWarn"));
  //else                        textnode = document.createTextNode("HomeMatic Fehler");
  else                        textnode = document.createTextNode(translateKey("dialogTitleHomeMaticError"));
  
  $("id_messagebox_head").appendChild(textnode);

  div = document.createElement("div");
  Element.addClassName(div, "CLASS10300");

  if (type == "ERROR")
  {
    Element.addClassName("CLASS10301");
  }
  div.innerHTML = msg;

  $('id_messagebox_body').appendChild(div);

  //var newInputDiv = this.CreateButton("OK");
  var newInputDiv = this.CreateButton(translateKey("btnOk"));
  newInputDiv.onclick = function() { InfoMsg.OnOK(); };
  newInputDiv.style.paddingRight = "20px";
  newInputDiv.style.paddingLeft  = "20px";
  $('id_messagebox_foot').appendChild(newInputDiv);
  $('id_messagebox_foot').style.textAlign = "center";

  //$('id_messagebox_wrapper').style.marginBottom = "5px";
  $('id_messagebox_wrapper').addClassName("CLASS10302");
  },

  OnOK: function ()
  {
  //InfoMsg.remove();
  InfoMsg.hide();
  }
});
/**
 * ic_progressbar.js
 **/

//Defines
PROGRESSBAR_HL_COLOR = WebUI.getColor("progressbarHighlight");  //Highlight
PROGRESSBAR_BG_COLOR = WebUI.getColor("progressbarBackground"); //Background
PROGRESSBAR_TX_COLOR = WebUI.getColor("progressbarText");       //Text-Color
PROGRESSBAR_HL_STROKE = 4;//Strichstärke
PROGRESSBAR_WIDTH = 300;//Breite des Balkens
PROGRESSBAR_HEIGHT = 20;//Höhe des Balkens
PROGRESSBAR_KNIGHTRIDER_WIDTH = parseInt(PROGRESSBAR_WIDTH/5);
PROGRESSBAR_KNIGHTRIDER_STEP = 61;
//-----

ProgressBarMsgBox = Class.create();

ProgressBarMsgBox.prototype = Object.extend(new MsgBox(), {
  
  initialize: function(caption, endcounter) {
  
  this.init(335, 240, 'progressbox');
  this.index = 0;
  this.endcounter = endcounter;

  this.knightrider_position = 0;
  this.knightrider_running = false;

  if (!endcounter || endcounter < 0)
  {
    this.stepwidth = PROGRESSBAR_WIDTH;
    this.steppercent = 100;
  }
  else
  {
    this.stepwidth = Math.round(PROGRESSBAR_WIDTH / endcounter);
    this.steppercent = Math.round( 100 / endcounter );
  }

  this.AddDivWrapper("id_progressbar_wrapper");
  $('id_progressbar_wrapper').style.border = "3px solid " +PROGRESSBAR_HL_COLOR;
  
  this.AddDivWrapper("id_progressbar_head", "id_progressbar_wrapper");
  this.AddDivWrapper("id_progressbar_body", "id_progressbar_wrapper");
  this.AddDivWrapper("id_progressbar_foot", "id_progressbar_wrapper");

  $('id_progressbar_foot').style.height = "50px";
  $('id_progressbar_foot').style.marginTop = "10px";
  $('id_progressbar_foot').style.textAlign = "center";
  $('id_progressbar_foot').style.fontSize = "smaller";

  $('id_progressbar_head').classname = "popupTitle";
  $('id_progressbar_head').style.fontWeight = "bold";
  $('id_progressbar_head').style.padding = "4px";
  $('id_progressbar_head').style.textAlign = "center";
  var textnode = document.createTextNode(unescape(translateKey(caption)));
  $('id_progressbar_head').appendChild(textnode);

  var newDiv = document.createElement("div");
  newDiv.id = "id_progressbar_bar";
  newDiv.style.width  = PROGRESSBAR_WIDTH + "px";
  newDiv.style.height = PROGRESSBAR_HEIGHT + "px";
  newDiv.style.position = "relative";
  newDiv.style.margin = "10px 0 0 10px";
  $('id_progressbar_body').style.padding = "7px";
  $('id_progressbar_body').appendChild(newDiv);

  this.jg_progressbar = new jsGraphics("id_progressbar_bar");
    this.InitGD();
  this.ClearCanvas();

    //this.SetMessage("Bitte warten...");
    this.SetMessage(translateKey("progressBarLblPleaseWait"));
  },

  StartKnightRiderLight: function ()
  {
    this.knightrider_position = 0;
    if (PROGRESSBAR_KNIGHTRIDER_STEP < 0) PROGRESSBAR_KNIGHTRIDER_STEP = -PROGRESSBAR_KNIGHTRIDER_STEP; //rechts lang!
    
    this.ClearCanvas();
    this.jg_progressbar.fillRect(parseInt(0), parseInt(0), parseInt(PROGRESSBAR_KNIGHTRIDER_WIDTH), parseInt(PROGRESSBAR_HEIGHT));
    this.jg_progressbar.paint();
  
      this.knightrider_running = true;
    window.setTimeout("ProgressBar.StepKnightRiderLight();", 250);
  },
  
  StopKnightRiderLight: function ()
  {
    this.knightrider_running = false;
  },

  StepKnightRiderLight: function ()
  {
  if (! this.knightrider_running) return;

  if (this.knightrider_position + PROGRESSBAR_KNIGHTRIDER_STEP + PROGRESSBAR_KNIGHTRIDER_WIDTH > PROGRESSBAR_WIDTH)
  {
    this.knightrider_position = PROGRESSBAR_WIDTH - PROGRESSBAR_KNIGHTRIDER_WIDTH; //Letzte mögliche Position
    PROGRESSBAR_KNIGHTRIDER_STEP = -PROGRESSBAR_KNIGHTRIDER_STEP; //anders herum
  }
  else if (this.knightrider_position + PROGRESSBAR_KNIGHTRIDER_STEP < 0)
  {
    this.knightrider_position = 0;
    PROGRESSBAR_KNIGHTRIDER_STEP = -PROGRESSBAR_KNIGHTRIDER_STEP; //anders herum
  }
  else
  {
    this.knightrider_position += PROGRESSBAR_KNIGHTRIDER_STEP;
  }
  
  this.ClearCanvas();
  this.jg_progressbar.fillRect(parseInt(this.knightrider_position), parseInt(0), parseInt(PROGRESSBAR_KNIGHTRIDER_WIDTH), parseInt(PROGRESSBAR_HEIGHT));
  this.jg_progressbar.paint();

  window.setTimeout("ProgressBar.StepKnightRiderLight();", 250);
  },

  ClearCanvas: function ()
  {
    this.jg_progressbar.clear();
      this.jg_progressbar.setColor(PROGRESSBAR_BG_COLOR);
    this.jg_progressbar.fillRect(parseInt(0), parseInt(0), parseInt(PROGRESSBAR_WIDTH), parseInt(PROGRESSBAR_HEIGHT));
    this.jg_progressbar.paint();
      this.jg_progressbar.setColor(PROGRESSBAR_HL_COLOR);
  },

  InitGD: function () {
     this.jg_progressbar.setColor(PROGRESSBAR_HL_COLOR);
    this.jg_progressbar.setStroke(parseInt(PROGRESSBAR_HL_STROKE));
  },

  SetMessage: function(msg) {

  if (! $('id_progressbar_foot')) return;
  
  $('id_progressbar_foot').innerHTML = "";
  var textnode = document.createTextNode(msg);
  $('id_progressbar_foot').appendChild(textnode);
  },

  OnFinish: function() {
  return;
  },

  IncCounter: function(msg) {
  
  this.index++;

  this.SetMessage(msg);

  if (! this.knightrider_running)
  {
    //Prozentangabe anschreiben

    percent = this.steppercent * this.index;

    var w = this.index * this.stepwidth;
    if (w > PROGRESSBAR_WIDTH) w = PROGRESSBAR_WIDTH;

    this.ClearCanvas();
    this.jg_progressbar.fillRect(parseInt(0), parseInt(0), w, parseInt(PROGRESSBAR_HEIGHT));

    this.jg_progressbar.setColor(PROGRESSBAR_TX_COLOR);
    this.jg_progressbar.drawString(percent + "%", parseInt(PROGRESSBAR_WIDTH/2), 2);
    this.jg_progressbar.setColor(PROGRESSBAR_HL_COLOR);

    this.jg_progressbar.paint();
   }

  if (this.index == this.endcounter)
  {
      this.StopKnightRiderLight();//wenn vorhanden
    this.OnFinish();
    this.hide();
  }
  }
});
/**
 * ic_configpendingmsg.js
 **/
 
ConfigPendingMsgBox = Class.create();

ConfigPendingMsgBox.prototype = Object.extend(new MsgBox(), {
  
  initialize: function(w, h)
  {
    this.init(w, h);
    this.configpendingcount = 0;
    this.iface   = "";
    this.url     = ""; //s. setReturnURL
    this.sid     = ""; //s. setReturnURL
    this.sidname = ""; //s. setReturnURL
    
    this.returnurl = "";
    this.returnurl_params = "";
    this.go_back = false;

    this.addr = new Array(2);
    this.addr.clear();

    //defines
    this.CONFIGPENDING_SENDER = 0;
    this.CONFIGPENDING_RECEIVER = 1;
    //---

    this.AddDivWrapper("id_configpending_head");
    $("id_configpending_head").className = "popupTitle";
    $("id_configpending_head").style.fontWeight = "bold";
    //this.AddTextNode("id_configpending_head", "Verknüpfungs- und Programmstatus");
    this.AddTextNode("id_configpending_head", translateKey("dialogCreateLinkTitle"));
  
    this.AddDivWrapper("id_configpending_overflow");
    $("id_configpending_overflow").style.overflow = "auto";
    $("id_configpending_overflow").style.width  = "100%";
    $("id_configpending_overflow").style.height = "100%";
  
    this.AddDivWrapper("id_configpending_body", "id_configpending_overflow");
    this.AddDivWrapper("id_configpending_foot", "id_configpending_overflow");
    $("id_configpending_foot").addClassName("CLASS10200");

    this.AddTableHead();
    this.ResetTable();
  },

  m_return: function()
  {
    switch (this.url)
    {
      case "IC_LINKPEERLIST":
        WebUI.enter(LinkListPage);
        break;
      case "IC_SETPROFILES":
        WebUI.enter(LinkEditProfilePage, {
          iface:    this.iface,
          sender:   (this.addr)[this.CONFIGPENDING_SENDER],
          receiver: (this.addr)[this.CONFIGPENDING_RECEIVER]
        });
        break;
      case "GO_BACK": 
        WebUI.goBack();
        break;
      default:
        break;
    }
  },
  
  setReturnURL: function(sidname, sid, url, goBack)
  {
    this.go_back = goBack;
    this.url     = url;
    this.sid     = sid;
    this.sidname = sidname;

    if (goBack === true) { this.url = "GO_BACK"; }

/*    
    if (url == "IC_LINKPEERLIST")
    {
      this.returnurl = UI_PATH + "ic_linkpeerlist.cgi";
      if (LINKLISTSORTBY) this.returnurl_params = "&LINKLISTSORTBY=" + LINKLISTSORTBY;
    }
    else if (url == "IC_SETPROFILES" )
    {
      this.returnurl = UI_PATH + "ic_setprofiles.cgi";
      this.returnurl_params = "&iface="  + this.iface +
        "&sender_address="   + (this.addr)[this.CONFIGPENDING_SENDER] +
        "&receiver_address=" + (this.addr)[this.CONFIGPENDING_RECEIVER];
    }
    else if (url == "GO_BACK" )
    {
      this.returnurl = sPreviousPage;
      this.returnurl_params = sPreviousPageArgs;
    }
    else
    {
      this.returnurl = "";
    }
*/    
  },

  ClearTable: function()
  {
    if($('id_configpending_table_tbody')) $('id_configpending_table_tbody').innerHTML = "";
  },
  
  AddTextNode: function (id, text)
  {    
    var textnode = document.createTextNode(text);
    $(id).appendChild(textnode);
  },

  SetNavigationBar: function ()
  {
    
    $('id_configpending_foot').innerHTML = "";

    if (this.configpendingcount === 0)
    {
      var newInputDiv = this.CreateButton("OK");
      newInputDiv.onclick = function()
      {
        ConfigPendingFrm.hide();
/*        
        if (ConfigPendingFrm.go_back) { WebUI.goBack(); }
        else { updateContent(ConfigPendingFrm.returnurl, ConfigPendingFrm.returnurl_params); }
*/        
        ConfigPendingFrm.m_return();
      };
      $('id_configpending_foot').appendChild(newInputDiv);
    }
    else
    {
      //var newInputDiv1 = this.CreateButton("Erneut prüfen");
      var newInputDiv1 = this.CreateButton(translateKey("btnDirectDeviceLinkCheckAgain"));
      newInputDiv1.onclick = function()
      {
        ConfigPendingFrm.hide();
        CheckConfigPending(ConfigPendingFrm.iface, (ConfigPendingFrm.addr)[ConfigPendingFrm.CONFIGPENDING_SENDER], (ConfigPendingFrm.addr)[ConfigPendingFrm.CONFIGPENDING_RECEIVER], ConfigPendingFrm.url, ConfigPendingFrm.go_back);
      };
      $('id_configpending_foot').appendChild(newInputDiv1);
    
      //var newInputDiv2 = this.CreateButton("Ignorieren");
      var newInputDiv2 = this.CreateButton(translateKey("btnDirectDeviceLinkIgnore"));
      newInputDiv2.onclick = function()
      {
        ConfigPendingFrm.hide();
        ConfigPendingFrm.m_return();
/*        
        if (ConfigPendingFrm.go_back) { WebUI.goBack(); }
        else { updateContent(ConfigPendingFrm.returnurl, ConfigPendingFrm.returnurl_params); }
*/        
      };
      $('id_configpending_foot').appendChild(newInputDiv2);
    }
  },

  AddTableHead: function ()
  {
    var table = document.createElement("table");
    table.id = 'id_configpending_table';
    table.className = "popupTable";
    table.border = "1";

    var thead = document.createElement("thead");
    table.appendChild(thead);

    var tr = document.createElement("tr");
    tr.className = "popupTableHeaderRow";

    var td = new Array(4);

    //var textnode = document.createTextNode("Name");
    var textnode = document.createTextNode(translateKey("thName"));
    td[0] = document.createElement("th");
    td[0].appendChild(textnode);
    tr.appendChild(td[0]);  

    //textnode = document.createTextNode("Typenbezeichnung");
    textnode = document.createTextNode(translateKey("thTypeDescriptorWOLineBreak"));
    td[1] = document.createElement("th");
    td[1].appendChild(textnode);
    tr.appendChild(td[1]);  

    //textnode = document.createTextNode("Bild");
    textnode = document.createTextNode(translateKey("thPicture"));
    td[2] = document.createElement("th");
    td[2].appendChild(textnode);
    tr.appendChild(td[2]);  

    //textnode = document.createTextNode("Hinweis");
    textnode = document.createTextNode(translateKey("thHint"));
    td[3] = document.createElement("th");
    td[3].appendChild(textnode);
    tr.appendChild(td[3]);  

    thead.appendChild(tr);

    $('id_configpending_body').appendChild(table);
  },

  ResetTable: function()
  {

    this.configpendingcount = 0;
  
    try
    {
      Element.remove($('id_configpending_table_tbody'));
    }
    catch (e) {}
  
    var tbody = document.createElement("tbody");
    tbody.id = "id_configpending_table_tbody";
    $('id_configpending_table').appendChild(tbody);

    var tr = document.createElement("tr");
    tr.id = "id_configpending_tr_NODATA";
    tr.style.height = "50px";
    tr.className = "popupTableRowGray";

    //var textnode = document.createTextNode("Die Übertragung ist erfolgreich verlaufen.");
    var textnode = document.createTextNode(translateKey('dialogCreateLinkSuccessContent'));
    var td = document.createElement("td");
    td.colSpan = 4;
    td.appendChild(textnode);
    tr.appendChild(td);  

    tbody.appendChild(tr);
  },

  SetDevice: function(iface, address, direction) 
  {
    if (direction == this.CONFIGPENDING_SENDER) (this.addr)[this.CONFIGPENDING_SENDER]   = address;
    else                                        (this.addr)[this.CONFIGPENDING_RECEIVER] = address;

    this.iface = iface;

    this.SetNavigationBar();
  },

  ShowConfigPending: function(iface, address, name, type, configpending, index, direction) 
  {
    if (direction == this.CONFIGPENDING_SENDER) (this.addr)[this.CONFIGPENDING_SENDER]   = address;
    else                                        (this.addr)[this.CONFIGPENDING_RECEIVER] = address;

    this.iface = iface;

    var tbody = $('id_configpending_table_tbody');
    var devicecount = tbody.getElementsByTagName('tr').length;

    var tr = document.createElement("tr");
    tr.id = "id_configpending_tr_" + this.configpendingcount;
    tr.className = "popupTableRowGray";

    var td = new Array(4);

//    var textnode = document.createTextNode(name.unescapeHTML());
    td[0] = document.createElement("td");
//    td[0].appendChild(textnode);
    td[0].innerHTML = name;
    tr.appendChild(td[0]);  

    textnode = document.createTextNode(type);
    td[1] = document.createElement("td");
    td[1].appendChild(textnode);
    tr.appendChild(td[1]);  

    var img = document.createElement("img");
    img.setAttribute("src",   DEV_getImagePath(type, 50));
    img.setAttribute("title", name);
    img.setAttribute("alt",   address);
  
    var div = document.createElement("div");
    div.setAttribute('id', 'id_configpending_picDiv_' + this.configpendingcount);
    div.onmouseover = function () { picDivShow(jg_250, type, 250, -1, this); };
    div.onmouseout  = function () { picDivHide(jg_250); };
    div.style.position = "relative";
    div.appendChild(img);
  
    td[2] = document.createElement("td");
    td[2].style.backgroundColor = WebUI.getColor("white");
    td[2].appendChild(div);
    tr.appendChild(td[2]);  

    var linecount = $('id_configpending_table_tbody').getElementsByTagName("tr").length;
  
    if (((linecount > 1) && (this.configpendingcount === 1) && (configpending === 1)) ||
        ((linecount > 1) && (this.configpendingcount === 0) && (configpending === 0))) /*linecount > 1 weil die erste Zeile unsichtbar ist.*/
    {
      //Die letzte Meldung soll für dieses Gerät mitgelten. Meldungen zusammenfassen:

      var msg_td = $('id_configpending_tr_0').getElementsByTagName("td")[3];
      var rs = msg_td.getAttribute("rowspan");

      if ( !rs || rs === "") { msg_td.rowSpan = 2; }                 //Attribut neu anlegen
      else                   { msg_td.rowSpan = parseInt(rs) + 1; }  //Attributwert hochzählen
    }
    else if (configpending == 1)
    {
      td[3] = document.createElement("td");
      td[3].style.padding = "5px";
    
      //textnode = document.createTextNode("Die Übertragung der Daten zum Gerät konnte nicht ordnungsgemäß durchgeführt werden. Wählen Sie:");
      textnode = document.createTextNode(translateKey("dialogCreateLinkErrorContent1"));
      td[3].appendChild(textnode);
    
      var ul = document.createElement("ul");

      var li_text = new Array(2);
      //li_text[0] = document.createTextNode("\"Erneut prüfen\", wenn Sie die Übertragung zum Gerät jetzt abschließen möchten. Sorgen Sie dazu bitte dafür, dass sich");
      li_text[0] = document.createTextNode(translateKey("dialogCreateLinkErrorContent2"));
      
      var ul2 = document.createElement("ul");
      var li_text2 = new Array(2);
      //li_text2[0] = document.createTextNode("das Gerät innerhalb der Funkreichweite befindet und aktiv ist,");
      li_text2[0] = document.createTextNode(translateKey("dialogCreateLinkErrorContent3"));
      //li_text2[1] = document.createTextNode("das Gerät im Anlernmodus befindet.");
      li_text2[1] = document.createTextNode(translateKey("dialogCreateLinkErrorContent4"));
      var li2 = new Array(2);
      li2[0] = document.createElement("li");
      li2[0].appendChild(li_text2[0]);
      li2[1] = document.createElement("li");
      li2[1].appendChild(li_text2[1]);
      ul2.appendChild(li2[0]);
      ul2.appendChild(li2[1]);
    
      //li_text[1] = document.createTextNode("\"Ignorieren\", wenn die Zentrale die Übertragung zum Gerät bei nächster Gelegenheit selbstständig durchführen soll. Bis dahin ist dieser Konfigurationsvorgang als offene Servicemeldung sichtbar.");
      li_text[1] = document.createTextNode(translateKey("dialogCreateLinkErrorContent5"));
      
      var li = new Array(2);
      li[0] = document.createElement("li");
      li[0].appendChild(li_text[0]);
      li[0].appendChild(ul2);
      li[1] = document.createElement("li");
      li[1].appendChild(li_text[1]);

      ul.appendChild(li[0]);
      ul.appendChild(li[1]);
    
      td[3].appendChild(ul);
      td[3].align = "left";
      td[3].style.color = WebUI.getColor("red");
      td[3].style.fontWeight = "bold";

      tr.appendChild(td[3]);  

      this.configpendingcount++;
    }
    else if (configpending === 0)
    {
      //textnode = document.createTextNode("Die Übertragung der Daten zum Gerät wurde erfolgreich abgeschlossen.");
      textnode = document.createTextNode(translateKey("dialogCreateLinkSuccessContent"));
      td[3] = document.createElement("td");
      td[3].appendChild(textnode);
      td[3].align = "left";
      tr.appendChild(td[3]);  
    }
    else
    {
      //textnode = document.createTextNode("Übertragung nicht erfolgt, weil das Gerät unbekannt ist.");
      textnode = document.createTextNode(translateKey("dialogCreateLinkErrorUnknownDevice"));
      td[3] = document.createElement("td");
      td[3].appendChild(textnode);
      td[3].align = "left";
      td[3].style.color = WebUI.getColor("red");
      td[3].style.fontWeight = "bold";
      tr.appendChild(td[3]);  
    }

    tbody.appendChild(tr);
    this.SetNavigationBar();

    $("id_configpending_tr_NODATA").style.display    = "none";
    $("id_configpending_tr_NODATA").style.visibility = "hidden";
  }
});
/**
 * ic_selchannel.js
 **/
 
//======================================================================
// Globale Variablen für diese Datei
SORT_DESC   = false;
IGNORE_CASE = true;
SORTED_COL  = -1;
SORT_ASC_SRC  = "/ise/img/arrow_up.gif";
SORT_DESC_SRC = "/ise/img/arrow_down.gif";
//======================================================================

//------------------------------------------------------------------------
//Klasse SelChannelBox für das PopUp Kanalauswahl:
/*
SelChannelBox = Class.create();

SelChannelBox.prototype = Object.extend(new MsgBox(), {
  initialize: function(w, h) {

  this.init(w, h);
  }
});
*/
//------------------------------------------------------------------------

CloseSelChannel = function()
{
  updateContent(UI_PATH + "ic_linkpeerlist.cgi");
};

Sort = function(tableid, colNr)
{
  HideFilterControls();

  if (($F('global_realchannels') === 0) && ($F('global_virtualchannels') === 0)) return;

  try 
  {
    SORTED_COL = document.getElementsByClassName('sorted')[0].cellIndex;
  }
  catch (e) {
    //alle unsorted: einen auf sorted stellen
    $('tr_caption_colnames').getElementsByTagName("td")[colNr     ].className = "sorted";
  }
      
  if (SORTED_COL != colNr && SORTED_COL != -1)
  {
    //Highlighting ändern
    $('tr_caption_colnames').getElementsByTagName("td")[SORTED_COL].className = "unsorted";
    $('tr_caption_colnames').getElementsByTagName("td")[colNr     ].className = "sorted";
  }

  SetSortingOrder(colNr);
  
  //Sortierungssymbol zuordnen:
  var img = $('tr_caption_colnames').getElementsByTagName("td")[colNr].getElementsByTagName("img")[0];
  SORT_DESC ? img.src=SORT_DESC_SRC : img.src=SORT_ASC_SRC;
  //-----

  SortTable(tableid, colNr);

  SORTED_COL = colNr;
};

//Wenn b_order_desc nicht gesetzt, dann wird die Sortierreihenfolge gewechselt,
//es sei denn, die Spalte wird zum ersten mal sortiert. Bei der ersten Sortierung
//wird standardmäßig aufsteigend sortiert.
SetSortingOrder = function(colNr, b_order_desc)
{
  if (b_order_desc)
  {
    SORT_DESC = b_order_desc;
  }
  else
  {
    if  (SORTED_COL == -1 || SORTED_COL != colNr) SORT_DESC = false; //init und default bei Spaltenwechsel
    else                                          SORT_DESC = !SORT_DESC; //Wechsel der Sortierreihenfolge
  }
};

SortTable = function(tableid, colNr)
{
  var tr_list = $('chnListBody').getElementsByTagName("tr");

  var valueList = new Array();
  var valueMap  = new Object();
  var value;
  var i;

  for (i = 0; i < tr_list.length; i++)
  {
    value = tr_list[i].cells[colNr].innerHTML.replace(/<[^>]+>/g,"");
    
    if (typeof(valueMap[value]) == "undefined")
    {
      valueMap[value] = new Array(); //Liste nimmt Tabellenzeile gleichen values auf.
      valueList.push(value); //In dieser Liste ist value nur einmal drin.
    }
    
    valueMap[value].push(tr_list[i]); //Liste gleicher values nimmt Zeile auf
  }

  valueList.sort(compareStrings_globalsettings); //Liste sortieren

  var rowList;
  var headerlen = tr_list[0].rowIndex;
  var k = 0;

  for (i = 0; i<valueList.length; i++) //Zeilen eines gleich bleibenden values nacheinander einbauen
  {
    rowList = valueMap[valueList[i]];
    
    for (var j = 0; j < rowList.length; j++) //Für jede Zeile mit gleichem value (Array)
    {
      if (k+headerlen != rowList[j].rowIndex) swapRows(tableid, k + headerlen, rowList[j].rowIndex);
      k++;
    }
  }
};

compareStrings_globalsettings = function(x, y)
{
  return compareStrings(x, y, SORT_DESC, IGNORE_CASE);
};

//b_order_desc == true:  Sortierreihenfolge absteigend
//             == false:                    aufsteigend
//b_ignore_case == true: Groß-/Kleinschreibung nicht beachten (Muster == muster)
//              == false:                      beachten       (Muster != muster)
compareStrings = function(x, y, b_order_desc, b_ignore_case)
{
  var higherindex;
  var lowerindex;
  var equalindex = 0;
  var xx = x;
  var yy = y;

  if (b_order_desc)
  {
    //Sortierung absteigend
    higherindex = -1;
    lowerindex  =  1;
  }
  else
  {
    //Sortierung aufsteigend
    higherindex =  1;
    lowerindex  = -1;
  }
  
  if (b_ignore_case)
  {
    //Groß-/Kleinschreibung ignorieren
    xx = xx.toLowerCase();
    yy = yy.toLowerCase();
  }
  
  if      (xx < yy) return lowerindex;
  else if (xx > yy) return higherindex;
  else              return equalindex;
};

swapRows = function(tableid, i, j)
{
  var table      = document.getElementById(tableid);
  var minNode    = table.rows[Math.min(i, j)];
  var maxNode    = table.rows[Math.max(i, j)];
  var parentNode = minNode.parentNode;
  
  if ((i - j) * (i - j) == 1)
  {
    parentNode.removeChild(maxNode);
    parentNode.insertBefore(maxNode, minNode);
  }
  else
  {
    var nextNode = minNode.nextSibling;
    
    parentNode.removeChild(minNode);
    parentNode.replaceChild(minNode, maxNode);
    parentNode.insertBefore(maxNode, nextNode);
  }
};

AddFilter = function(colNr)
{
  HideElement('id_filtercontrol_' + colNr);

  if (($F('global_realchannels') == 0) && ($F('global_virtualchannels') == 0)) { return; }

  var input = document.getElementsByName('input_filtercontrol_' +colNr);
  var patternlist = "";
  var i;

  if ((input == null) || (input[0] == null)) { return; }

  if (input[0].type == "text")
  {
    patternlist = input[0].value;
  }
  else if (input[0].type == "checkbox") 
  {
    for (i = 0; i < input.length; i++)
    {
      if (input[i].checked) patternlist += input[i].value + '|';
    }
  
    if (patternlist.length !== "") { patternlist = patternlist.substring(0, patternlist.length-1); }
  }
  else if (input[0].type== "radio") 
  {
    for (i = 0; i < input.length; i++)
    {
      if (input[i].checked)
      {
        patternlist = input[i].value;
        break;
      }
    }
  }
    
  addFilterColumn($('chnListBody').getElementsByTagName("tr"), colNr, patternlist);
  
  if (patternlist !== "") { $('id_filtertd_'+ colNr).className = "filtered"; }
  else                    { $('id_filtertd_'+ colNr).className = "unfiltered"; }
};

ResetFilter = function()
{
  //var table  = document.getElementById('ChnListTbl');
  //var len = table.getElementsByTagName("tbody")[0].getElementsByTagName("tr")[0].getElementsByTagName("td").length;
  var i=0;
  
  while ($('id_filtercontrol_'+i) !== null)
  {
    HideElement('id_filtercontrol_' + i);

    var input = document.getElementsByName('input_filtercontrol_' +i);

    if ((input !== null) && (input[0] !== null) && typeof (input[0]) != "undefined")
    {
      if (input[0].type == "text")
      {
        input[0].value = "";
      }
      else if ((input[0].type == "checkbox") || (input[0].type == "radio")) 
      {
        for (var j=0; j<input.length; j++) input[j].checked = false;
      }
  
      $('id_filtertd_'+ i).className = "unfiltered";
    }
    
    i++;
  }
};

ResetTable = function()
{
  if (($F('global_realchannels') === 0) && ($F('global_virtualchannels') === 0)) return;
  
  var tr_list  = $('chnListBody').getElementsByTagName("tr");
  for (var i=0; i<tr_list.length; i++) 
  {
    tr_list[i].style.display = '';
    //wenn Verknuepfungspartner vorhanden ist, trifft die 2. Bedingung nicht zu (kein Bild vorhanden)
		if ((tr_list[i].className != "virtual_key_hidden") && (tr_list[i].cells.length > 1)) 
    {
      tr_list[i].cells[2].childNodes[0].style.display = '';  //um die Bilder wieder einzublenden
    }
  }
};

ResetFilterAndTable = function()
{
  ResetFilter();
  ResetTable();
};

HideFilterControls = function()
{
  var i=0;
  
  while ( $('id_filtercontrol_'+i) !== null)
  {
    HideElement('id_filtercontrol_' + i);
    i++;
  }
};

ShowFilterControl = function(colNr)
{
  var visible = $('id_filtercontrol_' +colNr).style.visibility == "visible";

  HideFilterControls();

  if (! visible) 
  {
    ShowElement('id_filtercontrol_' + colNr);

    var input = document.getElementsByName('input_filtercontrol_' +colNr)[0];
    if ((input !== null) && (input.type == "text"))
    {
      input.focus();
      input.select();
    }
  }
};

filterTable = function()
{
  var i=0;

  ResetTable();//Zeige alle Zeilen

  while ( $('id_filtercontrol_'+i) != null)
  {
    AddFilter(i); //Filter setzen in Zeile i
    i++;
  }
  SizeTable();
};

filterCheckEnterEsc = function(keyCode, filterNr)
{
  switch (keyCode) {
    case 13:
      // Set the filter -- press ok
      filterTable();
      break;
    case 27:
      jQuery("#inputTextFilter_" + filterNr).val("");
      filterTable();
      break;
  }
};

//Filtert eine Tabelle und lässt nur die Zeilen sichtbar,
//  die mit einem Muster (Liste) übereinstimmen. Die 
//  Tabelle muss ein <tbody> - Tag haben.
//tableid: html-id des table-Tags
//colNr: Spalte, die nach pattern gefiltert werden soll 
//patternlist: pattern1|pattern2|pattern3|...|patternN
addFilterColumn = function(tr_list, colNr, patternlist)
{
  var patterns = patternlist.toLowerCase().split("|");

  if (patternlist === "") return;

  for (var i=0; i<tr_list.length; i++)
  {
    var text = tr_list[i].cells[colNr].innerHTML.replace(/<[^>]+>/g,"");
    text = text.toLowerCase();

    for (var j=0; j<patterns.length; j++)
    {
      var pattern = patterns[j].toLowerCase();
      
      if (text.indexOf(pattern) < 0)
      {
        tr_list[i].style.display = 'none';
        tr_list[i].cells[2].childNodes[0].style.display = 'none';  //um die Bilder im IE auszublenden
        break;
      }
    }
  }
};

ToggleVirtualKeys = function()
{
  var i;
  var tr;
  
  //if ( $('ToggleVirtualKeys').firstChild.nodeValue == "Virtuelle Kanäle ausblenden" )
  if ( $('ToggleVirtualKeys').firstChild.nodeValue == translateKey("footerBtnVirtualChannelsHide") )
  {
    tr = $A(document.getElementsByClassName('virtual_key_visible'));

    for (i = 0; i < tr.length; i++) 
    {
      tr[i].className = "virtual_key_hidden";
      tr[i].cells[2].childNodes[0].style.display = 'none';  //um die Bilder im IE auszublenden
    }

    //$('ToggleVirtualKeys').firstChild.nodeValue  = "Virtuelle Kanäle einblenden";
    $('ToggleVirtualKeys').firstChild.nodeValue  = translateKey("footerBtnVirtualChannelsShow");
  }
  else
  {
    tr = $A(document.getElementsByClassName('virtual_key_hidden'));

    for (i = 0; i < tr.length; i++)
    {
      tr[i].className = "virtual_key_visible";
      if (tr[i].style.display != 'none')
      {
        tr[i].cells[2].childNodes[0].style.display = '';  //um die Bilder im IE wieder einzublenden
      }
    }
    
    //$('ToggleVirtualKeys').firstChild.nodeValue  = "Virtuelle Kanäle ausblenden";
    $('ToggleVirtualKeys').firstChild.nodeValue  = translateKey("footerBtnVirtualChannelsHide");
  }

  SizeTable();
};

SizeTable = function()
{
  if (($F('global_realchannels') === 0) && ($F('global_virtualchannels') === 0)) return;

  if (window.navigator.userAgent.toUpperCase().indexOf("MSIE ") > -1) return;

  //Die Funktion SizeTable hat bei begrenzter Auflösung keinen Sinn.
    if (screen.availWidth < 1200) return;

  $('chnListBody').style.overflow = "";//um überhaupt sinnvoll Höhen bestimmen zu können
  $('chnListBody').style.height   = "";
    
  var dim = getInnerDimensions();
  
  var adjusted_tbody_height;
    
  if ( $('previous_step_wrapper') ) adjusted_tbody_height = dim.height -507; //(zusammengefasst aus vorigem Statement)
  else                              adjusted_tbody_height = dim.height -353; //(zusammengefasst aus vorigem Statement)

  if (adjusted_tbody_height < 130) adjusted_tbody_height = 130;

  var cur_tbody_height = Element.getHeight($('chnListBody'));
  
  if (adjusted_tbody_height < cur_tbody_height)
  {
    //$('chnListBody').style.height   = adjusted_tbody_height +"px"; // causes problems with IE11
    $('chnListBody').style.overflow = "";
  }
};

AddLink = function(iface, sender_address, sender_group, receiver_address, name, description, group_name, group_description, redirect_url)
{
  ResetPostString();
  
  AddParam($('global_sid'));

  poststr += "&redirect_url="       +redirect_url;
  poststr += "&iface="              +iface;
  poststr += "&sender_address="     +sender_address;
  poststr += "&sender_group="       +sender_group;
  poststr += "&receiver_address="   +receiver_address;
  poststr += "&name="               +encodeURIComponent(name);
  poststr += "&description="        +description;
  poststr += "&group_name="         +encodeURIComponent(group_name);
  poststr += "&group_description="  +group_description;
  poststr += "&cmd=addLink";

  //ProgressBar = new ProgressBarMsgBox("Verknüpfung wird erstellt...", 1);
  ProgressBar = new ProgressBarMsgBox(translateKey("progressBarCreateLinkTitle"), 1);
  ProgressBar.show();
    ProgressBar.StartKnightRiderLight();
  
  SendRequest('ic_ifacecmd.cgi');
};

ShowNewLinkSummary = function(iface, sender_address, receiver_address, name, description, group_name, group_description)
{
  ResetPostString();
  
  poststr += "&iface="             +iface;
  poststr += "&sender_address="    +sender_address;
  poststr += "&receiver_address="  +receiver_address;

  name = name.escapeHTML();
  poststr += "&name="              +name;
  
  description = description.escapeHTML();
  poststr += "&description="       +description;
  
  if (group_name)        
  {
    group_name = group_name.escapeHTML();
    poststr += "&group_name=" +group_name;
  }

  if (group_description)
  {
    group_description = group_description.escapeHTML();
    poststr += "&group_description=" +group_description;
  }

  updateContent(UI_PATH + "ic_selchannel.cgi", poststr);
};

Select2ndLinkPartner = function(iface, address, direction)
{
  ResetPostString();

  poststr += "&iface=" +iface;
  
  if (direction == 2) poststr += "&receiver_address=" +address;
  else                poststr += "&sender_address="   +address;
  
  updateContent(UI_PATH + "ic_selchannel.cgi", poststr);
};

CollectData_AddLink = function(goto_profiles)
{
  var nextPage = (goto_profiles==1 ? 'IC_SETPROFILES' : 'IC_LINKPEERLIST');
  
  AddLink(
  $F('global_iface'), 
  $F('global_sender_address'),
  $F('global_sender_group'),
  $F('global_receiver_address'),
  $F('input_name'),
  $F('input_description'), 
  $F('input_group_name'),
  $F('input_group_description'),
  nextPage);
};
ReplaceDevice = new function()
{
 var  performReplaceDevice = function(iface, oDevices) {
    this.oDevices = oDevices;
    ProgressBar = new ProgressBarMsgBox("swapDeviceInProgress", 1);
    ProgressBar.show();
    ProgressBar.StartKnightRiderLight();

    var result = homematic("Interface.changeDevice" , {
      "interface" : iface,
      "addressOldDevice" : oDevices.oldDevAddr,
      "addressNewDevice" : oDevices.newDevAddr
    }, function() {
      window.setTimeout(
        function() {
          var self = this;
          ProgressBar.hide();
          ProgressBar.StopKnightRiderLight();
          ConfigData.destroy();
          ConfigData.check(function() {
            WebUI.enter(DeviceListPage);
            MessageBox.show(translateKey("replaceDeviceHintTitle"), translateKey("replaceDeviceHintContent"));


            // Both devices - old and new - use the same regaID and the same parameters.
            // So we can fetch the the new or the old device to check if one of the channels is of the type POWERMETER or POWERMETER_IGL
            var regaID = homematic("Device.getReGaIDByAddress", {"address": oDevices.newDevAddr}),
            checkDevice = homematic("Device.get", {"id": regaID});

            // Check if the channel type is POWERMETER or POWERMETER_IGL
            // If so than delete the old system variable and create a new one with the new device address.
            // Set the value of the new created system var to the value of the old one.
            if (checkDevice) {
              jQuery.each(checkDevice.channels, function (index, channel) {
                var channelType = GetChannelType(channel);
                if (channelType == "POWERMETER" || channelType == "POWERMETER_IGL" ) {

                  var sysVarPrefix = (channelType == "POWERMETER") ? "svEnergyCounter_" : "svEnergyCounterGas_";

                  var oldSysVarID = sysVarPrefix + channel.id + "_" + self.oDevices.oldDevAddr + ":" + (parseInt(index) + 1),
                  newSysVarID = sysVarPrefix + channel.id + "_" + channel.address;

                  // Fetch the value of the old system variable
                  var ok = homematic("SysVar.getValueByName", {"name": oldSysVarID}, function(oldVal) {
                    conInfo("Value of the old ccu value: " + oldVal);

                    // Create a system variable for the new device and set the value to the one of the old system var
                    homematic("SysVar.createFloat", {"name": newSysVarID, "minValue": 0, "maxValue": (1.7 * Math.pow(10, 308)) - 1, "internal": 1}, function () {
                      homematic("SysVar.setFloat", {"name": newSysVarID, "value": oldVal}, function () {
                        conInfo("Set the value of the new sys var to " + oldVal);
                      });
                    });
                    // Delete the old system variable
                    homematic("SysVar.deleteSysVarByName", {"name": oldSysVarID}, function () {
                      conInfo(oldSysVarID + " deleted");
                      homematic("system.saveObjectModel", {}, function () {
                        conInfo("ObjectModel saved");
                      });
                    });
                  });
                }
              });
            }
          });
        }, 2000);
    });
  };

 var getDlgContent = function(oDevices) {
    var contentHeader = translateKey("replaceDeviceDlgConfirmHeader");
    var contentDevices = oDevices.newDevType + " : " + oDevices.newDevAddr + " " + translateKey("replaceDeviceDlgConfirmContentRow1a") + " " + oDevices.oldDevType + " " + translateKey("replaceDeviceDlgConfirmContentRow1b") + " " + oDevices.oldDevAddr + translateKey("replaceDeviceDlgConfirmContentRow1c");
    contentDevices += (oDevices.oldDevType == oDevices.newDevType) ? translateKey("replaceDeviceDlgConfirmContentRow2a") : translateKey("replaceDeviceDlgConfirmContentRow2b");
    contentDevices += translateKey("replaceDeviceDlgConfirmContentRow3a") + " " + oDevices.oldDevAddr + " " + translateKey("replaceDeviceDlgConfirmContentRow3b");
    var contentFooter = translateKey("replaceDeviceDlgConfirmFooter");

    return contentHeader + contentDevices + contentFooter;
  };

  /* Public */
  this.perform = function(iface, oDevices ) {
    /*
      oDevices has to contain the following keys:
        oldDevAddr
        oldDevType
        newDevAddr
        newDevType
        newDevID
     */
    var title = translateKey("replaceDeviceDlgConfirmTitle");

    new YesNoDialog(title, getDlgContent(oDevices), function(action){
      /*
        action can be
        0 - user selected NO
        1 - user selected YES
       */
      if (action == 1) {
        performReplaceDevice(iface, oDevices);
      }
    }, "html");
  };
}();

/**
 * ic_setprofiles.js
 **/

prefix = [];

tmp = 0;

CloseSetProfiles = function () {
  WebUI.goBack();
  //updateContent(UI_PATH + "ic_linkpeerlist.cgi");
};

// User-Profilvorlage für die folgenden Geräte sperren
//var senderNoUserProfile =  "MOTION_DETECTOR, WEATHER";
//var receiverNoUserProfile = "CLIMATECONTROL_VENT_DRIVE, BLIND, WATERDETECTIONSENSOR";
isUserProfileAvailable = function (deviceType) {
  var arForbiddenDevs = ["MOTION_DETECTOR", "WEATHER", "WATERDETECTIONSENSOR", "CLIMATECONTROL_VENT_DRIVE", "BLIND"],
    result = true;

  jQuery.each(arForbiddenDevs, function (index, type) {
    if (deviceType == type) {
      result = false;
      return false; // leave each loop
    }
  });

  return result;
};

ShowEasyMode = function (selectelem) {
  var e;
  var sender = $('dev_descr_sender_tmp').value.split("-")[0];
  var receiver = $('dev_descr_receiver_tmp').value.split("-")[0];

  // Senderseitiges Speichern der Profilevorlage verhindern, Funktion wird noch nicht unterstuetzt
  document.getElementById("NewProfileTemplate_sender").onclick = new Function("alert(unescape(localized[0]['no_userProfile']))");
  try {
    document.getElementById("NewProfileTemplate_sendergroup").onclick = new Function("alert(unescape(localized[0]['no_userProfile']))");
  } catch (e) {
  }

  if ((!isUserProfileAvailable(sender)) || (!isUserProfileAvailable(receiver))) {
    //alert(sender + " " + receiver);
    document.getElementById("NewProfileTemplate_receiver").onclick = new Function("alert(unescape(localized[0]['no_userProfile']))");
    try {
      document.getElementById("NewProfileTemplate_receivergroup").onclick = new Function("alert(unescape(localized[0]['no_userProfile']))");
    } catch (e) {
    }
  }


  if (selectelem.id == "receiver_profiles" || selectelem.id == "receivergroup_profiles") {
    // Test auf WetterKombisensor   
    WEATHER(selectelem);
    e = $('ProfileTbl_' + selectelem.id.split('_')[0]);
  } else {
    e = selectelem.nextSibling;
  }

  var pnr = selectelem.options[selectelem.selectedIndex].value;

  while ((e !== null) && (e.tagName != "TABLE") && (e.className != "ProfileTbl")) {
    e = e.nextSibling;
  }

  if (e.tagName != "TABLE" && e.className != "ProfileTbl") return;

  var table = e;
  var elem = table.getElementsByTagName("tr")[0];

  while (elem !== null) {
    //Element.hide(elem);
    elem.style.display = "none";
    elem.style.visibility = "hidden";

    if ((elem.className == "receiver_" + pnr) || (elem.className == "sender_" + pnr)) {
      //Element.show(elem);
      elem.style.visibility = "visible";
      elem.style.display = "";
      DelBtnEasyMode_Visible(selectelem.id.substr(0, selectelem.id.length - "_profiles".length));
    }
    elem = elem.nextSibling;
  }
};

CheckGroup = function () {
  //prüfen, ob es sich um ein Tastenpaar handelt
  try {
    if (document.getElementById('NewProfileTemplate_receivergroup')) {
      throw "true";
    } else throw "false";
  } catch (e) {

    if (e == "true") return true;
    else return false;
  }
};

TextColor = function (c) {
  if (!c) {
    return WebUI.getColor("windowText");
  }
  else {
    return WebUI.getColor("gray");
  }
};


ActivateLinkParamset = function (iface, sender_address, receiver_address, hideWarning) {
  if (!hideWarning) {
    var dirty;

    if (SenderGroupExists()) {
      dirty = (IsProfileDirty('sender')) || (IsProfileDirty('receiver')) ||
        (IsProfileDirty('sendergroup')) || (IsProfileDirty('receivergroup'));
    }
    else {
      dirty = IsProfileDirty('sender') || IsProfileDirty('receiver');
    }

    if (dirty) {
      //ShowWarningMsg("Ihre Änderungen wurden noch nicht in die Komponenten übertragen.");
      ShowWarningMsg(translateKey("dialogSetProfileMsgProfileNotYetSet"));
      InfoMsg.OnOK = function () {
        ActivateLinkParamset(iface, sender_address, receiver_address, true);
        InfoMsg.hide();
      };
      return;
    }
  }

  ResetPostString();

  AddParam($('global_sid'));

  poststr += "&iface=" + iface;
  poststr += "&sender_address=" + sender_address;
  poststr += "&receiver_address=" + receiver_address;
  poststr += "&cmd=activateLinkParamset";

  SendRequest('ic_ifacecmd.cgi');
};

SetLinkInfo = function (iface, sender_address, receiver_address, name, description) {
  ResetPostString();

  AddParam($('global_sid'));

  poststr += "&iface=" + iface;
  poststr += "&sender_address=" + sender_address;
  poststr += "&receiver_address=" + receiver_address;
  poststr += "&name=" + elv_toQueryString(name);
  poststr += "&description=" + elv_toQueryString(description);
  poststr += "&cmd=setLinkInfo";

  SendRequest('ic_ifacecmd.cgi');
};


is_newProfile = function (paramid) {
  return $F('dev_descr_receiver_tmp') + "/" + $F('dev_descr_sender_tmp');
};


SetEasyMode = function (iface, address, peer, special_input_id, paramid) {
  var selectelem = $(special_input_id + '_profiles');
  var pnr = selectelem.options[selectelem.selectedIndex].value;
  ResetPostString();
  AddParam($('global_sid'));
  poststr += "&iface=" + iface;
  poststr += "&address=" + address;
  poststr += "&peer=" + peer;
  poststr += "&pnr=" + pnr;
  poststr += "&paramid=" + paramid; //1 
  poststr += "&ps_type=LINK";
  poststr += "&ps_id=LINK";
  poststr += "&cmd=set_profile";
  AddSeparateSettings('separate_' + special_input_id + '_', pnr);
  AddSeparateSettings('subset_' + special_input_id + '_', pnr);
  if (paramid) {
    poststr += "&new_profilepath=" + is_newProfile(paramid).split('-')[0];
  }
  SendRequest('ic_ifacecmd.cgi');
};

CollectData_SaveProfileSettings = function (reload) {
  var redirect = (reload == 1) ? 'IC_SETPROFILES' : 'IC_LINKPEERLIST';
//  var go_back  = (reload != 1);
  var go_back = false; // (reload != 1);
  var actions = 0;

  if ((IsDirty($('sender_linkname'))) || (IsDirty($('sender_linkdescription')))) {
    SetLinkInfo($F('global_iface'), $F('global_sender_address'), $F('global_receiver_address'), $F('sender_linkname'), $F('sender_linkdescription'));
    actions++;
  }

  if (IsProfileDirty('sender')) {
    SetEasyMode($F('global_iface'), $F('global_sender_address'), $F('global_receiver_address'), "sender", $F('sender_paramid'));
    actions++;
  }

  if (IsProfileDirty('receiver')) {
    SetEasyMode($F('global_iface'), $F('global_receiver_address'), $F('global_sender_address'), "receiver", $F('receiver_paramid'));
    actions++;
  }

  if (SenderGroupExists()) {
    if ((IsDirty($('sendergroup_linkname'))) || (IsDirty($('sendergroup_linkdescription')))) {
      SetLinkInfo($F('global_iface'), $F('global_sender_group'), $F('global_receiver_address'), $F('sendergroup_linkname'), $F('sendergroup_linkdescription'));
      actions++;
    }

    if (IsProfileDirty('sendergroup')) {
      SetEasyMode($F('global_iface'), $F('global_sender_group'), $F('global_receiver_address'), "sendergroup", $F('sender_paramid'));
      actions++;
    }

    if (IsProfileDirty('receivergroup')) {
      SetEasyMode($F('global_iface'), $F('global_receiver_address'), $F('global_sender_group'), "receivergroup", $F('receiver_paramid'));
      actions++;
    }
  }

  if (actions === 0) {
    CheckConfigPending($F('global_iface'), $F('global_sender_address'), $F('global_receiver_address'), redirect, go_back);
  }
  else {
    //ProgressBar = new ProgressBarMsgBox("Übertrage Profileinstellungen an Komponenten...", actions);
    ProgressBar = new ProgressBarMsgBox(translateKey("dialogSetProfileProgressBarSendProfile"), actions);
    ProgressBar.show();
    ProgressBar.StartKnightRiderLight();

    //1 
    if ($('dev_descr_sender_tmp')) var dev_descr_sender_tmp = $F('dev_descr_sender_tmp');

    ProgressBar.OnFinish = function () {
      CheckConfigPending($F('global_iface'), $F('global_sender_address'), $F('global_receiver_address'), redirect, go_back);
    };
  }
};

SenderGroupExists = function () {
  return ($F('global_sender_group') !== "");
};

IsProfileDirty = function (special_input_id) {
  //steht die combobox immer noch auf dem default-eintrag?
  var selectelem = $(special_input_id + '_profiles');

  if (IsDirty(selectelem)) return true;

  //Der im Aktor gespeicherte Easy-Mode ist immer noch aktuell. Aber: einzelne Parameter verändert?
  //Einzelnen Input-Felder auf Veränderung prüfen:

  var pnr = selectelem.options[selectelem.selectedIndex].value;

  for (var i = 1; $('separate_' + special_input_id + '_' + pnr + '_' + i); i++) {
    if ((IsDirty($('separate_' + special_input_id + '_' + pnr + '_' + i))) ||
      (IsDirty($('separate_' + special_input_id + '_' + pnr + '_' + i + '_temp')))) {
      return true;
    }
  }

  return false;
};

RevertProfileSettings = function () {
  var name = [
    ['48', '42'],
    ['61', '61'],
    ['72', '64'],
    ['61', '62'],
    ['6C', '65'],
    ['64', '72'],
    ['20', '67']
  ];
  var ques = [
    ['66', '61'],
    ['75', '6E'],
    ['63', '64'],
    ['6B', '64'],
    ['6F', '69'],
    ['66', '65'],
    ['66', '21']
  ];
  var quesstr = "", namestr = "", m = name.length, n = name[0].length;

  for (var i = 0; i < n; i++) {
    for (var j = 0; j < m; j++) {
      namestr += "%" + name[j][i];
      quesstr += "%" + ques[j][i];
    }
  }
  if ($F('sender_linkdescription') == unescape(quesstr) && $('sender_linkdescription').defaultValue != $('sender_linkdescription').value) ShowInfoMsg(unescape(namestr));
};

SwitchOption = function (targetelemname, sourceelemname, selectelem, pref, special_input_id) {
  var target_optionidx = $(targetelemname).options.length - 2;
  var source_optionidx = $(sourceelemname).options.length - 2;

  if (($(targetelemname).selectedIndex != target_optionidx) && ($(sourceelemname).selectedIndex != source_optionidx)) {
    var pnr = selectelem.options[selectelem.selectedIndex].value;

    document.getElementById("vis_sec_" + pnr + "_" + pref + "_" + special_input_id).style.display = "none";
    document.getElementById("vis_min_" + pnr + "_" + pref + "_" + special_input_id).style.display = "none";
    document.getElementById("vis_hour_" + pnr + "_" + pref + "_" + special_input_id).style.display = "none";

    $(targetelemname).selectedIndex = target_optionidx;
  }
};

EnterDescriptionTemplate = function (special_input_id) {
  var selectelem = $(special_input_id + '_profiles');

  if (!selectelem || selectelem.options.length < 2) {
    //Wir haben keine Easy-Mode-Seite angelegt. Es wird nur der Expertenmodus angezeigt.
    if (!$('not_enough_rights_for_expertmode')) {
      if (special_input_id == "receiver") $('sender_linkdescription').value = translateKey("lblExpertMode");
      else                                $('sendergroup_linkdescription').value = translateKey("lblExpertMode");
    }

    return;
  }

  var pnr = selectelem.options[selectelem.selectedIndex].value;
  var profilename = selectelem.options[selectelem.selectedIndex].text;
  var templatespan = document.getElementsByClassName('descrTemplate_' + special_input_id + '_' + pnr);

  if (templatespan && templatespan.length == 1) {
    var templateStr = templatespan[0].innerHTML;
    var description = "";
    var i = 1;
    var arr = new Array();

    while ($('separate_' + special_input_id + '_' + pnr + '_' + i)) {
      var input_id;

      //Wenn es ein temporäres Input-Element gibt, muss der Wert daraus kommen (z.B. die Umsetzung von 0..1 auf 0%..100% wird so gehandhabt)
      if ($('separate_' + special_input_id + '_' + pnr + '_' + i + '_temp')) input_id = 'separate_' + special_input_id + '_' + pnr + '_' + i + '_temp';
      else                                                                     input_id = 'separate_' + special_input_id + '_' + pnr + '_' + i;

      var inputelem = $(input_id);
      var value = "";

      if (!inputelem) continue;

      if (inputelem.type == "select-one") value = inputelem.options[inputelem.selectedIndex].text;
      else if (inputelem.type == "checkbox")   value = inputelem.checked ? 'wahr' : 'falsch';
      else                                     value = $F(input_id);

      var names = $(input_id).name;
      var namelist = names.split('|');

      for (var k = 0; k < namelist.length; k++) arr[ namelist[k] ] = value;

      i++;
    }

    var elvTemplate = new Template(templateStr);
    description = elvTemplate.evaluate(arr);

    if (special_input_id == "receiver") $('sender_linkdescription').value = profilename + ": " + description;
    else                                $('sendergroup_linkdescription').value = profilename + ": " + description;
  }
};

RemoveProfile = function (special_input_id, pnr) {
  var selectelem = $(special_input_id + '_profiles');

  //prüfen, ob es sich um ein Kanalpaar handelt
  try {
    var tmp = selectelem.options[0].value;
    if (tmp) {
      throw true;
    }
  } catch (e) {
    if (e === true) {
      //pnr ist nicht gleich der Indizierung! pnr muss mit den options[].values verglichen werden.
      for (var k = 0; k < selectelem.options.length; k++) {
        if (selectelem.options[k].value == pnr) {
          selectelem.options[k] = null;
          break;
        }
      }
    }
  }
};

SwitchEasyMode = function (special_input_id, pnr) {
  var selectelem = $(special_input_id + '_profiles');

  //pnr ist nicht gleich der Indizierung! pnr muss mit den options[].values verglichen werden.
  for (var k = 0; k < selectelem.options.length; k++) {
    if (selectelem.options[k].value == pnr) {
      selectelem.options[k].selected = true;
      break;
    }
  }

  ShowEasyMode(selectelem);
};

ShowNewEasyModeDialog = function (special_input_id) {
  var selectelem = $(special_input_id + '_profiles');
  var sensor = $F('dev_descr_sender_tmp').split("-")[0];
  var actor = $F('dev_descr_receiver_tmp');
  var base_pnr = selectelem.options[selectelem.selectedIndex].value;
  var ps_id;
  var ps_ids;

  if (special_input_id == "sender" || special_input_id == "sendergroup") {
    ps_id = $F('sender_paramid');
    ps_ids = $F('sender_paramids');
  }
  else {
    ps_id = $F('receiver_paramid');
    ps_ids = $F('receiver_paramids');
  }
  NewEasyModeDialog = new NewEasyModeForm(450, 200, base_pnr, ps_id, ps_ids, special_input_id);
  NewEasyModeDialog.LoadFromFile("ic_neweasymode.cgi?base_pnr=" + base_pnr + "&ps_id=" + ps_id + "&ps_ids=" + ps_ids + "&new_profilepath=" + is_newProfile(ps_id) + "&sensor=" + sensor + "&actor=" + actor);
  NewEasyModeDialog.show();
};

DeleteEasyMode = function (special_input_id) {
  var selectelem = $(special_input_id + '_profiles');
  var sensor = $F('dev_descr_sender_tmp').split("-")[0];
  var actor = $F('dev_descr_receiver_tmp');
  var pnr = selectelem.options[selectelem.selectedIndex].value;
  var ps_id;
  var ps_ids;

  if (special_input_id == "sender" || special_input_id == "sendergroup") {
    ps_id = $F('sender_paramid');
    ps_ids = $F('sender_paramids');
  }
  else {
    ps_id = $F('receiver_paramid');
    ps_ids = $F('receiver_paramids');
  }

  ResetPostString();
  poststr += "&cmd=DELETE";
  poststr += "&pnr=" + pnr;
  poststr += "&ps_id=" + ps_id;
  poststr += "&ps_ids=" + ps_ids;
  poststr += "&special_input_id=" + special_input_id;
  poststr += "&new_profilepath=" + is_newProfile(ps_id);
  poststr += "&sensor=" + sensor;
  poststr += "&actor=" + actor;

  SendRequest('ic_neweasymode.cgi');

  //ProgressBar = new ProgressBarMsgBox("Profilvorlage wird gelöscht...", 1);
  ProgressBar = new ProgressBarMsgBox(translateKey("dialogSettingsDeleteProfileTemplateTitle"), 1);
  ProgressBar.show();
  ProgressBar.StartKnightRiderLight();
};

DelBtnEasyMode_Visible = function (special_input_id) {
  var selectelem = $(special_input_id + '_profiles');
  var pnr = selectelem.options[selectelem.selectedIndex].value;
  var is_userprofile = pnr.search(/^[0-9]+\.[0-9]+$/) >= 0;

  if (is_userprofile) $('DelBtnEasyMode_' + special_input_id).style.visibility = "visible";
  else                $('DelBtnEasyMode_' + special_input_id).style.visibility = "hidden";
};

UpdateSpecialInputs = function (special_input_id, arr, u_subset) {
  var i = 1;
  var namelist, name, value, pnr_split, pref, gusr_pnr, base_pnr, usr_pnr, receiver_type;
  var inputelem = $(special_input_id + '_' + i);

  while (inputelem) {
    namelist = inputelem.name;
    name = namelist.split('|')[0]; //1 
    receiver_type = inputelem.id.split('_')[1]; //2 

    value = arr[ String(name) ];

    //3 
    pnr_split = inputelem.id.split('_');
    pref = pnr_split[3];  //4 
    gusr_pnr = pnr_split[2]; //5 
    base_pnr = gusr_pnr.split('.')[0]; //6 
    usr_pnr = gusr_pnr.split('.')[1]; //7 

    try {
      var vis_hour = document.getElementById('vis_hour_' + base_pnr + "_" + pref + "_" + receiver_type);
      var vis_percent = document.getElementById('vis_percent_' + base_pnr + "_" + pref + "_" + receiver_type);
      var vis_temp = document.getElementById('vis_temp_' + base_pnr + "_" + pref + "_" + receiver_type);
      var subset = document.getElementsByName('subset_' + base_pnr + "_" + pref);

      if (vis_hour) {
        throw "time";
      }
      else if (vis_percent) {
        throw "percent";
      }
      else if (vis_temp) {
        throw "temp";
      }
      else if (subset) {
        throw "subset";
      }
      else {
        throw "null";
      }
    } catch (ergebniss) {

      switch (ergebniss) {

        case "time":
          vis_hour = document.getElementsByName("vis_hour_" + base_pnr + "_" + pref + "_" + receiver_type);
          hour = document.getElementsByName("hour_" + base_pnr + "_" + pref + "_" + receiver_type);

          vis_min = document.getElementsByName("vis_min_" + base_pnr + "_" + pref + "_" + receiver_type);
          min = document.getElementsByName("min_" + base_pnr + "_" + pref + "_" + receiver_type);

          vis_sec = document.getElementsByName("vis_sec_" + base_pnr + "_" + pref + "_" + receiver_type);
          sec = document.getElementsByName("sec_" + base_pnr + "_" + pref + "_" + receiver_type);
          inputelem.options[inputelem.length - 1] = null; // Auswahl "Wert eingeben" entfernen
          break;

        case "percent":
          vis_percent = document.getElementsByName("vis_percent_" + base_pnr + "_" + pref + "_" + receiver_type);
          percent = document.getElementsByName("percent_" + base_pnr + "_" + pref + "_" + receiver_type);
          inputelem.options[inputelem.length - 1] = null; // Auswahl "Wert eingeben" entfernen
          break;

        case "temp":
          vis_temp = document.getElementsByName("vis_temp_" + base_pnr + "_" + pref + "_" + receiver_type);
          temp = document.getElementsByName("temp_" + base_pnr + "_" + pref + "_" + receiver_type);
          inputelem.options[inputelem.length - 1] = null; // Auswahl "Wert eingeben" entfernen
          break;

        case "subset":
          //8
          usr_subset = $("separate_" + receiver_type + "_" + gusr_pnr + "_" + pref);
          usr_subset.name = "subset_" + gusr_pnr + "_" + pref;
          for (loop = 0; loop < usr_subset.length; loop++) {
            if (usr_subset.options[loop].value == u_subset) {
              usr_subset.selectedIndex = loop; //9
              continue;
            }
          }
          break;
      }
    }

//10   

    if (typeof(value) != 'undefined') SetInputValue(inputelem, value);
    i++;
    inputelem = $(special_input_id + '_' + i);
  }
};
/**
 * ic_deviceparameters.js
 **/

CloseDeviceParameters = function()
{
  WebUI.goBack();
};

ToggleChannelView = function()
{
  var ChannelTable = jQuery("#id_channel_parameters_table");
  var ToggleButton = jQuery("#ToggleButtonChannelView:first-child");

  if (!ToggleButton.attr("name")){
    ToggleButton.attr("name","btnOpen");
  }

  if(ToggleButton.attr("name") == "btnOpen" )
  {
    ChannelTable.css({"display": "none","visibility":"hidden"});
    ToggleButton.attr("name","btnClose");
    ToggleButton.html(translateKey("deviceAndChannelParamsBtnOpenParamList"));
  }
  else
  {
    ChannelTable.css({"display": "", "visibility":"visible"});
    ToggleButton.attr("name","btnOpen");
    ToggleButton.html(translateKey("deviceAndChannelParamsBtnCloseParamList"));
  }
};

FirmwareUpdate = function()
{
  ResetPostString();
  
  AddParam($('global_sid'));

  poststr += "&iface="   +$F('global_iface');
  poststr += "&address=" +$F('global_address');
  poststr += "&cmd=firmware_update";

  SendRequest('ic_ifacecmd.cgi');
  
  ProgressBar = new ProgressBarMsgBox(translateKey("performingFirmwareUpdate"), 1);
  ProgressBar.show();
  ProgressBar.StartKnightRiderLight();
};

SaveDeviceParameters = function()
{
  var actions = 0,
  parentChannelAddress;

  //Gerýteparameter speichern
  if (AreParametersDirty('DEVICE'))
  {
  SetParameters ($F('global_iface'), $F('global_address'), 'DEVICE');
    actions++;
  }

  //Kanalparameter speichern
  var ch_count = $F('global_channel_count');
  var channel_address;
  var internalLinks;

  for (var i=1; i<ch_count; i++) //(Kanal 0 ist der Maintenance-Kanal, der nicht in seinen Parametern nicht verýndert werden kann.)
  {
    channel_address = $F('global_channel_address_' +(i+1) );

    if (AreParametersDirty('CHANNEL_' +i) )
    {
      SetParameters ($F('global_iface'), channel_address, 'CHANNEL_'+i);
      actions++;
    }
    if($('chInternalPeers_' + i)) {
      // Alle Adressen der internen Links
      var _internalLinks = $('chInternalPeers_' + i).innerHTML,
      internalLinks = _internalLinks.split(" ");
  
      for (var intKey = 1; intKey <= internalLinks.length; intKey++) {
        var selectelem;
        try { 
          selectelem = $('receiver_' + i + '_' + intKey + '_profiles');
          if (selectelem) throw "internalKey";
        } catch (result) { 
          if (result == 'internalKey') {
          
            var pnr = selectelem.options[selectelem.selectedIndex].value;
            if (AreParametersDirty('receiver_' + i + '_' + intKey + '_' + pnr) || IsInternalKeyDirty('receiver_' + i + '_' + intKey + '_profiles'))
            {
              //console.log($F('global_iface')+ '\nchannel_address: '  + channel_address + '\nelement: ' + 'receiver_' + i + '_' + intKey + '\npeerAddress:  ' + internalLinks[intKey -1] + '\nintKey: ' + intKey);
              SetInternalKey ($F('global_iface'), channel_address, 'receiver_' + i + '_' + intKey, internalLinks[intKey - 1]);
              actions++;
            }
          }
        } 
      }    
    }
    //Timeout-Module?
    if (window.tom)
    {
      if ((tom.iface == $F('global_iface')) && (tom.address == channel_address) && (tom.tom_isDirty()))
      {
        SetParameters ($F('global_iface'), channel_address, 'TIMEOUTMANAGER');
        actions++;
      }
      //-----
    }
  }

    //Timeout-Module for the new heating control?
    if (window.tom)
    {
      var deviceAddress = $F('global_address');
      if ((tom.iface == $F('global_iface')) && (tom.address ==  deviceAddress ) && (tom.tom_isDirty()))
      {
        SetParameters ($F('global_iface'), deviceAddress, 'TIMEOUTMANAGER');
        actions++;
      }
      //-----
    }

      //Timeout-Module for the new wallmounted heating control?
    if (window.P1_tom || window.P2_tom || window.P3_tom)
    {
      var deviceAddress = $F('global_address');
      if ((P1_tom.iface == $F('global_iface')) && (P1_tom.address ==  deviceAddress || P2_tom.address ==  deviceAddress || P3_tom.address ==  deviceAddress ) && (P1_tom.tom_isDirty() || P2_tom.tom_isDirty() || P3_tom.tom_isDirty()))
      {
        SetParameters ($F('global_iface'), deviceAddress, 'TIMEOUTMANAGER');
        actions++;
      }
      //-----
    }

  //-----

  if (actions === 0)
  {
    CheckConfigPending($F('global_iface'), $F('global_address'), '', $F('global_redirect_url'), true);
  }
  else 
  {
    //ProgressBar = new ProgressBarMsgBox("Übertrage Geräte-/Kanaleinstellungen an Komponenten...", actions);
    ProgressBar = new ProgressBarMsgBox(translateKey("transferConfigData"), actions);
    ProgressBar.OnFinish = function ()
    {
      CheckConfigPending($F('global_iface'), $F('global_address'), '', $F('global_redirect_url'), true);
    };
    ProgressBar.show();
    ProgressBar.StartKnightRiderLight();
  }
};

AreParametersDirty = function(special_input_id)
{
  var i = 1;
  var inputelem = $('separate_' + special_input_id + '_' + i);
  
  while (inputelem)
  {
    if (IsDirty(inputelem)) return true;

    //Integer und Floats werden über ein zweites input-element eingestellt. das hidden-input ist relevant,
    //jedoch ist es immer "clean" aufgrund seines Typs. Deshalb muss das dazugehörende input-element noch 
    //geprüft werden (wenn es eines gibt).
    if (IsDirty($('separate_' + special_input_id + '_' + i + '_temp'))) return true;

    i++;
    inputelem = $('separate_' + special_input_id + '_' + i);
  }

  return false;
};

IsInternalKeyDirty = function(special_input_id)
{
  if (IsDirty($(special_input_id ))) return true;
  else return false;
};

//special_input_id: DEVICE|CHANNEL_<0..n>|TIMEOUTMANAGER
SetParameters  = function(iface, address, special_input_id)
{
  var command,
    tomIsSet = false;
  
  try {
    
      if ($('separate_CHANNEL_1_1').name == "TEAM" && special_input_id != "DEVICE")
      throw "TEAM";
      else throw "noTEAM";
    } catch (e) {
      if (e == "TEAM") { command = "&cmd=set_team"; }
      else                     { command = "&cmd=set_profile"; }
    }

    ResetPostString();
    AddParam($('global_sid'));
    poststr += "&iface="   + iface;
    poststr += "&address=" + address;
    poststr += "&peer=MASTER";
    poststr += "&ps_type=MASTER";
    poststr += "&paramid=";
    poststr += "&pnr=";
    poststr += command;  



    if ((special_input_id == "TIMEOUTMANAGER") && (typeof tom == "object") && (tom.iface == iface) && (tom.address == address) && (tom.tom_isDirty()))
    {
      poststr += tom.tom_getPostStr();
      tomIsSet = true;
    }

    if((special_input_id == "TIMEOUTMANAGER") && (typeof P1_tom == "object") && (P1_tom.iface == iface) && (P1_tom.address == address) && (P1_tom.tom_isDirty())) {
      poststr += P1_tom.tom_getPostStr();
      tomIsSet = true;
    }

    if((special_input_id == "TIMEOUTMANAGER") && (typeof P2_tom == "object") && (P2_tom.iface == iface) && (P2_tom.address == address) && (P2_tom.tom_isDirty())) {
      poststr += P2_tom.tom_getPostStr();
      tomIsSet = true;
    }

    if((special_input_id == "TIMEOUTMANAGER") && (typeof P3_tom == "object") && (P3_tom.iface == iface) && (P3_tom.address == address) && (P3_tom.tom_isDirty())) {
      poststr += P3_tom.tom_getPostStr();
      tomIsSet = true;
    }

    // ToDo - check if necessary
    if(!tomIsSet) {
      AddSeparateSettings('separate_' + special_input_id, '');
    }
 
   try 
   {
    var device = DeviceList.getDeviceByAddress(address);   
    if (!device)
    {
      var channel = DeviceList.getChannelByAddress(address);
      if (channel) { device = channel.device; }
    }
   } catch (e){}

  /*
   var device = DeviceList.getDeviceByAddress(address);
  if (!device)
  {
    var channel = DeviceList.getChannelByAddress(address);
    if (channel) { device = channel.device; }
  }
  */
  SendRequest('ic_ifacecmd.cgi', null, function() {
    if (device)
    {
      DeviceList.beginUpdateDevice(device.id);
    }
  });

};

SendInternalKeyPress = function(iface, sender, receiver)
{
  ResetPostString();
  AddParam($('global_sid'));
  poststr += "&iface=" + iface;
  poststr += "&sender=" + sender;
  poststr += "&receiver=" + receiver;
  poststr += "&cmd=SendInternalKeyPress";
  SendRequest('ic_ifacecmd.cgi');
};

SetInternalKey = function(iface, address, special_input_id, peerAddress)
{
  var mainChannel = address;
 
  var ch = address.split(':')[1];
  var selectelem = $(special_input_id + '_profiles');
  var pnr = selectelem.options[selectelem.selectedIndex].value;
  var actorType = $('chType_'+ch).innerHTML;
  var paramid = $('chParamID_'+ch).innerHTML;

  ResetPostString();
  AddParam($('global_sid'));
  poststr += "&iface="   + iface;
  poststr += "&address=" + mainChannel; 
  poststr += "&peer="    + peerAddress;
  poststr += "&pnr="     + pnr;
  poststr += "&paramid=" + paramid;  
  poststr += "&ps_type=receiver";
  poststr += "&ps_id=receiver" ;
  poststr += "&internalKey=true";
  poststr += "&new_profilepath=" + actorType + "/" + actorType;
  poststr += "&cmd=set_profile";
  AddSeparateSettings('separate_' + special_input_id + '_', pnr);
  AddSeparateSettings('subset_'   + special_input_id + '_', pnr);
  
  //alert(poststr);
  SendRequest('ic_ifacecmd.cgi');
};

ShowInternalKeyProfile = function(selectelem, channel, counter)
{
  var e;
  var pnr = selectelem.options[selectelem.selectedIndex].value;
  e = $('internalKey_' + counter + "_" + channel);

  while ((e !== null) && (e.tagName != "TABLE") && (e.className != "ProfileTbl"))
  {
    e = e.nextSibling;
  }

  if (e.tagName != "TABLE" && e.className != "ProfileTbl") return;
  
  var table = e;
  var elem  = table.getElementsByTagName("tr")[0];

  while (elem !== null)
  {
    //Element.hide(elem);
    elem.style.display = "none";
    elem.style.visibility = "hidden";
    if ((elem.className == "receiver_"+counter + "_" + channel + "_" + pnr) )
    {
      elem.style.visibility = "visible";
      elem.style.display = "";
    }
    elem = elem.nextSibling;
  }
};


/**
 * ic_neweasymode.js
 **/

NewEasyModeForm = Class.create();

NewEasyModeForm.prototype = Object.extend(new MsgBox(), {
  initialize: function(w, h, base_pnr, ps_id, ps_ids, special_input_id) {

  this.init(w, h);
  this.w = w;
  this.h = h;  
  this.base_pnr = base_pnr;  
  this.ps_id    = ps_id;  
  this.ps_ids   = ps_ids;  
  this.special_input_id = special_input_id;  

  this.ProfilesMap = new Array();
  },
  AddProfile: function(pnr, pname) {

  this.ProfilesMap[pnr] = pname;
  },
  ProfileOverwriteWarning: function() {

  var profileExists = false;
  var cur_usertext = $F('EasyModeName');
  for (var Name in this.ProfilesMap)
  {
    if (this.ProfilesMap[Name] == cur_usertext)
    {
      profileExists = true;
      break;
    }
  }

  if (profileExists) {$('id_overwrite_warning').style.visibility = 'visible'; $('save_new_profile').style.visibility = 'hidden';}
  else               {$('id_overwrite_warning').style.visibility = 'hidden'; $('save_new_profile').style.visibility = 'visible';}
  },
  StoreNewProfile: function() {
  ResetPostString();
  profile = is_newProfile(this.ps_id); 
  poststr += "&cmd=SAVE";
  poststr += "&base_pnr="     +this.base_pnr;
  poststr += "&ps_id="        +profile;
  poststr += "&ps_ids="       +profile;
  poststr += "&sensor="		+$F('dev_descr_sender_tmp').split("-")[0];
  poststr += "&actor="	+$F('dev_descr_receiver_tmp');
  poststr += "&EasyModeName=" +elv_toQueryString($F('EasyModeName'));
  
  AddSeparateSettings('separate_' + this.special_input_id + '_', this.base_pnr);
  AddSeparateSettings('subset_'   + this.special_input_id + '_', this.base_pnr);
  SendRequest('ic_neweasymode.cgi');

  this.hide();

  //ProgressBar = new ProgressBarMsgBox("Profilvorlage wird erstellt...", 1);
  ProgressBar = new ProgressBarMsgBox(translateKey("dialogSettingsCreateProfileTemplateTitle"), 1);
  ProgressBar.show();
    ProgressBar.StartKnightRiderLight();
  }
});
//TOM = TimeOutModule

//Defines
TOM_DAYIDX = new Array();
TOM_DAYIDX['SATURDAY'] = 0;
TOM_DAYIDX['SUNDAY'] = 1;
TOM_DAYIDX['MONDAY'] = 2;
TOM_DAYIDX['TUESDAY'] = 3;
TOM_DAYIDX['WEDNESDAY'] = 4;
TOM_DAYIDX['THURSDAY'] = 5;
TOM_DAYIDX['FRIDAY'] = 6;

TOM_DAY_ENG = new Array('SATURDAY', 'SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY');

tom_endtime = 0;
tom_temperature = 1;

tom_maxtimeout = 1440;
tom_mintimeout = 0;
//-----

TimeoutManager = Class.create();

TimeoutManager.prototype = Object.extend(new MsgBox(), {

  initialize: function (iface, address, isOldDevGeneration, prgName) {

    this.TOM_DAY  = new Array (
      translateKey('timeModuleLblSelSerialPatternSaturday') ,
      translateKey('timeModuleLblSelSerialPatternSunday') ,
      translateKey('timeModuleLblSelSerialPatternMonday') ,
      translateKey('timeModuleLblSelSerialPatternTuesday') ,
      translateKey('timeModuleLblSelSerialPatternWednesday') ,
      translateKey('timeModuleLblSelSerialPatternThursday') ,
      translateKey('timeModuleLblSelSerialPatternFriday')
    );

    this.isOldDevGeneration = isOldDevGeneration;
    this.iface = iface;
    this.address = address;

    this.prg = (prgName != undefined && prgName != null) ? prgName : "";

    //Woche anlegen und initialisieren
    this.week = new Array(7);
    this.divname = new Array(7); //DIV-Container
    this.weekdirty = new Array(7); //Sind Änderungen erfolgt?

    this.maxTimeOuts = (this.isOldDevGeneration == true) ? 24 : 13;


    for (var dayidx = 0; dayidx < 7; dayidx++) {
      this.week[dayidx] = new Array();
      this.divname[dayidx] = '';
      this.weekdirty[dayidx] = false;
    }
  },

  setDivname: function (day, divid) {
    var dayidx = TOM_DAYIDX[day];
    this.divname[dayidx] = divid;
  },

  tom_toTime: function (timeout) {

    var h = parseInt(timeout / 60);
    var m = timeout - h * 60;

    if (String(m).length == 1) m = "0" + m;
    if (String(h).length == 1) h = "0" + h;

    return h + ":" + m;
  },

  tom_toTimeout: function (time) {

    var tokens;
    var h, m;
    var timeout = -1;

    if (this.tom_isTime(time)) {
      tokens = time.split(':');
      h = tokens[0];
      m = tokens[1];

      timeout = parseInt(h, 10) * 60 + parseInt(m, 10);
    }

    return timeout;
  },

  tom_isTime: function (time) {
    return time.match(/^[0-2]?[0-9]:[0-5][0,5]$/) != null;
  },

  tom_isTemperature: function (temperature) {
    return temperature.match(/^[1-3]?[0-9]\.?[0-9]*$/) != null;
  },

  tom_checkAndSetTime: function (day, inputel, timeoutIdx) {

    var dayidx = TOM_DAYIDX[day];
    var timeouts = this.week[dayidx];
    var elem = inputel.id.split("_");
    var count = -1;
    var inputelem;
    var endtime;
    var prev_endtime;
    var next_endtime;
    var time;

    if (!this.prg) {
      while ($(elem[0] + '_' + elem[1] + '_' + (count + 1))) {
        count++;
        timeouts[count][tom_endtime] = this.tom_toTimeout($(elem[0] + '_' + elem[1] + '_' + count).value);
      }
    } else {
      while ($(this.prg + elem[1] + '_' + elem[2] + '_' + (count + 1))) {
        count++;
        timeouts[count][tom_endtime] = this.tom_toTimeout($(this.prg + elem[1] + '_' + elem[2] + '_' + count).value);
      }
    }

    for (var loop = 0; loop <= (count - 1); loop++) {
      timeoutIdx = loop;
      if (!this.prg) {
        inputelem = elem[0] + "_" + elem[1] + "_" + loop;
      } else {
        inputelem = this.prg + elem[1] + "_" + elem[2] + "_" + loop;
      }
      if (this.isOldDevGeneration) {
        // Minuten der Zeit auf volle 10 pruefen und ggf. anpassen
        $(inputelem).value = time = $(inputelem).value.replace(/[1-9]$/, "0");
      } else {
        // Minuten der Zeit auf volle 5 pruefen und ggf. anpassen
        var arTime = $(inputelem).value.split(":"),
        hour = parseInt(arTime[0]),
        min =Math.round(arTime[1] / 5) * 5 ;
        if (min <= 9) {min = "0" + min;}
        if (min == 60) {min = "00"; hour++;}
        if (hour <= 9) {hour = "0" + hour;}
        if (hour == 24) {hour = "23"; min = "55";}

        $(inputelem).value = time = hour + ":" + min;
      }
      endtime = this.tom_toTimeout(time);
      prev_endtime = -1;
      next_endtime = -1;


      if (timeoutIdx != 0) prev_endtime = timeouts[timeoutIdx - 1][tom_endtime];
      if (timeoutIdx != timeouts.length - 1) next_endtime = timeouts[timeoutIdx + 1][tom_endtime];


      $(inputelem).style.backgroundColor = WebUI.getColor("transparent");
      if (endtime > 0
        && endtime <= 1440
        && (prev_endtime < 0 || prev_endtime < endtime)
        && (next_endtime < 0 || next_endtime > endtime)) timeouts[timeoutIdx][tom_endtime] = parseInt(endtime);
      else $(inputelem).style.backgroundColor = WebUI.getColor("red");

      this.weekdirty[dayidx] = true;
    }
  },

  tom_checkAndSetTemperature: function (day, inputelem, timeoutIdx) {

    var temperature = inputelem.value;
    var dayidx = TOM_DAYIDX[day];
    var timeouts = this.week[dayidx];

    inputelem.style.backgroundColor = WebUI.getColor("transparent");

    if (this.tom_isTemperature(temperature)
      && temperature >= 0
      && temperature <= 30) timeouts[timeoutIdx][tom_temperature] = parseFloat(temperature);
    else                      inputelem.style.backgroundColor = WebUI.getColor("red");

    this.weekdirty[dayidx] = true;
  },

  tom_setDirty: function (day, inputelem, timeoutIdx) {
    CC_save_Temp(this.prg);
    var tmp = inputelem.id.split("_");

    if (this.prg) {
      var id = this.prg + tmp[1] + "_" + tmp[2] + "_" + tmp[3];
    } else {
      var id = tmp[0] + "_" + tmp[1] + "_" + tmp[2];
    }
    var temperature = $F(id);
    var dayidx = TOM_DAYIDX[day];
    var timeouts = this.week[dayidx];

    inputelem.style.backgroundColor = WebUI.getColor("transparent");

    if (this.tom_isTemperature(temperature)
      && temperature >= 6
      && temperature <= 30) timeouts[timeoutIdx][tom_temperature] = parseFloat(temperature);
    else                      inputelem.style.backgroundColor = WebUI.getColor("red");

    this.weekdirty[dayidx] = true;

  },

  tom_getPostStr: function () {

    var postStr = "";

    for (var dayidx = 0; dayidx < 7; dayidx++) {
      //Welcher Tag enthält die relevanten Daten: "wie am Vortag"-Funktion?
      var prev_day = $(this.prg + 'prevday_' + dayidx);
      var p = dayidx;
      while (prev_day.checked) {
        p--;
        prev_day = $(this.prg+ 'prevday_' + p);
      }
      //-----

      if (this.weekdirty[dayidx] || this.weekdirty[p]) //Dieser Tag oder der Vortag "dirty"?
      {
        var timeouts = this.week[p];

        if (timeouts && timeouts.length > 0) {
          for (var i = 0; i < timeouts.length; i++) {
            if (this.isOldDevGeneration) {
              postStr += "&TEMPERATUR_" + TOM_DAY_ENG[dayidx] +"_" + (i+1) + "=" + timeouts[i][tom_temperature];
              postStr += "&TIMEOUT_"    + TOM_DAY_ENG[dayidx] +"_" + (i+1) + "=" + timeouts[i][tom_endtime];
            } else {
              postStr += "&" + this.prg + "TEMPERATURE_" + TOM_DAY_ENG[dayidx] + "_" + (i + 1) + "=" + timeouts[i][tom_temperature];
              postStr += "&" + this.prg + "ENDTIME_" + TOM_DAY_ENG[dayidx] + "_" + (i + 1) + "=" + timeouts[i][tom_endtime];
            }
          }
        }
      }
    }

    return postStr;
  },

  tom_isDirty: function () {

    for (var dayidx = 0; dayidx < 7; dayidx++) {
      if (this.weekdirty[dayidx]) return true;
    }
    return false;
  },

  //day: MONDAY, TUESDAY, ...
  //endtime: 0..1440
  setTemp: function (day, endtime, temperature) {

    var dayidx = TOM_DAYIDX[day];
    var timeouts = this.week[dayidx];
    var i = 0;
    if (!timeouts) timeouts = new Array();

    //Array ist nach Endtime sortiert.
    while (i < timeouts.length && endtime >= timeouts[i][tom_endtime]) {
      //Timeout schon vorhanden? Dann Temperatur setzen.
      if (timeouts[i][tom_endtime] == endtime) {
        //timeouts[i][tom_temperature] = temperature;
        return;
      }

      i++;
    }

    if (i < timeouts.length) {
      //Es muss einsortiert werden.
      //Platz da!!!
      for (j = timeouts.length; j > i; j--) {
        timeouts[j] = timeouts[j - 1];
      }
    }

    timeouts[i] = new Array(2); //Zeitpunkt-Temperatur-Zuordnung anlegen
    timeouts[i][tom_endtime] = endtime;
    timeouts[i][tom_temperature] = temperature;
  },

  delTemp: function (day, endtime) {

    var dayidx = TOM_DAYIDX[day];
    var timeouts = this.week[dayidx];

    for (var i = 0; i < timeouts.length; i++) {
      if (timeouts[i][tom_endtime] == endtime) {
        timeouts.splice(i, 1);
        break;
      }
    }
  },

  delTempByIdx: function (day, timeoutIdx) {

    var dayidx = TOM_DAYIDX[day];
    var timeouts = this.week[dayidx];
    timeouts.splice(timeoutIdx, 1);

    this.weekdirty[dayidx] = true;
  },

  addTempByIdx: function (day, timeoutIdx) {

    var dayidx = TOM_DAYIDX[day];
    var timeouts = this.week[dayidx];

    if (timeouts.length >= this.maxTimeOuts ) {
      //alert('Der Zeitabschnitt kann nicht angelegt werden. Es können nur bis zu '+this.maxTimeOuts+'  Zeitabschnitte angelegt werden.');
      alert(translateKey('errorCreateTimePeriod') + translateKey('maxTimePeriodReachedA') + this.maxTimeOuts+translateKey('maxTimePeriodReachedB'));
      return;
    }
    else if (timeouts[timeoutIdx][tom_endtime] - 10 == 0) {
      //alert('Der Zeitabschnitt kann nicht angelegt werden. Die Endzeit kann nicht 00:00 Uhr sein.');
      alert(translateKey('errorCreateTimePeriod') + translateKey('endtimeReached'));
      return;
    }
    else if (timeoutIdx > 0 && timeouts[timeoutIdx][tom_endtime] - 10 <= timeouts[timeoutIdx - 1][tom_endtime]) {
      //alert('Der Zeitabschnitt kann nicht angelegt werden. Er existiert schon.');
      alert(translateKey('errorCreateTimePeriod') + translateKey('timePeriodAlreadyExists'));
      return;
    }
    this.setTemp(day, timeouts[timeoutIdx][tom_endtime] - 10, timeouts[timeoutIdx][tom_temperature]);

    this.weekdirty[dayidx] = true;
  },

  OnClickPrevDay: function (day) {
    var dayidx = TOM_DAYIDX[day];
    var elem = $(this.prg + 'prevday_' + dayidx);

    if (elem.checked) {
      $(this.prg+'tempprofile_' + dayidx).style.display = "none";
      $(this.prg+'tempprofile_' + dayidx).style.visibility = "hidden";
    }
    else {
      $(this.prg+'tempprofile_' + dayidx).style.display = "";
      $(this.prg+'tempprofile_' + dayidx).style.visibility = "visible";
    }
    this.tom_setDirty('SATURDAY', $(this.prg + 'temperature_0_0_tmp'), 0);
    this.weekdirty[dayidx] = true;
  },

  tom_equals_prevday: function (day) {

    var dayidx = TOM_DAYIDX[day];

    if (dayidx == 0) return false; //Starttag ist immer ungleich des Vortages

    var this_timeouts = this.week[dayidx    ];
    var prev_timeouts = this.week[dayidx - 1];

    if (!prev_timeouts || !this_timeouts || prev_timeouts.length != this_timeouts.length) return false;

    for (var i = 0; i < this_timeouts.length; i++) {
      if (this_timeouts[i][tom_temperature] != prev_timeouts[i][tom_temperature]
        || this_timeouts[i][tom_endtime] != prev_timeouts[i][tom_endtime]) return false;
    }
    return true;
  },

  checkDayTimeouts: function (dayidx) {
    var timeouts = this.week[dayidx];

    for (i = 1; i < timeouts.length; i++) {
      if (timeouts[i][tom_endtime] <= timeouts[i - 1][tom_endtime]) {
        alert("Der " + i + ". Zeitabschnitt hat eine ungültige Dauer");
      }
    }
  },

  checkTimeouts: function () {

    for (i = 0; i < this.week.length; i++) {
      checkDayTimeouts(i);
    }
  },

  writeDay: function (day) {

    var prgNr = this.prg;

    var dayidx = TOM_DAYIDX[day];
    var timeouts = this.week[dayidx];
    var endtime;

    if (!timeouts) return;

    var equals_prevday = this.tom_equals_prevday(day);

    msg = "<hr class=\"CLASS10400\" />";
    msg += "<table class=\"TimeoutTable\">";
    msg += "<tbody>";
    msg += "<tr>";
    //msg += "<td>Temperaturprofil " +TOM_DAY[dayidx] +":</td>";
    msg += "<td>" + translateKey('lblProgramTemperatureProfile') + "&nbsp;" + this.TOM_DAY[dayidx] + ":</td>";
    msg += "<td>&nbsp;";
    if (dayidx == 0) msg += "<div style=\"visibility: hidden; display: none;\">";
    //msg += "<input type=\"checkbox\" id=\"prevday_" +dayidx +"\" onclick=\"tom.OnClickPrevDay('" +day +"');\" " +(equals_prevday?'checked=\"checked\"':'\"\"') +"\"/>wie am Vortag";
    msg += "<input type=\"checkbox\" id=\""+prgNr+"prevday_" + dayidx + "\" onclick=\""+prgNr+"tom.OnClickPrevDay('" + day + "');\" " + (equals_prevday ? 'checked=\"checked\"' : '\"\"') + "\"/>" + translateKey('lblProgramPreviousDay');
    if (dayidx == 0) msg += "</div>";
    msg += "</td>";
    msg += "</tr>";
    msg += "</tbody>";
    msg += "</table>";

    msg += "<table class=\"TimeoutTable\" id=\""+prgNr+"tempprofile_" + dayidx + "\" " + (equals_prevday ? 'style=\"display: none; visibility: hidden;\"' : '') + ">";
    msg += "<thead>";
    //msg += "<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>Startzeit</td><td>Endzeit</td><td>Temperatur</td></tr>";
    msg += "<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>" + translateKey('lblProgramTimeStart') + "</td><td>" + translateKey('lblProgramTimeEnd') + "</td><td>" + translateKey('lblProgramTemperature') + "</td></tr>";
    msg += "</thead>";
    msg += "<tbody>";

    for (var i = 0; i < timeouts.length; i++) {
      if (i == 0) endtime = tom_mintimeout;
      else        endtime = timeouts[i - 1][tom_endtime];

      msg += "<tr>";
      msg += "<td><img " + (i == timeouts.length - 1 ? 'style=\"visibility: hidden;\"' : '') + " title=\"" + translateKey('toolTipProgramDelPeriod') + "\" alt=\"Zeitabschnitt l&ouml;schen\" onclick=\""+prgNr+ "tom.delTempByIdx('" + day + "'," + i + "); "+prgNr+ "tom.writeDay('" + day + "');\" style=\"cursor: pointer; width: 24px; height: 24px;\" src=\"/ise/img/cc_delete.png\"/></td>";
      msg += "<td><img src=\"/ise/img/add.png\" title=\"" + translateKey('toolTipProgramAddPeriod') + "\" alt=\"Zeitabschnitt hinzuf&uuml;gen\" style=\"width: 24px; height: 24px; cursor: pointer;\" onclick=\""+prgNr+ "tom.addTempByIdx('" + day + "'," + i + "); "+prgNr+ "tom.writeDay('" + day + "');\" /></td>";
      msg += "<td>" + (i + 1) + ". " + translateKey('lblProgramPeriod') + "</td>";
      //msg += "<td><input style=\"text-align: right;\" maxLength=\"5\" size=\"7\" id=\"starttime_"   +dayidx +"_"+i+"\" disabled=\"disabled\" type=\"text\" value=\""+ this.tom_toTime( endtime) +"\">Uhr</td>";
      msg += "<td><input style=\"text-align: right;\" maxLength=\"5\" size=\"7\" id=\""+prgNr+"starttime_" + dayidx + "_" + i + "\" disabled=\"disabled\" type=\"text\" value=\"" + this.tom_toTime(endtime) + "\">" + translateKey('lblProgramTimeExtension') + "</td>";
      msg += "<td><input style=\"text-align: right;\" maxLength=\"5\" size=\"7\" id=\""+prgNr+"endtime_" + dayidx + "_" + i + "\" " + (i == timeouts.length - 1 ? 'disabled=\"disabled\"' : '') + " type=\"text\" value=\"" + this.tom_toTime(timeouts[i][tom_endtime]) + "\" onblur=\""+prgNr+"tom.tom_checkAndSetTime ('" + day + "', this, " + i + "); document.getElementById('"+prgNr+"starttime_" + dayidx + "_" + (i + 1) + "').value=this.value; \">" + translateKey('lblProgramTimeExtension') + "</td>";
      msg += "<td><input style=\"text-align: right;\" maxLength=\"4\" size=\"3\" name=\""+prgNr+"temp_tmp\" id=\""+prgNr+"temperature_" + dayidx + "_" + i + "_tmp\" value=\"" + timeouts[i][tom_temperature].toFixed(1) + "\" onblur=\""+prgNr+"tom.tom_setDirty ('" + day + "', this, " + i + ");\">&deg;<span class=\"CF\">C</span></td>";
      // im naechsten Input-Feld stehen versteckt die zum Aktor zu uebertragenden Werte. Da der Aktor Werte im Grad Celsius erwartet,
      // muss der im Kanalparameter evtl. in F angezeigte Wert immer in Celsius umgerechntet und zwischengespeichert werden.
      msg += "<td><input style=\"display:none\" size=\"3\" name=\""+prgNr+"temp\" id=\""+prgNr+ "temperature_" + dayidx + "_" + i + "\" value=\"" + timeouts[i][tom_temperature].toFixed(1) + "\"></td>";
      msg += "</tr>";
    }
    msg += "</tbody>";
    msg += "</table>";
    $(this.divname[dayidx]).innerHTML = msg;

    if (this.isOldDevGeneration) {
      CC_setUnit();
    }

  }
});
/**
 * ic_partyendtime.js
 **/
 
//pet = Party End Time Module

PartyEndTimeManager = Class.create();

PartyEndTimeManager.prototype = Object.extend(new MsgBox(), {
  
  initialize: function (iface, address, htmlcontainer, name, id) {

    this.iface    = iface;
    this.address  = address;
    this.htmlcont = htmlcontainer;
    this.name     = name;
    this.id       = id;
  },

  pet_Update: function () {

    var d = $F('pet_d');
    if (isNaN(d)) d = 0;

    var h = parseInt($F('pet_h'));
    var m = parseFloat($F('pet_m'));

    var endtime = d * 24 + h + m;

    if (endtime >= 24)
    {
      $('pet_m').disabled = true;
      $('pet_m').value = 0;

      $('pet_h').disabled = true;
      $('pet_h').value = 0;

      endtime = d * 24;
    }
    else 
    {
      $('pet_m').disabled = false;
      $('pet_h').disabled = false;
    }
		
		if (endtime > 3048) {endtime = 3048;}
		
    $(this.id).value = endtime;
  },

  writeControl: function (endtime) {

  var msg = "";
  var d, h, m;

  d = Math.floor(endtime / 24);
  
  tmp  = endtime - (d * 24);
  h = Math.floor(tmp);

  m = tmp-h;


  msg += "<input onkeyup=\"pet.pet_Update();\" id=\"pet_d\" type=\"text\" value=\""+d+"\" size=\"2\"/>d&nbsp; ";

  msg += "<select onchange=\"pet.pet_Update();\" id=\"pet_h\">";
  for (var i=0; i<24; i++)
  {
		if (i < 10) 
		{
			var zero = "0";
		} else 
		{
			var zero = "";
		}
    msg += "<option " +(i==h?'selected=\"selected\"':'') +">"+zero+i+"</option>";
  }
  msg += "</select>h&nbsp;";

  msg += "<select id=\"pet_m\" onchange=\"pet.pet_Update();\">";
  msg += "<option " +( m === 0 ? 'selected=\"selected\"' : '') +" value=\"0\">00</option>";
  msg += "<option " +( m >   0 ? 'selected=\"selected\"' : '')  +" value=\"0.5\">30</option>";
  msg += "</select>m<br/>";
  //msg += "max. 127 Tage";
  msg += translateKey("partyMaxDays127");

  //Sammelobjekt für richtigen Datenwert:
  msg += "<span style=\"visibility: hidden; display: none;\"><input id=\""+this.id+"\" type=\"text\" value=\""+endtime+"\" name=\""+this.name+"\"/></span>";

  $(this.htmlcont).innerHTML = msg;

  this.pet_Update();
  }
});
/**
 * cp_functions.js
 **/

showAddDeviceCP = function(activate_install_mode)
{
  var path = "/config/";
  if (PLATFORM != "Central") {path = "/configapp/";}
  
  if(activate_install_mode)CreateCPPopup(path + "cp_add_device.cgi", "call_js=rf_install_mode(true);");
  else CreateCPPopup(path + "cp_add_device.cgi");
};

showDisplayCP = function()
 {
  CreateCPPopup("/config/cp_display.cgi");
};

showSecurityCP = function()
 {
  CreateCPPopup("/config/cp_security.cgi");
};

showNetworkSecurityCP = function()
 {
  CreateCPPopup("/config/cp_cert.cgi");
};

showNetworkCP = function()
 {
  CreateCPPopup("/config/cp_network.cgi");
};
showGeneralSettingsCP = function()
 {
  CreateCPPopup("/pages/jpages/system/StorageSettings/show");
};

showTimeCP = function() {
  CreateCPPopup("/config/cp_time.cgi");
};

showSoftwareCP = function()
{
  CreateCPPopup("/config/cp_software.cgi");
};

showMaintenanceCP = function()
{
  CreateCPPopup("/config/cp_maintenance.cgi");
};

showNewFirmwareDownload = function() {
  CreateCPPopup("/config/cp_maintenance.cgi", "downloadOnly=1");
};

CreateCPPopup = function(src, pb) {
  dlgPopup = new cpMessageBox(src, pb);
  
  PopupClose = function() {
    dlgPopup.close();
  };
  
  PopupReload = function() {
    dlgPopup.reload();
    dlgPopup.ShowPopup();
  };
  
  dlgPopup.ShowPopup();
};

CreateCPPopup2 = function(src, pb) {
  dlgPopup2 = new cpMessageBox2(src, pb);
  
  Popup2Close = function() {
    dlgPopup2.close();
  };
  
  Popup2Reload = function() {
    dlgPopup2.reload();
    dlgPopup2.ShowPopup();
  };
  
  dlgPopup2.ShowPopup();
};

cp_adddev_updater=null;

cpMessageBox = Class.create();

cpMessageBox.prototype =
{
  initialize: function(src, pb)
  {
    if ( $('messagebox') ){
      $("messagebox").hide();
    }

    this.setTopMargin(6);
    this.setLeftMargin(6);
    
    this.setWidth(800);

    this.createMessagebox();
    this.LoadFromFile(src, pb);
  },

  getViewPortDim : function()
  {
    var win = jQuery(window);
    return {"height":win.height(), "width": win.width()};
  },

  setWidth: function(width)
  {
    this.width = width;
    if( $('messagebox') ){
        $('messagebox').style.width=this.width+"px";
    }
  },
  
  setHeight: function(height)
  {
    this.height = height;
  },
  
  setLeftMargin: function(left)
  {
    this.LeftMargin = left;
  },
  
  setTopMargin: function(top)
  {
    this.TopMargin = top;
  },  
  
  createMessagebox: function()
  {
    if ( !$('messagebox') )
    {      
      var newDiv = document.createElement("div");
      var newDivId = document.createAttribute("id");
      newDivId.nodeValue = "messagebox";
      newDiv.setAttributeNode(newDivId);
      var newDivStyle = document.createAttribute("style");
      //newDivStyle.nodeValue = "width:"+this.width+"px;height:"+this.height+"px;padding: 0px;position:absolute;left: 50%;margin-left: -"+(this.width/2)+"px;margin-top: -"+(this.height/2)+"px;";
      newDivStyle.nodeValue = "width:"+this.width+"px;height:"+this.height+"px;padding: 0px;position:absolute;left: 50%;margin-left: -"+(this.width/2)+"px;margin-top: -"+"0px;";
      if( typeof( newDiv.style.cssText ) == "string" ) {
        newDiv.style.cssText = newDivStyle.nodeValue;
      } else {
        newDiv.setAttributeNode(newDivStyle);
      }
      $('centerbox').appendChild(newDiv);
    }  else {
        $('messagebox').style.width=this.width+"px";
    }
    jQuery("#messagebox").addClass("j_translate");
  },
  
  removeMessagebox: function()
  {
    if ( $('messagebox') )
    {
      $('messagebox').remove();
    }
  },

   // TODO Es wird zur Zeit nur die Höhe ausgewertet und angepasst, die Breite ist noch nicht implementiert.
  /**
   * Adds a scrollbar and adjusts the position when the height of the message box is > than those of the viewport
   * @param boxHeight
   */
  setCSS: function(boxHeight) {
    var centerBoxSel = jQuery("#centerbox"),
      messageBoxSel = jQuery("#messagebox"),
      oViewPortDim = this.getViewPortDim();

    if (parseInt(oViewPortDim.height) < boxHeight )
    {
      centerBoxSel.css({
        "overflow":"scroll",
        "height":"95%",
        "top":"-0px"
      });
      messageBoxSel.css("margin-top", "-0px");
    } else {
      centerBoxSel.css({"overflow":"", "top":"50%"});
    }
  },

  readaptSize: function()
  {
    var messageBox = $("messagebox");
    if ( messageBox )
    {
      var h = messageBox.getHeight();
      messageBox.style.marginLeft = (messageBox.style.width.replace(/px$/,"")/2)*(-1)+"px";
      messageBox.style.marginTop = (h/2)*(-1)+"px";
      this.setCSS(h);
    }
  },

  show: function()
  {
    this.readaptSize();
    $('trlayer').show();
    $('centerbox').show();
  },  
  
  close: function(o)
  {
    $('centerbox').hide();
    this.remove();
    $('trlayer').hide();
  },
  
  hide: function(o)
  {
    $('messagebox').style.display="none";
  },
  
  remove: function()
  {
    this.removeMessagebox();
  },
  
  LoadFromFile: function(src, pb) {
    var url = src+'?sid='+SessionId;
    var t = this;
    var opt = 
    {
      method: 'post',
      evalScripts: true,
      postBody: pb,
      sendXML: false,
      onComplete: function(trans) {
        centerMessageBox();
        $('messagebox').style.display="";
      }
    };
    new Ajax.Updater('messagebox',url,opt);
  },
  
  ShowPopup: function() {
    this.show();
  }
};

cpMessageBox2 = Class.create();

cpMessageBox2.prototype =
{
  initialize: function(src, pb)
  {
    this.setTopMargin(6);
    this.setLeftMargin(6);
    
    this.setWidth(400); 
    
    this.createMessagebox();
    this.LoadFromFile(src, pb);
  },
  
  setWidth: function(width)
  {
    this.width = width;
    if( $('messagebox2') ){
        $('messagebox2').style.width=this.width+"px";
    }
  },
  
  setHeight: function(height)
  {
    this.height = height;
  },
  
  setLeftMargin: function(left)
  {
    this.LeftMargin = left;
  },
  
  setTopMargin: function(top)
  {
    this.TopMargin = top;
  },  
  
  createMessagebox: function()
  {
    if ( !$('messagebox2') )
    {      
      var newDiv = document.createElement("div");
      var newDivId = document.createAttribute("id");
      newDivId.nodeValue = "messagebox2";
      newDiv.setAttributeNode(newDivId);
      var newDivStyle = document.createAttribute("style");
      newDivStyle.nodeValue = "width:"+this.width+"px;height:"+this.height+"px;padding: 0px;position:absolute;left: 50%;margin-left: -"+(this.width/2)+"px;margin-top: -"+(this.height/2)+"px;";
      
      if( typeof( newDiv.style.cssText ) == "string" )
        newDiv.style.cssText = newDivStyle.nodeValue;
      else
        newDiv.setAttributeNode(newDivStyle);
      
      $('centerbox2').appendChild(newDiv);
    }  else {
        $('messagebox2').style.width=this.width+"px";
    }
  },
  
  removeMessagebox: function()
  {
    if ( $('messagebox2') )
    {
      $('messagebox2').remove();
    }
  },
  
  readaptSize: function()
  {
    if ( $('messagebox2') )
    {
      var h = $("messagebox2").getHeight();
      $('messagebox2').style.marginLeft = ($('messagebox2').style.width.replace(/px$/,"")/2)*(-1)+"px";
      $('messagebox2').style.marginTop = (h/2)*(-1)+"px";
    }
  },
  
  show: function()
  {
    this.readaptSize();
    $('trlayer2').show();
    $('centerbox2').show();
  },  
  
  close: function(o)
  {
    $('centerbox2').hide();
    this.remove();
    $('trlayer2').hide();
  },
  
  hide: function(o)
  {
    $('messagebox2').style.display="none";
  },
  
  remove: function()
  {
    this.removeMessagebox();
  },
  
  LoadFromFile: function(src, pb)
  {
    var url = src+'?sid='+SessionId;
    var t = this;
    var opt = 
    {
      method: 'post',
      evalScripts: true,
      postBody: pb,
      sendXML: false,
      onComplete: function(trans) {
        centerMessageBox();
        $('messagebox2').style.display="";
      }
    };
    new Ajax.Updater('messagebox2',url,opt);
  },
  
  ShowPopup: function()
  {
    this.show();
  }
};
/**
 * ic_functions.js
 **/

prefix = [];
switch_dir = 1;
switch_on_off = false;
free_time = 0;
free_perc = 0;
free_temp = 0;
exists_timearr = "";
exists_percarr = "";
exists_temparr = "";
time_textcolor = 0;
perc_textcolor = 0;
temp_textcolor = 0;
_textcolor = 0;
time_tmp = "";
perc_tmp = "";
temp_tmp = "";
exists_bib = [] ;
arModEM8 = [];

getInternalKeySpecialInputId = function(arrId) 
{
  var id = "";
  var arrIdLength = arrId.length - 1;

  for (var loop = 0; loop < arrIdLength; loop++) {
    id += arrId[loop];
    
    if ((loop + 1) < arrIdLength) {
     id += "_";       
    }           
  }
  return id;    
};

ActivateFreeTime4InternalKey = function(selectelem, pref)
{
	ActivateFreeTime(selectelem, pref, true); 	
};

ActivateFreeTime = function(selectelem, pref, internalKey)
{
  //alert($('selectelem').id + " pref= " + pref);	
  var pnr = selectelem.options[selectelem.selectedIndex].value;  
  var upnr = pnr.split(".")[1];
  var intkey = selectelem.id.split("_")[0].slice(8);

  if (isNaN(upnr) == true) {
	  var arrSpecialInputId = selectelem.id.split("_");
   	var special_input_id = arrSpecialInputId[0]; 
	
		if (internalKey) {
		  special_input_id = getInternalKeySpecialInputId(arrSpecialInputId);
		}

 		var selectedvalue = document.getElementById("separate_" + special_input_id + "_" + pnr + "_" + pref).value; //4  
    var parameter = document.getElementById("separate_" + special_input_id + "_" + pnr + "_" + pref).name; //5   
    var sec = document.getElementById("vis_sec_" + pnr + "_" + pref + "_" + special_input_id);
    var min = document.getElementById("vis_min_" + pnr + "_" + pref + "_" + special_input_id);
    var hour = document.getElementById("vis_hour_" + pnr + "_" + pref + "_" + special_input_id);
    var x_max = selectelem.length + 1;
    //6  
    if (pnr > x_max) {x_max = parseInt(pnr) + 1;}
    var y_max = 15;

    //7 
    if (exists_timearr != "ok" || time_tmp != x_max) 
    {
      //8
      time2d = [];
      for (var i = 0; i < x_max; ++i) 
      time2d[i] = [];
      exists_timearr = "ok"; 
      time_tmp = x_max; 		//9
    }

    time2d[pnr][pref] = 0;
    prefix[parameter + special_input_id] = pnr + "_" + pref + "_" + special_input_id; 

    if (selectedvalue == "99999999")
    {
      if (intkey == "" && !internalKey) {
	      document.getElementById("NewProfileTemplate_receiver").style.visibility = "hidden";
        document.getElementById(special_input_id + "_profiles").options[selectelem.selectedIndex].style.color = "gray";
        if (CheckGroup()) document.getElementById("NewProfileTemplate_receivergroup").style.visibility = "hidden";
      }
	  time2d[pnr][pref] = 1; //10 
      hour.style.display = "inline";
      min.style.display = "inline";
      sec.style.display = "inline";
    }
    else 
    { 
      if (free_time != 1 && free_perc != 1 && free_temp != 1) {
      if (intkey == "" && !internalKey) {
	      document.getElementById("NewProfileTemplate_receiver").style.visibility = "visible";
          if (CheckGroup()) document.getElementById("NewProfileTemplate_receivergroup").style.visibility = "visible";
        }
	  } else	document.getElementById(special_input_id + "_profiles").options[selectelem.selectedIndex].style.color = TextColor(_textcolor);

      time2d[pnr][pref] = 0; //11 

      hour.style.display = "none";
      min.style.display = "none";
      sec.style.display = "none";
    }
    free_time = 0; //12
    for (var loopx = 0; loopx < x_max; loopx++){
      for (var loopy = 0; loopy < y_max; loopy++){
          if (time2d[loopx][loopy] == 1) {free_time = 1; break;}
      }
    }

    for (loopy = 0; loopy <= y_max; loopy++) {
      if (time2d[pnr][loopy] == 1) 	{time_textcolor = 1; break;}
      else time_textcolor = 0;
    }

      if (time_textcolor == 0 && perc_textcolor == 0 && temp_textcolor == 0) _textcolor = 0;
      else _textcolor = 1;
      document.getElementById(special_input_id + "_profiles").options[selectelem.selectedIndex].style.color = TextColor(_textcolor);

      if (free_time == 0 && free_perc == 0 && free_temp == 0) {
        if (intkey == "" && !internalKey) {
	      document.getElementById("NewProfileTemplate_receiver").style.visibility = "visible";
          if (CheckGroup()) document.getElementById("NewProfileTemplate_receivergroup").style.visibility = "visible";
        }
	  }
  }
};

// Ausgelagert nach www_source/ise/js/function.js
// Kann hier entfernt werden.
_encodeString = function(elem)
{
	//wird nur für die Übersetzung der Parameter des HM-PB-4Dis-WM genutzt, 
	//da dort einige Zeichen an anderer Stelle liegen.

	var inString = $F("_" + elem);
	var outString = inString.replace(/Ä/g, "[");
	outString = outString.replace(/Ö/g, "#");
	outString = outString.replace(/Ü/g, "$");
	outString = outString.replace(/ä/g, "{");	
	outString = outString.replace(/ö/g, "|");	
	outString = outString.replace(/ü/g, "}");	
	outString = outString.replace(/ß/g, "~");	
	outString = outString.replace(/&/g, "]");
	outString = outString.replace(/=/g, "'");

	$(elem).value = outString;
};

ActivateFreePercent4InternalKey = function(selectelem, pref)
{
	ActivateFreePercent(selectelem, pref, true); 	
};

ActivateFreePercent = function(selectelem, pref, internalKey)
{
	var pnr = selectelem.options[selectelem.selectedIndex].value; //1
	var upnr = pnr.split(".")[1];
  	var intkey = selectelem.id.split("_")[0].slice(8);

	//2
	if (isNaN(upnr) == true) {
		// var special_input_id = selectelem.id.split("_")[0]; //3
	  var arrSpecialInputId = selectelem.id.split("_");
  	var special_input_id = arrSpecialInputId[0]; 

		if (internalKey) {
		  special_input_id = getInternalKeySpecialInputId(arrSpecialInputId);
		} 

		var selectedvalue = document.getElementById("separate_" + special_input_id + "_" + pnr + "_" + pref).value; //4 
		var parameter = document.getElementById("separate_" + special_input_id + "_" + pnr + "_" + pref).name; //5  
		var percent = document.getElementById("vis_percent_" + pnr + "_" + pref + "_" + special_input_id);
		var x_max = selectelem.length + 1; 
		//6 
		if (pnr > x_max) {x_max = parseInt(pnr) + 1;}
		var y_max = 15;
		
		//7
		if (exists_percarr != "ok" || perc_tmp != x_max) 
		{
			//8
			perc2d = [];
			for (i = 0; i < x_max; ++i) 
			perc2d[i] = [];
			exists_percarr = "ok";
			perc_tmp = x_max; //9
		}
		perc2d[pnr][pref] = 0;
		
		prefix[parameter + special_input_id] = pnr + "_" + pref + "_" + special_input_id; 
		
		if (selectedvalue == "99999998" )
		{	 
      if (intkey == "" && !internalKey) {
			  document.getElementById("NewProfileTemplate_receiver").style.visibility = "hidden";
			  document.getElementById(special_input_id +  "_profiles").options[selectelem.selectedIndex].style.color = "gray";
			  if (CheckGroup()) document.getElementById("NewProfileTemplate_receivergroup").style.visibility = "hidden";
			}
			perc2d[pnr][pref] = 1; //10
			percent.style.display = "inline";
		
		} else { 
			if (free_time != 1 && free_perc != 1 && free_temp != 1) {
      if (intkey == "" && !internalKey) {
				document.getElementById("NewProfileTemplate_receiver").style.visibility = "visible";
				if (CheckGroup()) document.getElementById("NewProfileTemplate_receivergroup").style.visibility = "visible";
			  }
			} else	document.getElementById(special_input_id + "_profiles").options[selectelem.selectedIndex].style.color = TextColor(_textcolor);
			
			perc2d[pnr][pref] = 0; //11 
			percent.style.display = "none";
		}
		
		free_perc = 0; //12 
		for (var loopx = 0; loopx < x_max; loopx++){
			for (var loopy = 0; loopy < y_max; loopy++){
				if (perc2d[loopx][loopy] == 1) {free_perc = 1; break;}
			}
		}
		for (loopy = 0; loopy <= y_max; loopy++) {
			if (perc2d[pnr][loopy] == 1) 	{perc_textcolor = 1; break;}
			else perc_textcolor = 0;
		}
		
		if (time_textcolor == 0 && perc_textcolor == 0 && temp_textcolor == 0) _textcolor = 0;
		else _textcolor = 1;
		document.getElementById(special_input_id + "_profiles").options[selectelem.selectedIndex].style.color = TextColor(_textcolor);

		if (free_time == 0 && free_perc == 0 && free_temp == 0) {
      if (intkey == "" && !internalKey) {
		    document.getElementById("NewProfileTemplate_receiver").style.visibility = "visible";
			if (CheckGroup()) document.getElementById("NewProfileTemplate_receivergroup").style.visibility = "visible";
		  }
		}
	}
};



ActivateFreeTemp = function(selectelem, pref)
{
  var pnr = selectelem.options[selectelem.selectedIndex].value; //1
  var upnr = pnr.split(".")[1];
  var intkey = selectelem.id.split("_")[0].slice(8);

  //2
  if (isNaN(upnr) == true) {
    var special_input_id = selectelem.id.split("_")[0]; //3 
    var selectedvalue = document.getElementById("separate_" + special_input_id + "_" + pnr + "_" + pref).value; //4 
    var parameter = document.getElementById("separate_" + special_input_id + "_" + pnr + "_" + pref).name; //5  
    var temperatur = document.getElementById("vis_temp_" + pnr + "_" + pref + "_" + special_input_id);
    var x_max = selectelem.length + 1;
    //6 
    if (pnr > x_max) {x_max = parseInt(pnr) + 1;}
    var y_max = 15;
    //7
    if (exists_temparr != "ok" || temp_tmp != x_max) 
    {
      //8
      temp2d = [];
      for (var i = 0; i < x_max; ++i) 
      temp2d[i] = [];
      exists_temparr = "ok";
      temp_tmp = x_max; //9
    }
    temp2d[pnr][pref] = 0;
    
    prefix[parameter + special_input_id] = pnr + "_" + pref + "_" + special_input_id; 
      
    if (selectedvalue == "99999997" )
    {
	  if (intkey == "") {
        document.getElementById("NewProfileTemplate_receiver").style.visibility = "hidden";
        document.getElementById(special_input_id +  "_profiles").options[selectelem.selectedIndex].style.color = "gray";
        if (CheckGroup()) document.getElementById("NewProfileTemplate_receivergroup").style.visibility = "hidden";
      }
	  temp2d[pnr][pref] = 1; //10
      temperatur.style.display = "inline";
    
    } else { 
      if (free_time != 1 && free_perc != 1 && free_temp != 1) {
	    if (intkey == "") {
	     document.getElementById("NewProfileTemplate_receiver").style.visibility = "visible";
         if (CheckGroup()) document.getElementById("NewProfileTemplate_receivergroup").style.visibility = "visible";
        }
	  } else  document.getElementById(special_input_id + "_profiles").options[selectelem.selectedIndex].style.color = TextColor(_textcolor);
      
      temp2d[pnr][pref] = 0; //11
      temperatur.style.display = "none";
    }
  
    free_temp = 0; //12 
    for (var loopx = 0; loopx < x_max; loopx++){
      for (var loopy = 0; loopy < y_max; loopy++){
        if (temp2d[loopx][loopy] == 1) {free_temp = 1; break;}
      }
    }
    
    for (loopy = 0; loopy <= y_max; loopy++) {
      if (temp2d[pnr][loopy] == 1)   {temp_textcolor = 1; break;}
      else temp_textcolor = 0;
    }
    
    if ((time_textcolor == 0) && (perc_textcolor == 0) && (temp_textcolor == 0)) { _textcolor = 0; }
    else _textcolor = 1;
    document.getElementById(special_input_id + "_profiles").options[selectelem.selectedIndex].style.color = TextColor(_textcolor);
    
    if ((free_time == 0) && (free_perc == 0) && (free_temp == 0))
    {
	  if (intkey == "") {
        document.getElementById("NewProfileTemplate_receiver").style.visibility = "visible";
        if (CheckGroup()) document.getElementById("NewProfileTemplate_receivergroup").style.visibility = "visible";
      }
	}
  }
};

BLIND_fetchType = function(id) {
  var arrID = id.split("_");
  var type = "";

  for (var loop = 1; loop < arrID.length; loop++) {
    type += arrID[loop];
    
    if ((loop + 1) < arrID.length) {
      type += "_";        
    } 
  }
  return type;
};

BLIND_setPosition = function(id)
{
	var type = BLIND_fetchType(id);
	var index = $(id).selectedIndex; 
	var v_up = "visible";
	var v_down = "hidden";
	var d_up = "";
	var d_down = "none";

	if (index == 1) {v_up = "hidden"; v_down = "visible"; d_up = "none"; d_down = "";} 
	else if (index == 2) {v_up = "visible"; v_down = "visible"; d_up = ""; d_down = "";}


	$("upLevel_" + type).style.visibility = v_up;
	$("downLevel_" + type).style.visibility = v_down;
	$("upTime_" + type).style.visibility = v_up;
	$("downTime_" + type).style.visibility = v_down;
	$("upDelayTime_" + type).style.visibility = v_up;
	$("downDelayTime_" + type).style.visibility = v_down;

	$("upLevel_" + type).style.display = d_up;
	$("downLevel_" + type).style.display = d_down;
	$("upTime_" + type).style.display = d_up;
	$("downTime_" + type).style.display = d_down;
	$("upDelayTime_" + type).style.display = d_up;
	$("downDelayTime_" + type).style.display = d_down;

};

Disable_SimKey = function(ch, prn, specialInputId) 
{
	var arrSpecialInputId = specialInputId.split("_"),
	pref_dirty = false,
	i = 1,
	jBtnSim = $("SimKey_" + arrSpecialInputId[1] + "_" +  arrSpecialInputId[2] + "_" + prn),
	jHintSim = $("SimKeyHint_" + arrSpecialInputId[1] + "_" +  arrSpecialInputId[2] + "_" + prn);
	
	if (jBtnSim) {

		while ($('separate_' +  specialInputId + '_' + prn + '_' + i))
		{
		  if (IsDirty($('separate_' + specialInputId + '_' + prn + '_' + i))) 
		  {
		  	pref_dirty = true;
	 	 }
	 	 i++;
		}

	 	if ( (pref_dirty == true ) || ( IsDirty($(specialInputId + '_profiles')) ) ) 
		{
			jBtnSim.disabled = true;
			//jBtnSim.value = "Simulation nicht möglich!";
			jBtnSim.value = translateKey("simulateKeyPressBtnTxtNotPossible");
			jHintSim.style.display = "inline";
		} 
		else
		{
			jBtnSim.disabled = false;
			//jBtnSim.value = "Simuliere Tastendruck";
			jBtnSim.value = translateKey("simulateKeyPressBtnTxt");
			jHintSim.style.display = "none";
		}
  }
};


MD_catchBrightness = function(url, sender_address, receiver_address, set_value, id, commando, parameter)
{
	ResetPostString();
	poststr += "&url=" +url;
	poststr += "&sender_address="   +sender_address;
	poststr += "&receiver_address=" +receiver_address;
	poststr += "&set_value=" +set_value;
	poststr += "&id=" +id;
	poststr += "&commando=" +commando;
	poststr += "&parameter=" +parameter;
	poststr += "&active_bright=" + $F(id);
	SendRequest('ic_md.cgi');
};

MD_channel_help = function()
{
	var contentElm = jQuery("#content"),
  helpContentElm = jQuery("#md_ch_help"),
  helpBtnElm =  jQuery("#md_help_button");

	if (helpBtnElm.val() == translateKey("genericBtnTxtHelp"))
	{
    helpContentElm.css("display","inline");
    helpBtnElm.val(translateKey("genericBtnTxtHelpOff"));
    contentElm.animate({scrollTop: contentElm.height()},1000);
	} else {
    contentElm.animate({scrollTop: parseInt(0)},1000, function() {
      helpContentElm.fadeOut(800);
      helpBtnElm.val(translateKey("genericBtnTxtHelp"));
    });

	}
};

MD_checkMaxValue = function(id_on_time, channel, id_on_time_mode)
{
	// mode 0 = absolut, mode 1 = minimal
	var	prn = id_on_time.split("_")[2];
	var	pref = id_on_time.split("_")[3];
	var val = $F(id_on_time);
	
	// mode 0 = absolut, mode 1 = minimal
	var mode = $F(id_on_time_mode);

	if (mode == 0) $('hint_'+ prn + '_' + pref).firstChild.data = " ";


	if ((val > 120 || mode == 1 ) && channel == 1 ) 
	{
		if (val > 120) {
			$(id_on_time).options[$(id_on_time).length -1].style.color = WebUI.getColor('red');
			$(id_on_time).options[$(id_on_time).length -1].style.textDecoration = 'blink';
			$(id_on_time).options[$(id_on_time).length -1].style.fontStyle = 'italic';
		}

		switch (mode) {
			
			case("0"): 	$('hint_'+ prn + '_' + pref).style.color = WebUI.getColor('red');
						$('hint_'+ prn + '_' + pref).firstChild.data = unescape(localized[0]['hint_ontime_0']);
						break;

			case("1"):	$('hint_'+ prn + '_' + pref).style.color = WebUI.getColor('red');
						$('hint_'+ prn + '_' + pref).firstChild.data = unescape(localized[0]['hint_ontime_0']);
						$('hint_'+ prn + '_' + pref).firstChild.data += unescape(localized[0]['hint_ontime_1']);
						break;
		}
	}
};



MD_checkPNAME = function(id, param, id_on_time)
{
	if ($(id).selectedIndex == 0) {$(param).firstChild.data = unescape(localized[0]['md_on_time']);}
	else {$(param).firstChild.data = unescape(localized[0]['md_min_on_time']);}

	var prn = id.split("_")[2];
	var pref = id.split("_")[3];
	var md_min_interval = "md_min_interval_" + prn + "_" + pref;

	var min_interval = $F(md_min_interval).split(",")[0]; // enthaelt den Wert des Kanalparameters 'Mindestsendeabstand'. Moegl. Werte 0, 1, 2, 3, 4
	$(md_min_interval).value = min_interval + "," + $(id).selectedIndex;
	
	
	var min_value = new Array(15, 30, 60, 120, 240);
	var h = "hour_" + id_on_time.split("_")[2] + "_" + id_on_time.split("_")[3] + "_" + id_on_time.split("_")[1];
	var m = h.replace('hour_', 'min_');
	var s = h.replace('hour_', 'sec_');

	var t = (parseFloat($F(h)) * 3600) + (parseFloat($F(m)) * 60) + parseFloat($F(s));

	if (t < min_value[min_interval] && $(id).selectedIndex !== 0 ) 
	{
		$(s).value = min_value[min_interval];  
		MD_set_h_m_s(h, m, s);
	}
	
	
	if ($F(id_on_time) < min_value[min_interval] && $(id).selectedIndex == 0)
	{
		$(id_on_time + '_hint0').firstChild.data = unescape(localized[0]['hint0a']) +  min_value[min_interval] + unescape(localized[0]['hint0b']);
		$(id_on_time + '_hint1').firstChild.data = unescape(localized[0]['hint1a']) +  min_value[min_interval] + unescape(localized[0]['hint1b']);
	} else {
		$(id_on_time + '_hint0').firstChild.data = " "; 
		$(id_on_time + '_hint1').firstChild.data = " "; 
	}
};

MD_init = function(id, min, max)
{
	var input = document.getElementById(id);
	var ausdr_int	= /\d+/;
	if (ausdr_int.test(input.value)) {var wert_int = ausdr_int.exec(input.value); wert_int = wert_int[0];}
	var wert 		= min;
  var channel = id.split("_")[2];

	if (! wert_int) {wert = min;} //1 
	if (! isNaN(wert_int)) {wert = wert_int;}

	if (wert < min) {wert = min;}
	if (wert > max) {wert = max;}
		
	input.value = wert;

	if (input.name == "EVENT_FILTER_NUMBER")
	{
		var efn = document.getElementsByClassName('event_filter_number');
		if (wert == 1) 
		{
			//input.options[0].text = "jedem";
			input.options[0].text = translateKey("motionDetectorEventFilterNumberA");
			//efn[0].firstChild.data = " Sensor-Impuls";
			efn[0].firstChild.data = translateKey("motionDetectorEventFilterNumberB");
			efn[1].firstChild.data = " ";

      $('separate_CHANNEL_' + channel + '_2').style.display = "none";
		} else
		{
			input.options[0].text = "1";
			//efn[0].firstChild.data = " Sensor-Impulsen innerhalb ";
			efn[0].firstChild.data = translateKey("motionDetectorEventFilterNumberC");
			//efn[1].firstChild.data = " Sekunden";
			efn[1].firstChild.data = translateKey("motionDetectorEventFilterNumberD");
      $('separate_CHANNEL_' + channel + '_2').style.display = "inline";
		}
	}

	if (input.name == "BRIGHTNESS_FILTER")
	{
		var brightness = document.getElementsByClassName('brightness')[0];
		//if (wert == 0) 	brightness.firstChild.data = "der zuletzt ermittelte Wert";
		if (wert == 0) 	brightness.firstChild.data = translateKey("motionDetectorMinumumOfLastValuesB0");
		//else brightness.firstChild.data = "das Minimum der letzten " + (parseInt(input.value) + 1) + " Werte";
		else brightness.firstChild.data = translateKey("motionDetectorMinumumOfLastValuesB1") + (parseInt(input.value) + 1) + translateKey("motionDetectorMinumumOfLastValuesC");
	}
};

MD_getHelp = function(min, max, brightness, ready)
{
	// liest die Hilfedatei für den MotionSensor ein
//	var language = $F('language') ;
  var language = getLang();
	var font_bold = "\"font-style:normal; font-weight:bold\"";
	var font_underline = "\"font-style:normal; text-decoration:underline\"";
	var active = localized[0]['active_' + ready];
	
	//Je nachdem, ob die aktuelle Helligkeit zur Verfügung steht, oder nicht, werden verschiedene Hilfstexte generiert.
	if (brightness != -1) {	var path = '/config/easymodes/etc/localization/' + language + '/MOTION_DETECTOR_1.txt';}
	else {var path = '/config/easymodes/etc/localization/' + language + '/MOTION_DETECTOR_0.txt';}
	
	// die entsprechende Uebersetzungstabellen der Easymodes einlesen
	new Ajax.Request(path ,
		{
		method:		'get',
		asynchronous: false,
		onSuccess: function(success) {
						help_txt = eval(success.responseText);
					},

		onFailure: function(failure) {
						Ajax_failure(path, failure.statusText);
					}
		});
	return help_txt;
};

MD_link_help = function()
{
	// Hilfetext für die Art der Verweildauer des Motion-Detectors
	var help_txt = MD_getHelp();
	
	MessageBox.show(help_txt[0]['title_kind_of'], help_txt[0]['help_kind_of'] ,"" ,450 , 260);
};

MD_catchBright_help = function(min, max, brightness, ready)
{
	//Hilfetext für die Helligkeitsschwelle des Motion-Detectors		
	var help_txt = MD_getHelp(min, max, brightness, ready);

	MessageBox.show(help_txt[0]['title_brightness'], help_txt[0]['help_brightness'] ,"" ,475 ,185);

};

MD_minInterval = function(id)
{
	var modus = $(id).selectedIndex; // 0 = klassisch, 1 = dynamisch	
	var min_interval_txt = $('min_interval');

  var arId = id.split("_");
  var min_interval = $(arId[0] + "_" + arId[1] + "_" + arId[2] + "_" + (parseInt(arId[3]) + 1));

	//var txt = "Mindestsendeabstand";
	var txt = translateKey("motionDetectorMinimumOnAirInterval");

	if (modus == 0) 
	{	
		//txt = "Sendeabstand";
		txt = translateKey("motionDetectorOnAirInterval");
		var newEntry = new Option("240s", "4", false, true);
		min_interval.options[min_interval.length] = newEntry ;
		
		min_interval.disabled = true;
	} else
	{
		//txt = "Mindestsendeabstand";
		txt = translateKey("motionDetectorMinimumOnAirInterval");
	//	Mehr als 5 Eintraege vorhanden?
	//	min_interval.options[0].selected = true;
		if (min_interval.length == 6) 
		{
			min_interval.options[min_interval.length -1] = null;
			min_interval.options[min_interval.length -1] = null;
		}
		
		if (min_interval.length == 5) 
		{
			min_interval.options[min_interval.length -1] = null;
		}
		
		min_interval.disabled = false;
	}

	//  folgende Zeile bewirkt einen Wechsel des Textes PROFILE_PNAME(C)
		min_interval_txt.firstChild.data = txt;
};

MD_proofClassic = function(id)
{
	// die hardcodierten id's muessen noch dynamisiert werden
	var arId = id.split("_");

  var min_interval = $(arId[0] + "_" + arId[1] + "_" + arId[2] + "_" + (parseInt(arId[3]) + 1));

	if (min_interval.value == min_interval.length - 1) 
	{
		$(id).options[0].selected = true;

	} else 
	{
		$(id).options[1].selected = true;
	}
	
	MD_minInterval(id);
};

MD_set_h_m_s = function(id_h, id_m, id_s)
{
	
	switch ($F(id_s)) {

	case "15":
		var h = '00'; var m = '00'; var s = '15';
		break;
	case "30":
		var h = '00'; var m = '00'; var s = '30';
		break;
	case "60":
		var h = '00'; var m = '01'; var s = '00';
		break;
	case "120":
		var h = '00'; var m = '02'; var s = '00';
		break;
	case "240":
		var h = '00'; var m = '05'; var s = '00'; //klassich minimum 5 Minuten (4 Min + Toleranz)
		break;
	}

	$(id_h).value = h; 
	$(id_m).value = m; 
	$(id_s).value = s; 
};

MD_setMode = function(id_on_time_mode, channel, id_on_time)
{
	MD_checkMaxValue(id_on_time, channel, (id_on_time_mode));
};


ProofFreeTime = function(id, min, max)
{
	var input = $(id);
  input.value = input.value.replace(/,/g,".");
	//1 
	var ausdr_float = /\d+.\d+/;
	var ausdr_int	= /\d+/;
	if (ausdr_float.test(input.value)) {var wert_float = ausdr_float.exec(input.value); wert_float = wert_float[0];}
	if (ausdr_int.test(input.value)) {var wert_int = ausdr_int.exec(input.value); wert_int = wert_int[0];}
//	if (min == 0) {min = '00'};
	var wert 		= '00';

	if (! wert_int) {wert = '00';} //2
	if (! isNaN(wert_int)) {wert = wert_int;}
	if (! isNaN(wert_float)) {wert = wert_float;}
	
 	
	if (id.indexOf('hour_') != -1)
	{

		if (wert < min) {wert = min;}
		if ((wert * 3600) > max) 
		{	
			input.value = (max / 3600);
		
			min_id = id.replace('hour_', 'min_');
			input = $(min_id);
			input.value = '00';

			sec_id = id.replace ('hour_', 'sec_');
			input = $(sec_id);
			input.value = '00';
		}	else {input.value = wert;} 

	} 
	else 
	{ 
		if (id.indexOf('min_') != -1) 
		{
			if (wert < min) {wert = min;}
			hour_id = id.replace('min_', 'hour_');
			hour_input = $(hour_id);
			if (hour_input.value >= (max / 3600)) {input.value = '00';} else {input.value = wert;}
		} 
		else 
		{
		 	if(id.indexOf('sec_') != -1)
			{
				if (wert < min) {wert = min;}
				hour_id = id.replace('sec_', 'hour_');
				hour_input = $(hour_id);
				if (hour_input.value >= (max / 3600)) { input.value = '00';} else {input.value = wert;}
			}
		}
	}

	//3 
	var prn = id.split("_")[1];
	var pref = 1;
	
	try
	{
		x = $F("md_min_interval_" + prn + "_" + pref);
		if (x) throw "true";
		else throw "false";
	}
	catch (ergebniss)
	{
		if (ergebniss == "true") 
		{
			var hit = 1;
		} else hit = 0;
	}
	
	if ($F('dev_descr_sender_tmp').split("-")[0] == "MOTION_DETECTOR" && hit == 1)
	{
		var prn = id.split("_")[1];
		var pref = 1;
		var md_verweild = "md_verweildauer_" + prn + "_" + pref;
		var md_min_interval = "md_min_interval_" + prn + "_" + pref;
	
		// enthaelt den Wert des Geraeteparameters 'SHORT_ON_TIME_MODE'. Moegl. Werte 0 und 1
		var absolute_minimal = $F(md_min_interval).split(",")[1];

		try
		{
			if ($(md_verweild).data) throw true;
			else throw false;
		}
		catch (ergebniss)
		{
			if (ergebniss == true) md_verweildauer = true;
			else md_verweildauer = false;
		}
		
		//if (md_verweildauer == true) {$('md_verweildauer').data = "Verweildauer";}
		if (md_verweildauer == true) {$('md_verweildauer').data = translateKey("motionDetectorRetentionTime");}

		if (absolute_minimal == 1) //wenn Modus 'minimal' 
		{
			var profile = $(id).name.split("_");
			//4 	
			var param_tmp = $('separate_receiver_' + profile[1] + "_" + profile[2]).name.split("|");
			param_tmp = param_tmp[0].split("_");
			var param = param_tmp[1] + "_" + param_tmp[2];
		
			if (param == "ON_TIME" || param == "OFF_TIME") 
			{
				var min_interval = $F(md_min_interval).split(",")[0]; // enthaelt den Wert des Kanalparameters 'Mindestsendeabstand'. Moegl. Werte 0, 1, 2, 3, 4
				var min_value = new Array(15, 30, 60, 120, 240);
				var h = "hour_" + id.split("_")[1] + "_" + id.split("_")[2] + "_" + id.split("_")[3];
				var m = h.replace('hour_', 'min_');
				var s = h.replace('hour_', 'sec_');
				var t = (parseFloat($F(h)) * 3600) + (parseFloat($F(m)) * 60) + parseFloat($F(s));
				
				if (t < (min_value[min_interval] + 1) && $(id).selectedIndex !== 0 ) 
				{
					$(s).value = min_value[min_interval]; 
					MD_set_h_m_s(h, m, s);
				} 
			}
			//if (md_verweildauer == true) {$('md_verweildauer').data = "Mindestverweildauer";}
			if (md_verweildauer == true) {$('md_verweildauer').data = translateKey("motionDetectorMinimumRetentionTime");}
		}
	}
};

ProofFreePercent = function(id, min, max)
{
  var input = document.getElementById(id);
  
  var ausdr_float = /\d+.\d+/;
  var ausdr_int  = /\d+/;
  if (ausdr_float.test(input.value))
  {
    var wert_float = ausdr_float.exec(input.value);
    wert_float = wert_float[0];
  }
  if (ausdr_int.test(input.value)) 
  {
    var wert_int = ausdr_int.exec(input.value);
    wert_int = wert_int[0];
  }
  if (min == 0) { min = '00'; }
  var wert = '00';

  if (!(wert_int))          { wert = '00'; } //1 
  if (!(isNaN(wert_int)))   { wert = wert_int; }
  if (!(isNaN(wert_float))) { wert = wert_float; }
  
  if (wert < (min * 100)) { wert = (min * 100); }
  if (wert > (max * 100)) { wert = (max * 100); }
    
  input.value = wert;
};

ProofFreeTemp = function(id, min, max, unit)
{
  var input = document.getElementById(id);
  var ausdr_float = /\d+.\d+/; 
  var ausdr_int  = /\d+/;
  if (ausdr_float.test(input.value)) 
  {
    var wert_float = ausdr_float.exec(input.value);
    wert_float = wert_float[0];
  }
  if (ausdr_int.test(input.value))
  {
    var wert_int = ausdr_int.exec(input.value);
    wert_int = wert_int[0];
  }
  var wert     = min;

  if (unit) //1
  {
    min = ((min * 9) / 5) + 32 ;
    max = ((max * 9) / 5) + 32 ;
  }

  if (!(wert_int))          {wert = min; }    //2 
  if (!(isNaN(wert_int)))   {wert = wert_int; }
  if (!(isNaN(wert_float))) {wert = wert_float; }

  if (wert < min) { wert = min; }
  if (wert > max) { wert = max; }
    
  input.value = wert;
};

ProofFreeValue = function(id, min, max)
{
  var input = document.getElementById(id);
  var ausdr_float = /\d+.\d+/; 
  var ausdr_int  = /\d+/;
  if (ausdr_float.test(input.value)) 
  {
    var wert_float = ausdr_float.exec(input.value);
    wert_float = wert_float[0];
  }
  if (ausdr_int.test(input.value))
  {
    var wert_int = ausdr_int.exec(input.value);
    wert_int = wert_int[0];
  }
  var wert     = min;

  if (!(wert_int))          { wert = min; } //1 
  if (!(isNaN(wert_int)))   { wert = wert_int; }
  if (!(isNaN(wert_float))) { wert = wert_float; }


  if (wert < min) {wert = min; }
  if (wert > max) {wert = max; }
    
  input.value = wert;
};

add_HMW_onchange_ = function(ch_type)
{	
	switch (ch_type) { 
		
		case "INPUT_OUTPUT":

			var inputType = document.getElementsByName("INPUT_TYPE");
			var behaviour = document.getElementsByName("BEHAVIOUR");

			for (var loop=0;loop < inputType.length;loop++) 
			{
				var onchange = document.createAttribute("onchange");
				onchange.nodeValue= "alert('A')";
				inputType[loop].setAttributeNode(onchange);
			}
			
			for (loop=0;loop < behaviour.length;loop++) 
			{
				var onchange = document.createAttribute("onchange");
				onchange.nodeValue= "alert('B')";
				behaviour[loop].setAttributeNode(onchange);
			}
			break;
		
		case "KEY" :
			
			var inputType = document.getElementsByName("INPUT_TYPE");
			
			for (var loop=0;loop < inputType.length;loop++) 
			{
				var onchange = document.createAttribute("onchange");
				onchange.nodeValue= "alert('C')";
				inputType[loop].setAttributeNode(onchange);
			}
			break;

		default:
			break;
	}

};

HMW_setIOType = function(elem)
{
	// Zeigt die einstellbaren Parameter des Kanals entsprechend der gewählten Einstellung an.
	// Es wird zwischen Schalter und Taster unterschieden.
	
	// gewählte Einstellung
	var sel = elem.selectedIndex;
	
	// Schalter (0)  oder Taster (1)
	var type = elem.options[sel].value;
	
	var tr = elem.parentNode.parentNode.nextSibling.nextSibling;

	switch (type) {
		
		case "0":
			tr.style.visibility = "hidden";
			tr.style.display = "none";
			break;

		case "1":
			tr.style.visibility = "visible";
			tr.style.display = "";
			break;

		default:
			break;
	}
};

HMW_setBehaviour = function(id)
{
	// Zeigt die einstellbaren Parameter des Kanals entsprechend der gewählten Einstellung an.
	// Es wird zwischen Ein-  und Ausgang unterschieden.

	// wird von tcl erledigt, da bei Ein- u. Ausgang verschiedene Parameter verwendet werden,
	// muß die Änderung zuerst an den Aktor gesendet werden.
};

HMW_WebUIsetChannel = function(id, ch_type)
{
	id = id.split("=")[1];
	id = id.substring(1, id.length -1); 
	
  var elem = document.getElementById(id);
	
	switch (ch_type) {
		
		case "INPUT_OUTPUT":
			
			switch (elem.name) { 
				case "INPUT_TYPE":
					HMW_setIOType(elem);
					$(id).observe('change', function(event) {HMW_setIOType(elem);});
					break;
				case "BEHAVIOUR":
					$(id).observe('change', function(event) {HMW_setBehaviour(elem);});
					break;
				default:
					break;
			}
		
		break;

		case "KEY":
			
			switch (elem.name) {
				case "INPUT_TYPE":
					HMW_setIOType(elem);
					$(id).observe('change', function(event) {HMW_setIOType(elem);});
				break;
				default:
					break;
			}	
		
		break;
	}	
};


setHM_MOD_EM_X = function(channel, prgExists) {
  var channel = parseInt(channel);
  var tableElm = jQuery(".ProfileTbl tbody").parent().parent()[channel -1];
  var elm = jQuery("[name='CHANNEL_FUNCTION']")[channel -1];
  jQuery(elm).prop("disabled", true);
  if (prgExists) {
    jQuery(tableElm).append("<div class=\"attention\" style='padding: 2px;'>"+translateKey("hintPrgExists")+"</div>");
  } else {
    arModEM8[channel] = true;
    jQuery(tableElm).append("<div class=\"attention\" style='padding: 2px;'>"+translateKey("hintLinkExists")+"</div>");
  }
};

ShowHintIfProgramExists = function(id, ch) {
    homematic("Channel.listProgramIds", {id: id}, function(result, error) {
    if (result[0] != undefined) {
      setHM_MOD_EM_X(ch, true);
    } else {
      if(arModEM8[parseInt(ch)] != true) {
        var elm = jQuery("[name='CHANNEL_FUNCTION']")[ch - 1];
        jQuery(elm).prop("disabled", false);
      }
    }
  });
};

RF_existsLink = function(deviceType, address, ch) {
  switch(deviceType) {
    case "HM-MOD-EM-8":
      setHM_MOD_EM_X(ch, false);
      break;
    default:
      break;
  }
};

HMW_existsLink = function(channel, ch_type)
{
	//var hint = document.createTextNode("Es besteht mindestens eine Verknüpfung. Daher sind einige Funktionen gesperrt.");
	var hint = document.createTextNode(translateKey("hintLinkExists"));
	var new_tr = document.createElement("tr");
	var new_td = document.createElement("td");
	var colspan = document.createAttribute("colspan");
	var class_attention = document.createAttribute("class");
	colspan.nodeValue = "5";
	class_attention.nodeValue = "attention ch_" + channel;

	if ($$('.ch_' + channel).length == 0)
	{
		switch (ch_type) {
		
			case "INPUT_OUTPUT":
				var elem1 = $('separate_CHANNEL_' + channel + '_3'); // Eingangsbeschaltung
				var elem2 = $('separate_CHANNEL_' + channel + '_6'); // Funktion Eingang
				var elem3 = $('separate_CHANNEL_' + channel + '_4'); // Funktion Ausgang
				
				if (elem1.name == 'INPUT_TYPE') 
				{
					elem1.disabled = true;
					elem2.disabled = true;
				
					var td = elem1.parentNode.parentNode.parentNode.appendChild(new_tr).appendChild(new_td);
					td.setAttributeNode(colspan);
					td.setAttributeNode(class_attention);
					td.appendChild(hint);
				} 
				else
				{
					elem3.disabled = "true";
				
					var td = elem3.parentNode.parentNode.parentNode.appendChild(new_tr).appendChild(new_td);
					td.setAttributeNode(colspan);
					td.setAttributeNode(class_attention);
					td.appendChild(hint);
				}
			break;

			case "KEY":
				var elem1 = $('separate_CHANNEL_' + channel + '_3'); // Eingangsbeschaltung
				elem1.disabled = true;
			
				var td = elem1.parentNode.parentNode.parentNode.appendChild(new_tr).appendChild(new_td);
				td.setAttributeNode(colspan);
				td.setAttributeNode(class_attention);
				td.appendChild(hint);
				break;
		
			default: 
				break;
		}
	}
};



TextColor = function(c)
{
  if (!c) { return WebUI.getColor("windowText"); }
  else    { return WebUI.getColor("gray"); }
};

Virtual_DimmerChannel_help = function(ch)
{
	//if ($F("virtual_help_button_" + ch) == "Hilfe")
	if ($F("virtual_help_button_" + ch) == translateKey("genericBtnTxtHelp"))
	{
		$("virtual_ch_help_" + ch).style.display = "inline";
		$("virtual_help_button_" + ch).value = translateKey("genericBtnTxtHelpOff");
	} else
	{
		$("virtual_ch_help_" + ch).style.display = "none";
		$("virtual_help_button_" + ch).value = translateKey("genericBtnTxtHelp");
	}
};


WDS_DisableOnTime = function(selectelem)
{
	// Schaltet beim WATERDETECTIONSENSOR die Einschaltdauer
	// im Profil Änderungsignal / Subset Aus bei ....
	// unsichtbar

    if (selectelem.selectedIndex >= 5)
	{
		$('on_time').style.visibility = 'hidden';
	}	
	else
	{
		$('on_time').style.visibility = 'visible';
	}
};

WEATHER_change_thres = function(id)
{
  //1 
  switch_dir = $('separate_receiver_' +  id).selectedIndex; //2 
  WEATHER_check_dir();
};

WEATHER_check_dir = function()
{
  var ein;
  var aus;
  //1 
  
  if (switch_dir) 
  {  
    //ein = document.createTextNode("Einschaltschwelle");
    ein = document.createTextNode(translateKey("upperStormThreshold"));
    //aus = document.createTextNode("Ausschaltschwelle");
    aus = document.createTextNode(translateKey("lowerStormThreshold"));
  }
  else 
  {
    //ein = document.createTextNode("Ausschaltschwelle");
    ein = document.createTextNode(translateKey("lowerStormThreshold"));
    //aus = document.createTextNode("Einschaltschwelle");
    aus = document.createTextNode(translateKey("upperStormThreshold"));
  }  
  $('ein').replaceChild(ein, $('ein').firstChild);
  $('aus').replaceChild(aus, $('aus').firstChild);
};

WEATHER_check_expert = function()
{  
  //1
    
  try //2 
  {
    high = $F('separate_sender_0_3');
    if (high) { throw "true"; }
    else      { throw "false"; }
  }
  catch (ergebniss)
  {
    if (ergebniss == "true")
    {
      high = $F('separate_sender_0_3');  
      low  = $F('separate_sender_0_4');
      if (parseInt(low) > parseInt(high))  return true; //3 
      else return false;  
    } else return "noExpert";
  }
};

WEATHER_check_profile_switch = function(selectelem)
{
  var actor = $F('dev_descr_receiver_tmp');
  
  if (actor != "SWITCH") {switch_on_off = false; return 0;}

  if ((((selectelem.options[selectelem.selectedIndex].value) == "1") && ($('sender_profiles').options[$('sender_profiles').selectedIndex].value == "1")) ||
      (((selectelem.options[selectelem.selectedIndex].value) == "1") && ($('receiver_profiles').options[$('receiver_profiles').selectedIndex].value == "1")) ||
      (((selectelem.options[selectelem.selectedIndex].value) == "0") && ($('sender_profiles').options[$('sender_profiles').selectedIndex].value == "1") && ($('receiver_profiles').options[1].value == "1")) ||
      (((selectelem.options[selectelem.selectedIndex].value) == "1") && ($('receiver_profiles').options[$('receiver_profiles').selectedIndex].value == "0") && ($('receiver_profiles').options[1].value == "1")))
  {
    switch_on_off = true; //1 
    return 1;
  }
  else 
  {
    switch_on_off = false; //2
    return 0;
  }
};

WEATHER_check_weather = function()
{
  //1 
  var link = "", linkPeer = "";
  try {
    link = $('dev_descr_sender_tmp').value.split("-");
    linkPeer = $('dev_descr_receiver_tmp').value.split("-");
    if (link) { throw true; }
  } catch (e) {
    if ( e == true) {
      if ((link[0] == "WEATHER") && (linkPeer[0] != "WEATHER_RECEIVER")) return true;
      else return false;
    } else return false;
  }
};

WEATHER_put_desc = function(id,x)
{
    //1 
    
    if ((WEATHER_check_expert()) && (x == 0))   //2 
    {
//	  $('sender_profiles').options[0].selected = true;
//    $('separate_sender_1_1').options[4].selected = true;
//    $('separate_sender_1_2').options[2].selected = true;
    } 
    else if (WEATHER_check_expert() != "noExpert" && x == 1) //3 
    {
      $('separate_sender_0_3_temp').value = $('separate_sender_1_1').options[$('separate_sender_1_1').selectedIndex].value; 
      $('separate_sender_0_4_temp').value = $('separate_sender_1_2').options[$('separate_sender_1_2').selectedIndex].value; 
	}
    
    var upper_index = $('separate_sender_1_1').selectedIndex; //4 
    var lower_index = $('separate_sender_1_2').selectedIndex; //5 
    
    var desc = new Array();
    var upper_desc = document.getElementById('upper_desc');
    var lower_desc = document.getElementById('lower_desc');
    var elem = id.split("_");
    
    //6 
    $('separate_sender_1_1').options[0].disabled = true;
    $('separate_sender_1_1').options[0].style.color = WebUI.getColor("grayText");
    if ($('separate_sender_1_1').selectedIndex == 0) { $('separate_sender_1_1').options[1].selected = true; }
    
    for (var loop = 1; loop <= 12; loop++)
    {
      $('separate_sender_1_1').options[loop].style.color = WebUI.getColor("windowText"); //7 
      $('separate_sender_1_1').options[loop].disabled = false;
    }
  
    if ($('lower_tab').style.display == "block")
    {
      for (loop = 1; loop <= lower_index; loop++)
      {
        $('separate_sender_1_1').options[loop].style.color = WebUI.getColor("grayText"); //8 
        $('separate_sender_1_1').options[loop].disabled = true;
      }
    }
  
    if ((lower_index >= upper_index) && ($('lower_tab').style.display == "block") && (switch_on_off == true))
    {  
      if (lower_index <= 11)   
      {
        $('separate_sender_1_1').selectedIndex = lower_index + 1;
        if (WEATHER_check_expert() != "noExpert")
        $('separate_sender_0_3_temp').value = $('separate_sender_1_1').options[$('separate_sender_1_1').selectedIndex].value; 
      }
      else $('separate_sender_1_1').selectedIndex = 12;
    }
 
    for (loop = 0; loop <= 12; loop++) {
      desc[loop] = document.createTextNode(unescape(translateKey("windDesc"+loop)));
    }
  
    switch (elem[3]) {
      case ("1"):
        upper_desc.replaceChild(desc[$(id).selectedIndex], upper_desc.firstChild);
        break;  
      case ("2"):
        lower_desc.replaceChild(desc[$(id).selectedIndex], lower_desc.firstChild);
        break;
      default:
        break;
    }

    window.setTimeout("WEATHER_translate();",500)  ;
};

WEATHER_translate= function() {
  jQuery('#upper_desc').text(translateKey(jQuery('#upper_desc').text()));
  jQuery('#lower_desc').text(translateKey(jQuery('#lower_desc').text()));
  jQuery('#ein').text(translateKey(jQuery('#ein').text()));
  jQuery('#aus').text(translateKey(jQuery('#aus').text()));
};

WEATHER = function(selectelem)
{
  var loop;
  
  if (WEATHER_check_weather()) //1 
  {
    if ((((selectelem.options[selectelem.selectedIndex].value) == "2") && ($('sender_profiles').options[$('sender_profiles').selectedIndex].value == "1")) ||
        (((selectelem.options[selectelem.selectedIndex].value) == "1") && ($('receiver_profiles').options[$('receiver_profiles').selectedIndex].value == "2")))
    
    {  
	  //2
      switch_on_off = false;  

      if ($('lower_tab')) {
        $('lower_tab').style.display = "none";
      }
      $('separate_sender_1_2').options[0].selected = true; // Ausschaltschwelle auf 0 setzten
      
	    //var ein = document.createTextNode("Einschaltschwelle");
	    var ein = document.createTextNode(translateKey("upperStormThreshold"));
      $('ein').replaceChild(ein, $('ein').firstChild);  //3
      
      $('separate_sender_1_1').options[0].disabled = true; //4
      $('separate_sender_1_1').options[0].style.color = WebUI.getColor("grayText"); //5 
      
      for (loop = 1; loop <= 12; loop++)
      {
        $('separate_sender_1_1').options[loop].style.color = WebUI.getColor("windowText"); //6
        $('separate_sender_1_1').options[loop].disabled = false; //7
      }
	} 
    else 
    {
      try 
      {
       
        if (WEATHER_check_profile_switch(selectelem) == 1)  //8    
        {
          throw "block"; 
        } else throw "none";
      }   
      catch (ergebniss) 
      {
        if (ergebniss == "none") //9
        {  
          switch_on_off = false;  
          $('lower_tab').style.display = "none";  
      	  $('separate_sender_1_2').options[0].selected = true; // Ausschaltschwelle auf 0 setzten
          
          $('separate_sender_1_1').options[0].disabled = true; //10
          $('separate_sender_1_1').options[0].style.color = WebUI.getColor("grayText") ; //11

          for (loop = 1; loop <= 12; loop++)
          {
            $('separate_sender_1_1').options[loop].disabled = false;
            $('separate_sender_1_1').options[loop].style.color = WebUI.getColor("windowText"); //12
          }
          WEATHER_check_dir(); //13
        } 
        else if (ergebniss == "block") //14
        {
        
          $('lower_tab').style.display = "block"; //15  
        
          var selected_high = $('separate_sender_1_1').selectedIndex;
          var selected_low = $('separate_sender_1_2').selectedIndex;
          
          if (selected_low >= selected_high)  //16
          {
            $('separate_sender_1_2').options[0].selected = true;
            
            $('separate_sender_1_1').options[0].style.color = WebUI.getColor("grayText") ; //17
            $('separate_sender_1_1').options[0].disabled = true;
            
            //var desc = document.createTextNode(unescape("Keine Luftbewegung, Rauch steigt senkrecht empor."));
            //var desc = document.createTextNode(unescape(translateKey("hintNoAirFlow")));
            var desc = document.createTextNode(unescape(translateKey("windDesc0")));
            lower_desc.replaceChild(desc, lower_desc.firstChild);
          } 
          else //18
          {
            for (loop = 0; loop <= $('separate_sender_1_2').selectedIndex; loop++)
            {
              $('separate_sender_1_1').options[loop].disabled = true;
              $('separate_sender_1_1').options[loop].style.color = WebUI.getColor("grayText"); //19
            }
          }
          
          prn = selectelem.options[selectelem.selectedIndex].value; //20 
            
          switch_dir = $('separate_receiver_' + prn + '_1').selectedIndex; //21 
          WEATHER_check_dir(); //22 
        }
      }
    }
  }
};

isJSFunc_active = function(fbib) {
	//prueft, ob die Funktionsbibl. schon geladen ist
	if (exists_bib[fbib] == true) return true; //schon aktiv
	else return false;	// nicht aktiv
};

load_JSFunc = function(fbib) {
	//fbib gibt die gewuenschte Funktionsbibliothek incl. Pfad an

	if (isJSFunc_active(fbib) == false) // falls die Bibliothek noch nicht geladen wurde 
	{
//		alert('Bib wird geladen'); 
			new Ajax.Request(fbib, 
				{
				method:	 'get', 
				
				asynchronous: false,

				onSuccess:	function(success) {
								eval(success.responseText);
								exists_bib[fbib] = true; //Bibliothek geladen
							},
				
				onFailure:	function(failure) {
								alert(fbib + ': ' + failure.statusText);
							}
				}
			);
	}
};

// Test
rfd_test = function() {
  homematic('Interface.isPresent', {"interface": "BidCos-RF"}, function(result, error) {
  if (result === true)
  {
    alert("rfd läuft");
  }
  else
  {
    alert(Object.toJSON(error) + "  Achtung: rfd läuft nicht!");
  }
  });
};
	
// language = getLang();//"de";

setLanguage = function(lang)
{
	//Funktion wird zur Zeit nicht genutzt

	//Sprache dokumentenübergreifend speichern 
	$('language').value = lang; 
	//  language 0 = de , 1 = en
};

Ajax_failure = function(file, failure)
{
	var msg = '<div style=text-align:center>';
		msg += '<br/><br/>Error while loading the following file:<br/><br/>';
		msg += file + '<br/><br/>';
		msg += '<span style=font-weight:bold>' + failure + '</span></div>'; 

	MessageBox.show('File request failed!', msg, '', 480,120);
};

getPathPNAME = function(actor, language) {
  var result = '/config/easymodes/etc/localization/' + language + '/PNAME.txt';
  if (actor == "ACTOR_SECURITY" || actor == "ACTOR_WINDOW") {
    result = '/config/easymodes/etc/localization/' + language + '/PNAME_TipTronic.txt';
  }
  return result;
};

getLangInfo = function(sender, actor)
{
  var language = getLang();

	var path_1 = '/config/easymodes/' + actor + '/localization/' + language + '/' + sender + '.txt';
	//var path_2 = '/config/easymodes/etc/localization/' + language + '/PNAME.txt';
	var path_2 = getPathPNAME(actor, language);
	var local_generic = '/config/easymodes/' + actor + '/localization/' + language + '/GENERIC.txt';
	var global_generic = '/config/easymodes/etc/localization/' + language + '/GENERIC.txt';

	l_generic = false;

	// die entsprechenden Uebersetzungstabellen der Easymodes einlesen
	new Ajax.Request(path_1,
		{
		method:		'get',
		asynchronous: false,
		onSuccess: function(success) {
						set_description = "[{".concat(success.responseText);
						
					},

		onFailure: function(failure) {
						Ajax_failure(path_1, failure.statusText);
					}
		});
	
	new Ajax.Request(path_2,
		{
		method:		'get',
		asynchronous: false,
		onSuccess: function(success) {
						set_pname = success.responseText;
					},

		onFailure: function(failure) {
						Ajax_failure(path_2, failure.statusText);
					}
		});

	new Ajax.Request(local_generic,
		{
		method:		'get',
		asynchronous: false,
		onSuccess: function(success) {
						l_generic = success.responseText;
					},

		onFailure: function(failure) {
						Ajax_failure(local_generic, failure.statusText);
					}

		});

	new Ajax.Request(global_generic,
		{
		method:		'get',
		asynchronous: false,
		onSuccess: function(success) {
						g_generic = success.responseText;
						if (l_generic != false) {generic = l_generic.concat(g_generic);} else generic = g_generic;
					},

		onFailure: function(failure) {
						Ajax_failure(global_generic, failure.statusText);
					}
		});
		
	 	var dummy = "\"dummy\" : \"dummy\"}]" ; 
		localized = eval(set_description.concat(set_pname).concat(generic).concat(dummy));
};

getLangInfo_Special = function(file)
{
  var language = getLang();
	var path = '/config/easymodes/etc/localization/' + language + '/' + file;
	new Ajax.Request(path,
		{
		method:		'get',
		asynchronous: false,
		onSuccess: function(success) {
						set_Special = success.responseText;
					},

		onFailure: function(failure) {
						Ajax_failure(path, failure.statusText);
					
					}
		});

		localized = eval(set_Special);
};



translate_newProfile = function()
{
  var language = getLang();
	var path = '/config/easymodes/etc/localization/' + language + '/NEWPROFILE.txt';

	// die entsprechenden Optionen einlesen
	new Ajax.Request(path,
		{
		method:		'get',
		asynchronous: false,
		onSuccess: function(success) {
						set_newprofile = eval(success.responseText);
					},

		onFailure: function(failure) {
						Ajax_failure(path, failure.statusText);
					}
		});
	
	set_newprofile[0]  = Object.extend(set_newprofile[0], localized[0]);
	
	$('id_header').innerHTML = TrimPath.processDOMTemplate('title_SaveNewProfile', set_newprofile[0]);
	$('id_body').innerHTML = TrimPath.processDOMTemplate('id_body_textarea', set_newprofile[0]);
	$('id_footer').innerHTML = TrimPath.processDOMTemplate('id_footer_textarea', set_newprofile[0]);
};


translate_map = function(div, textarea)
{
	if ( isNaN(localized)) {
		$(div).innerHTML = TrimPath.processDOMTemplate(textarea, localized[0]);
	}
};

translate = function(id, group)
{
	var isUser = id.split('.')[1];
	if (isNaN(localized)) {
		if (isNaN(isUser)) { 	// wenn kein Userprofil
			$('param_' + id).id = group + '_param_' + id;
			$('profile_' + id).id = group + '_profile_' + id;
			// hier werden die Platzhalter der EasyModes durch die übersetzten Texte ersetzt. 	
			$(group + '_param_' + id).innerHTML = TrimPath.processDOMTemplate(group + '_profile_' + id, localized[0]);
		} else translate_usrprofile(id, group);
	}
};

translate_usrprofile = function(userid, group)
{
	// wenn es sich um ein Userprofil handelt, müssen die IDs angepasst werden.
	// ansonsten kann nicht korrekt uebersetzt werden

	var loop ;
	var x = [];
	var span = document.getElementsByTagName("span");
	var txtarea = document.getElementsByTagName("textarea");
	
	var pruefling = "descrTemplate_" + group + "_" + userid; 
	
	// Anpassung der IDs
	for (loop = 0; loop < span.length; loop++) {
		if ( span[loop].className == pruefling ) {
			span[loop].nextSibling.id = group + "_param_" + userid;
			txtarea[0].id = group + "_profile_" + userid;
			
			// hier werden die Platzhalter durch die übersetzten Texte ersetzt. 	
		//	$('param_' + userid).innerHTML = TrimPath.processDOMTemplate('profile_' + userid, localized[0]);
			$(group + '_param_' + userid).innerHTML = TrimPath.processDOMTemplate(group + '_profile_' + userid, localized[0]);
			break;
		}
	}
};
Groups = Singleton.create({

  /**
   * Konstruktor
   **/
  initialize: function()
  {
    this.devices = {};
  },

  _getAllSerialNumbers: function(arDevices) {
    var arSN = [];
    jQuery.each(arDevices, function(index, dev){
      arSN.push(dev.serialNumber);
    });
    return arSN;
  },

  _getRegaID: function (devSN) {
    var result = "";
    jQuery.each(this.devices, function(index, device) {
      if (device.serialNumber == devSN) {
        result = device.regaID;
        return false; // leave each loop
      }
    });
    return result;
  },

  _getGroupAssignment:  function(url, arDevList, type, callback) {
   ShowWaitAnim();
    // In case of an unanswered call the animation will be switched off after 60 seconds.
    // Otherwise the animation would be visible as long as the WebUI is reloaded.
    HideWaitAnimAutomatically(60);
    var request = jQuery.ajax({
      url: url,
      type: (type == "POST") ? type : "GET",
      async: true,
      data: JSON.stringify({ serialNumbers : arDevList }),
      dataType: "json"
    });

    request.done(function( result ) {
      HideWaitAnim();
      callback(result);
    });

    request.fail(function( jqXHR, textStatus ) {
      HideWaitAnim();
      conInfo(url + ".failed: " + jqXHR.statusText);
      callback(textStatus);
    });
  },

  _addCreateGroupBtn: function(sn) {
    var tbl = jQuery("#"+sn),
    objId = this._getRegaID(sn);

    tr = Builder.node('tr');
    td = Builder.node('td');
    div = Builder.node('div', {className: 'StdButton CLASS04308 width160px border1px', id: 'btnCreateNewGroup' +  objId, onclick: 'Groups.createNewGroup("'+sn+'","'+objId+'");'}, translateKey('btnCreateNewGroup'));
    td.appendChild(div);
    tr.appendChild(td);
    tbl.append(tr);
  },

  _addDevToGroupBtn: function(sn) {
    var tbl = jQuery("#"+sn),
    objId = this._getRegaID(sn);

    tr = Builder.node('tr');
    td = Builder.node('td');
    div = Builder.node('div', {className: 'StdButton CLASS04308 width160px border1px', id: 'btnAddToGroup' +  objId, onclick: 'Groups.addDevToGroup("'+sn+'","'+objId+'");'}, translateKey('btnAddToGroup'));
    td.appendChild(div);
    tr.appendChild(td);
    tbl.append(tr);
  },

  _isAjaxCallNecessary: function(arDevInBox) {
    var result = false;

    if ( GROUPASSIGNMENT == null || (GROUPASSIGNMENT.length < arDevInBox.length) ) {
        return true;
    }

    jQuery.each(arDevInBox, function(index, dev){
      var ok = false,
      devSN = dev.serialNumber;

      jQuery.each(GROUPASSIGNMENT, function(index, val){
        if (val.serialNumber == devSN) {
          ok = true;
          return false; //leave each loop
        }
      });

      if (ok == false) {
        result = true;
        return false; // leave each loop
      }
    });

    return result;
  },

  _addGroupButtons: function(grpAssignment) {
    if (grpAssignment.isAssignableToExistingGroup){
     // This will show a button for adding a device to a group within the device inbox
     this._addDevToGroupBtn(grpAssignment.serialNumber);
   }

   if (grpAssignment.isAssignableToNewGroup) {
     // This will show a button for creating an new group within the device inbox
     this._addCreateGroupBtn(grpAssignment.serialNumber);
   }
  },


  _getPossibleGroups: function(sn, regaID, callback) {
    ShowWaitAnim();
    HideWaitAnimAutomatically(60);
    var self = this;
    var url = "/pages/jpages/group/listPossibleGroups?sid="+SessionId;
    var request = jQuery.ajax({
      url: url,
      type: "POST",
      async: true,
      data: JSON.stringify({serialNumber : sn, regaID: regaID}),
      dataType: "html"
    });

    request.done(function( result ) {
      HideWaitAnim();
       callback(result);
    });

    request.fail(function( jqXHR, textStatus ) {
      HideWaitAnim();
      conInfo(url + ".failed: " + jqXHR.statusText);
      callback(textStatus);
    });
  },

  createNewGroup: function(sn, regaID) {
    conInfo("createNewGroup");
    ShowWaitAnim();
    HideWaitAnimAutomatically(60);
    var url = "/pages/jpages/group/create?sid="+SessionId;
    var request = jQuery.ajax({
      url: url,
      type:  "POST",
      async: true,
      data: JSON.stringify({serialNumber : sn, regaID: regaID}),
      dataType: "html"
    });
    request.done(function( result ) {
      HideWaitAnim();
      var content = jQuery.parseJSON(result).content;
      jQuery("#content").html(content);
    });

    request.fail(function( jqXHR, textStatus ) {
      HideWaitAnim();
      conInfo(url + ".failed: " + jqXHR.statusText);
      //callback(textStatus);
    });

  },

  addDevToGroup: function(sn, regaId) {
    this._getPossibleGroups(sn, regaId, function(result) {
      var patt = /javascript/g;
      if (patt.test(result)) {
        var data = '{ "serialNumber" : "'+sn+'", "regaID" : "'+regaId+'" }';
        CreateCPPopup("/pages/jpages/group/listPossibleGroups", data);
      } else {
        conInfo("addDevToGroup : no valid html");
      }
    });
  },

  createGroupButtons: function(arDevInBox) {
    this.devices = arDevInBox;
    var self = this,
    callNecessary = true, //this._isAjaxCallNecessary(this.devices),
    url = "/pages/jpages/group/checkGroupAssignment?sid="+SessionId;

    if (callNecessary) {
      var arSN = this._getAllSerialNumbers(this.devices);
      this._getGroupAssignment(url, arSN, "POST", function(result) {
        if (result.errorCode == "" && result.isSuccessful) {
          var content = jQuery.parseJSON(result.content);

          GROUPASSIGNMENT = content.groupAssignments;

          jQuery.each(GROUPASSIGNMENT, function(index,val) {
            self._addGroupButtons(val);
          });
        } else {
          conInfo(result.errorCode);
        }
      });
    } else {
      jQuery.each(GROUPASSIGNMENT, function(index,val) {
        self._addGroupButtons(val);
      });
    }
  }
});// #####################
// ### Metadata  ###
// #####################

configMetadata = new function()
{
  this.save = function(id, name, ctrlId, callStrFunc) {
    var url = "/configapp/metadata.cgi";
    var pb = '';
    pb += 'cmd=set_metadata&';
    pb += 'id='+id+'&';
    pb += 'value='+encodeURIComponent(name)+'&';
    if(dbg){alert(pb);}
    var opts = {
      postBody: pb,
      sendXML: false,
      onComplete: function(resp) {
        if ($(ctrlId)) {
          if (callStrFunc) {
            if (callStrFunc == CALL_STRCUT) 
              $(ctrlId).innerHTML = strCut(resp.responseText, true, true);
            if (callStrFunc == CALL_SPACECUT) 
              $(ctrlId).innerHTML = spaceCutHtmlIf(resp.responseText, 1);
          }
          else
            $(ctrlId).innerHTML = resp.responseText;
        }
      } 
    };
    new Ajax.Request(url, opts);  
  };
  
  this.saveProfileParam = function(object_id, profile_id, param_id, value) {
    var url = "/configapp/metadata.cgi";
    var pb = '';
    pb += 'cmd=set_parameter&';
    pb += 'id='+object_id+';'+profile_id+';'+param_id+'&';
    pb += 'value='+encodeURIComponent(value)+'&';
    if(dbg){alert(pb);}
    var opts = {
      postBody: pb,
      sendXML: false
    };
    new Ajax.Request(url, opts);  
  };
  
  this.saveBidcosInterface = function(object_id, iface_id, roaming) {
    var url = "/configapp/metadata.cgi";
    var pb = '';
    pb += 'cmd=set_bidcos_interface&';
    pb += 'device='+object_id+'&';
    pb += 'bidcos_iface='+iface_id+'&';
    pb += 'roaming='+roaming+'&';
    if(dbg){alert(pb);}
    var opts = {
      postBody: pb,
      sendXML: false
    };
    new Ajax.Request(url, opts);  
  };
  
}();

configRefresher = Class.create();

configRefresher.prototype =
{
  initialize: function(iPollingInterval)
  {
    this.updating = false;
    this.ajax = null;
    this.pe = new PeriodicalExecuter(this.refresh, iPollingInterval);
    this.refresh();    
  },
  refresh: function()
  {
    if( rfr )
    {
      if( !this.updating )
      {
        this.updating = true;
        var t = this;
        SwitchOnFlashLight();
        var url = "/configapp/updateui.cgi";
        var pb = '';
        var opts =
        {
          method: 'post',
          postBody: pb,
          evalScripts:true,
          sendXml: false,
          onComplete: function()
          {
            delete t.ajax;
            t.ajax = null;
            iseRefrTimer = 0;
            t.updating = false;
          }
        };
        if(dbg)alert(pb);
        this.ajax = new Ajax.Updater("dummy", url, opts);
      }
    }
  }
};

// nur für das Konfigtool implementiert, Code aus der Datei /www/configapp/js/function.js der Version 1.4
//ID_BIDCOS_INTERFACE = 1024;

changeBidcosIface = function(chnId, ctrlId) {
  dlgPopup = new iseMessageBox(ID_BIDCOS_INTERFACE, chnId);
  PopupClose = function(iface, roaming) {
    dlgPopup.hide();
    if( iface != undefined )$(ctrlId).innerHTML = iface + (roaming?"/*":"");
  };
  SendRequest('/popupInterfaceEditor.cgi');
  dlgPopup.ShowPopup();
};

setServiceMessage = function() {
  var service_count = (homematic("Interface.getServiceMessageCount", {"interface": "default"}));
  $("msgServices").firstChild.data = "Servicemeldungen (" + service_count + ")";
          
  if (service_count == 0)
  {
    $("imgServices").src = "/ise/img/dot/green.png"; 
  } else {
    $("imgServices").src = "/ise/img/dot/yellow.png"; 
  }
                                       
  return service_count;
};

